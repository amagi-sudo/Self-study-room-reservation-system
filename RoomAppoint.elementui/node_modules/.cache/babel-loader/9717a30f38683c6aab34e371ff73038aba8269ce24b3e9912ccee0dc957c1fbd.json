{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport store from '@/store';\nimport { mapGetters } from 'vuex';\nexport default {\n  data() {\n    return {\n      active: 'home'\n    }; // 默认激活菜单项\n  },\n  mounted() {\n    this.initCanvas(); // 初始化背景图形动画\n    console.log(this.UserInfo); // 打印用户信息（调试用）\n  },\n  computed: {\n    ...mapGetters([\"UserInfo\", \"Token\"]) // 从Vuex获取用户信息和登录状态\n  },\n  methods: {\n    // 导航相关方法（保持原有逻辑）\n    ToLogin() {\n      this.$router.push({\n        path: '/Login'\n      });\n    },\n    ToRegister() {\n      this.$router.push({\n        path: '/Register'\n      });\n    },\n    async LoginOut() {\n      await this.$store.dispatch('Logout');\n      this.$router.push(`/Login`);\n    },\n    async ToPath(url) {\n      this.$router.push({\n        path: url\n      });\n    },\n    async ToUserInfo() {\n      this.$router.push({\n        path: \"/Front/UserPerson\"\n      });\n    },\n    async ToEditPassword() {\n      this.$router.push({\n        path: \"/Front/PasswordEdit\"\n      });\n    },\n    goBack() {\n      this.$router.go(-1);\n    },\n    // 背景图形初始化（新增三角形/正方形）\n    initCanvas() {\n      const canvas = document.getElementById('backgroundCanvas');\n      const ctx = canvas.getContext('2d');\n      // 动态设置Canvas尺寸（适配窗口）\n      const width = canvas.width = window.innerWidth;\n      const height = canvas.height = window.innerHeight - 144; // 扣除头部和底部高度\n\n      // 图形类（支持圆形、正方形、三角形）\n      class Shape {\n        constructor(x, y, speedX, speedY, type) {\n          this.x = x; // 中心点x坐标\n          this.y = y; // 中心点y坐标\n          this.speedX = speedX; // x方向速度\n          this.speedY = speedY; // y方向速度\n          this.type = type; // 图形类型（0=圆形，1=正方形，2=三角形）\n        }\n\n        // 更新位置（碰撞检测）\n        update() {\n          this.x += this.speedX;\n          this.y += this.speedY;\n          // 边界碰撞时反向\n          if (this.x < 0 || this.x > width) this.speedX = -this.speedX;\n          if (this.y < 0 || this.y > height) this.speedY = -this.speedY;\n        }\n\n        // 绘制图形（根据类型渲染）\n        draw() {\n          ctx.fillStyle = 'rgba(0, 0, 30, 0.4)'; // 统一半透明蓝黑色\n          ctx.beginPath();\n          switch (this.type) {\n            case 0:\n              // 圆形\n              ctx.arc(this.x, this.y, 20, 0, Math.PI * 2);\n              break;\n            case 1:\n              // 正方形（边长40px）\n              ctx.rect(this.x - 20, this.y - 20, 40, 40); // 以中心点为基准\n              break;\n            case 2:\n              // 三角形（边长40px的等边三角形）\n              const size = 40;\n              ctx.moveTo(this.x, this.y - size / 2); // 顶点\n              ctx.lineTo(this.x + size / 2, this.y + size / 2); // 右下点\n              ctx.lineTo(this.x - size / 2, this.y + size / 2); // 左下点\n              ctx.closePath(); // 闭合路径形成三角形\n              break;\n          }\n          ctx.fill(); // 填充图形\n        }\n      }\n\n      // 初始化15个随机图形（圆形、正方形、三角形混合）\n      const shapes = [];\n      const numShapes = 15;\n      for (let i = 0; i < numShapes; i++) {\n        shapes.push(new Shape(Math.random() * width,\n        // 随机x坐标\n        Math.random() * height,\n        // 随机y坐标\n        Math.random() * 4 - 2,\n        // x速度（-2~2）\n        Math.random() * 4 - 2,\n        // y速度（-2~2）\n        Math.floor(Math.random() * 3) // 随机类型（0-2）\n        ));\n      }\n\n      // 动画循环（持续更新和绘制图形）\n      const animate = () => {\n        ctx.clearRect(0, 0, width, height); // 清空画布\n        shapes.forEach(shape => {\n          shape.update(); // 更新位置\n          shape.draw(); // 绘制图形\n        });\n        requestAnimationFrame(animate); // 递归调用实现动画\n      };\n      animate(); // 启动动画\n    }\n  }\n};","map":{"version":3,"names":["store","mapGetters","data","active","mounted","initCanvas","console","log","UserInfo","computed","methods","ToLogin","$router","push","path","ToRegister","LoginOut","$store","dispatch","ToPath","url","ToUserInfo","ToEditPassword","goBack","go","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","Shape","constructor","x","y","speedX","speedY","type","update","draw","fillStyle","beginPath","arc","Math","PI","rect","size","moveTo","lineTo","closePath","fill","shapes","numShapes","i","random","floor","animate","clearRect","forEach","shape","requestAnimationFrame"],"sources":["src/views/Front/Layout/index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-container>\r\n      <!-- 优化后的顶部导航栏（下边缘平滑） -->\r\n      <el-header style=\"\r\n        background-color: rgba(51, 51, 51, 0.9);\r\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);  /* 底部阴影增强平滑感 */\r\n        border-bottom: 1px solid rgba(255, 255, 255, 0.1);  /* 细微底边 */\r\n        padding: 0;  /* 消除Element UI默认内边距 */\r\n      \">\r\n        <el-menu :default-active=\"active\" class=\"main-container\" mode=\"horizontal\" text-color=\"purpleblue\"\r\n          active-text-color=\"white\" style=\"background: transparent; border: none;\"> <!-- 菜单背景透明 -->\r\n          <!-- 左侧LOGO和主菜单 -->\r\n          <el-menu-item @click=\"ToPath('/Front/Home')\">\r\n            <img style=\"height: 60px; object-fit: cover;\" :src=\"require('@/assets/white.jpg')\">\r\n          </el-menu-item>\r\n          <el-menu-item index=\"/Front/Home\" @click=\"ToPath('/Front/Home')\">IKUN 自习室预约</el-menu-item>\r\n\r\n          <!-- 右侧用户相关菜单（保持原有逻辑） -->\r\n          <el-menu-item style=\"float: right;\" v-if=\"!Token\" @click=\"ToRegister()\">注册</el-menu-item>\r\n          <el-menu-item style=\"float: right;\" v-if=\"!Token\" @click=\"ToLogin()\">登录</el-menu-item>\r\n          <el-submenu style=\"float: right; font-weight: bold;\" v-if=\"Token\" index=\"userMenu\">\r\n            <template #title>{{ UserInfo.UserName }}</template>\r\n            <el-menu-item index=\"user个人信息\" @click=\"ToUserInfo()\">个人信息</el-menu-item>\r\n            <el-menu-item index=\"user修改密码\" @click=\"ToEditPassword()\">修改密码</el-menu-item>\r\n            <el-menu-item index=\"user退出\" @click=\"LoginOut()\">退出</el-menu-item>\r\n          </el-submenu>\r\n          <el-menu-item style=\"float: right;\" index=\"/Front/AppointRecordList\"\r\n            @click=\"ToPath('/Front/AppointRecordList')\" v-if=\"Token\">我的预约记录</el-menu-item>\r\n          <el-menu-item style=\"float: right;\" index=\"/Front/IntegralList\" @click=\"ToPath('/Front/IntegralList')\"\r\n            v-if=\"Token\">我的积分</el-menu-item>\r\n        </el-menu>\r\n      </el-header>\r\n\r\n      <!-- 主体内容区域 -->\r\n      <el-main class=\"main-container main-box\">\r\n        <!-- 背景图形Canvas -->\r\n        <canvas id=\"backgroundCanvas\"\r\n          style=\"position: fixed; top: 64px; left: 0; width: 100%; height: calc(100vh - 144px); z-index: -1;\"></canvas>\r\n        <!-- 路由视图（白色背景更透明） -->\r\n        <transition name=\"page-fade\" mode=\"out-in\">\r\n          <router-view :key=\"$route.fullPath\" class=\"transparent-bg\"></router-view>\r\n        </transition>\r\n      </el-main>\r\n\r\n      <!-- 优化后的底部栏（缩小+间距） -->\r\n      <el-footer style=\"\r\n        background-color: rgba(51, 51, 51, 0.8);\r\n        height: 40px;  /* 高度缩小 */\r\n        margin-top: 30px;  /* 与上方内容间距 */\r\n        display: flex; \r\n        align-items: center; \r\n        justify-content: center;\r\n      \">\r\n        <div style=\"color: aliceblue; font-weight: bold;\">\r\n          系统归属于IKUN团队，版权所有 ©2024 - 2025 IKUN团队\r\n        </div>\r\n      </el-footer>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport store from '@/store';\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return { active: 'home' };  // 默认激活菜单项\r\n  },\r\n  mounted() {\r\n    this.initCanvas();  // 初始化背景图形动画\r\n    console.log(this.UserInfo);  // 打印用户信息（调试用）\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"UserInfo\", \"Token\"])  // 从Vuex获取用户信息和登录状态\r\n  },\r\n  methods: {\r\n    // 导航相关方法（保持原有逻辑）\r\n    ToLogin() { this.$router.push({ path: '/Login' }); },\r\n    ToRegister() { this.$router.push({ path: '/Register' }); },\r\n    async LoginOut() {\r\n      await this.$store.dispatch('Logout');\r\n      this.$router.push(`/Login`);\r\n    },\r\n    async ToPath(url) { this.$router.push({ path: url }); },\r\n    async ToUserInfo() { this.$router.push({ path: \"/Front/UserPerson\" }); },\r\n    async ToEditPassword() { this.$router.push({ path: \"/Front/PasswordEdit\" }); },\r\n    goBack() { this.$router.go(-1); },\r\n\r\n    // 背景图形初始化（新增三角形/正方形）\r\n    initCanvas() {\r\n      const canvas = document.getElementById('backgroundCanvas');\r\n      const ctx = canvas.getContext('2d');\r\n      // 动态设置Canvas尺寸（适配窗口）\r\n      const width = canvas.width = window.innerWidth;\r\n      const height = canvas.height = window.innerHeight - 144;  // 扣除头部和底部高度\r\n\r\n      // 图形类（支持圆形、正方形、三角形）\r\n      class Shape {\r\n        constructor(x, y, speedX, speedY, type) {\r\n          this.x = x;       // 中心点x坐标\r\n          this.y = y;       // 中心点y坐标\r\n          this.speedX = speedX;  // x方向速度\r\n          this.speedY = speedY;  // y方向速度\r\n          this.type = type;      // 图形类型（0=圆形，1=正方形，2=三角形）\r\n        }\r\n\r\n        // 更新位置（碰撞检测）\r\n        update() {\r\n          this.x += this.speedX;\r\n          this.y += this.speedY;\r\n          // 边界碰撞时反向\r\n          if (this.x < 0 || this.x > width) this.speedX = -this.speedX;\r\n          if (this.y < 0 || this.y > height) this.speedY = -this.speedY;\r\n        }\r\n\r\n        // 绘制图形（根据类型渲染）\r\n        draw() {\r\n          ctx.fillStyle = 'rgba(0, 0, 30, 0.4)';  // 统一半透明蓝黑色\r\n          ctx.beginPath();\r\n\r\n          switch (this.type) {\r\n            case 0:  // 圆形\r\n              ctx.arc(this.x, this.y, 20, 0, Math.PI * 2);\r\n              break;\r\n            case 1:  // 正方形（边长40px）\r\n              ctx.rect(this.x - 20, this.y - 20, 40, 40);  // 以中心点为基准\r\n              break;\r\n            case 2:  // 三角形（边长40px的等边三角形）\r\n              const size = 40;\r\n              ctx.moveTo(this.x, this.y - size / 2);        // 顶点\r\n              ctx.lineTo(this.x + size / 2, this.y + size / 2);  // 右下点\r\n              ctx.lineTo(this.x - size / 2, this.y + size / 2);  // 左下点\r\n              ctx.closePath();  // 闭合路径形成三角形\r\n              break;\r\n          }\r\n          ctx.fill();  // 填充图形\r\n        }\r\n      }\r\n\r\n      // 初始化15个随机图形（圆形、正方形、三角形混合）\r\n      const shapes = [];\r\n      const numShapes = 15;\r\n      for (let i = 0; i < numShapes; i++) {\r\n        shapes.push(new Shape(\r\n          Math.random() * width,       // 随机x坐标\r\n          Math.random() * height,      // 随机y坐标\r\n          (Math.random() * 4 - 2),     // x速度（-2~2）\r\n          (Math.random() * 4 - 2),     // y速度（-2~2）\r\n          Math.floor(Math.random() * 3)  // 随机类型（0-2）\r\n        ));\r\n      }\r\n\r\n      // 动画循环（持续更新和绘制图形）\r\n      const animate = () => {\r\n        ctx.clearRect(0, 0, width, height);  // 清空画布\r\n        shapes.forEach(shape => {\r\n          shape.update();  // 更新位置\r\n          shape.draw();    // 绘制图形\r\n        });\r\n        requestAnimationFrame(animate);  // 递归调用实现动画\r\n      };\r\n      animate();  // 启动动画\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 主容器样式（保持原有） */\r\n.main-container {\r\n  width: 1300px;\r\n  margin: 0 auto;\r\n  font-weight: bold;\r\n}\r\n\r\n/* 激活菜单项样式（保持原有） */\r\n.el-menu-item.is-active {\r\n  background-color: #409EFF !important;\r\n  color: #fff !important;\r\n  text-shadow: 0 0 5px #ff00ff, 0 0 10px #ff00ff;\r\n}\r\n\r\n/* 主体内容最小高度（适配底部栏） */\r\n.main-box {\r\n  min-height: calc(100vh - 160px);\r\n}\r\n\r\n/* 主体内容内边距（保持原有） */\r\n.el-main {\r\n  padding: 0 !important;\r\n}\r\n\r\n/* 页面切换过渡动画（保持原有） */\r\n.page-fade-enter-active,\r\n.page-fade-leave-active {\r\n  transition: all 0.25s ease;\r\n}\r\n\r\n.page-fade-enter,\r\n.page-fade-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n\r\n/* 菜单项悬停动画（保持原有） */\r\n.el-menu-item {\r\n  transition: opacity 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.el-menu-item:not(.is-active):hover {\r\n  opacity: 0.8;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* 子菜单标题动画（保持原有） */\r\n.el-submenu__title {\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.el-submenu:hover .el-submenu__title {\r\n  opacity: 0.9;\r\n}\r\n\r\n/* 白色背景更透明（关键修改） */\r\n.transparent-bg {\r\n  background-color: rgba(255, 255, 255, 0.6) !important;\r\n  /* 透明度从0.8→0.6 */\r\n  padding: 20px;\r\n  /* 可选：增加内容内边距提升可读性 */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}