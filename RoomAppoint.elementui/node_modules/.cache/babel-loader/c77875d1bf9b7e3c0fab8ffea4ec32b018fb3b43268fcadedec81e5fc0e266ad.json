{"ast":null,"code":"import * as echarts from \"echarts\";\nexport default {\n  name: 'Home',\n  props: {},\n  data() {\n    return {\n      myChart: null\n    };\n  },\n  created() {},\n  mounted() {\n    this.GetAppointRoomUseRate();\n    this.LoadData();\n  },\n  methods: {\n    async GetAppointRoomUseRate() {\n      let {\n        Data\n      } = await this.$Post('AppointRecord/GetAppointRoomUseRate', {});\n      console.log(Data);\n      let myChart = echarts.init(document.getElementById(\"echartDiv\")); // 图标初始化\n      const posList = ['left', 'right', 'top', 'bottom', 'inside', 'insideTop', 'insideLeft', 'insideRight', 'insideBottom', 'insideTopLeft', 'insideTopRight', 'insideBottomLeft', 'insideBottomRight'];\n      app.configParameters = {\n        rotate: {\n          min: -90,\n          max: 90\n        },\n        align: {\n          options: {\n            left: 'left',\n            center: 'center',\n            right: 'right'\n          }\n        },\n        verticalAlign: {\n          options: {\n            top: 'top',\n            middle: 'middle',\n            bottom: 'bottom'\n          }\n        },\n        position: {\n          options: posList.reduce(function (map, pos) {\n            map[pos] = pos;\n            return map;\n          }, {})\n        },\n        distance: {\n          min: 0,\n          max: 100\n        }\n      };\n      app.config = {\n        rotate: 90,\n        align: 'left',\n        verticalAlign: 'middle',\n        position: 'insideBottom',\n        distance: 15,\n        onChange: function () {\n          const labelOption = {\n            rotate: app.config.rotate,\n            align: app.config.align,\n            verticalAlign: app.config.verticalAlign,\n            position: app.config.position,\n            distance: app.config.distance\n          };\n          myChart.setOption({\n            series: [{\n              label: labelOption\n            }, {\n              label: labelOption\n            }, {\n              label: labelOption\n            }, {\n              label: labelOption\n            }]\n          });\n        }\n      };\n      const labelOption = {\n        show: true,\n        position: app.config.position,\n        distance: app.config.distance,\n        align: app.config.align,\n        verticalAlign: app.config.verticalAlign,\n        rotate: app.config.rotate,\n        formatter: '{c}  {name|{a}}',\n        fontSize: 16,\n        rich: {\n          name: {}\n        }\n      };\n      let option = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        legend: {\n          data: ['上午', '下午', '夜晚']\n        },\n        toolbox: {\n          show: true,\n          orient: 'vertical',\n          left: 'right',\n          top: 'center',\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            magicType: {\n              show: true,\n              type: ['line', 'bar', 'stack']\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        xAxis: [{\n          type: 'category',\n          axisTick: {\n            show: false\n          },\n          data: Data.map(x => x.Room.Name)\n        }],\n        yAxis: [{\n          type: 'value',\n          axisLabel: {\n            formatter: '{value} %' //在这里设置y轴标签的格式，添加单位\n          }\n        }],\n        series: [{\n          name: '上午',\n          type: 'bar',\n          barGap: 0,\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          data: Data.map(x => x.AmUseRate)\n        }, {\n          name: '下午',\n          type: 'bar',\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          data: Data.map(x => x.PmUseRate)\n        }, {\n          name: '夜晚',\n          type: 'bar',\n          label: labelOption,\n          emphasis: {\n            focus: 'series'\n          },\n          data: Data.map(x => x.NmUseRate)\n        }]\n      };\n      myChart.setOption(option); // 渲染页面\n      //随着屏幕大小调节图表\n      window.addEventListener(\"resize\", () => {\n        myChart.resize();\n      });\n    },\n    LoadData() {}\n  }\n};","map":{"version":3,"names":["echarts","name","props","data","myChart","created","mounted","GetAppointRoomUseRate","LoadData","methods","Data","$Post","console","log","init","document","getElementById","posList","app","configParameters","rotate","min","max","align","options","left","center","right","verticalAlign","top","middle","bottom","position","reduce","map","pos","distance","config","onChange","labelOption","setOption","series","label","show","formatter","fontSize","rich","option","tooltip","trigger","axisPointer","type","legend","toolbox","orient","feature","mark","dataView","readOnly","magicType","restore","saveAsImage","xAxis","axisTick","x","Room","Name","yAxis","axisLabel","barGap","emphasis","focus","AmUseRate","PmUseRate","NmUseRate","window","addEventListener","resize"],"sources":["src/views/Admin/Home.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>卡片名称</span>\r\n        <el-button style=\"float: right; padding: 3px 0\" type=\"text\">操作按钮</el-button>\r\n      </div>\r\n      <div v-for=\"o in 4\" :key=\"o\" class=\"text item\">\r\n        {{ '列表内容 ' + o }}\r\n      </div>\r\n    </el-card>\r\n    <div class=\"echart\" id=\"echartDiv\" :style=\"{ float: 'left', width: '100%', height: '500px' }\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from \"echarts\";\r\nexport default {\r\n  name: 'Home',\r\n  props: {\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      myChart: null\r\n    };\r\n  },\r\n  created() {\r\n\r\n  },\r\n  mounted() {\r\n    this.GetAppointRoomUseRate();\r\n    this.LoadData();\r\n  },\r\n  methods: {\r\n    async GetAppointRoomUseRate() {\r\n      let { Data } = await this.$Post('AppointRecord/GetAppointRoomUseRate', {});\r\n      console.log(Data);\r\n      let myChart = echarts.init(document.getElementById(\"echartDiv\"));// 图标初始化\r\n      const posList = [\r\n        'left',\r\n        'right',\r\n        'top',\r\n        'bottom',\r\n        'inside',\r\n        'insideTop',\r\n        'insideLeft',\r\n        'insideRight',\r\n        'insideBottom',\r\n        'insideTopLeft',\r\n        'insideTopRight',\r\n        'insideBottomLeft',\r\n        'insideBottomRight'\r\n      ];\r\n      app.configParameters = {\r\n        rotate: {\r\n          min: -90,\r\n          max: 90\r\n        },\r\n        align: {\r\n          options: {\r\n            left: 'left',\r\n            center: 'center',\r\n            right: 'right'\r\n          }\r\n        },\r\n        verticalAlign: {\r\n          options: {\r\n            top: 'top',\r\n            middle: 'middle',\r\n            bottom: 'bottom'\r\n          }\r\n        },\r\n        position: {\r\n          options: posList.reduce(function (map, pos) {\r\n            map[pos] = pos;\r\n            return map;\r\n          }, {})\r\n        },\r\n        distance: {\r\n          min: 0,\r\n          max: 100\r\n        }\r\n      };\r\n      app.config = {\r\n        rotate: 90,\r\n        align: 'left',\r\n        verticalAlign: 'middle',\r\n        position: 'insideBottom',\r\n        distance: 15,\r\n        onChange: function () {\r\n          const labelOption = {\r\n            rotate: app.config.rotate,\r\n            align: app.config.align,\r\n            verticalAlign: app.config.verticalAlign,\r\n            position: app.config.position,\r\n            distance: app.config.distance\r\n          };\r\n          myChart.setOption({\r\n            series: [\r\n              {\r\n                label: labelOption\r\n              },\r\n              {\r\n                label: labelOption\r\n              },\r\n              {\r\n                label: labelOption\r\n              },\r\n              {\r\n                label: labelOption\r\n              }\r\n            ]\r\n          });\r\n        }\r\n      };\r\n      const labelOption = {\r\n        show: true,\r\n        position: app.config.position,\r\n        distance: app.config.distance,\r\n        align: app.config.align,\r\n        verticalAlign: app.config.verticalAlign,\r\n        rotate: app.config.rotate,\r\n        formatter: '{c}  {name|{a}}',\r\n        fontSize: 16,\r\n        rich: {\r\n          name: {}\r\n        }\r\n      };\r\n      let option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['上午', '下午', '夜晚']\r\n        },\r\n        toolbox: {\r\n          show: true,\r\n          orient: 'vertical',\r\n          left: 'right',\r\n          top: 'center',\r\n          feature: {\r\n            mark: { show: true },\r\n            dataView: { show: true, readOnly: false },\r\n            magicType: { show: true, type: ['line', 'bar', 'stack'] },\r\n            restore: { show: true },\r\n            saveAsImage: { show: true }\r\n          }\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            axisTick: { show: false },\r\n            data: Data.map(x => x.Room.Name)\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} %' //在这里设置y轴标签的格式，添加单位\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '上午',\r\n            type: 'bar',\r\n            barGap: 0,\r\n            label: labelOption,\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: Data.map(x => x.AmUseRate)\r\n          },\r\n          {\r\n            name: '下午',\r\n            type: 'bar',\r\n            label: labelOption,\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: Data.map(x => x.PmUseRate)\r\n          },\r\n          {\r\n            name: '夜晚',\r\n            type: 'bar',\r\n            label: labelOption,\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: Data.map(x => x.NmUseRate)\r\n          },\r\n\r\n        ]\r\n      };\r\n\r\n\r\n      myChart.setOption(option);// 渲染页面\r\n      //随着屏幕大小调节图表\r\n      window.addEventListener(\"resize\", () => {\r\n        myChart.resize();\r\n      });\r\n\r\n\r\n    },\r\n    LoadData() {\r\n\r\n\r\n    }\r\n  }\r\n}       \r\n</script>\r\n\r\n\r\n<style scoped></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}