{"ast":null,"code":"import store from '@/store';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: \"BannerList\",\n  computed: {\n    ...mapGetters(['Token', 'UserInfo', 'RoleType', 'HasUserInfo', 'ColumnType', \"UserId\"])\n  },\n  data() {\n    return {\n      where: {},\n      searchForm: {},\n      //搜索定义的数据对象\n      dataColum: [{\n        key: \"Id\",\n        hidden: true\n      }, {\n        key: \"Cover\",\n        title: \"封面\",\n        type: store.getters.ColumnType.IMAGES\n      }, {\n        key: \"Remark\",\n        title: \"备注\",\n        type: store.getters.ColumnType.SHORTTEXT\n      }, {\n        title: \"操作\",\n        width: \"300px\",\n        key: \"Operate\",\n        type: store.getters.ColumnType.USERDEFINED\n      }],\n      editModalFormRules: {\n        \"Cover\": [{\n          required: true,\n          message: '该项为必填项',\n          trigger: 'blur'\n        }],\n        \"Remark\": [{\n          required: true,\n          message: '该项为必填项',\n          trigger: 'blur'\n        }]\n      },\n      formData: {},\n      //保存或者修改定义的数据对象\n      editorShow: false\n    };\n  },\n  created() {},\n  methods: {\n    //修改属性\n    async UpdateEntityAsync(Id, title, data) {\n      let {\n        Data\n      } = await this.$PostSigleUpdate(`/Banner/Get`, `/Banner/CreateOrEdit`, Id, title, data);\n      this.$refs.PaginationTableId.Reload(this.searchForm);\n    },\n    /**\n     * 点击新增或者编辑的时候会触发\n     */\n    async ShowEditModal(Id) {\n      let {\n        Data\n      } = await this.$Post(`/Banner/Get`, {\n        Id: Id\n      });\n      this.formData = Data;\n      this.editorShow = true;\n    },\n    /**\n     * 点击保存的时候会触发\n     */\n    async CreateOrEditForm() {\n      this.$refs.editModalForm.validate(async valid => {\n        if (valid) {\n          var {\n            Success\n          } = await this.$Post(`/Banner/CreateOrEdit`, this.formData);\n          if (Success) {\n            this.editorShow = false;\n            this.$refs.PaginationTableId.Reload(this.searchForm);\n          }\n        }\n      });\n    },\n    /**\n     * 单个删除的时候会触发\n     */\n    async ShowDeleteModal(Id) {\n      await this.$PostDelete(`/Banner/Delete`, {\n        Id: Id\n      });\n      this.$refs.PaginationTableId.Reload(this.searchForm);\n    },\n    /**\n     * 批量删除的时候会触发\n     */\n    async ShowBatchDeleteModal() {\n      var ids = this.$refs.PaginationTableId.GetSelectionRow().map(x => x.Id);\n      if (ids.length == 0) {\n        this.$message.error(\"你选择需要删除的记录\");\n        return;\n      }\n      await this.$PostDelete(`/Banner/BatchDelete`, {\n        Ids: ids\n      });\n      this.$refs.PaginationTableId.Reload(this.searchForm);\n    },\n    /**\n     * 点击表格搜索按钮会触发\n     */\n    async SearchClick() {\n      this.$refs.PaginationTableId.Reload(this.searchForm);\n    },\n    /**\n     * 点击清空表单会触发\n     */\n    async ResetClick() {\n      this.searchForm = {};\n      this.$refs.PaginationTableId.Reload(this.searchForm);\n    }\n  }\n};","map":{"version":3,"names":["store","mapGetters","name","computed","data","where","searchForm","dataColum","key","hidden","title","type","getters","ColumnType","IMAGES","SHORTTEXT","width","USERDEFINED","editModalFormRules","required","message","trigger","formData","editorShow","created","methods","UpdateEntityAsync","Id","Data","$PostSigleUpdate","$refs","PaginationTableId","Reload","ShowEditModal","$Post","CreateOrEditForm","editModalForm","validate","valid","Success","ShowDeleteModal","$PostDelete","ShowBatchDeleteModal","ids","GetSelectionRow","map","x","length","$message","error","Ids","SearchClick","ResetClick"],"sources":["src/views/Admin/BannerList.vue"],"sourcesContent":["<template>\n    <div class=\"app-container\">\n        <el-card class=\"box-card\">            \n            <div slot=\"header\" class=\"clearfix\">\n          \t\t   <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-search\" @click=\"SearchClick\">搜 索</el-button>\n                <el-button type=\"warning\" size=\"mini\" @click=\"ResetClick\" icon=\"el-icon-s-promotion\">重 置</el-button>\n            </div>\n            <div class=\"tb-body\">\n                <el-form ref=\"searchFormRef\" :model=\"searchForm\" :inline=\"true\" label-width=\"120px\" :style=\"`flex:1;`\">\n                    <el-form-item label=\"备注\" prop=\"RemarkLike\">\n                        <el-input v-model.trim=\"searchForm.RemarkLike\"  placeholder=\"请输入备注\"  :clearable=\"true\"></el-input>\n                    </el-form-item>\n                </el-form>\n            </div>\n\n        </el-card>\n\n\n        <el-dialog  :title=\"formData.Id ? '修改封面' : '添加封面'\"   :visible.sync=\"editorShow\" width=\"50%\" :lock-scroll=\"true\" height=\"800px\">\n            <el-form v-if=\"editorShow == true\" ref=\"editModalForm\" :rules=\"editModalFormRules\" :model=\"formData\"\n                label-width=\"140px\" size=\"mini\">\n                 <el-row :gutter=\"10\" class=\"EditFromBody\"   >               \n                    <el-col :span=\"24\">\n                        <el-form-item label=\"封面\" prop=\"Cover\">\n                           <UploadImages :limit=\"1\" v-model=\"formData.Cover\"></UploadImages>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span=\"24\">\n                        <el-form-item label=\"备注\" prop=\"Remark\">\n                            <el-input type=\"text\" v-model.trim=\"formData.Remark\"  placeholder=\"请输入备注\"     :clearable=\"true\"></el-input>\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n\n\n                <el-row type=\"flex\" justify=\"end\" align=\"bottom\">\n                    <el-form-item>\n                        <el-button type=\"primary\" plain @click=\"CreateOrEditForm()\">确 定</el-button>\n                        <el-button @click=\"editorShow = false\">取 消</el-button>\n                    </el-form-item>\n                </el-row>\n            </el-form>\n\n        </el-dialog>\n\n\n        <PaginationTable ref=\"PaginationTableId\" url=\"/Banner/List\" :column=\"dataColum\" :where=\"where\">\n            <template v-slot:header>\n                <el-button type=\"primary\" size=\"mini\"  plain icon=\"el-icon-edit\" @click=\"ShowEditModal()\">新 增</el-button>\n                <el-button type=\"danger\"  size=\"mini\" icon=\"el-icon-delete\" @click=\"ShowBatchDeleteModal()\">批 量 删 除</el-button>\n \t\t\t\t </template>\n            <template v-slot:Operate=\"scope\">\n                <el-button type=\"primary\" size=\"mini\"  @click=\"ShowEditModal(scope.row.Id)\">修 改</el-button>\n                <el-button type=\"danger\" size=\"mini\" @click=\"ShowDeleteModal(scope.row.Id)\">删 除</el-button>\n            </template>\n        </PaginationTable>\n    </div>\n</template>\n    \n<script>\nimport store from '@/store';\nimport { mapGetters } from 'vuex'\nexport default {\n    name: \"BannerList\",\n \t computed: {\n        ...mapGetters([\n            'Token', 'UserInfo', 'RoleType', 'HasUserInfo', 'ColumnType', \"UserId\"\n        ])\n    },\n    data() {\n\t\t   \n        return {\n            where:{}, \n            searchForm: {},//搜索定义的数据对象\n            dataColum: [\n                {\n                    key: \"Id\",\n                    hidden: true,\n\n                },\n               {\n                    key: \"Cover\",\n                    title: \"封面\",\n                    type:store.getters.ColumnType.IMAGES,\n                },\n               {\n                    key: \"Remark\",\n                    title: \"备注\",\n\t\t\t\t\t\t\t  \n                    type: store.getters.ColumnType.SHORTTEXT, \n                },\n                {\n                    title: \"操作\",\n                  \t  width:\"300px\",\n                    key: \"Operate\",\n                    type: store.getters.ColumnType.USERDEFINED,\n                },\n            ],\n            editModalFormRules: {\n              \"Cover\":[\n                { required: true, message: '该项为必填项', trigger: 'blur' },\n              ],           \n              \"Remark\":[\n                { required: true, message: '该项为必填项', trigger: 'blur' },\n              ],           \n            },\n            formData: {\n\n            },//保存或者修改定义的数据对象\n            editorShow: false,\n\n        };\n    },\n    created() {\n\n    },\n    methods: {\n        //修改属性\n        async UpdateEntityAsync(Id, title, data) {\n            let { Data } = await this.$PostSigleUpdate(`/Banner/Get`, `/Banner/CreateOrEdit`, Id, title, data);\n\n            this.$refs.PaginationTableId.Reload(this.searchForm);\n        },\n        /**\n         * 点击新增或者编辑的时候会触发\n         */\n        async ShowEditModal(Id) {\n\n            let { Data } = await this.$Post(`/Banner/Get`, { Id: Id });\n            this.formData = Data;\n            \n            this.editorShow = true;\n\n        },\n        /**\n         * 点击保存的时候会触发\n         */\n        async CreateOrEditForm() {\n         \n            this.$refs.editModalForm.validate(async valid => {\n                if (valid) {\n                    var { Success } = await this.$Post(`/Banner/CreateOrEdit`, this.formData);\n                  \n                    if (Success) {\n                        this.editorShow = false;\n                        this.$refs.PaginationTableId.Reload(this.searchForm);\n                    }\n                }\n            })\n        },\n        /**\n         * 单个删除的时候会触发\n         */\n        async ShowDeleteModal(Id) {\n            await this.$PostDelete(`/Banner/Delete`, { Id: Id });\n       \t\t   this.$refs.PaginationTableId.Reload(this.searchForm);\n        },\n        /**\n         * 批量删除的时候会触发\n         */\n        async ShowBatchDeleteModal() {\n            var ids = this.$refs.PaginationTableId.GetSelectionRow().map(x => x.Id);\n            if (ids.length == 0) {\n                this.$message.error(\"你选择需要删除的记录\");\n                return;\n            }\n            await this.$PostDelete(`/Banner/BatchDelete`, { Ids: ids });\n       \t\t\n            this.$refs.PaginationTableId.Reload(this.searchForm);\n        },\n        /**\n         * 点击表格搜索按钮会触发\n         */\n        async SearchClick() {\n            this.$refs.PaginationTableId.Reload(this.searchForm);\n        },\n        /**\n         * 点击清空表单会触发\n         */\n        async ResetClick() {\n            this.searchForm = {};\n            this.$refs.PaginationTableId.Reload(this.searchForm);\n        },\n\n        \n\n\n    },\n};\n</script>\n    "],"mappings":"AA4DA,OAAAA,KAAA;AACA,SAAAC,UAAA;AACA;EACAC,IAAA;EACAC,QAAA;IACA,GAAAF,UAAA,EACA,uEACA;EACA;EACAG,KAAA;IAEA;MACAC,KAAA;MACAC,UAAA;MAAA;MACAC,SAAA,GACA;QACAC,GAAA;QACAC,MAAA;MAEA,GACA;QACAD,GAAA;QACAE,KAAA;QACAC,IAAA,EAAAX,KAAA,CAAAY,OAAA,CAAAC,UAAA,CAAAC;MACA,GACA;QACAN,GAAA;QACAE,KAAA;QAEAC,IAAA,EAAAX,KAAA,CAAAY,OAAA,CAAAC,UAAA,CAAAE;MACA,GACA;QACAL,KAAA;QACAM,KAAA;QACAR,GAAA;QACAG,IAAA,EAAAX,KAAA,CAAAY,OAAA,CAAAC,UAAA,CAAAI;MACA,EACA;MACAC,kBAAA;QACA,UACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACA,WACA;UAAAF,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAC,QAAA,GAEA;MAAA;MACAC,UAAA;IAEA;EACA;EACAC,QAAA,GAEA;EACAC,OAAA;IACA;IACA,MAAAC,kBAAAC,EAAA,EAAAjB,KAAA,EAAAN,IAAA;MACA;QAAAwB;MAAA,eAAAC,gBAAA,wCAAAF,EAAA,EAAAjB,KAAA,EAAAN,IAAA;MAEA,KAAA0B,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;IACA;IACA;AACA;AACA;IACA,MAAA2B,cAAAN,EAAA;MAEA;QAAAC;MAAA,eAAAM,KAAA;QAAAP,EAAA,EAAAA;MAAA;MACA,KAAAL,QAAA,GAAAM,IAAA;MAEA,KAAAL,UAAA;IAEA;IACA;AACA;AACA;IACA,MAAAY,iBAAA;MAEA,KAAAL,KAAA,CAAAM,aAAA,CAAAC,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YAAAC;UAAA,eAAAL,KAAA,8BAAAZ,QAAA;UAEA,IAAAiB,OAAA;YACA,KAAAhB,UAAA;YACA,KAAAO,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;UACA;QACA;MACA;IACA;IACA;AACA;AACA;IACA,MAAAkC,gBAAAb,EAAA;MACA,WAAAc,WAAA;QAAAd,EAAA,EAAAA;MAAA;MACA,KAAAG,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;IACA;IACA;AACA;AACA;IACA,MAAAoC,qBAAA;MACA,IAAAC,GAAA,QAAAb,KAAA,CAAAC,iBAAA,CAAAa,eAAA,GAAAC,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAnB,EAAA;MACA,IAAAgB,GAAA,CAAAI,MAAA;QACA,KAAAC,QAAA,CAAAC,KAAA;QACA;MACA;MACA,WAAAR,WAAA;QAAAS,GAAA,EAAAP;MAAA;MAEA,KAAAb,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;IACA;IACA;AACA;AACA;IACA,MAAA6C,YAAA;MACA,KAAArB,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;IACA;IACA;AACA;AACA;IACA,MAAA8C,WAAA;MACA,KAAA9C,UAAA;MACA,KAAAwB,KAAA,CAAAC,iBAAA,CAAAC,MAAA,MAAA1B,UAAA;IACA;EAKA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}