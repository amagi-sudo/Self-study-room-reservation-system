{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport store from '@/store';\nimport { mapGetters } from 'vuex';\nexport default {\n  data() {\n    return {\n      // 默认激活的菜单项\n      active: 'home'\n    };\n  },\n  mounted() {\n    // 初始化背景图形的绘制和动画\n    this.initCanvas();\n    // 打印用户信息到控制台\n    console.log(this.UserInfo);\n  },\n  computed: {\n    // 从 Vuex 中获取用户信息和登录令牌\n    ...mapGetters([\"UserInfo\", \"Token\"])\n  },\n  methods: {\n    // 跳转到登录页面\n    ToLogin() {\n      this.$router.push({\n        path: '/Login'\n      });\n    },\n    // 跳转到注册页面\n    ToRegister() {\n      this.$router.push({\n        path: '/Register'\n      });\n    },\n    // 执行退出登录操作\n    async LoginOut() {\n      await this.$store.dispatch('Logout');\n      this.$router.push(`/Login`);\n    },\n    // 通用的页面跳转方法\n    async ToPath(url) {\n      this.$router.push({\n        path: url\n      });\n    },\n    // 跳转到个人信息页面\n    async ToUserInfo() {\n      this.$router.push({\n        path: \"/Front/UserPerson\"\n      });\n    },\n    // 跳转到修改密码页面\n    async ToEditPassword() {\n      this.$router.push({\n        path: \"/Front/PasswordEdit\"\n      });\n    },\n    // 返回上一个页面\n    goBack() {\n      this.$router.go(-1);\n    },\n    // 初始化背景图形的绘制和动画\n    initCanvas() {\n      // 获取 canvas 元素\n      const canvas = document.getElementById('backgroundCanvas');\n      // 获取 2D 绘图上下文\n      const ctx = canvas.getContext('2d');\n      // 设置 canvas 的宽度为窗口宽度\n      const width = canvas.width = window.innerWidth;\n      // 设置 canvas 的高度为窗口高度减去头部和底部栏的高度\n      const height = canvas.height = window.innerHeight - 144;\n\n      // 定义背景图形类\n      class Shape {\n        constructor(x, y, speedX, speedY) {\n          // 图形的初始 x 坐标\n          this.x = x;\n          // 图形的初始 y 坐标\n          this.y = y;\n          // 图形在 x 方向的移动速度\n          this.speedX = speedX;\n          // 图形在 y 方向的移动速度\n          this.speedY = speedY;\n        }\n\n        // 更新图形的位置\n        update() {\n          this.x += this.speedX;\n          this.y += this.speedY;\n\n          // 处理图形与边界的碰撞，改变速度方向\n          if (this.x < 0 || this.x > width) {\n            this.speedX = -this.speedX;\n          }\n          if (this.y < 0 || this.y > height) {\n            this.speedY = -this.speedY;\n          }\n        }\n\n        // 绘制图形\n        draw() {\n          // 开始绘制路径\n          ctx.beginPath();\n          // 绘制圆形\n          ctx.arc(this.x, this.y, 20, 0, Math.PI * 2);\n          // 设置填充颜色为蓝黑色半透明\n          ctx.fillStyle = 'rgba(0, 0, 30, 0.5)';\n          // 填充图形\n          ctx.fill();\n        }\n      }\n\n      // 存储所有背景图形的数组\n      const shapes = [];\n      // 背景图形的数量\n      const numShapes = 10;\n\n      // 初始化多个背景图形\n      for (let i = 0; i < numShapes; i++) {\n        // 随机生成图形的初始 x 坐标\n        const x = Math.random() * width;\n        // 随机生成图形的初始 y 坐标\n        const y = Math.random() * height;\n        // 随机生成图形在 x 方向的移动速度\n        const speedX = Math.random() * 4 - 2;\n        // 随机生成图形在 y 方向的移动速度\n        const speedY = Math.random() * 4 - 2;\n        // 创建图形实例并添加到数组中\n        shapes.push(new Shape(x, y, speedX, speedY));\n      }\n\n      // 动画循环函数\n      const animate = () => {\n        // 清空 canvas 上的内容\n        ctx.clearRect(0, 0, width, height);\n\n        // 更新并绘制每个背景图形\n        shapes.forEach(shape => {\n          shape.update();\n          shape.draw();\n        });\n\n        // 递归调用动画函数，实现连续动画\n        requestAnimationFrame(animate);\n      };\n\n      // 启动动画\n      animate();\n    }\n  }\n};","map":{"version":3,"names":["store","mapGetters","data","active","mounted","initCanvas","console","log","UserInfo","computed","methods","ToLogin","$router","push","path","ToRegister","LoginOut","$store","dispatch","ToPath","url","ToUserInfo","ToEditPassword","goBack","go","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","Shape","constructor","x","y","speedX","speedY","update","draw","beginPath","arc","Math","PI","fillStyle","fill","shapes","numShapes","i","random","animate","clearRect","forEach","shape","requestAnimationFrame"],"sources":["src/views/Front/Layout/index.vue"],"sourcesContent":["<template>\r\n  <!-- 页面根容器 -->\r\n  <div>\r\n    <!-- Element UI 容器组件 -->\r\n    <el-container>\r\n      <!-- 头部导航栏，设置半透明深灰色背景 -->\r\n      <el-header style=\"background-color: rgba(51, 51, 51);\">\r\n        <!-- 水平菜单，默认激活项由 active 变量控制 -->\r\n        <el-menu :default-active=\"active\" class=\"main-container\" mode=\"horizontal\" text-color=\"purpleblue\"\r\n          active-text-color=\"white\">\r\n          <!-- 点击菜单项跳转到首页 -->\r\n          <el-menu-item @click=\"ToPath('/Front/Home')\">\r\n            <!-- 显示图片作为菜单项内容 -->\r\n            <img style=\"height: 60px;object-fit: cover;\" :src=\"require('@/assets/white.jpg')\">\r\n          </el-menu-item>\r\n          <!-- 首页菜单项，点击跳转到首页 -->\r\n          <el-menu-item index=\"/Front/Home\" @click=\"ToPath('/Front/Home')\">IKUN 自习室预约</el-menu-item>\r\n          <!-- 注册菜单项，仅在未登录时显示，点击跳转到注册页 -->\r\n          <el-menu-item style=\"float: right;\" v-if=\"!Token\" @click=\"ToRegister()\">注册</el-menu-item>\r\n          <!-- 登录菜单项，仅在未登录时显示，点击跳转到登录页 -->\r\n          <el-menu-item style=\"float: right;\" v-if=\"!Token\" @click=\"ToLogin()\">登录</el-menu-item>\r\n          <!-- 用户子菜单，仅在已登录时显示 -->\r\n          <el-submenu style=\"float: right;font-weight: bold;\" v-if=\"Token\" index=\"userMenu\">\r\n            <!-- 子菜单标题显示用户名 -->\r\n            <template slot=\"title\">{{ UserInfo.UserName }}</template>\r\n            <!-- 个人信息菜单项，点击跳转到个人信息页 -->\r\n            <el-menu-item index=\"user个人信息\" @click=\"ToUserInfo()\">个人信息</el-menu-item>\r\n            <!-- 修改密码菜单项，点击跳转到修改密码页 -->\r\n            <el-menu-item index=\"user修改密码\" @click=\"ToEditPassword()\">修改密码</el-menu-item>\r\n            <!-- 退出菜单项，点击执行退出登录操作 -->\r\n            <el-menu-item index=\"user退出\" @click=\"LoginOut()\">退出</el-menu-item>\r\n          </el-submenu>\r\n          <!-- 我的预约记录菜单项，仅在已登录时显示，点击跳转到预约记录页 -->\r\n          <el-menu-item style=\"float: right;\" index=\"/Front/AppointRecordList\"\r\n            @click=\"ToPath('/Front/AppointRecordList')\" v-if=\"Token\">我的预约记录</el-menu-item>\r\n          <!-- 我的积分菜单项，仅在已登录时显示，点击跳转到积分页 -->\r\n          <el-menu-item style=\"float: right;\" index=\"/Front/IntegralList\" @click=\"ToPath('/Front/IntegralList')\"\r\n            v-if=\"Token\">我的积分</el-menu-item>\r\n        </el-menu>\r\n      </el-header>\r\n\r\n      <!-- 主体内容区域 -->\r\n      <el-main class=\"main-container main-box\">\r\n        <!-- 用于绘制背景图形的 canvas 元素 -->\r\n        <canvas id=\"backgroundCanvas\"\r\n          style=\"position: fixed; top: 64px; left: 0; width: 100%; height: calc(100vh - 144px); z-index: -1;\"></canvas>\r\n        <!-- 路由视图组件，实现页面切换过渡效果 -->\r\n        <transition name=\"page-fade\" mode=\"out-in\">\r\n          <router-view :key=\"$route.fullPath\"></router-view>\r\n        </transition>\r\n      </el-main>\r\n\r\n      <!-- 底部栏，设置半透明深灰色背景 -->\r\n      <el-footer\r\n        style=\"background-color: rgba(51, 51, 51, 0.8); height: 80px; display: flex; align-items: center; justify-content: center;\">\r\n        <!-- 底部版权信息 -->\r\n        <div style=\"color: aliceblue; font-weight: bold;\">\r\n          系统归属于IKUN团队，版权所有 ©2024 - 2025 IKUN团队\r\n        </div>\r\n      </el-footer>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport store from '@/store';\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 默认激活的菜单项\r\n      active: 'home',\r\n    };\r\n  },\r\n  mounted() {\r\n    // 初始化背景图形的绘制和动画\r\n    this.initCanvas();\r\n    // 打印用户信息到控制台\r\n    console.log(this.UserInfo);\r\n  },\r\n  computed: {\r\n    // 从 Vuex 中获取用户信息和登录令牌\r\n    ...mapGetters([\"UserInfo\", \"Token\"])\r\n  },\r\n  methods: {\r\n    // 跳转到登录页面\r\n    ToLogin() {\r\n      this.$router.push({ path: '/Login' });\r\n    },\r\n    // 跳转到注册页面\r\n    ToRegister() {\r\n      this.$router.push({ path: '/Register' });\r\n    },\r\n    // 执行退出登录操作\r\n    async LoginOut() {\r\n      await this.$store.dispatch('Logout');\r\n      this.$router.push(`/Login`);\r\n    },\r\n    // 通用的页面跳转方法\r\n    async ToPath(url) {\r\n      this.$router.push({ path: url });\r\n    },\r\n    // 跳转到个人信息页面\r\n    async ToUserInfo() {\r\n      this.$router.push({ path: \"/Front/UserPerson\" });\r\n    },\r\n    // 跳转到修改密码页面\r\n    async ToEditPassword() {\r\n      this.$router.push({ path: \"/Front/PasswordEdit\" });\r\n    },\r\n    // 返回上一个页面\r\n    goBack() {\r\n      this.$router.go(-1);\r\n    },\r\n    // 初始化背景图形的绘制和动画\r\n    initCanvas() {\r\n      // 获取 canvas 元素\r\n      const canvas = document.getElementById('backgroundCanvas');\r\n      // 获取 2D 绘图上下文\r\n      const ctx = canvas.getContext('2d');\r\n      // 设置 canvas 的宽度为窗口宽度\r\n      const width = canvas.width = window.innerWidth;\r\n      // 设置 canvas 的高度为窗口高度减去头部和底部栏的高度\r\n      const height = canvas.height = window.innerHeight - 144;\r\n\r\n      // 定义背景图形类\r\n      class Shape {\r\n        constructor(x, y, speedX, speedY) {\r\n          // 图形的初始 x 坐标\r\n          this.x = x;\r\n          // 图形的初始 y 坐标\r\n          this.y = y;\r\n          // 图形在 x 方向的移动速度\r\n          this.speedX = speedX;\r\n          // 图形在 y 方向的移动速度\r\n          this.speedY = speedY;\r\n        }\r\n\r\n        // 更新图形的位置\r\n        update() {\r\n          this.x += this.speedX;\r\n          this.y += this.speedY;\r\n\r\n          // 处理图形与边界的碰撞，改变速度方向\r\n          if (this.x < 0 || this.x > width) {\r\n            this.speedX = -this.speedX;\r\n          }\r\n          if (this.y < 0 || this.y > height) {\r\n            this.speedY = -this.speedY;\r\n          }\r\n        }\r\n\r\n        // 绘制图形\r\n        draw() {\r\n          // 开始绘制路径\r\n          ctx.beginPath();\r\n          // 绘制圆形\r\n          ctx.arc(this.x, this.y, 20, 0, Math.PI * 2);\r\n          // 设置填充颜色为蓝黑色半透明\r\n          ctx.fillStyle = 'rgba(0, 0, 30, 0.5)';\r\n          // 填充图形\r\n          ctx.fill();\r\n        }\r\n      }\r\n\r\n      // 存储所有背景图形的数组\r\n      const shapes = [];\r\n      // 背景图形的数量\r\n      const numShapes = 10;\r\n\r\n      // 初始化多个背景图形\r\n      for (let i = 0; i < numShapes; i++) {\r\n        // 随机生成图形的初始 x 坐标\r\n        const x = Math.random() * width;\r\n        // 随机生成图形的初始 y 坐标\r\n        const y = Math.random() * height;\r\n        // 随机生成图形在 x 方向的移动速度\r\n        const speedX = (Math.random() * 4 - 2);\r\n        // 随机生成图形在 y 方向的移动速度\r\n        const speedY = (Math.random() * 4 - 2);\r\n        // 创建图形实例并添加到数组中\r\n        shapes.push(new Shape(x, y, speedX, speedY));\r\n      }\r\n\r\n      // 动画循环函数\r\n      const animate = () => {\r\n        // 清空 canvas 上的内容\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        // 更新并绘制每个背景图形\r\n        shapes.forEach(shape => {\r\n          shape.update();\r\n          shape.draw();\r\n        });\r\n\r\n        // 递归调用动画函数，实现连续动画\r\n        requestAnimationFrame(animate);\r\n      };\r\n\r\n      // 启动动画\r\n      animate();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 主容器样式，设置宽度和居中显示 */\r\n.main-container {\r\n  width: 1300px;\r\n  margin: 0 auto;\r\n  font-weight: bold;\r\n}\r\n\r\n/* 菜单样式，设置半透明深灰色背景 */\r\n.el-menu {\r\n  background-color: rgba(51, 51, 51, 0.8);\r\n}\r\n\r\n/* 激活菜单项的样式，设置背景颜色、文字颜色和文字阴影 */\r\n.el-menu-item.is-active {\r\n  background-color: #409EFF !important;\r\n  color: #fff !important;\r\n  text-shadow: 0 0 5px #ff00ff, 0 0 10px #ff00ff;\r\n}\r\n\r\n/* 主体内容区域样式，设置最小高度以适应底部栏 */\r\n.main-box {\r\n  min-height: calc(100vh - 160px);\r\n}\r\n\r\n/* 主体内容区域样式，去除内边距 */\r\n.el-main {\r\n  padding: 0 !important;\r\n}\r\n\r\n/* 页面切换过渡效果，进入和离开时的动画效果 */\r\n.page-fade-enter-active,\r\n.page-fade-leave-active {\r\n  transition: all 0.25s ease;\r\n}\r\n\r\n/* 页面进入时的初始状态，透明度为 0 并向右偏移 */\r\n.page-fade-enter,\r\n.page-fade-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n\r\n/* 菜单项过渡效果，设置透明度和位移的过渡动画 */\r\n.el-menu-item {\r\n  transition:\r\n    opacity 0.3s ease,\r\n    transform 0.3s ease;\r\n}\r\n\r\n/* 非激活菜单项悬停时的样式，透明度降低并向上偏移 */\r\n.el-menu-item:not(.is-active):hover {\r\n  opacity: 0.8;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* 子菜单标题过渡效果，设置透明度的过渡动画 */\r\n.el-submenu__title {\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n/* 子菜单悬停时标题的样式，透明度降低 */\r\n.el-submenu:hover .el-submenu__title {\r\n  opacity: 0.9;\r\n}\r\n\r\n/* 路由视图样式，设置白色背景并调整透明度为 0.8 */\r\n.router-view {\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}