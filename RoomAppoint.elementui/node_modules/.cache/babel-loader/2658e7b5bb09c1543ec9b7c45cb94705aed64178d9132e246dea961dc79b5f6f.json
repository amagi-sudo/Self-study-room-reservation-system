{"ast":null,"code":"import { ReplaceImageHttp, GetFileNameByPath } from \"@/utils/comm.js\";\nimport store from \"@/store\";\nexport default {\n  name: \"UploadImages\",\n  props: {\n    value: {\n      type: [Number, String],\n      default: ''\n    },\n    limit: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      uploadUrl: process.env.VUE_APP_BASE_API + \"/File/BatchUpload\",\n      dialogImageUrl: \"\",\n      fileList: []\n    };\n  },\n  mounted() {\n    //第一次进来绑定对应的值\n    if (this.$props.value) {\n      this.fileList = this.$props.value.split(\",\").map(x => {\n        return {\n          url: ReplaceImageHttp(x),\n          name: GetFileNameByPath(ReplaceImageHttp(x)),\n          status: \"success\"\n        };\n      });\n    }\n  },\n  methods: {\n    /**\r\n     * 得到成功的文件集合对象\r\n     * @param files \r\n     */\n    FileListConvert(files) {\n      let list = [];\n      if (Array.isArray(files)) {\n        files.filter(x => x.status == \"success\").forEach(item => {\n          if (item.response != null) {\n            list = [...list, {\n              name: \"\",\n              url: ReplaceImageHttp(item.response.Data[0].Url)\n            }];\n          } else {\n            list = [...list, item];\n          }\n        });\n      }\n      return list;\n    },\n    /**\r\n     *  文件上传成功处理\r\n     * @param response 响应\r\n     * @param file  当前文件\r\n     * @param fileList  所有文件\r\n     */\n    async handleUploadSuccess(response, file, fileList) {\n      let fs = this.FileListConvert(fileList);\n      let url = fs.length > 0 ? fs.map(x => x.url).join(\",\") : \"\";\n      this.$emit('input', url);\n    },\n    /**\r\n     *  文件移除处理\r\n     * @param file  当前文件\r\n     * @param fileList  所有文件\r\n     */\n    async handleRemove(file, fileList) {\n      let fs = this.FileListConvert(fileList);\n      let url = fs.length > 0 ? fs.map(x => x.url).join(\",\") : \"\";\n      this.$emit('input', url);\n    }\n  }\n};","map":{"version":3,"names":["ReplaceImageHttp","GetFileNameByPath","store","name","props","value","type","Number","String","default","limit","data","uploadUrl","process","env","VUE_APP_BASE_API","dialogImageUrl","fileList","mounted","$props","split","map","x","url","status","methods","FileListConvert","files","list","Array","isArray","filter","forEach","item","response","Data","Url","handleUploadSuccess","file","fs","length","join","$emit","handleRemove"],"sources":["src/components/Upload/UploadFiles.vue"],"sourcesContent":["<template>\r\n    <div class=\"upload-files-wrap\">\r\n        <el-upload :action=\"uploadUrl\" list-type=\"text\" :show-file-list=\"true\" :on-success=\"handleUploadSuccess\"\r\n            :on-remove=\"handleRemove\" :file-list=\"fileList\" :limit=\"limit\" :multiple=\"true\">\r\n            <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n            <div slot=\"tip\" class=\"el-upload__tip\">请上传资源文件<span\r\n                    style=\"padding-left:10px;color:rgb(237, 95, 24)\">最大可上传大小不超过1GB:</span>\r\n            </div>\r\n        </el-upload>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ReplaceImageHttp, GetFileNameByPath } from \"@/utils/comm.js\";\r\nimport store from \"@/store\";\r\nexport default {\r\n    name: \"UploadImages\",\r\n    props: {\r\n        value: { type: [Number, String], default: '' },\r\n        limit: {\r\n            type: Number,\r\n            default: 1,\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            uploadUrl: process.env.VUE_APP_BASE_API + \"/File/BatchUpload\",\r\n            dialogImageUrl: \"\",\r\n            fileList: []\r\n\r\n        };\r\n    },\r\n\r\n    mounted() {\r\n        //第一次进来绑定对应的值\r\n        if (this.$props.value) {\r\n            this.fileList = this.$props.value.split(\",\").map(x => { return { url: ReplaceImageHttp(x), name: GetFileNameByPath(ReplaceImageHttp(x)), status: \"success\" }; });\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        /**\r\n         * 得到成功的文件集合对象\r\n         * @param files \r\n         */\r\n        FileListConvert(files) {\r\n            let list = [];\r\n            if (Array.isArray(files)) {\r\n                files.filter(x => x.status == \"success\").forEach((item) => {\r\n                    if (item.response != null) {\r\n                        list = [...list, { name: \"\", url: ReplaceImageHttp(item.response.Data[0].Url) }];\r\n                    }\r\n                    else {\r\n                        list = [...list, item];\r\n                    }\r\n                })\r\n            }\r\n            return list;\r\n        },\r\n        /**\r\n         *  文件上传成功处理\r\n         * @param response 响应\r\n         * @param file  当前文件\r\n         * @param fileList  所有文件\r\n         */\r\n        async handleUploadSuccess(response, file, fileList) {\r\n            let fs = this.FileListConvert(fileList);\r\n            let url = fs.length > 0 ? fs.map(x => x.url).join(\",\") : \"\";\r\n            this.$emit('input', url);\r\n        },\r\n\r\n        /**\r\n         *  文件移除处理\r\n         * @param file  当前文件\r\n         * @param fileList  所有文件\r\n         */\r\n        async handleRemove(file, fileList) {\r\n            let fs = this.FileListConvert(fileList);\r\n            let url = fs.length > 0 ? fs.map(x => x.url).join(\",\") : \"\";\r\n            this.$emit('input', url);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.uploadImage {\r\n    background-color: transparent;\r\n}\r\n\r\n.el-upload--picture-card {\r\n    background-color: transparent !important;\r\n}\r\n</style>"],"mappings":"AAaA,SAAAA,gBAAA,EAAAC,iBAAA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA;MAAAC,IAAA,GAAAC,MAAA,EAAAC,MAAA;MAAAC,OAAA;IAAA;IACAC,KAAA;MACAJ,IAAA,EAAAC,MAAA;MACAE,OAAA;IACA;EACA;EACAE,KAAA;IACA;MACAC,SAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,gBAAA;MACAC,cAAA;MACAC,QAAA;IAEA;EACA;EAEAC,QAAA;IACA;IACA,SAAAC,MAAA,CAAAd,KAAA;MACA,KAAAY,QAAA,QAAAE,MAAA,CAAAd,KAAA,CAAAe,KAAA,MAAAC,GAAA,CAAAC,CAAA;QAAA;UAAAC,GAAA,EAAAvB,gBAAA,CAAAsB,CAAA;UAAAnB,IAAA,EAAAF,iBAAA,CAAAD,gBAAA,CAAAsB,CAAA;UAAAE,MAAA;QAAA;MAAA;IACA;EACA;EAEAC,OAAA;IACA;AACA;AACA;AACA;IACAC,gBAAAC,KAAA;MACA,IAAAC,IAAA;MACA,IAAAC,KAAA,CAAAC,OAAA,CAAAH,KAAA;QACAA,KAAA,CAAAI,MAAA,CAAAT,CAAA,IAAAA,CAAA,CAAAE,MAAA,eAAAQ,OAAA,CAAAC,IAAA;UACA,IAAAA,IAAA,CAAAC,QAAA;YACAN,IAAA,OAAAA,IAAA;cAAAzB,IAAA;cAAAoB,GAAA,EAAAvB,gBAAA,CAAAiC,IAAA,CAAAC,QAAA,CAAAC,IAAA,IAAAC,GAAA;YAAA;UACA,OACA;YACAR,IAAA,OAAAA,IAAA,EAAAK,IAAA;UACA;QACA;MACA;MACA,OAAAL,IAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,MAAAS,oBAAAH,QAAA,EAAAI,IAAA,EAAArB,QAAA;MACA,IAAAsB,EAAA,QAAAb,eAAA,CAAAT,QAAA;MACA,IAAAM,GAAA,GAAAgB,EAAA,CAAAC,MAAA,OAAAD,EAAA,CAAAlB,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,GAAA,EAAAkB,IAAA;MACA,KAAAC,KAAA,UAAAnB,GAAA;IACA;IAEA;AACA;AACA;AACA;AACA;IACA,MAAAoB,aAAAL,IAAA,EAAArB,QAAA;MACA,IAAAsB,EAAA,QAAAb,eAAA,CAAAT,QAAA;MACA,IAAAM,GAAA,GAAAgB,EAAA,CAAAC,MAAA,OAAAD,EAAA,CAAAlB,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,GAAA,EAAAkB,IAAA;MACA,KAAAC,KAAA,UAAAnB,GAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}