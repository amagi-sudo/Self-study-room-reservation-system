{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      musicList: [],\n      currentMusic: null,\n      currentLyric: null,\n      currentLineNum: 0,\n      lyricOffset: 0\n    };\n  },\n  methods: {\n    handleSuccess(response, file, fileList) {\n      this.musicList.push({\n        name: file.name,\n        url: response.url\n      });\n    },\n    beforeUpload(file) {\n      const isMp4 = file.type === 'video/mp4';\n      if (!isMp4) {\n        this.$message.error('只能上传 MP4 文件!');\n      }\n      return isMp4;\n    },\n    playMusic(music) {\n      this.currentMusic = music;\n      this.$refs.audio.src = music.url;\n      this.$refs.audio.play();\n    },\n    updateLyric() {\n      if (this.currentLyric) {\n        const currentTime = this.$refs.audio.currentTime;\n        const lineNum = this.currentLyric.findLineNum(currentTime);\n        if (lineNum !== this.currentLineNum) {\n          this.currentLineNum = lineNum;\n          this.lyricOffset = -lineNum * 32; // 假设每行歌词高度为 32px\n        }\n      }\n    },\n    loadLyric(music) {\n      const lyricUrl = music.url.replace('.mp4', '.lrc');\n      fetch(lyricUrl).then(response => response.text()).then(data => {\n        this.currentLyric = this.parseLyric(data);\n      }).catch(() => {\n        this.currentLyric = null;\n      });\n    },\n    parseLyric(lyricText) {\n      const lines = lyricText.split('\\n').map(line => {\n        const parts = line.match(/\\[(\\d{2}:\\d{2}\\.\\d{2})\\](.*)/);\n        if (parts) {\n          return {\n            time: this.parseTime(parts[1]),\n            text: parts[2]\n          };\n        }\n        return null;\n      }).filter(line => line !== null);\n      return {\n        lines,\n        findLineNum: time => {\n          for (let i = 0; i < lines.length; i++) {\n            if (time < lines[i].time) {\n              return i - 1;\n            }\n          }\n          return lines.length - 1;\n        }\n      };\n    },\n    parseTime(timeStr) {\n      const [minutes, seconds] = timeStr.split(':').map(Number);\n      return minutes * 60 + seconds;\n    }\n  },\n  watch: {\n    currentMusic(newVal) {\n      if (newVal) {\n        this.loadLyric(newVal);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","musicList","currentMusic","currentLyric","currentLineNum","lyricOffset","methods","handleSuccess","response","file","fileList","push","name","url","beforeUpload","isMp4","type","$message","error","playMusic","music","$refs","audio","src","play","updateLyric","currentTime","lineNum","findLineNum","loadLyric","lyricUrl","replace","fetch","then","text","parseLyric","catch","lyricText","lines","split","map","line","parts","match","time","parseTime","filter","i","length","timeStr","minutes","seconds","Number","watch","newVal"],"sources":["src/views/Admin/MusicPlayer.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-upload action=\"http://localhost:8080/#/Admin/MusicPlayer/api/upload\" :on-success=\"handleSuccess\"\r\n      :before-upload=\"beforeUpload\" list-type=\"text\" accept=\".mp4\">\r\n      <el-button size=\"small\" type=\"primary\">上传歌曲</el-button>\r\n    </el-upload>\r\n    <el-table :data=\"musicList\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"歌曲名称\"></el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button @click=\"playMusic(scope.row)\" type=\"text\" size=\"small\">播放</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <audio ref=\"audio\" @timeupdate=\"updateLyric\" style=\"display: none;\"></audio>\r\n    <div v-if=\"currentLyric\" class=\"lyric-container\">\r\n      <div class=\"lyric\" :style=\"{ transform: `translateY(${lyricOffset}px)` }\">\r\n        <p v-for=\"(line, index) in currentLyric.lines\" :key=\"index\" :class=\"{ active: currentLineNum === index }\">\r\n          {{ line.text }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      musicList: [],\r\n      currentMusic: null,\r\n      currentLyric: null,\r\n      currentLineNum: 0,\r\n      lyricOffset: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    handleSuccess(response, file, fileList) {\r\n      this.musicList.push({ name: file.name, url: response.url });\r\n    },\r\n    beforeUpload(file) {\r\n      const isMp4 = file.type === 'video/mp4';\r\n      if (!isMp4) {\r\n        this.$message.error('只能上传 MP4 文件!');\r\n      }\r\n      return isMp4;\r\n    },\r\n    playMusic(music) {\r\n      this.currentMusic = music;\r\n      this.$refs.audio.src = music.url;\r\n      this.$refs.audio.play();\r\n    },\r\n    updateLyric() {\r\n      if (this.currentLyric) {\r\n        const currentTime = this.$refs.audio.currentTime;\r\n        const lineNum = this.currentLyric.findLineNum(currentTime);\r\n        if (lineNum !== this.currentLineNum) {\r\n          this.currentLineNum = lineNum;\r\n          this.lyricOffset = -lineNum * 32; // 假设每行歌词高度为 32px\r\n        }\r\n      }\r\n    },\r\n    loadLyric(music) {\r\n      const lyricUrl = music.url.replace('.mp4', '.lrc');\r\n      fetch(lyricUrl)\r\n        .then(response => response.text())\r\n        .then(data => {\r\n          this.currentLyric = this.parseLyric(data);\r\n        })\r\n        .catch(() => {\r\n          this.currentLyric = null;\r\n        });\r\n    },\r\n    parseLyric(lyricText) {\r\n      const lines = lyricText.split('\\n').map(line => {\r\n        const parts = line.match(/\\[(\\d{2}:\\d{2}\\.\\d{2})\\](.*)/);\r\n        if (parts) {\r\n          return {\r\n            time: this.parseTime(parts[1]),\r\n            text: parts[2],\r\n          };\r\n        }\r\n        return null;\r\n      }).filter(line => line !== null);\r\n      return {\r\n        lines, findLineNum: (time) => {\r\n          for (let i = 0; i < lines.length; i++) {\r\n            if (time < lines[i].time) {\r\n              return i - 1;\r\n            }\r\n          }\r\n          return lines.length - 1;\r\n        }\r\n      };\r\n    },\r\n    parseTime(timeStr) {\r\n      const [minutes, seconds] = timeStr.split(':').map(Number);\r\n      return minutes * 60 + seconds;\r\n    },\r\n  },\r\n  watch: {\r\n    currentMusic(newVal) {\r\n      if (newVal) {\r\n        this.loadLyric(newVal);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.lyric-container {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 300px;\r\n  height: 200px;\r\n  overflow: hidden;\r\n  border: 1px solid #ccc;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.lyric {\r\n  transition: transform 0.3s;\r\n}\r\n\r\n.lyric p {\r\n  margin: 0;\r\n  padding: 0;\r\n  line-height: 32px;\r\n}\r\n\r\n.lyric p.active {\r\n  color: red;\r\n}\r\n</style>\r\n"],"mappings":";AA0BA;EACAA,KAAA;IACA;MACAC,SAAA;MACAC,YAAA;MACAC,YAAA;MACAC,cAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA,KAAAT,SAAA,CAAAU,IAAA;QAAAC,IAAA,EAAAH,IAAA,CAAAG,IAAA;QAAAC,GAAA,EAAAL,QAAA,CAAAK;MAAA;IACA;IACAC,aAAAL,IAAA;MACA,MAAAM,KAAA,GAAAN,IAAA,CAAAO,IAAA;MACA,KAAAD,KAAA;QACA,KAAAE,QAAA,CAAAC,KAAA;MACA;MACA,OAAAH,KAAA;IACA;IACAI,UAAAC,KAAA;MACA,KAAAlB,YAAA,GAAAkB,KAAA;MACA,KAAAC,KAAA,CAAAC,KAAA,CAAAC,GAAA,GAAAH,KAAA,CAAAP,GAAA;MACA,KAAAQ,KAAA,CAAAC,KAAA,CAAAE,IAAA;IACA;IACAC,YAAA;MACA,SAAAtB,YAAA;QACA,MAAAuB,WAAA,QAAAL,KAAA,CAAAC,KAAA,CAAAI,WAAA;QACA,MAAAC,OAAA,QAAAxB,YAAA,CAAAyB,WAAA,CAAAF,WAAA;QACA,IAAAC,OAAA,UAAAvB,cAAA;UACA,KAAAA,cAAA,GAAAuB,OAAA;UACA,KAAAtB,WAAA,IAAAsB,OAAA;QACA;MACA;IACA;IACAE,UAAAT,KAAA;MACA,MAAAU,QAAA,GAAAV,KAAA,CAAAP,GAAA,CAAAkB,OAAA;MACAC,KAAA,CAAAF,QAAA,EACAG,IAAA,CAAAzB,QAAA,IAAAA,QAAA,CAAA0B,IAAA,IACAD,IAAA,CAAAjC,IAAA;QACA,KAAAG,YAAA,QAAAgC,UAAA,CAAAnC,IAAA;MACA,GACAoC,KAAA;QACA,KAAAjC,YAAA;MACA;IACA;IACAgC,WAAAE,SAAA;MACA,MAAAC,KAAA,GAAAD,SAAA,CAAAE,KAAA,OAAAC,GAAA,CAAAC,IAAA;QACA,MAAAC,KAAA,GAAAD,IAAA,CAAAE,KAAA;QACA,IAAAD,KAAA;UACA;YACAE,IAAA,OAAAC,SAAA,CAAAH,KAAA;YACAR,IAAA,EAAAQ,KAAA;UACA;QACA;QACA;MACA,GAAAI,MAAA,CAAAL,IAAA,IAAAA,IAAA;MACA;QACAH,KAAA;QAAAV,WAAA,EAAAgB,IAAA;UACA,SAAAG,CAAA,MAAAA,CAAA,GAAAT,KAAA,CAAAU,MAAA,EAAAD,CAAA;YACA,IAAAH,IAAA,GAAAN,KAAA,CAAAS,CAAA,EAAAH,IAAA;cACA,OAAAG,CAAA;YACA;UACA;UACA,OAAAT,KAAA,CAAAU,MAAA;QACA;MACA;IACA;IACAH,UAAAI,OAAA;MACA,OAAAC,OAAA,EAAAC,OAAA,IAAAF,OAAA,CAAAV,KAAA,MAAAC,GAAA,CAAAY,MAAA;MACA,OAAAF,OAAA,QAAAC,OAAA;IACA;EACA;EACAE,KAAA;IACAnD,aAAAoD,MAAA;MACA,IAAAA,MAAA;QACA,KAAAzB,SAAA,CAAAyB,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}