{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ValidCode from '@/components/Code/canvas.vue'; // 验证码组件（保持原有）\n\nexport default {\n  components: {\n    ValidCode\n  },\n  data() {\n    return {\n      formData: {\n        // 表单数据（保持原有）\n        UserName: '',\n        Password: '',\n        Email: '',\n        PhoneNumber: '',\n        Name: '',\n        Code: ''\n      },\n      rules: {\n        // 表单验证规则（保持原有）\n        UserName: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }],\n        Password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }],\n        Email: [{\n          required: true,\n          message: '请输入邮箱',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱格式',\n          trigger: 'blur'\n        }],\n        PhoneNumber: [{\n          required: true,\n          message: '请输入联系方式',\n          trigger: 'blur'\n        }, {\n          validator: (_, value, callback) => {\n            if (!/^1[3-9]\\d{9}$/.test(value)) callback(new Error('请输入正确的手机号'));else callback();\n          },\n          trigger: 'blur'\n        }],\n        Name: [{\n          required: true,\n          message: '请输入姓名',\n          trigger: 'blur'\n        }],\n        Code: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          validator: (_, value, callback) => {\n            const code = this.$refs.ValidCode.getCode();\n            if (value !== code) callback(new Error('验证码错误'));else callback();\n          },\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    this.initStarrySky(); // 初始化星空背景\n  },\n  methods: {\n    // 关键修改：星空背景动画逻辑\n    initStarrySky() {\n      const canvas = document.getElementById('starrySky');\n      const ctx = canvas.getContext('2d');\n\n      // 初始化画布尺寸（覆盖全屏）\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      canvas.style.position = 'fixed';\n      canvas.style.top = '0';\n      canvas.style.left = '0';\n      canvas.style.zIndex = '-1'; // 确保在最底层\n\n      // 生成随机星星（1000颗）\n      const stars = [];\n      const starCount = 1000;\n      for (let i = 0; i < starCount; i++) {\n        stars.push({\n          x: Math.random() * canvas.width,\n          // 随机x坐标\n          y: Math.random() * canvas.height,\n          // 随机y坐标\n          size: Math.random() * 1.5 + 0.5,\n          // 随机大小（0.5~2）\n          speedX: (Math.random() - 0.5) * 1,\n          // 随机横向速度（-0.5~0.5）\n          speedY: (Math.random() - 0.5) * 1 // 随机纵向速度（-0.5~0.5）\n        });\n      }\n\n      // 动画循环\n      const animate = () => {\n        // 清空画布（深蓝色背景）\n        ctx.fillStyle = '#000033';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // 更新每颗星星的位置并绘制\n        stars.forEach(star => {\n          // 移动星星\n          star.x += star.speedX;\n          star.y += star.speedY;\n\n          // 边界反弹（碰到窗口边缘时反转方向）\n          if (star.x < 0 || star.x > canvas.width) star.speedX = -star.speedX;\n          if (star.y < 0 || star.y > canvas.height) star.speedY = -star.speedY;\n\n          // 绘制星星（黄色，带模糊阴影）\n          ctx.beginPath();\n          ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n          ctx.fillStyle = '#FFFF00';\n          ctx.shadowColor = '#FFFF00';\n          ctx.shadowBlur = star.size * 2; // 阴影模糊度随星星大小变化\n          ctx.fill();\n        });\n\n        // 递归调用实现动画\n        requestAnimationFrame(animate);\n      };\n\n      // 启动动画\n      animate();\n\n      // 窗口尺寸变化时调整画布\n      window.addEventListener('resize', () => {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n      });\n    },\n    // 注册按钮逻辑（保持原有）\n    async RegisterBtn() {\n      this.$refs.loginForm.validate(async valid => {\n        if (valid) {\n          // 实际使用时替换为真实接口\n          const res = {\n            Success: true\n          };\n          if (res.Success) {\n            this.$message.success('注册成功！');\n            this.$router.push('/Login');\n          } else {\n            this.$refs.ValidCode.refreshCode();\n            this.$message.error('注册失败，请重试');\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["ValidCode","components","data","formData","UserName","Password","Email","PhoneNumber","Name","Code","rules","required","message","trigger","type","validator","_","value","callback","test","Error","code","$refs","getCode","mounted","initStarrySky","methods","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","style","position","top","left","zIndex","stars","starCount","i","push","x","Math","random","y","size","speedX","speedY","animate","fillStyle","fillRect","forEach","star","beginPath","arc","PI","shadowColor","shadowBlur","fill","requestAnimationFrame","addEventListener","RegisterBtn","loginForm","validate","valid","res","Success","$message","success","$router","refreshCode","error"],"sources":["src/views/Register.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas id=\"starrySky\"></canvas> <!-- 星空背景画布 -->\n    <div style=\"height: 100vh; display: flex; align-items: center; justify-content: center;\">\n      <!-- 注册表单容器（保持原有样式） -->\n      <div\n        style=\"background-color: rgba(255, 255, 255, 0.8); padding: 40px 60px; border-radius: 15px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1); width: 500px;\">\n        <h2 class=\"welcome-title\" style=\"margin-bottom: 30px; font-size: 22px; text-align: center;\">用户注册</h2>\n        <el-form ref=\"loginForm\" :model=\"formData\" label-width=\"80px\" label-position=\"left\" :rules=\"rules\">\n          <!-- 表单字段（保持原有） -->\n          <el-form-item label=\"账号\" prop=\"UserName\" style=\"margin-bottom: 20px;\">\n            <el-input type=\"text\" v-model.trim=\"formData.UserName\" placeholder=\"请输入账号\" />\n          </el-form-item>\n          <el-form-item label=\"密码\" prop=\"Password\" style=\"margin-bottom: 20px;\">\n            <el-input type=\"password\" v-model.trim=\"formData.Password\" placeholder=\"请输入密码\" />\n          </el-form-item>\n          <el-form-item label=\"邮箱\" prop=\"Email\" style=\"margin-bottom: 20px;\">\n            <el-input type=\"email\" v-model.trim=\"formData.Email\" placeholder=\"请输入邮箱\" />\n          </el-form-item>\n          <el-form-item label=\"联系方式\" prop=\"PhoneNumber\" style=\"margin-bottom: 20px;\">\n            <el-input type=\"tel\" v-model.trim=\"formData.PhoneNumber\" placeholder=\"请输入联系方式\" />\n          </el-form-item>\n          <el-form-item label=\"姓名\" prop=\"Name\" style=\"margin-bottom: 20px;\">\n            <el-input type=\"text\" v-model.trim=\"formData.Name\" placeholder=\"请输入姓名\" />\n          </el-form-item>\n          <el-form-item label=\"验证码\" prop=\"Code\"\n            style=\"margin-bottom: 25px; display: flex; align-items: center; gap: 15px; box-sizing: border-box;\">\n            <template #label><span style=\"line-height: 44px;\">验证码</span></template>\n            <el-input type=\"text\" v-model.trim=\"formData.Code\" placeholder=\"请输入验证码\" style=\"flex: 1;\" />\n            <div style=\"width: 120px; height: 44px;\">\n              <ValidCode ref=\"ValidCode\" />\n            </div>\n          </el-form-item>\n          <el-form-item style=\"margin-bottom: 30px;\">\n            <el-button type=\"primary\" @click=\"RegisterBtn\"\n              style=\"width: 100%; height: 48px; font-size: 16px; letter-spacing: 2px;\">注 册</el-button>\n          </el-form-item>\n        </el-form>\n        <div style=\"text-align: center; font-size: 14px;\">\n          已有账号？<RouterLink :to=\"{ path: '/Login' }\" style=\"color: #E91E63; font-weight: 500; margin-left: 8px;\">立即登录\n          </RouterLink>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ValidCode from '@/components/Code/canvas.vue'  // 验证码组件（保持原有）\n\nexport default {\n  components: { ValidCode },\n  data() {\n    return {\n      formData: {  // 表单数据（保持原有）\n        UserName: '',\n        Password: '',\n        Email: '',\n        PhoneNumber: '',\n        Name: '',\n        Code: ''\n      },\n      rules: {  // 表单验证规则（保持原有）\n        UserName: [{ required: true, message: '请输入账号', trigger: 'blur' }],\n        Password: [{ required: true, message: '请输入密码', trigger: 'blur' }],\n        Email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n        ],\n        PhoneNumber: [\n          { required: true, message: '请输入联系方式', trigger: 'blur' },\n          {\n            validator: (_, value, callback) => {\n              if (!/^1[3-9]\\d{9}$/.test(value)) callback(new Error('请输入正确的手机号'));\n              else callback();\n            }, trigger: 'blur'\n          }\n        ],\n        Name: [{ required: true, message: '请输入姓名', trigger: 'blur' }],\n        Code: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          {\n            validator: (_, value, callback) => {\n              const code = this.$refs.ValidCode.getCode()\n              if (value !== code) callback(new Error('验证码错误'));\n              else callback();\n            }, trigger: 'blur'\n          }\n        ]\n      }\n    }\n  },\n  mounted() {\n    this.initStarrySky()  // 初始化星空背景\n  },\n  methods: {\n    // 关键修改：星空背景动画逻辑\n    initStarrySky() {\n      const canvas = document.getElementById('starrySky')\n      const ctx = canvas.getContext('2d')\n\n      // 初始化画布尺寸（覆盖全屏）\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n      canvas.style.position = 'fixed'\n      canvas.style.top = '0'\n      canvas.style.left = '0'\n      canvas.style.zIndex = '-1'  // 确保在最底层\n\n      // 生成随机星星（1000颗）\n      const stars = []\n      const starCount = 1000\n      for (let i = 0; i < starCount; i++) {\n        stars.push({\n          x: Math.random() * canvas.width,  // 随机x坐标\n          y: Math.random() * canvas.height, // 随机y坐标\n          size: Math.random() * 1.5 + 0.5,  // 随机大小（0.5~2）\n          speedX: (Math.random() - 0.5) * 1,  // 随机横向速度（-0.5~0.5）\n          speedY: (Math.random() - 0.5) * 1   // 随机纵向速度（-0.5~0.5）\n        })\n      }\n\n      // 动画循环\n      const animate = () => {\n        // 清空画布（深蓝色背景）\n        ctx.fillStyle = '#000033'\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n        // 更新每颗星星的位置并绘制\n        stars.forEach(star => {\n          // 移动星星\n          star.x += star.speedX\n          star.y += star.speedY\n\n          // 边界反弹（碰到窗口边缘时反转方向）\n          if (star.x < 0 || star.x > canvas.width) star.speedX = -star.speedX\n          if (star.y < 0 || star.y > canvas.height) star.speedY = -star.speedY\n\n          // 绘制星星（黄色，带模糊阴影）\n          ctx.beginPath()\n          ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2)\n          ctx.fillStyle = '#FFFF00'\n          ctx.shadowColor = '#FFFF00'\n          ctx.shadowBlur = star.size * 2  // 阴影模糊度随星星大小变化\n          ctx.fill()\n        })\n\n        // 递归调用实现动画\n        requestAnimationFrame(animate)\n      }\n\n      // 启动动画\n      animate()\n\n      // 窗口尺寸变化时调整画布\n      window.addEventListener('resize', () => {\n        canvas.width = window.innerWidth\n        canvas.height = window.innerHeight\n      })\n    },\n\n    // 注册按钮逻辑（保持原有）\n    async RegisterBtn() {\n      this.$refs.loginForm.validate(async (valid) => {\n        if (valid) {\n          // 实际使用时替换为真实接口\n          const res = { Success: true }\n          if (res.Success) {\n            this.$message.success('注册成功！')\n            this.$router.push('/Login')\n          } else {\n            this.$refs.ValidCode.refreshCode()\n            this.$message.error('注册失败，请重试')\n          }\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 标题样式（保持原有） */\n.welcome-title {\n  font-size: 22px;\n  font-weight: 600;\n  background: linear-gradient(90deg, #4f6d7a 20%, #6a8b9a 50%, #8b9bb7 80%);\n  -webkit-background-clip: text;\n  color: transparent;\n  text-align: center;\n  letter-spacing: 1.5px;\n  line-height: 1.4;\n  margin-bottom: 20px;\n}\n\n/* 输入框样式（保持原有） */\n.el-input__inner {\n  transition: all 0.3s ease;\n  border-radius: 8px;\n  border: 1px solid #ebeef5;\n}\n\n.el-input__inner:focus {\n  border-color: #4f6d7a !important;\n  box-shadow: 0 0 0 2px rgba(79, 109, 122, 0.1);\n}\n\n/* 注册按钮样式（保持原有） */\n.el-button--primary {\n  background-color: #4f6d7a;\n  border-color: #4f6d7a;\n  border-radius: 8px;\n  font-weight: 500;\n}\n\n.el-button--primary:hover {\n  background-color: #6a8b9a;\n  transform: translateY(-2px);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}