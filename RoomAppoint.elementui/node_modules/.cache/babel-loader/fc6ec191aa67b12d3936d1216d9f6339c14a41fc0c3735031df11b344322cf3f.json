{"ast":null,"code":"import\"core-js/modules/es.array.push.js\";import\"core-js/modules/es.array-buffer.detached.js\";import\"core-js/modules/es.array-buffer.transfer.js\";import\"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";import\"core-js/modules/es.typed-array.to-reversed.js\";import\"core-js/modules/es.typed-array.to-sorted.js\";import\"core-js/modules/es.typed-array.with.js\";import\"core-js/modules/esnext.set.difference.v2.js\";import\"core-js/modules/esnext.set.intersection.v2.js\";import\"core-js/modules/esnext.set.is-disjoint-from.v2.js\";import\"core-js/modules/esnext.set.is-subset-of.v2.js\";import\"core-js/modules/esnext.set.is-superset-of.v2.js\";import\"core-js/modules/esnext.set.symmetric-difference.v2.js\";import\"core-js/modules/esnext.set.union.v2.js\";/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */const REVISION='176';/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsMouse}\n * @constant\n */const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};/**\n * Represents touch interaction types in context of controls.\n *\n * @type {ConstantsTouch}\n * @constant\n */const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};/**\n * Disables face culling.\n *\n * @type {number}\n * @constant\n */const CullFaceNone=0;/**\n * Culls back faces.\n *\n * @type {number}\n * @constant\n */const CullFaceBack=1;/**\n * Culls front faces.\n *\n * @type {number}\n * @constant\n */const CullFaceFront=2;/**\n * Culls both front and back faces.\n *\n * @type {number}\n * @constant\n */const CullFaceFrontBack=3;/**\n * Gives unfiltered shadow maps - fastest, but lowest quality.\n *\n * @type {number}\n * @constant\n */const BasicShadowMap=0;/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\n *\n * @type {number}\n * @constant\n */const PCFShadowMap=1;/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\n * better soft shadows especially when using low-resolution shadow maps.\n *\n * @type {number}\n * @constant\n */const PCFSoftShadowMap=2;/**\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\n * When using VSMShadowMap all shadow receivers will also cast shadows.\n *\n * @type {number}\n * @constant\n */const VSMShadowMap=3;/**\n * Only front faces are rendered.\n *\n * @type {number}\n * @constant\n */const FrontSide=0;/**\n * Only back faces are rendered.\n *\n * @type {number}\n * @constant\n */const BackSide=1;/**\n * Both front and back faces are rendered.\n *\n * @type {number}\n * @constant\n */const DoubleSide=2;/**\n * No blending is performed which effectively disables\n * alpha transparency.\n *\n * @type {number}\n * @constant\n */const NoBlending=0;/**\n * The default blending.\n *\n * @type {number}\n * @constant\n */const NormalBlending=1;/**\n * Represents additive blending.\n *\n * @type {number}\n * @constant\n */const AdditiveBlending=2;/**\n * Represents subtractive blending.\n *\n * @type {number}\n * @constant\n */const SubtractiveBlending=3;/**\n * Represents multiply blending.\n *\n * @type {number}\n * @constant\n */const MultiplyBlending=4;/**\n * Represents custom blending.\n *\n * @type {number}\n * @constant\n */const CustomBlending=5;/**\n * A `source + destination` blending equation.\n *\n * @type {number}\n * @constant\n */const AddEquation=100;/**\n * A `source - destination` blending equation.\n *\n * @type {number}\n * @constant\n */const SubtractEquation=101;/**\n * A `destination - source` blending equation.\n *\n * @type {number}\n * @constant\n */const ReverseSubtractEquation=102;/**\n * A blend equation that uses the minimum of source and destination.\n *\n * @type {number}\n * @constant\n */const MinEquation=103;/**\n * A blend equation that uses the maximum of source and destination.\n *\n * @type {number}\n * @constant\n */const MaxEquation=104;/**\n * Multiplies all colors by `0`.\n *\n * @type {number}\n * @constant\n */const ZeroFactor=200;/**\n * Multiplies all colors by `1`.\n *\n * @type {number}\n * @constant\n */const OneFactor=201;/**\n * Multiplies all colors by the source colors.\n *\n * @type {number}\n * @constant\n */const SrcColorFactor=202;/**\n * Multiplies all colors by `1` minus each source color.\n *\n * @type {number}\n * @constant\n */const OneMinusSrcColorFactor=203;/**\n * Multiplies all colors by the source alpha value.\n *\n * @type {number}\n * @constant\n */const SrcAlphaFactor=204;/**\n * Multiplies all colors by 1 minus the source alpha value.\n *\n * @type {number}\n * @constant\n */const OneMinusSrcAlphaFactor=205;/**\n * Multiplies all colors by the destination alpha value.\n *\n * @type {number}\n * @constant\n */const DstAlphaFactor=206;/**\n * Multiplies all colors by `1` minus the destination alpha value.\n *\n * @type {number}\n * @constant\n */const OneMinusDstAlphaFactor=207;/**\n * Multiplies all colors by the destination color.\n *\n * @type {number}\n * @constant\n */const DstColorFactor=208;/**\n * Multiplies all colors by `1` minus each destination color.\n *\n * @type {number}\n * @constant\n */const OneMinusDstColorFactor=209;/**\n * Multiplies the RGB colors by the smaller of either the source alpha\n * value or the value of `1` minus the destination alpha value. The alpha\n * value is multiplied by `1`.\n *\n * @type {number}\n * @constant\n */const SrcAlphaSaturateFactor=210;/**\n * Multiplies all colors by a constant color.\n *\n * @type {number}\n * @constant\n */const ConstantColorFactor=211;/**\n * Multiplies all colors by `1` minus a constant color.\n *\n * @type {number}\n * @constant\n */const OneMinusConstantColorFactor=212;/**\n * Multiplies all colors by a constant alpha value.\n *\n * @type {number}\n * @constant\n */const ConstantAlphaFactor=213;/**\n * Multiplies all colors by 1 minus a constant alpha value.\n *\n * @type {number}\n * @constant\n */const OneMinusConstantAlphaFactor=214;/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */const NeverDepth=0;/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */const AlwaysDepth=1;/**\n * Pass if the incoming value is less than the depth buffer value.\n *\n * @type {number}\n * @constant\n */const LessDepth=2;/**\n * Pass if the incoming value is less than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */const LessEqualDepth=3;/**\n * Pass if the incoming value equals the depth buffer value.\n *\n * @type {number}\n * @constant\n */const EqualDepth=4;/**\n * Pass if the incoming value is greater than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */const GreaterEqualDepth=5;/**\n * Pass if the incoming value is greater than the depth buffer value.\n *\n * @type {number}\n * @constant\n */const GreaterDepth=6;/**\n * Pass if the incoming value is not equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */const NotEqualDepth=7;/**\n * Multiplies the environment map color with the surface color.\n *\n * @type {number}\n * @constant\n */const MultiplyOperation=0;/**\n * Uses reflectivity to blend between the two colors.\n *\n * @type {number}\n * @constant\n */const MixOperation=1;/**\n * Adds the two colors.\n *\n * @type {number}\n * @constant\n */const AddOperation=2;/**\n * No tone mapping is applied.\n *\n * @type {number}\n * @constant\n */const NoToneMapping=0;/**\n * Linear tone mapping.\n *\n * @type {number}\n * @constant\n */const LinearToneMapping=1;/**\n * Reinhard tone mapping.\n *\n * @type {number}\n * @constant\n */const ReinhardToneMapping=2;/**\n * Cineon tone mapping.\n *\n * @type {number}\n * @constant\n */const CineonToneMapping=3;/**\n * ACES Filmic tone mapping.\n *\n * @type {number}\n * @constant\n */const ACESFilmicToneMapping=4;/**\n * Custom tone mapping.\n *\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\n *\n * @type {number}\n * @constant\n */const CustomToneMapping=5;/**\n * AgX tone mapping.\n *\n * @type {number}\n * @constant\n */const AgXToneMapping=6;/**\n * Neutral tone mapping.\n *\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\n *\n * @type {number}\n * @constant\n */const NeutralToneMapping=7;/**\n * The skinned mesh shares the same world space as the skeleton.\n *\n * @type {string}\n * @constant\n */const AttachedBindMode='attached';/**\n * The skinned mesh does not share the same world space as the skeleton.\n * This is useful when a skeleton is shared across multiple skinned meshes.\n *\n * @type {string}\n * @constant\n */const DetachedBindMode='detached';/**\n * Maps textures using the geometry's UV coordinates.\n *\n * @type {number}\n * @constant\n */const UVMapping=300;/**\n * Reflection mapping for cube textures.\n *\n * @type {number}\n * @constant\n */const CubeReflectionMapping=301;/**\n * Refraction mapping for cube textures.\n *\n * @type {number}\n * @constant\n */const CubeRefractionMapping=302;/**\n * Reflection mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */const EquirectangularReflectionMapping=303;/**\n * Refraction mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */const EquirectangularRefractionMapping=304;/**\n * Reflection mapping for PMREM textures.\n *\n * @type {number}\n * @constant\n */const CubeUVReflectionMapping=306;/**\n * The texture will simply repeat to infinity.\n *\n * @type {number}\n * @constant\n */const RepeatWrapping=1000;/**\n * The last pixel of the texture stretches to the edge of the mesh.\n *\n * @type {number}\n * @constant\n */const ClampToEdgeWrapping=1001;/**\n * The texture will repeats to infinity, mirroring on each repeat.\n *\n * @type {number}\n * @constant\n */const MirroredRepeatWrapping=1002;/**\n * Returns the value of the texture element that is nearest (in Manhattan distance)\n * to the specified texture coordinates.\n *\n * @type {number}\n * @constant\n */const NearestFilter=1003;/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\n * to produce a texture value.\n *\n * @type {number}\n * @constant\n */const NearestMipmapNearestFilter=1004;const NearestMipMapNearestFilter=1004;// legacy\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */const NearestMipmapLinearFilter=1005;const NearestMipMapLinearFilter=1005;// legacy\n/**\n * Returns the weighted average of the four texture elements that are closest to the specified\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\n *\n * @type {number}\n * @constant\n */const LinearFilter=1006;/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\n * center of the pixel) to produce a texture value.\n *\n * @type {number}\n * @constant\n */const LinearMipmapNearestFilter=1007;const LinearMipMapNearestFilter=1007;// legacy\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\n * is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */const LinearMipmapLinearFilter=1008;const LinearMipMapLinearFilter=1008;// legacy\n/**\n * An unsigned byte data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedByteType=1009;/**\n * A byte data type for textures.\n *\n * @type {number}\n * @constant\n */const ByteType=1010;/**\n * A short data type for textures.\n *\n * @type {number}\n * @constant\n */const ShortType=1011;/**\n * An unsigned short data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedShortType=1012;/**\n * An int data type for textures.\n *\n * @type {number}\n * @constant\n */const IntType=1013;/**\n * An unsigned int data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedIntType=1014;/**\n * A float data type for textures.\n *\n * @type {number}\n * @constant\n */const FloatType=1015;/**\n * A half float data type for textures.\n *\n * @type {number}\n * @constant\n */const HalfFloatType=1016;/**\n * An unsigned short 4_4_4_4 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedShort4444Type=1017;/**\n * An unsigned short 5_5_5_1 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedShort5551Type=1018;/**\n * An unsigned int 24_8 data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedInt248Type=1020;/**\n * An unsigned int 5_9_9_9 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */const UnsignedInt5999Type=35902;/**\n * Discards the red, green and blue components and reads just the alpha component.\n *\n * @type {number}\n * @constant\n */const AlphaFormat=1021;/**\n * Discards the alpha component and reads the red, green and blue component.\n *\n * @type {number}\n * @constant\n */const RGBFormat=1022;/**\n * Reads the red, green, blue and alpha components.\n *\n * @type {number}\n * @constant\n */const RGBAFormat=1023;/**\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n *\n * @type {number}\n * @constant\n */const DepthFormat=1026;/**\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\n *\n * @type {number}\n * @constant\n */const DepthStencilFormat=1027;/**\n * Discards the green, blue and alpha components and reads just the red component.\n *\n * @type {number}\n * @constant\n */const RedFormat=1028;/**\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */const RedIntegerFormat=1029;/**\n * Discards the alpha, and blue components and reads the red, and green components.\n *\n * @type {number}\n * @constant\n */const RGFormat=1030;/**\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */const RGIntegerFormat=1031;/**\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */const RGBIntegerFormat=1032;/**\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */const RGBAIntegerFormat=1033;/**\n * A DXT1-compressed image in an RGB image format.\n *\n * @type {number}\n * @constant\n */const RGB_S3TC_DXT1_Format=33776;/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n *\n * @type {number}\n * @constant\n */const RGBA_S3TC_DXT1_Format=33777;/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n *\n * @type {number}\n * @constant\n */const RGBA_S3TC_DXT3_Format=33778;/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\n * compression in how the alpha compression is done.\n *\n * @type {number}\n * @constant\n */const RGBA_S3TC_DXT5_Format=33779;/**\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */const RGB_PVRTC_4BPPV1_Format=35840;/**\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */const RGB_PVRTC_2BPPV1_Format=35841;/**\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */const RGBA_PVRTC_4BPPV1_Format=35842;/**\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */const RGBA_PVRTC_2BPPV1_Format=35843;/**\n * ETC1 RGB format.\n *\n * @type {number}\n * @constant\n */const RGB_ETC1_Format=36196;/**\n * ETC2 RGB format.\n *\n * @type {number}\n * @constant\n */const RGB_ETC2_Format=37492;/**\n * ETC2 RGBA format.\n *\n * @type {number}\n * @constant\n */const RGBA_ETC2_EAC_Format=37496;/**\n * ASTC RGBA 4x4 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_4x4_Format=37808;/**\n * ASTC RGBA 5x4 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_5x4_Format=37809;/**\n * ASTC RGBA 5x5 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_5x5_Format=37810;/**\n * ASTC RGBA 6x5 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_6x5_Format=37811;/**\n * ASTC RGBA 6x6 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_6x6_Format=37812;/**\n * ASTC RGBA 8x5 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_8x5_Format=37813;/**\n * ASTC RGBA 8x6 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_8x6_Format=37814;/**\n * ASTC RGBA 8x8 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_8x8_Format=37815;/**\n * ASTC RGBA 10x5 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_10x5_Format=37816;/**\n * ASTC RGBA 10x6 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_10x6_Format=37817;/**\n * ASTC RGBA 10x8 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_10x8_Format=37818;/**\n * ASTC RGBA 10x10 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_10x10_Format=37819;/**\n * ASTC RGBA 12x10 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_12x10_Format=37820;/**\n * ASTC RGBA 12x12 format.\n *\n * @type {number}\n * @constant\n */const RGBA_ASTC_12x12_Format=37821;/**\n * BPTC RGBA format.\n *\n * @type {number}\n * @constant\n */const RGBA_BPTC_Format=36492;/**\n * BPTC Signed RGB format.\n *\n * @type {number}\n * @constant\n */const RGB_BPTC_SIGNED_Format=36494;/**\n * BPTC Unsigned RGB format.\n *\n * @type {number}\n * @constant\n */const RGB_BPTC_UNSIGNED_Format=36495;/**\n * RGTC1 Red format.\n *\n * @type {number}\n * @constant\n */const RED_RGTC1_Format=36283;/**\n * RGTC1 Signed Red format.\n *\n * @type {number}\n * @constant\n */const SIGNED_RED_RGTC1_Format=36284;/**\n * RGTC2 Red Green format.\n *\n * @type {number}\n * @constant\n */const RED_GREEN_RGTC2_Format=36285;/**\n * RGTC2 Signed Red Green format.\n *\n * @type {number}\n * @constant\n */const SIGNED_RED_GREEN_RGTC2_Format=36286;/**\n * Animations are played once.\n *\n * @type {number}\n * @constant\n */const LoopOnce=2200;/**\n * Animations are played with a chosen number of repetitions, each time jumping from\n * the end of the clip directly to its beginning.\n *\n * @type {number}\n * @constant\n */const LoopRepeat=2201;/**\n * Animations are played with a chosen number of repetitions, alternately playing forward\n * and backward.\n *\n * @type {number}\n * @constant\n */const LoopPingPong=2202;/**\n * Discrete interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */const InterpolateDiscrete=2300;/**\n * Linear interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */const InterpolateLinear=2301;/**\n * Smooth interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */const InterpolateSmooth=2302;/**\n * Zero curvature ending for animations.\n *\n * @type {number}\n * @constant\n */const ZeroCurvatureEnding=2400;/**\n * Zero slope ending for animations.\n *\n * @type {number}\n * @constant\n */const ZeroSlopeEnding=2401;/**\n * Wrap around ending for animations.\n *\n * @type {number}\n * @constant\n */const WrapAroundEnding=2402;/**\n * Default animation blend mode.\n *\n * @type {number}\n * @constant\n */const NormalAnimationBlendMode=2500;/**\n * Additive animation blend mode. Can be used to layer motions on top of\n * each other to build complex performances from smaller re-usable assets.\n *\n * @type {number}\n * @constant\n */const AdditiveAnimationBlendMode=2501;/**\n * For every three vertices draw a single triangle.\n *\n * @type {number}\n * @constant\n */const TrianglesDrawMode=0;/**\n * For each vertex draw a triangle from the last three vertices.\n *\n * @type {number}\n * @constant\n */const TriangleStripDrawMode=1;/**\n * For each vertex draw a triangle from the first vertex and the last two vertices.\n *\n * @type {number}\n * @constant\n */const TriangleFanDrawMode=2;/**\n * Basic depth packing.\n *\n * @type {number}\n * @constant\n */const BasicDepthPacking=3200;/**\n * A depth value is packed into 32 bit RGBA.\n *\n * @type {number}\n * @constant\n */const RGBADepthPacking=3201;/**\n * A depth value is packed into 24 bit RGB.\n *\n * @type {number}\n * @constant\n */const RGBDepthPacking=3202;/**\n * A depth value is packed into 16 bit RG.\n *\n * @type {number}\n * @constant\n */const RGDepthPacking=3203;/**\n * Normal information is relative to the underlying surface.\n *\n * @type {number}\n * @constant\n */const TangentSpaceNormalMap=0;/**\n * Normal information is relative to the object orientation.\n *\n * @type {number}\n * @constant\n */const ObjectSpaceNormalMap=1;// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n/**\n * No color space.\n *\n * @type {string}\n * @constant\n */const NoColorSpace='';/**\n * sRGB color space.\n *\n * @type {string}\n * @constant\n */const SRGBColorSpace='srgb';/**\n * sRGB-linear color space.\n *\n * @type {string}\n * @constant\n */const LinearSRGBColorSpace='srgb-linear';/**\n * Linear transfer function.\n *\n * @type {string}\n * @constant\n */const LinearTransfer='linear';/**\n * sRGB transfer function.\n *\n * @type {string}\n * @constant\n */const SRGBTransfer='srgb';/**\n * Sets the stencil buffer value to `0`.\n *\n * @type {number}\n * @constant\n */const ZeroStencilOp=0;/**\n * Keeps the current value.\n *\n * @type {number}\n * @constant\n */const KeepStencilOp=7680;/**\n * Sets the stencil buffer value to the specified reference value.\n *\n * @type {number}\n * @constant\n */const ReplaceStencilOp=7681;/**\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */const IncrementStencilOp=7682;/**\n * Decrements the current stencil buffer value. Clamps to `0`.\n *\n * @type {number}\n * @constant\n */const DecrementStencilOp=7683;/**\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\n * the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */const IncrementWrapStencilOp=34055;/**\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\n * unsigned value when decrementing a stencil buffer value of `0`.\n *\n * @type {number}\n * @constant\n */const DecrementWrapStencilOp=34056;/**\n * Inverts the current stencil buffer value bitwise.\n *\n * @type {number}\n * @constant\n */const InvertStencilOp=5386;/**\n * Will never return true.\n *\n * @type {number}\n * @constant\n */const NeverStencilFunc=512;/**\n * Will return true if the stencil reference value is less than the current stencil value.\n *\n * @type {number}\n * @constant\n */const LessStencilFunc=513;/**\n * Will return true if the stencil reference value is equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */const EqualStencilFunc=514;/**\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */const LessEqualStencilFunc=515;/**\n * Will return true if the stencil reference value is greater than the current stencil value.\n *\n * @type {number}\n * @constant\n */const GreaterStencilFunc=516;/**\n * Will return true if the stencil reference value is not equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */const NotEqualStencilFunc=517;/**\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */const GreaterEqualStencilFunc=518;/**\n * Will always return true.\n *\n * @type {number}\n * @constant\n */const AlwaysStencilFunc=519;/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */const NeverCompare=512;/**\n * Pass if the incoming value is less than the texture value.\n *\n * @type {number}\n * @constant\n */const LessCompare=513;/**\n * Pass if the incoming value equals the texture value.\n *\n * @type {number}\n * @constant\n */const EqualCompare=514;/**\n * Pass if the incoming value is less than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */const LessEqualCompare=515;/**\n * Pass if the incoming value is greater than the texture value.\n *\n * @type {number}\n * @constant\n */const GreaterCompare=516;/**\n * Pass if the incoming value is not equal to the texture value.\n *\n * @type {number}\n * @constant\n */const NotEqualCompare=517;/**\n * Pass if the incoming value is greater than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */const GreaterEqualCompare=518;/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */const AlwaysCompare=519;/**\n * The contents are intended to be specified once by the application, and used many\n * times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const StaticDrawUsage=35044;/**\n * The contents are intended to be respecified repeatedly by the application, and\n * used many times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const DynamicDrawUsage=35048;/**\n * The contents are intended to be specified once by the application, and used at most\n * a few times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const StreamDrawUsage=35040;/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */const StaticReadUsage=35045;/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */const DynamicReadUsage=35049;/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\n * a few times by the application\n *\n * @type {number}\n * @constant\n */const StreamReadUsage=35041;/**\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\n * the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const StaticCopyUsage=35046;/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const DynamicCopyUsage=35050;/**\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */const StreamCopyUsage=35042;/**\n * GLSL 1 shader code.\n *\n * @type {string}\n * @constant\n */const GLSL1='100';/**\n * GLSL 3 shader code.\n *\n * @type {string}\n * @constant\n */const GLSL3='300 es';/**\n * WebGL coordinate system.\n *\n * @type {number}\n * @constant\n */const WebGLCoordinateSystem=2000;/**\n * WebGPU coordinate system.\n *\n * @type {number}\n * @constant\n */const WebGPUCoordinateSystem=2001;/**\n * Represents the different timestamp query types.\n *\n * @type {ConstantsTimestampQuery}\n * @constant\n */const TimestampQuery={COMPUTE:'compute',RENDER:'render'};/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsInterpolationSamplingType}\n * @constant\n */const InterpolationSamplingType={PERSPECTIVE:'perspective',LINEAR:'linear',FLAT:'flat'};/**\n * Represents the different interpolation sampling modes.\n *\n * @type {ConstantsInterpolationSamplingMode}\n * @constant\n */const InterpolationSamplingMode={NORMAL:'normal',CENTROID:'centroid',SAMPLE:'sample',FLAT_FIRST:'flat first',FLAT_EITHER:'flat either'};/**\n * This type represents mouse buttons and interaction types in context of controls.\n *\n * @typedef {Object} ConstantsMouse\n * @property {number} MIDDLE - The left mouse button.\n * @property {number} LEFT - The middle mouse button.\n * @property {number} RIGHT - The right mouse button.\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} DOLLY - A dolly interaction.\n * @property {number} PAN - A pan interaction.\n **/ /**\n * This type represents touch interaction types in context of controls.\n *\n * @typedef {Object} ConstantsTouch\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} PAN - A pan interaction.\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\n **/ /**\n * This type represents the different timestamp query types.\n *\n * @typedef {Object} ConstantsTimestampQuery\n * @property {string} COMPUTE - A `compute` timestamp query.\n * @property {string} RENDER - A `render` timestamp query.\n **/ /**\n * Represents the different interpolation sampling types.\n *\n * @typedef {Object} ConstantsInterpolationSamplingType\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\n * @property {string} LINEAR - Linear interpolation.\n * @property {string} FLAT - Flat interpolation.\n */ /**\n * Represents the different interpolation sampling modes.\n *\n * @typedef {Object} ConstantsInterpolationSamplingMode\n * @property {string} NORMAL - Normal sampling mode.\n * @property {string} CENTROID - Centroid sampling mode.\n * @property {string} SAMPLE - Sample-specific sampling mode.\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\n */ /**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */class EventDispatcher{/**\n\t * Adds the given event listener to the given event type.\n\t *\n\t * @param {string} type - The type of event to listen to.\n\t * @param {Function} listener - The function that gets called when the event is fired.\n\t */addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};const listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}}/**\n\t * Returns `true` if the given event listener has been added to the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to check.\n\t * @return {boolean} Whether the given event listener has been added to the given event type.\n\t */hasEventListener(type,listener){const listeners=this._listeners;if(listeners===undefined)return false;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;}/**\n\t * Removes the given event listener from the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to remove.\n\t */removeEventListener(type,listener){const listeners=this._listeners;if(listeners===undefined)return;const listenerArray=listeners[type];if(listenerArray!==undefined){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}}/**\n\t * Dispatches an event object.\n\t *\n\t * @param {Object} event - The event that gets fired.\n\t */dispatchEvent(event){const listeners=this._listeners;if(listeners===undefined)return;const listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;// Make a copy, in case listeners are removed while iterating.\nconst array=listenerArray.slice(0);for(let i=0,l=array.length;i<l;i++){array[i].call(this,event);}event.target=null;}}}const _lut=['00','01','02','03','04','05','06','07','08','09','0a','0b','0c','0d','0e','0f','10','11','12','13','14','15','16','17','18','19','1a','1b','1c','1d','1e','1f','20','21','22','23','24','25','26','27','28','29','2a','2b','2c','2d','2e','2f','30','31','32','33','34','35','36','37','38','39','3a','3b','3c','3d','3e','3f','40','41','42','43','44','45','46','47','48','49','4a','4b','4c','4d','4e','4f','50','51','52','53','54','55','56','57','58','59','5a','5b','5c','5d','5e','5f','60','61','62','63','64','65','66','67','68','69','6a','6b','6c','6d','6e','6f','70','71','72','73','74','75','76','77','78','79','7a','7b','7c','7d','7e','7f','80','81','82','83','84','85','86','87','88','89','8a','8b','8c','8d','8e','8f','90','91','92','93','94','95','96','97','98','99','9a','9b','9c','9d','9e','9f','a0','a1','a2','a3','a4','a5','a6','a7','a8','a9','aa','ab','ac','ad','ae','af','b0','b1','b2','b3','b4','b5','b6','b7','b8','b9','ba','bb','bc','bd','be','bf','c0','c1','c2','c3','c4','c5','c6','c7','c8','c9','ca','cb','cc','cd','ce','cf','d0','d1','d2','d3','d4','d5','d6','d7','d8','d9','da','db','dc','dd','de','df','e0','e1','e2','e3','e4','e5','e6','e7','e8','e9','ea','eb','ec','ed','ee','ef','f0','f1','f2','f3','f4','f5','f6','f7','f8','f9','fa','fb','fc','fd','fe','ff'];let _seed=1234567;const DEG2RAD=Math.PI/180;const RAD2DEG=180/Math.PI;/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */function generateUUID(){// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nconst d0=Math.random()*0xffffffff|0;const d1=Math.random()*0xffffffff|0;const d2=Math.random()*0xffffffff|0;const d3=Math.random()*0xffffffff|0;const uuid=_lut[d0&0xff]+_lut[d0>>8&0xff]+_lut[d0>>16&0xff]+_lut[d0>>24&0xff]+'-'+_lut[d1&0xff]+_lut[d1>>8&0xff]+'-'+_lut[d1>>16&0x0f|0x40]+_lut[d1>>24&0xff]+'-'+_lut[d2&0x3f|0x80]+_lut[d2>>8&0xff]+'-'+_lut[d2>>16&0xff]+_lut[d2>>24&0xff]+_lut[d3&0xff]+_lut[d3>>8&0xff]+_lut[d3>>16&0xff]+_lut[d3>>24&0xff];// .toLowerCase() here flattens concatenated strings to save heap memory space.\nreturn uuid.toLowerCase();}/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */function clamp(value,min,max){return Math.max(min,Math.min(max,value));}/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */function euclideanModulo(n,m){// https://en.wikipedia.org/wiki/Modulo_operation\nreturn(n%m+m)%m;}/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1);}/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */function inverseLerp(x,y,value){// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nif(x!==y){return(value-x)/(y-x);}else{return 0;}}/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */function lerp(x,y,t){return(1-t)*x+t*y;}/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */function damp(x,y,lambda,dt){return lerp(x,y,1-Math.exp(-lambda*dt));}/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */function pingpong(x,length=1){// https://www.desmos.com/calculator/vcsjnyz7x4\nreturn length-Math.abs(euclideanModulo(x,length*2)-length);}/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */function smoothstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x);}/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */function smootherstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(x*6-15)+10);}/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1));}/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */function randFloat(low,high){return low+Math.random()*(high-low);}/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */function randFloatSpread(range){return range*(0.5-Math.random());}/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */function seededRandom(s){if(s!==undefined)_seed=s;// Mulberry32 generator\nlet t=_seed+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return((t^t>>>14)>>>0)/4294967296;}/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */function degToRad(degrees){return degrees*DEG2RAD;}/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */function radToDeg(radians){return radians*RAD2DEG;}/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */function isPowerOfTwo(value){return(value&value-1)===0&&value!==0;}/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2));}/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));}/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */function setQuaternionFromProperEuler(q,a,b,c,order){const cos=Math.cos;const sin=Math.sin;const c2=cos(b/2);const s2=sin(b/2);const c13=cos((a+c)/2);const s13=sin((a+c)/2);const c1_3=cos((a-c)/2);const s1_3=sin((a-c)/2);const c3_1=cos((c-a)/2);const s3_1=sin((c-a)/2);switch(order){case'XYX':q.set(c2*s13,s2*c1_3,s2*s1_3,c2*c13);break;case'YZY':q.set(s2*s1_3,c2*s13,s2*c1_3,c2*c13);break;case'ZXZ':q.set(s2*c1_3,s2*s1_3,c2*s13,c2*c13);break;case'XZX':q.set(c2*s13,s2*s3_1,s2*c3_1,c2*c13);break;case'YXY':q.set(s2*c3_1,c2*s13,s2*s3_1,c2*c13);break;case'ZYZ':q.set(s2*s3_1,s2*c3_1,c2*s13,c2*c13);break;default:console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: '+order);}}/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */function denormalize(value,array){switch(array.constructor){case Float32Array:return value;case Uint32Array:return value/4294967295.0;case Uint16Array:return value/65535.0;case Uint8Array:return value/255.0;case Int32Array:return Math.max(value/2147483647.0,-1);case Int16Array:return Math.max(value/32767.0,-1);case Int8Array:return Math.max(value/127.0,-1);default:throw new Error('Invalid component type.');}}/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */function normalize(value,array){switch(array.constructor){case Float32Array:return value;case Uint32Array:return Math.round(value*4294967295.0);case Uint16Array:return Math.round(value*65535.0);case Uint8Array:return Math.round(value*255.0);case Int32Array:return Math.round(value*2147483647.0);case Int16Array:return Math.round(value*32767.0);case Int8Array:return Math.round(value*127.0);default:throw new Error('Invalid component type.');}}/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */const MathUtils={DEG2RAD:DEG2RAD,RAD2DEG:RAD2DEG,/**\n\t * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n\t * (universally unique identifier).\n\t *\n\t * @static\n\t * @method\n\t * @return {string} The UUID.\n\t */generateUUID:generateUUID,/**\n\t * Clamps the given value between min and max.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to clamp.\n\t * @param {number} min - The min value.\n\t * @param {number} max - The max value.\n\t * @return {number} The clamped value.\n\t */clamp:clamp,/**\n\t * Computes the Euclidean modulo of the given parameters that\n\t * is `( ( n % m ) + m ) % m`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} n - The first parameter.\n\t * @param {number} m - The second parameter.\n\t * @return {number} The Euclidean modulo.\n\t */euclideanModulo:euclideanModulo,/**\n\t * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n\t * for the given value.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to be mapped.\n\t * @param {number} a1 - Minimum value for range A.\n\t * @param {number} a2 - Maximum value for range A.\n\t * @param {number} b1 - Minimum value for range B.\n\t * @param {number} b2 - Maximum value for range B.\n\t * @return {number} The mapped value.\n\t */mapLinear:mapLinear,/**\n\t * Returns the percentage in the closed interval `[0, 1]` of the given value\n\t * between the start and end point.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} value - A value between start and end.\n\t * @return {number} The interpolation factor.\n\t */inverseLerp:inverseLerp,/**\n\t * Returns a value linearly interpolated from two known points based on the given interval -\n\t * `t = 0` will return `x` and `t = 1` will return `y`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {number} The interpolated value.\n\t */lerp:lerp,/**\n\t * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n\t * time to maintain frame rate independent movement. For details, see\n\t * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The current point.\n\t * @param {number} y - The target point.\n\t * @param {number} lambda - A higher lambda value will make the movement more sudden,\n\t * and a lower value will make the movement more gradual.\n\t * @param {number} dt - Delta time in seconds.\n\t * @return {number} The interpolated value.\n\t */damp:damp,/**\n\t * Returns a value that alternates between `0` and the given `length` parameter.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to pingpong.\n\t * @param {number} [length=1] - The positive value the function will pingpong to.\n\t * @return {number} The alternated value.\n\t */pingpong:pingpong,/**\n\t * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n\t * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n\t * the `min` and `max`.\n\t *\n\t * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */smoothstep:smoothstep,/**\n\t * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n\t * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */smootherstep:smootherstep,/**\n\t * Returns a random integer from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random integer.\n\t */randInt:randInt,/**\n\t * Returns a random float from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random float.\n\t */randFloat:randFloat,/**\n\t * Returns a random integer from `<-range/2, range/2>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} range - Defines the value range.\n\t * @return {number} A random float.\n\t */randFloatSpread:randFloatSpread,/**\n\t * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} [s] - The integer seed.\n\t * @return {number} A random float.\n\t */seededRandom:seededRandom,/**\n\t * Converts degrees to radians.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} degrees - A value in degrees.\n\t * @return {number} The converted value in radians.\n\t */degToRad:degToRad,/**\n\t * Converts radians to degrees.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} radians - A value in radians.\n\t * @return {number} The converted value in degrees.\n\t */radToDeg:radToDeg,/**\n\t * Returns `true` if the given number is a power of two.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to check.\n\t * @return {boolean} Whether the given number is a power of two or not.\n\t */isPowerOfTwo:isPowerOfTwo,/**\n\t * Returns the smallest power of two that is greater than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The smallest power of two that is greater than or equal to the given number.\n\t */ceilPowerOfTwo:ceilPowerOfTwo,/**\n\t * Returns the largest power of two that is less than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The largest power of two that is less than or equal to the given number.\n\t */floorPowerOfTwo:floorPowerOfTwo,/**\n\t * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n\t * defined by the given angles and order.\n\t *\n\t * Rotations are applied to the axes in the order specified by order:\n\t * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n\t *\n\t * @static\n\t * @method\n\t * @param {Quaternion} q - The quaternion to set.\n\t * @param {number} a - The rotation applied to the first axis, in radians.\n\t * @param {number} b - The rotation applied to the second axis, in radians.\n\t * @param {number} c - The rotation applied to the third axis, in radians.\n\t * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n\t */setQuaternionFromProperEuler:setQuaternionFromProperEuler,/**\n\t * Normalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The float value in the range `[0,1]` to normalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The normalize value.\n\t */normalize:normalize,/**\n\t * Denormalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to denormalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The denormalize (float) value in the range `[0,1]`.\n\t */denormalize:denormalize};/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */class Vector2{/**\n\t * Constructs a new 2D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t */constructor(x=0,y=0){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Vector2.prototype.isVector2=true;/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.x=x;/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.y=y;}/**\n\t * Alias for {@link Vector2#x}.\n\t *\n\t * @type {number}\n\t */get width(){return this.x;}set width(value){this.x=value;}/**\n\t * Alias for {@link Vector2#y}.\n\t *\n\t * @type {number}\n\t */get height(){return this.y;}set height(value){this.y=value;}/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @return {Vector2} A reference to this vector.\n\t */set(x,y){this.x=x;this.y=y;return this;}/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector2} A reference to this vector.\n\t */setScalar(scalar){this.x=scalar;this.y=scalar;return this;}/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */setX(x){this.x=x;return this;}/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */setY(y){this.y=y;return this;}/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @param {number} value - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;}/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @return {number} A vector component value.\n\t */getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}}/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector2} A clone of this instance.\n\t */clone(){return new this.constructor(this.x,this.y);}/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to copy.\n\t * @return {Vector2} A reference to this vector.\n\t */copy(v){this.x=v.x;this.y=v.y;return this;}/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to add.\n\t * @return {Vector2} A reference to this vector.\n\t */add(v){this.x+=v.x;this.y+=v.y;return this;}/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector2} A reference to this vector.\n\t */addScalar(s){this.x+=s;this.y+=s;return this;}/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;}/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector2} A reference to this vector.\n\t */addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;}/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector2} v - The vector to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */sub(v){this.x-=v.x;this.y-=v.y;return this;}/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */subScalar(s){this.x-=s;this.y-=s;return this;}/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;}/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */multiply(v){this.x*=v.x;this.y*=v.y;return this;}/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;}/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector2} v - The vector to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */divide(v){this.x/=v.x;this.y/=v.y;return this;}/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */divideScalar(scalar){return this.multiplyScalar(1/scalar);}/**\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\n\t * the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {Vector2} A reference to this vector.\n\t */applyMatrix3(m){const x=this.x,y=this.y;const e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;}/**\n\t * If this vector's x or y value is greater than the given vector's x or y\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;}/**\n\t * If this vector's x or y value is less than the given vector's x or y\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;}/**\n\t * If this vector's x or y value is greater than the max vector's x or y\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x or y value is less than the min vector's x or y value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector2} min - The minimum x and y values.\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\n\t * @return {Vector2} A reference to this vector.\n\t */clamp(min,max){// assumes min < max, componentwise\nthis.x=clamp(this.x,min.x,max.x);this.y=clamp(this.y,min.y,max.y);return this;}/**\n\t * If this vector's x or y values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x or y values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */clampScalar(minVal,maxVal){this.x=clamp(this.x,minVal,maxVal);this.y=clamp(this.y,minVal,maxVal);return this;}/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(clamp(length,min,max));}/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;}/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;}/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;}/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this;}/**\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */negate(){this.x=-this.x;this.y=-this.y;return this;}/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */dot(v){return this.x*v.x+this.y*v.y;}/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the cross product with.\n\t * @return {number} The result of the cross product.\n\t */cross(v){return this.x*v.y-this.y*v.x;}/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */lengthSq(){return this.x*this.x+this.y*this.y;}/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n\t *\n\t * @return {number} The length of this vector.\n\t */length(){return Math.sqrt(this.x*this.x+this.y*this.y);}/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);}/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */normalize(){return this.divideScalar(this.length()||1);}/**\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\n\t *\n\t * @return {number} The angle in radians.\n\t */angle(){const angle=Math.atan2(-this.y,-this.x)+Math.PI;return angle;}/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector2} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */angleTo(v){const denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;const theta=this.dot(v)/denominator;// clamp, to handle numerical problems\nreturn Math.acos(clamp(theta,-1,1));}/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector2} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;}/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);}/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector2} A reference to this vector.\n\t */setLength(length){return this.normalize().multiplyScalar(length);}/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector2} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;}/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector2} v1 - The first vector.\n\t * @param {Vector2} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;return this;}/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector2} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */equals(v){return v.x===this.x&&v.y===this.y;}/**\n\t * Sets this vector's x value to be `array[ offset ]` and y\n\t * value to be `array[ offset + 1 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector2} A reference to this vector.\n\t */fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];return this;}/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;return array;}/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector2} A reference to this vector.\n\t */fromBufferAttribute(attribute,index){this.x=attribute.getX(index);this.y=attribute.getY(index);return this;}/**\n\t * Rotates this vector around the given center by the given angle.\n\t *\n\t * @param {Vector2} center - The point around which to rotate.\n\t * @param {number} angle - The angle to rotate, in radians.\n\t * @return {Vector2} A reference to this vector.\n\t */rotateAround(center,angle){const c=Math.cos(angle),s=Math.sin(angle);const x=this.x-center.x;const y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */random(){this.x=Math.random();this.y=Math.random();return this;}*[Symbol.iterator](){yield this.x;yield this.y;}}/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */class Matrix3{/**\n\t * Constructs a new 3x3 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t */constructor(n11,n12,n13,n21,n22,n23,n31,n32,n33){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Matrix3.prototype.isMatrix3=true;/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */this.elements=[1,0,0,0,1,0,0,0,1];if(n11!==undefined){this.set(n11,n12,n13,n21,n22,n23,n31,n32,n33);}}/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @return {Matrix3} A reference to this matrix.\n\t */set(n11,n12,n13,n21,n22,n23,n31,n32,n33){const te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;}/**\n\t * Sets this matrix to the 3x3 identity matrix.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */identity(){this.set(1,0,0,0,1,0,0,0,1);return this;}/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix3} m - The matrix to copy.\n\t * @return {Matrix3} A reference to this matrix.\n\t */copy(m){const te=this.elements;const me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;}/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrix3Column(this,0);yAxis.setFromMatrix3Column(this,1);zAxis.setFromMatrix3Column(this,2);return this;}/**\n\t * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */setFromMatrix4(m){const me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;}/**\n\t * Post-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */multiply(m){return this.multiplyMatrices(this,m);}/**\n\t * Pre-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */premultiply(m){return this.multiplyMatrices(m,this);}/**\n\t * Multiples the given 3x3 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix3} a - The first matrix.\n\t * @param {Matrix3} b - The second matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */multiplyMatrices(a,b){const ae=a.elements;const be=b.elements;const te=this.elements;const a11=ae[0],a12=ae[3],a13=ae[6];const a21=ae[1],a22=ae[4],a23=ae[7];const a31=ae[2],a32=ae[5],a33=ae[8];const b11=be[0],b12=be[3],b13=be[6];const b21=be[1],b22=be[4],b23=be[7];const b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;}/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix3} A reference to this matrix.\n\t */multiplyScalar(s){const te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;}/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * @return {number} The determinant.\n\t */determinant(){const te=this.elements;const a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;}/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */invert(){const te=this.elements,n11=te[0],n21=te[1],n31=te[2],n12=te[3],n22=te[4],n32=te[5],n13=te[6],n23=te[7],n33=te[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0)return this.set(0,0,0,0,0,0,0,0,0);const detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;}/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */transpose(){let tmp;const m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;}/**\n\t * Computes the normal matrix which is the inverse transpose of the upper\n\t * left 3x3 portion of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).invert().transpose();}/**\n\t * Transposes this matrix into the supplied array, and returns itself unchanged.\n\t *\n\t * @param {Array<number>} r - An array to store the transposed matrix elements.\n\t * @return {Matrix3} A reference to this matrix.\n\t */transposeIntoArray(r){const m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;}/**\n\t * Sets the UV transform matrix from offset, repeat, rotation, and center.\n\t *\n\t * @param {number} tx - Offset x.\n\t * @param {number} ty - Offset y.\n\t * @param {number} sx - Repeat x.\n\t * @param {number} sy - Repeat y.\n\t * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n\t * @param {number} cx - Center x of rotation.\n\t * @param {number} cy - Center y of rotation\n\t * @return {Matrix3} A reference to this matrix.\n\t */setUvTransform(tx,ty,sx,sy,rotation,cx,cy){const c=Math.cos(rotation);const s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);return this;}/**\n\t * Scales this matrix with the given scalar values.\n\t *\n\t * @param {number} sx - The amount to scale in the X axis.\n\t * @param {number} sy - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */scale(sx,sy){this.premultiply(_m3.makeScale(sx,sy));return this;}/**\n\t * Rotates this matrix by the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */rotate(theta){this.premultiply(_m3.makeRotation(-theta));return this;}/**\n\t * Translates this matrix by the given scalar values.\n\t *\n\t * @param {number} tx - The amount to translate in the X axis.\n\t * @param {number} ty - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */translate(tx,ty){this.premultiply(_m3.makeTranslation(tx,ty));return this;}// for 2D Transforms\n/**\n\t * Sets this matrix as a 2D translation transform.\n\t *\n\t * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */makeTranslation(x,y){if(x.isVector2){this.set(1,0,x.x,0,1,x.y,0,0,1);}else{this.set(1,0,x,0,1,y,0,0,1);}return this;}/**\n\t * Sets this matrix as a 2D rotational transformation.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */makeRotation(theta){// counterclockwise\nconst c=Math.cos(theta);const s=Math.sin(theta);this.set(c,-s,0,s,c,0,0,0,1);return this;}/**\n\t * Sets this matrix as a 2D scale transform.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */makeScale(x,y){this.set(x,0,0,0,y,0,0,0,1);return this;}/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix3} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */equals(matrix){const te=this.elements;const me=matrix.elements;for(let i=0;i<9;i++){if(te[i]!==me[i])return false;}return true;}/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix3} A reference to this matrix.\n\t */fromArray(array,offset=0){for(let i=0;i<9;i++){this.elements[i]=array[i+offset];}return this;}/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */toArray(array=[],offset=0){const te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix3} A clone of this instance.\n\t */clone(){return new this.constructor().fromArray(this.elements);}}const _m3=/*@__PURE__*/new Matrix3();function arrayNeedsUint32(array){// assumes larger values usually on last\nfor(let i=array.length-1;i>=0;--i){if(array[i]>=65535)return true;// account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n}return false;}const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function getTypedArray(type,buffer){return new TYPED_ARRAYS[type](buffer);}function createElementNS(name){return document.createElementNS('http://www.w3.org/1999/xhtml',name);}function createCanvasElement(){const canvas=createElementNS('canvas');canvas.style.display='block';return canvas;}const _cache={};function warnOnce(message){if(message in _cache)return;_cache[message]=true;console.warn(message);}function probeAsync(gl,sync,interval){return new Promise(function(resolve,reject){function probe(){switch(gl.clientWaitSync(sync,gl.SYNC_FLUSH_COMMANDS_BIT,0)){case gl.WAIT_FAILED:reject();break;case gl.TIMEOUT_EXPIRED:setTimeout(probe,interval);break;default:resolve();}}setTimeout(probe,interval);});}function toNormalizedProjectionMatrix(projectionMatrix){const m=projectionMatrix.elements;// Convert [-1, 1] to [0, 1] projection matrix\nm[2]=0.5*m[2]+0.5*m[3];m[6]=0.5*m[6]+0.5*m[7];m[10]=0.5*m[10]+0.5*m[11];m[14]=0.5*m[14]+0.5*m[15];}function toReversedProjectionMatrix(projectionMatrix){const m=projectionMatrix.elements;const isPerspectiveMatrix=m[11]===-1;// Reverse [0, 1] projection matrix\nif(isPerspectiveMatrix){m[10]=-m[10]-1;m[14]=-m[14];}else{m[10]=-m[10];m[14]=-m[14]+1;}}const LINEAR_REC709_TO_XYZ=/*@__PURE__*/new Matrix3().set(0.4123908,0.3575843,0.1804808,0.2126390,0.7151687,0.0721923,0.0193308,0.1191948,0.9505322);const XYZ_TO_LINEAR_REC709=/*@__PURE__*/new Matrix3().set(3.2409699,-1.5373832,-0.4986108,-0.9692436,1.8759675,0.0415551,0.0556301,-0.203977,1.0569715);function createColorManagement(){const ColorManagement={enabled:true,workingColorSpace:LinearSRGBColorSpace,/**\n\t\t * Implementations of supported color spaces.\n\t\t *\n\t\t * Required:\n\t\t *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n\t\t *\t- whitePoint: reference white [ x y ]\n\t\t *\t- transfer: transfer function (pre-defined)\n\t\t *\t- toXYZ: Matrix3 RGB to XYZ transform\n\t\t *\t- fromXYZ: Matrix3 XYZ to RGB transform\n\t\t *\t- luminanceCoefficients: RGB luminance coefficients\n\t\t *\n\t\t * Optional:\n\t\t *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n\t\t *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n\t\t *\n\t\t * Reference:\n\t\t * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n\t\t */spaces:{},convert:function(color,sourceColorSpace,targetColorSpace){if(this.enabled===false||sourceColorSpace===targetColorSpace||!sourceColorSpace||!targetColorSpace){return color;}if(this.spaces[sourceColorSpace].transfer===SRGBTransfer){color.r=SRGBToLinear(color.r);color.g=SRGBToLinear(color.g);color.b=SRGBToLinear(color.b);}if(this.spaces[sourceColorSpace].primaries!==this.spaces[targetColorSpace].primaries){color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);}if(this.spaces[targetColorSpace].transfer===SRGBTransfer){color.r=LinearToSRGB(color.r);color.g=LinearToSRGB(color.g);color.b=LinearToSRGB(color.b);}return color;},fromWorkingColorSpace:function(color,targetColorSpace){return this.convert(color,this.workingColorSpace,targetColorSpace);},toWorkingColorSpace:function(color,sourceColorSpace){return this.convert(color,sourceColorSpace,this.workingColorSpace);},getPrimaries:function(colorSpace){return this.spaces[colorSpace].primaries;},getTransfer:function(colorSpace){if(colorSpace===NoColorSpace)return LinearTransfer;return this.spaces[colorSpace].transfer;},getLuminanceCoefficients:function(target,colorSpace=this.workingColorSpace){return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);},define:function(colorSpaces){Object.assign(this.spaces,colorSpaces);},// Internal APIs\n_getMatrix:function(targetMatrix,sourceColorSpace,targetColorSpace){return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);},_getDrawingBufferColorSpace:function(colorSpace){return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;},_getUnpackColorSpace:function(colorSpace=this.workingColorSpace){return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;}};/******************************************************************************\n\t * sRGB definitions\n\t */const REC709_PRIMARIES=[0.640,0.330,0.300,0.600,0.150,0.060];const REC709_LUMINANCE_COEFFICIENTS=[0.2126,0.7152,0.0722];const D65=[0.3127,0.3290];ColorManagement.define({[LinearSRGBColorSpace]:{primaries:REC709_PRIMARIES,whitePoint:D65,transfer:LinearTransfer,toXYZ:LINEAR_REC709_TO_XYZ,fromXYZ:XYZ_TO_LINEAR_REC709,luminanceCoefficients:REC709_LUMINANCE_COEFFICIENTS,workingColorSpaceConfig:{unpackColorSpace:SRGBColorSpace},outputColorSpaceConfig:{drawingBufferColorSpace:SRGBColorSpace}},[SRGBColorSpace]:{primaries:REC709_PRIMARIES,whitePoint:D65,transfer:SRGBTransfer,toXYZ:LINEAR_REC709_TO_XYZ,fromXYZ:XYZ_TO_LINEAR_REC709,luminanceCoefficients:REC709_LUMINANCE_COEFFICIENTS,outputColorSpaceConfig:{drawingBufferColorSpace:SRGBColorSpace}}});return ColorManagement;}const ColorManagement=/*@__PURE__*/createColorManagement();function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}let _canvas;/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */class ImageUtils{/**\n\t * Returns a data URI containing a representation of the given image.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n\t * @param {string} [type='image/png'] - Indicates the image format.\n\t * @return {string} The data URI.\n\t */static getDataURL(image,type='image/png'){if(/^data:/i.test(image.src)){return image.src;}if(typeof HTMLCanvasElement==='undefined'){return image.src;}let canvas;if(image instanceof HTMLCanvasElement){canvas=image;}else{if(_canvas===undefined)_canvas=createElementNS('canvas');_canvas.width=image.width;_canvas.height=image.height;const context=_canvas.getContext('2d');if(image instanceof ImageData){context.putImageData(image,0,0);}else{context.drawImage(image,0,0,image.width,image.height);}canvas=_canvas;}return canvas.toDataURL(type);}/**\n\t * Converts the given sRGB image data to linear color space.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n\t * @return {HTMLCanvasElement|Object} The converted image.\n\t */static sRGBToLinear(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){const canvas=createElementNS('canvas');canvas.width=image.width;canvas.height=image.height;const context=canvas.getContext('2d');context.drawImage(image,0,0,image.width,image.height);const imageData=context.getImageData(0,0,image.width,image.height);const data=imageData.data;for(let i=0;i<data.length;i++){data[i]=SRGBToLinear(data[i]/255)*255;}context.putImageData(imageData,0,0);return canvas;}else if(image.data){const data=image.data.slice(0);for(let i=0;i<data.length;i++){if(data instanceof Uint8Array||data instanceof Uint8ClampedArray){data[i]=Math.floor(SRGBToLinear(data[i]/255)*255);}else{// assuming float\ndata[i]=SRGBToLinear(data[i]);}}return{data:data,width:image.width,height:image.height};}else{console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');return image;}}}let _sourceId=0;/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */class Source{/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {any} [data=null] - The data definition of a texture.\n\t */constructor(data=null){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSource=true;/**\n\t\t * The ID of the source.\n\t\t *\n\t\t * @name Source#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_sourceId++});/**\n\t\t * The UUID of the source.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();/**\n\t\t * The data definition of a texture.\n\t\t *\n\t\t * @type {any}\n\t\t */this.data=data;/**\n\t\t * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n\t\t * provides more control on how texture data should be processed. When `dataReady` is set\n\t\t * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n\t\t * the data into the GPU memory.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.dataReady=true;/**\n\t\t * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */this.version=0;}/**\n\t * When the property is set to `true`, the engine allocates the memory\n\t * for the texture (if necessary) and triggers the actual texture upload\n\t * to the GPU next time the source is used.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true)this.version++;}/**\n\t * Serializes the source into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized source.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.images[this.uuid]!==undefined){return meta.images[this.uuid];}const output={uuid:this.uuid,url:''};const data=this.data;if(data!==null){let url;if(Array.isArray(data)){// cube texture\nurl=[];for(let i=0,l=data.length;i<l;i++){if(data[i].isDataTexture){url.push(serializeImage(data[i].image));}else{url.push(serializeImage(data[i]));}}}else{// texture\nurl=serializeImage(data);}output.url=url;}if(!isRootObject){meta.images[this.uuid]=output;}return output;}}function serializeImage(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){// default images\nreturn ImageUtils.getDataURL(image);}else{if(image.data){// images of DataTexture\nreturn{data:Array.from(image.data),width:image.width,height:image.height,type:image.data.constructor.name};}else{console.warn('THREE.Texture: Unable to serialize Texture.');return{};}}}let _textureId=0;/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */class Texture extends EventDispatcher{/**\n\t * Constructs a new texture.\n\t *\n\t * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */constructor(image=Texture.DEFAULT_IMAGE,mapping=Texture.DEFAULT_MAPPING,wrapS=ClampToEdgeWrapping,wrapT=ClampToEdgeWrapping,magFilter=LinearFilter,minFilter=LinearMipmapLinearFilter,format=RGBAFormat,type=UnsignedByteType,anisotropy=Texture.DEFAULT_ANISOTROPY,colorSpace=NoColorSpace){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isTexture=true;/**\n\t\t * The ID of the texture.\n\t\t *\n\t\t * @name Texture#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_textureId++});/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The data definition of a texture. A reference to the data source can be\n\t\t * shared across textures. This is often useful in context of spritesheets\n\t\t * where multiple textures render the same data but with different texture\n\t\t * transformations.\n\t\t *\n\t\t * @type {Source}\n\t\t */this.source=new Source(image);/**\n\t\t * An array holding user-defined mipmaps.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */this.mipmaps=[];/**\n\t\t * How the texture is applied to the object. The value `UVMapping`\n\t\t * is the default, where texture or uv coordinates are used to apply the map.\n\t\t *\n\t\t * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n\t\t * @default UVMapping\n\t\t*/this.mapping=mapping;/**\n\t\t * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n\t\t * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.channel=0;/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *U* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */this.wrapS=wrapS;/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *V* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */this.wrapT=wrapT;/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearFilter\n\t\t */this.magFilter=magFilter;/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearMipmapLinearFilter\n\t\t */this.minFilter=minFilter;/**\n\t\t * The number of samples taken along the axis through the pixel that has the\n\t\t * highest density of texels. By default, this value is `1`. A higher value\n\t\t * gives a less blurry result than a basic mipmap, at the cost of more\n\t\t * texture samples being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.anisotropy=anisotropy;/**\n\t\t * The format of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default RGBAFormat\n\t\t */this.format=format;/**\n\t\t * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n\t\t * defines how the texture data is going to be stored on the GPU.\n\t\t *\n\t\t * This property allows to overwrite the default format.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */this.internalFormat=null;/**\n\t\t * The data type of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */this.type=type;/**\n\t\t * How much a single repetition of the texture is offset from the beginning,\n\t\t * in each direction U and V. Typical range is `0.0` to `1.0`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */this.offset=new Vector2(0,0);/**\n\t\t * How many times the texture is repeated across the surface, in each\n\t\t * direction U and V. If repeat is set greater than `1` in either direction,\n\t\t * the corresponding wrap parameter should also be set to `RepeatWrapping`\n\t\t * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.repeat=new Vector2(1,1);/**\n\t\t * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n\t\t * to the center of the texture. Default is `(0, 0)`, the lower left.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */this.center=new Vector2(0,0);/**\n\t\t * How much the texture is rotated around the center point, in radians.\n\t\t * Positive values are counter-clockwise.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.rotation=0;/**\n\t\t * Whether to update the texture's uv-transformation {@link Texture#matrix}\n\t\t * from the properties {@link Texture#offset}, {@link Texture#repeat},\n\t\t * {@link Texture#rotation}, and {@link Texture#center}.\n\t\t *\n\t\t * Set this to `false` if you are specifying the uv-transform matrix directly.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.matrixAutoUpdate=true;/**\n\t\t * The uv-transformation matrix of the texture.\n\t\t *\n\t\t * @type {Matrix3}\n\t\t */this.matrix=new Matrix3();/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Set this to `false` if you are creating mipmaps manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.generateMipmaps=true;/**\n\t\t * If set to `true`, the alpha channel, if present, is multiplied into the\n\t\t * color channels when the texture is uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure premultiply alpha on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.premultiplyAlpha=false;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure the flip on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.flipY=true;/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n\t\t * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */this.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n/**\n\t\t * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default NoColorSpace\n\t\t */this.colorSpace=colorSpace;/**\n\t\t * An object that can be used to store custom data about the texture. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.userData={};/**\n\t\t * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */this.version=0;/**\n\t\t * A callback function, called when the texture is updated (e.g., when\n\t\t * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */this.onUpdate=null;/**\n\t\t * An optional back reference to the textures render target.\n\t\t *\n\t\t * @type {?(RenderTarget|WebGLRenderTarget)}\n\t\t * @default null\n\t\t */this.renderTarget=null;/**\n\t\t * Indicates whether a texture belongs to a render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */this.isRenderTargetTexture=false;/**\n\t\t * Indicates if a texture should be handled like a texture array.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */this.isTextureArray=false;/**\n\t\t * Indicates whether this texture should be processed by `PMREMGenerator` or not\n\t\t * (only relevant for render target textures).\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */this.pmremVersion=0;}/**\n\t * The image object holding the texture data.\n\t *\n\t * @type {?Object}\n\t */get image(){return this.source.data;}set image(value=null){this.source.data=value;}/**\n\t * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n\t * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n\t */updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);}/**\n\t * Returns a new texture with copied values from this instance.\n\t *\n\t * @return {Texture} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given texture to this instance.\n\t *\n\t * @param {Texture} source - The texture to copy.\n\t * @return {Texture} A reference to this instance.\n\t */copy(source){this.name=source.name;this.source=source.source;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.channel=source.channel;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.internalFormat=source.internalFormat;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.colorSpace=source.colorSpace;this.renderTarget=source.renderTarget;this.isRenderTargetTexture=source.isRenderTargetTexture;this.isTextureArray=source.isTextureArray;this.userData=JSON.parse(JSON.stringify(source.userData));this.needsUpdate=true;return this;}/**\n\t * Serializes the texture into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized texture.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}const output={metadata:{version:4.6,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,image:this.source.toJSON(meta).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)output.userData=this.userData;if(!isRootObject){meta.textures[this.uuid]=output;}return output;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */dispose(){/**\n\t\t * Fires when the texture has been disposed of.\n\t\t *\n\t\t * @event Texture#dispose\n\t\t * @type {Object}\n\t\t */this.dispatchEvent({type:'dispose'});}/**\n\t * Transforms the given uv vector with the textures uv transformation matrix.\n\t *\n\t * @param {Vector2} uv - The uv vector.\n\t * @return {Vector2} The transformed uv vector.\n\t */transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else{uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else{uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}/**\n\t * Setting this property to `true` indicates the engine the texture\n\t * must be updated in the next render. This triggers a texture upload\n\t * to the GPU and ensures correct texture parameter configuration.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true){this.version++;this.source.needsUpdate=true;}}/**\n\t * Setting this property to `true` indicates the engine the PMREM\n\t * must be regenerated.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsPMREMUpdate(value){if(value===true){this.pmremVersion++;}}}/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */Texture.DEFAULT_IMAGE=null;/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */Texture.DEFAULT_MAPPING=UVMapping;/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */Texture.DEFAULT_ANISOTROPY=1;/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */class Vector4{/**\n\t * Constructs a new 4D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t * @param {number} [w=1] - The w value of this vector.\n\t */constructor(x=0,y=0,z=0,w=1){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Vector4.prototype.isVector4=true;/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.x=x;/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.y=y;/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.z=z;/**\n\t\t * The w value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.w=w;}/**\n\t * Alias for {@link Vector4#z}.\n\t *\n\t * @type {number}\n\t */get width(){return this.z;}set width(value){this.z=value;}/**\n\t * Alias for {@link Vector4#w}.\n\t *\n\t * @type {number}\n\t */get height(){return this.w;}set height(value){this.w=value;}/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @param {number} w - The value of the w component.\n\t * @return {Vector4} A reference to this vector.\n\t */set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;}/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector4} A reference to this vector.\n\t */setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;}/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setX(x){this.x=x;return this;}/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setY(y){this.y=y;return this;}/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setZ(z){this.z=z;return this;}/**\n\t * Sets the vector's w component to the given value\n\t *\n\t * @param {number} w - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setW(w){this.w=w;return this;}/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @param {number} value - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;}/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @return {number} A vector component value.\n\t */getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}}/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector4} A clone of this instance.\n\t */clone(){return new this.constructor(this.x,this.y,this.z,this.w);}/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector to copy.\n\t * @return {Vector4} A reference to this vector.\n\t */copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;}/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector4} v - The vector to add.\n\t * @return {Vector4} A reference to this vector.\n\t */add(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;}/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector4} A reference to this vector.\n\t */addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;}/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;}/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector4} A reference to this vector.\n\t */addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;}/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector4} v - The vector to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */sub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;}/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;}/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;}/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;this.w*=v.w;return this;}/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;}/**\n\t * Multiplies this vector with the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */applyMatrix4(m){const x=this.x,y=this.y,z=this.z,w=this.w;const e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;}/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector4} v - The vector to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;this.w/=v.w;return this;}/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */divideScalar(scalar){return this.multiplyScalar(1/scalar);}/**\n\t * Sets the x, y and z components of this\n\t * vector to the quaternion's axis and w to the angle.\n\t *\n\t * @param {Quaternion} q - The Quaternion to set.\n\t * @return {Vector4} A reference to this vector.\n\t */setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n// q is assumed to be normalized\nthis.w=2*Math.acos(q.w);const s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else{this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;}/**\n\t * Sets the x, y and z components of this\n\t * vector to the axis of rotation and w to the angle.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nlet angle,x,y,z;// variables for result\nconst epsilon=0.01,// margin to allow for rounding errors\nepsilon2=0.1,// margin to distinguish between 0 and 180 degrees\nte=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found\n// first check for identity matrix which must have +1 for all terms\n// in leading diagonal and zero in other terms\nif(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0\nthis.set(1,0,0,0);return this;// zero angle, arbitrary axis\n}// otherwise this singularity is angle = 180\nangle=Math.PI;const xx=(m11+1)/2;const yy=(m22+1)/2;const zz=(m33+1)/2;const xy=(m12+m21)/4;const xz=(m13+m31)/4;const yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term\nif(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else{x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term\nif(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else{y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else{// m33 is the largest diagonal term so base result on this\nif(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else{z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation\n}// as we have reached here there are no singularities so we can handle normally\nlet s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize\nif(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be\n// caught by singularity test above, but I've left it in just in case\nthis.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;}/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */setFromMatrixPosition(m){const e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];this.w=e[15];return this;}/**\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;}/**\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;}/**\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector4} min - The minimum x, y and z values.\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector4} A reference to this vector.\n\t */clamp(min,max){// assumes min < max, componentwise\nthis.x=clamp(this.x,min.x,max.x);this.y=clamp(this.y,min.y,max.y);this.z=clamp(this.z,min.z,max.z);this.w=clamp(this.w,min.w,max.w);return this;}/**\n\t * If this vector's x, y, z or w values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y, z or w values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */clampScalar(minVal,maxVal){this.x=clamp(this.x,minVal,maxVal);this.y=clamp(this.y,minVal,maxVal);this.z=clamp(this.z,minVal,maxVal);this.w=clamp(this.w,minVal,maxVal);return this;}/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(clamp(length,min,max));}/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;}/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;}/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;}/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this;}/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;}/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;}/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;}/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n\t *\n\t * @return {number} The length of this vector.\n\t */length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);}/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);}/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */normalize(){return this.divideScalar(this.length()||1);}/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector4} A reference to this vector.\n\t */setLength(length){return this.normalize().multiplyScalar(length);}/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector4} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;}/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector4} v1 - The first vector.\n\t * @param {Vector4} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;this.w=v1.w+(v2.w-v1.w)*alpha;return this;}/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector4} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;}/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector4} A reference to this vector.\n\t */fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;}/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;}/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector4} A reference to this vector.\n\t */fromBufferAttribute(attribute,index){this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this;}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w;}}/**\n * A render target is a buffer where the video card draws pixels for a scene\n * that is being rendered in the background. It is used in different effects,\n * such as applying postprocessing to a rendered image before displaying it\n * on the screen.\n *\n * @augments EventDispatcher\n */class RenderTarget extends EventDispatcher{/**\n\t * Render target options.\n\t *\n\t * @typedef {Object} RenderTarget~Options\n\t * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\n\t * @property {number} [magFilter=LinearFilter] - The mag filter.\n\t * @property {number} [minFilter=LinearFilter] - The min filter.\n\t * @property {number} [format=RGBAFormat] - The texture format.\n\t * @property {number} [type=UnsignedByteType] - The texture type.\n\t * @property {?string} [internalFormat=null] - The texture's internal format.\n\t * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [anisotropy=1] - The texture's anisotropy value.\n\t * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\n\t * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\n\t * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\n\t * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\n\t * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\n\t * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\n\t * @property {number} [samples=0] - The MSAA samples count.\n\t * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\n\t * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\n\t */ /**\n\t * Constructs a new render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,options={}){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isRenderTarget=true;/**\n\t\t * The width of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.width=width;/**\n\t\t * The height of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.height=height;/**\n\t\t * The depth of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.depth=options.depth?options.depth:1;/**\n\t\t * A rectangular area inside the render target's viewport. Fragments that are\n\t\t * outside the area will be discarded.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */this.scissor=new Vector4(0,0,width,height);/**\n\t\t * Indicates whether the scissor test should be enabled when rendering into\n\t\t * this render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.scissorTest=false;/**\n\t\t * A rectangular area representing the render target's viewport.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */this.viewport=new Vector4(0,0,width,height);const image={width:width,height:height,depth:this.depth};options=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:LinearFilter,depthBuffer:true,stencilBuffer:false,resolveDepthBuffer:true,resolveStencilBuffer:true,depthTexture:null,samples:0,count:1,multiview:false},options);const texture=new Texture(image,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.colorSpace);texture.flipY=false;texture.generateMipmaps=options.generateMipmaps;texture.internalFormat=options.internalFormat;/**\n\t\t * An array of textures. Each color attachment is represented as a separate texture.\n\t\t * Has at least a single entry for the default color attachment.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */this.textures=[];const count=options.count;for(let i=0;i<count;i++){this.textures[i]=texture.clone();this.textures[i].isRenderTargetTexture=true;this.textures[i].renderTarget=this;}/**\n\t\t * Whether to allocate a depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.depthBuffer=options.depthBuffer;/**\n\t\t * Whether to allocate a stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.stencilBuffer=options.stencilBuffer;/**\n\t\t * Whether to resolve the depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.resolveDepthBuffer=options.resolveDepthBuffer;/**\n\t\t * Whether to resolve the stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.resolveStencilBuffer=options.resolveStencilBuffer;this._depthTexture=null;this.depthTexture=options.depthTexture;/**\n\t\t * The number of MSAA samples.\n\t\t *\n\t\t * A value of `0` disables MSAA.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.samples=options.samples;/**\n\t\t * Whether to this target is used in multiview rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.multiview=options.multiview;}/**\n\t * The texture representing the default color attachment.\n\t *\n\t * @type {Texture}\n\t */get texture(){return this.textures[0];}set texture(value){this.textures[0]=value;}set depthTexture(current){if(this._depthTexture!==null)this._depthTexture.renderTarget=null;if(current!==null)current.renderTarget=this;this._depthTexture=current;}/**\n\t * Instead of saving the depth in a renderbuffer, a texture\n\t * can be used instead which is useful for further processing\n\t * e.g. in context of post-processing.\n\t *\n\t * @type {?DepthTexture}\n\t * @default null\n\t */get depthTexture(){return this._depthTexture;}/**\n\t * Sets the size of this render target.\n\t *\n\t * @param {number} width - The width.\n\t * @param {number} height - The height.\n\t * @param {number} [depth=1] - The depth.\n\t */setSize(width,height,depth=1){if(this.width!==width||this.height!==height||this.depth!==depth){this.width=width;this.height=height;this.depth=depth;for(let i=0,il=this.textures.length;i<il;i++){this.textures[i].image.width=width;this.textures[i].image.height=height;this.textures[i].image.depth=depth;}this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);}/**\n\t * Returns a new render target with copied values from this instance.\n\t *\n\t * @return {RenderTarget} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the settings of the given render target. This is a structural copy so\n\t * no resources are shared between render targets after the copy. That includes\n\t * all MRT textures and the depth texture.\n\t *\n\t * @param {RenderTarget} source - The render target to copy.\n\t * @return {RenderTarget} A reference to this instance.\n\t */copy(source){this.width=source.width;this.height=source.height;this.depth=source.depth;this.scissor.copy(source.scissor);this.scissorTest=source.scissorTest;this.viewport.copy(source.viewport);this.textures.length=0;for(let i=0,il=source.textures.length;i<il;i++){this.textures[i]=source.textures[i].clone();this.textures[i].isRenderTargetTexture=true;this.textures[i].renderTarget=this;// ensure image object is not shared, see #20328\nconst image=Object.assign({},source.textures[i].image);this.textures[i].source=new Source(image);}this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.resolveDepthBuffer=source.resolveDepthBuffer;this.resolveStencilBuffer=source.resolveStencilBuffer;if(source.depthTexture!==null)this.depthTexture=source.depthTexture.clone();this.samples=source.samples;return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires RenderTarget#dispose\n\t */dispose(){this.dispatchEvent({type:'dispose'});}}/**\n * A render target used in context of {@link WebGLRenderer}.\n *\n * @augments RenderTarget\n */class WebGLRenderTarget extends RenderTarget{/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,options={}){super(width,height,options);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isWebGLRenderTarget=true;}}/**\n * Creates an array of textures directly from raw buffer data.\n *\n * @augments Texture\n */class DataArrayTexture extends Texture{/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */constructor(data=null,width=1,height=1,depth=1){super(null);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDataArrayTexture=true;/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */this.image={data,width,height,depth};/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.magFilter=NearestFilter;/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.minFilter=NearestFilter;/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */this.wrapR=ClampToEdgeWrapping;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */this.unpackAlignment=1;/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */this.layerUpdates=new Set();}/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire data texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */addLayerUpdate(layerIndex){this.layerUpdates.add(layerIndex);}/**\n\t * Resets the layer updates registry.\n\t */clearLayerUpdates(){this.layerUpdates.clear();}}/**\n * An array render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */class WebGLArrayRenderTarget extends WebGLRenderTarget{/**\n\t * Constructs a new array render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,depth=1,options={}){super(width,height,options);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isWebGLArrayRenderTarget=true;this.depth=depth;/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */this.texture=new DataArrayTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}/**\n * Creates a three-dimensional texture from raw data, with parameters to\n * divide it into width, height, and depth.\n *\n * @augments Texture\n */class Data3DTexture extends Texture{/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */constructor(data=null,width=1,height=1,depth=1){// We're going to add .setXXX() methods for setting properties later.\n// Users can still set in Data3DTexture directly.\n//\n//\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n// \ttexture.anisotropy = 16;\n//\n// See #14839\nsuper(null);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isData3DTexture=true;/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */this.image={data,width,height,depth};/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.magFilter=NearestFilter;/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.minFilter=NearestFilter;/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */this.wrapR=ClampToEdgeWrapping;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */this.unpackAlignment=1;}}/**\n * A 3D render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */class WebGL3DRenderTarget extends WebGLRenderTarget{/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,depth=1,options={}){super(width,height,options);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isWebGL3DRenderTarget=true;this.depth=depth;/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */this.texture=new Data3DTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */class Quaternion{/**\n\t * Constructs a new quaternion.\n\t *\n\t * @param {number} [x=0] - The x value of this quaternion.\n\t * @param {number} [y=0] - The y value of this quaternion.\n\t * @param {number} [z=0] - The z value of this quaternion.\n\t * @param {number} [w=1] - The w value of this quaternion.\n\t */constructor(x=0,y=0,z=0,w=1){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isQuaternion=true;this._x=x;this._y=y;this._z=z;this._w=w;}/**\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\n\t * quaternion data are managed  in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\n\t * @see {@link Quaternion#slerp}\n\t */static slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation\nlet x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3];const x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(t===0){dst[dstOffset+0]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;return;}if(t===1){dst[dstOffset+0]=x1;dst[dstOffset+1]=y1;dst[dstOffset+2]=z1;dst[dstOffset+3]=w1;return;}if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){let s=1-t;const cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:\nif(sqrSin>Number.EPSILON){const sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}const tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:\nif(s===1-t){const f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}/**\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n\t * in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @return {Array<number>} The destination array.\n\t * @see {@link Quaternion#multiplyQuaternions}.\n\t */static multiplyQuaternionsFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1){const x0=src0[srcOffset0];const y0=src0[srcOffset0+1];const z0=src0[srcOffset0+2];const w0=src0[srcOffset0+3];const x1=src1[srcOffset1];const y1=src1[srcOffset1+1];const z1=src1[srcOffset1+2];const w1=src1[srcOffset1+3];dst[dstOffset]=x0*w1+w0*x1+y0*z1-z0*y1;dst[dstOffset+1]=y0*w1+w0*y1+z0*x1-x0*z1;dst[dstOffset+2]=z0*w1+w0*z1+x0*y1-y0*x1;dst[dstOffset+3]=w0*w1-x0*x1-y0*y1-z0*z1;return dst;}/**\n\t * The x value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get x(){return this._x;}set x(value){this._x=value;this._onChangeCallback();}/**\n\t * The y value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get y(){return this._y;}set y(value){this._y=value;this._onChangeCallback();}/**\n\t * The z value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get z(){return this._z;}set z(value){this._z=value;this._onChangeCallback();}/**\n\t * The w value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */get w(){return this._w;}set w(value){this._w=value;this._onChangeCallback();}/**\n\t * Sets the quaternion components.\n\t *\n\t * @param {number} x - The x value of this quaternion.\n\t * @param {number} y - The y value of this quaternion.\n\t * @param {number} z - The z value of this quaternion.\n\t * @param {number} w - The w value of this quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this._onChangeCallback();return this;}/**\n\t * Returns a new quaternion with copied values from this instance.\n\t *\n\t * @return {Quaternion} A clone of this instance.\n\t */clone(){return new this.constructor(this._x,this._y,this._z,this._w);}/**\n\t * Copies the values of the given quaternion to this instance.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to copy.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this._onChangeCallback();return this;}/**\n\t * Sets this quaternion from the rotation specified by the given\n\t * Euler angles.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */setFromEuler(euler,update=true){const x=euler._x,y=euler._y,z=euler._z,order=euler._order;// http://www.mathworks.com/matlabcentral/fileexchange/\n// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n//\tcontent/SpinCalc.m\nconst cos=Math.cos;const sin=Math.sin;const c1=cos(x/2);const c2=cos(y/2);const c3=cos(z/2);const s1=sin(x/2);const s2=sin(y/2);const s3=sin(z/2);switch(order){case'XYZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'YXZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'ZXY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'ZYX':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'YZX':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'XZY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;default:console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: '+order);}if(update===true)this._onChangeCallback();return this;}/**\n\t * Sets this quaternion from the given axis and angle.\n\t *\n\t * @param {Vector3} axis - The normalized axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\nconst halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this._onChangeCallback();return this;}/**\n\t * Sets this quaternion from the given rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @return {Quaternion} A reference to this quaternion.\n\t */setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nconst te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;if(trace>0){const s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){const s=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/s;this._x=0.25*s;this._y=(m12+m21)/s;this._z=(m13+m31)/s;}else if(m22>m33){const s=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/s;this._x=(m12+m21)/s;this._y=0.25*s;this._z=(m23+m32)/s;}else{const s=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/s;this._x=(m13+m31)/s;this._y=(m23+m32)/s;this._z=0.25*s;}this._onChangeCallback();return this;}/**\n\t * Sets this quaternion to the rotation required to rotate the direction vector\n\t * `vFrom` to the direction vector `vTo`.\n\t *\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */setFromUnitVectors(vFrom,vTo){// assumes direction vectors vFrom and vTo are normalized\nlet r=vFrom.dot(vTo)+1;if(r<Number.EPSILON){// vFrom and vTo point in opposite directions\nr=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){this._x=-vFrom.y;this._y=vFrom.x;this._z=0;this._w=r;}else{this._x=0;this._y=-vFrom.z;this._z=vFrom.y;this._w=r;}}else{// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\nthis._x=vFrom.y*vTo.z-vFrom.z*vTo.y;this._y=vFrom.z*vTo.x-vFrom.x*vTo.z;this._z=vFrom.x*vTo.y-vFrom.y*vTo.x;this._w=r;}return this.normalize();}/**\n\t * Returns the angle between this quaternion and the given one in radians.\n\t *\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */angleTo(q){return 2*Math.acos(Math.abs(clamp(this.dot(q),-1,1)));}/**\n\t * Rotates this quaternion by a given angular step to the given quaternion.\n\t * The method ensures that the final quaternion will not overshoot `q`.\n\t *\n\t * @param {Quaternion} q - The target quaternion.\n\t * @param {number} step - The angular step in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */rotateTowards(q,step){const angle=this.angleTo(q);if(angle===0)return this;const t=Math.min(1,step/angle);this.slerp(q,t);return this;}/**\n\t * Sets this quaternion to the identity quaternion; that is, to the\n\t * quaternion that represents \"no rotation\".\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */identity(){return this.set(0,0,0,1);}/**\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\n\t * quaternion is assumed to have unit length.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */invert(){return this.conjugate();}/**\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\n\t * quaternion represents the same rotation in the opposite direction about\n\t * the rotational axis.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this;}/**\n\t * Calculates the dot product of this quaternion and the given one.\n\t *\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;}/**\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\n\t * {@link Quaternion#length}.\n\t *\n\t * @return {number} The squared Euclidean length.\n\t */lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;}/**\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector.\n\t *\n\t * @return {number} The Euclidean length.\n\t */length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);}/**\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\n\t * the same rotation as this one, but has a length equal to `1`.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */normalize(){let l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else{l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this._onChangeCallback();return this;}/**\n\t * Multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */multiply(q){return this.multiplyQuaternions(this,q);}/**\n\t * Pre-multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */premultiply(q){return this.multiplyQuaternions(q,this);}/**\n\t * Multiplies the given quaternions and stores the result in this instance.\n\t *\n\t * @param {Quaternion} a - The first quaternion.\n\t * @param {Quaternion} b - The second quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\nconst qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;const qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this._onChangeCallback();return this;}/**\n\t * Performs a spherical linear interpolation between quaternions.\n\t *\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);const x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\nlet cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else{this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}const sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){const s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;this.normalize();// normalize calls _onChangeCallback()\nreturn this;}const sinHalfTheta=Math.sqrt(sqrSinHalfTheta);const halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);const ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this._onChangeCallback();return this;}/**\n\t * Performs a spherical linear interpolation between the given quaternions\n\t * and stores the result in this quaternion.\n\t *\n\t * @param {Quaternion} qa - The source quaternion.\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */slerpQuaternions(qa,qb,t){return this.copy(qa).slerp(qb,t);}/**\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */random(){// Ken Shoemake\n// Uniform random rotations\n// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\nconst theta1=2*Math.PI*Math.random();const theta2=2*Math.PI*Math.random();const x0=Math.random();const r1=Math.sqrt(1-x0);const r2=Math.sqrt(x0);return this.set(r1*Math.sin(theta1),r1*Math.cos(theta1),r2*Math.sin(theta2),r2*Math.cos(theta2));}/**\n\t * Returns `true` if this quaternion is equal with the given one.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\n\t * @return {boolean} Whether this quaternion is equal with the given one.\n\t */equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;}/**\n\t * Sets this quaternion's components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the quaternion component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */fromArray(array,offset=0){this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this._onChangeCallback();return this;}/**\n\t * Writes the components of this quaternion to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The quaternion components.\n\t */toArray(array=[],offset=0){array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;}/**\n\t * Sets the components of this quaternion from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */fromBufferAttribute(attribute,index){this._x=attribute.getX(index);this._y=attribute.getY(index);this._z=attribute.getZ(index);this._w=attribute.getW(index);this._onChangeCallback();return this;}/**\n\t * This methods defines the serialization result of this class. Returns the\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n\t *\n\t * @return {Array<number>} The serialized quaternion.\n\t */toJSON(){return this.toArray();}_onChange(callback){this._onChangeCallback=callback;return this;}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w;}}/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */class Vector3{/**\n\t * Constructs a new 3D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t */constructor(x=0,y=0,z=0){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Vector3.prototype.isVector3=true;/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.x=x;/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.y=y;/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */this.z=z;}/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @return {Vector3} A reference to this vector.\n\t */set(x,y,z){if(z===undefined)z=this.z;// sprite.scale.set(x,y)\nthis.x=x;this.y=y;this.z=z;return this;}/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector3} A reference to this vector.\n\t */setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;}/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setX(x){this.x=x;return this;}/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setY(y){this.y=y;return this;}/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setZ(z){this.z=z;return this;}/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @param {number} value - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;}/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @return {number} A vector component value.\n\t */getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}}/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector3} A clone of this instance.\n\t */clone(){return new this.constructor(this.x,this.y,this.z);}/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to copy.\n\t * @return {Vector3} A reference to this vector.\n\t */copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;}/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to add.\n\t * @return {Vector3} A reference to this vector.\n\t */add(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;}/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector3} A reference to this vector.\n\t */addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;}/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;}/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector3} A reference to this vector.\n\t */addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;}/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector3} v - The vector to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */sub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;}/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;}/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;}/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;}/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;}/**\n\t * Multiplies the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;}/**\n\t * Applies the given Euler rotation to this vector.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Vector3} A reference to this vector.\n\t */applyEuler(euler){return this.applyQuaternion(_quaternion$4.setFromEuler(euler));}/**\n\t * Applies a rotation specified by an axis and an angle to this vector.\n\t *\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */applyAxisAngle(axis,angle){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis,angle));}/**\n\t * Multiplies this vector with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */applyMatrix3(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;}/**\n\t * Multiplies this vector by the given normal matrix and normalizes\n\t * the result.\n\t *\n\t * @param {Matrix3} m - The normal matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */applyNormalMatrix(m){return this.applyMatrix3(m).normalize();}/**\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n\t * divides by perspective.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {Vector3} A reference to this vector.\n\t */applyMatrix4(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;const w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;}/**\n\t * Applies the given Quaternion to this vector.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Vector3} A reference to this vector.\n\t */applyQuaternion(q){// quaternion q is assumed to have unit length\nconst vx=this.x,vy=this.y,vz=this.z;const qx=q.x,qy=q.y,qz=q.z,qw=q.w;// t = 2 * cross( q.xyz, v );\nconst tx=2*(qy*vz-qz*vy);const ty=2*(qz*vx-qx*vz);const tz=2*(qx*vy-qy*vx);// v + q.w * t + cross( q.xyz, t );\nthis.x=vx+qw*tx+qy*tz-qz*ty;this.y=vy+qw*ty+qz*tx-qx*tz;this.z=vz+qw*tz+qx*ty-qy*tx;return this;}/**\n\t * Projects this vector from world space into the camera's normalized\n\t * device coordinate (NDC) space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);}/**\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\n\t * space into world space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);}/**\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n\t * subset of the given 4x4 matrix and then normalizes the result.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */transformDirection(m){// input: THREE.Matrix4 affine matrix\n// vector interpreted as a direction\nconst x=this.x,y=this.y,z=this.z;const e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();}/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector3} v - The vector to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;}/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */divideScalar(scalar){return this.multiplyScalar(1/scalar);}/**\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;}/**\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;}/**\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector3} min - The minimum x, y and z values.\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector3} A reference to this vector.\n\t */clamp(min,max){// assumes min < max, componentwise\nthis.x=clamp(this.x,min.x,max.x);this.y=clamp(this.y,min.y,max.y);this.z=clamp(this.z,min.z,max.z);return this;}/**\n\t * If this vector's x, y or z values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y or z values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */clampScalar(minVal,maxVal){this.x=clamp(this.x,minVal,maxVal);this.y=clamp(this.y,minVal,maxVal);this.z=clamp(this.z,minVal,maxVal);return this;}/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */clampLength(min,max){const length=this.length();return this.divideScalar(length||1).multiplyScalar(clamp(length,min,max));}/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;}/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;}/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;}/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this;}/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;}/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;}// TODO lengthSquared?\n/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;}/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n\t *\n\t * @return {number} The length of this vector.\n\t */length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);}/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);}/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */normalize(){return this.divideScalar(this.length()||1);}/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector3} A reference to this vector.\n\t */setLength(length){return this.normalize().multiplyScalar(length);}/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector3} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;}/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector3} v1 - The first vector.\n\t * @param {Vector3} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;return this;}/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the cross product with.\n\t * @return {Vector3} The result of the cross product.\n\t */cross(v){return this.crossVectors(this,v);}/**\n\t * Calculates the cross product of the given vectors and stores the result\n\t * in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */crossVectors(a,b){const ax=a.x,ay=a.y,az=a.z;const bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;}/**\n\t * Projects this vector onto the given one.\n\t *\n\t * @param {Vector3} v - The vector to project to.\n\t * @return {Vector3} A reference to this vector.\n\t */projectOnVector(v){const denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);const scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar);}/**\n\t * Projects this vector onto a plane by subtracting this\n\t * vector projected onto the plane's normal from this vector.\n\t *\n\t * @param {Vector3} planeNormal - The plane normal.\n\t * @return {Vector3} A reference to this vector.\n\t */projectOnPlane(planeNormal){_vector$c.copy(this).projectOnVector(planeNormal);return this.sub(_vector$c);}/**\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\n\t *\n\t * @param {Vector3} normal - The (normalized) normal vector.\n\t * @return {Vector3} A reference to this vector.\n\t */reflect(normal){return this.sub(_vector$c.copy(normal).multiplyScalar(2*this.dot(normal)));}/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector3} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */angleTo(v){const denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;const theta=this.dot(v)/denominator;// clamp, to handle numerical problems\nreturn Math.acos(clamp(theta,-1,1));}/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector3} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;}/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);}/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {Spherical} s - The spherical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);}/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The phi angle in radians.\n\t * @param {number} theta - The theta angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromSphericalCoords(radius,phi,theta){const sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;}/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {Cylindrical} c - The cylindrical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);}/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle in radians.\n\t * @param {number} y - The y value.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;}/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromMatrixPosition(m){const e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;}/**\n\t * Sets the vector components to the scale elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromMatrixScale(m){const sx=this.setFromMatrixColumn(m,0).length();const sy=this.setFromMatrixColumn(m,1).length();const sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;}/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);}/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3);}/**\n\t * Sets the vector components from the given Euler angles.\n\t *\n\t * @param {Euler} e - The Euler angles to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this;}/**\n\t * Sets the vector components from the RGB components of the\n\t * given color.\n\t *\n\t * @param {Color} c - The color to set.\n\t * @return {Vector3} A reference to this vector.\n\t */setFromColor(c){this.x=c.r;this.y=c.g;this.z=c.b;return this;}/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector3} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;}/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n\t * and z value to be `array[ offset + 2 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector3} A reference to this vector.\n\t */fromArray(array,offset=0){this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;}/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */toArray(array=[],offset=0){array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;}/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector3} A reference to this vector.\n\t */fromBufferAttribute(attribute,index){this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this;}/**\n\t * Sets this vector to a uniformly random point on a unit sphere.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */randomDirection(){// https://mathworld.wolfram.com/SpherePointPicking.html\nconst theta=Math.random()*Math.PI*2;const u=Math.random()*2-1;const c=Math.sqrt(1-u*u);this.x=c*Math.cos(theta);this.y=u;this.z=c*Math.sin(theta);return this;}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;}}const _vector$c=/*@__PURE__*/new Vector3();const _quaternion$4=/*@__PURE__*/new Quaternion();/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */class Box3{/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */constructor(min=new Vector3(+Infinity,+Infinity,+Infinity),max=new Vector3(-Infinity,-Infinity,-Infinity)){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBox3=true;/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.min=min;/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.max=max;}/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector3} min - The lower boundary of the box.\n\t * @param {Vector3} max - The upper boundary of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */set(min,max){this.min.copy(min);this.max.copy(max);return this;}/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<number>} array - An array holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */setFromArray(array){this.makeEmpty();for(let i=0,il=array.length;i<il;i+=3){this.expandByPoint(_vector$b.fromArray(array,i));}return this;}/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */setFromBufferAttribute(attribute){this.makeEmpty();for(let i=0,il=attribute.count;i<il;i++){this.expandByPoint(_vector$b.fromBufferAttribute(attribute,i));}return this;}/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n\t * @return {Box3} A reference to this bounding box.\n\t */setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;}/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector3} center - The center of the box.\n\t * @param {Vector3} size - The x, y and z dimensions of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */setFromCenterAndSize(center,size){const halfSize=_vector$b.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}/**\n\t * Computes the world-axis-aligned bounding box for the given 3D object\n\t * (including its children), accounting for the object's, and children's,\n\t * world transforms. The function may result in a larger box than strictly necessary.\n\t *\n\t * @param {Object3D} object - The 3D object to compute the bounding box for.\n\t * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n\t * world-axis-aligned bounding box at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */setFromObject(object,precise=false){this.makeEmpty();return this.expandByObject(object,precise);}/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box3} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box3} box - The box to copy.\n\t * @return {Box3} A reference to this bounding box.\n\t */copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}/**\n\t * Makes this box empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Box3} A reference to this bounding box.\n\t */makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;}/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\nreturn this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;}/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */getCenter(target){return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The size.\n\t */getSize(target){return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);}/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector3} point - The point that should be included by the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */expandByPoint(point){this.min.min(point);this.max.max(point);return this;}/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions. The depth of this box will be\n\t * expanded by the z component of the vector in both directions.\n\t *\n\t * @param {Vector3} vector - The vector that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}/**\n\t * Expands the boundaries of this box to include the given 3D object and\n\t * its children, accounting for the object's, and children's, world\n\t * transforms. The function may result in a larger box than strictly\n\t * necessary (unless the precise parameter is set to true).\n\t *\n\t * @param {Object3D} object - The 3D object that should expand the bounding box.\n\t * @param {boolean} precise - If set to `true`, the method expands the bounding box\n\t * as little as necessary at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */expandByObject(object,precise=false){// Computes the world-axis-aligned bounding box of an object (including its children),\n// accounting for both the object's, and children's, world transforms\nobject.updateWorldMatrix(false,false);const geometry=object.geometry;if(geometry!==undefined){const positionAttribute=geometry.getAttribute('position');// precise AABB computation based on vertex data requires at least a position attribute.\n// instancing isn't supported so far and uses the normal (conservative) code path.\nif(precise===true&&positionAttribute!==undefined&&object.isInstancedMesh!==true){for(let i=0,l=positionAttribute.count;i<l;i++){if(object.isMesh===true){object.getVertexPosition(i,_vector$b);}else{_vector$b.fromBufferAttribute(positionAttribute,i);}_vector$b.applyMatrix4(object.matrixWorld);this.expandByPoint(_vector$b);}}else{if(object.boundingBox!==undefined){// object-level bounding box\nif(object.boundingBox===null){object.computeBoundingBox();}_box$4.copy(object.boundingBox);}else{// geometry-level bounding box\nif(geometry.boundingBox===null){geometry.computeBoundingBox();}_box$4.copy(geometry.boundingBox);}_box$4.applyMatrix4(object.matrixWorld);this.union(_box$4);}}const children=object.children;for(let i=0,l=children.length;i<l;i++){this.expandByObject(children[i],precise);}return this;}/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */containsPoint(point){return point.x>=this.min.x&&point.x<=this.max.x&&point.y>=this.min.y&&point.y<=this.max.y&&point.z>=this.min.z&&point.z<=this.max.z;}/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;}/**\n\t * Returns a point as a proportion of this box's width, height and depth.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A point as a proportion of this box's width, height and depth.\n\t */getParameter(point,target){// This can potentially have a divide by zero if the box\n// has a size dimension of 0.\nreturn target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));}/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */intersectsBox(box){// using 6 splitting planes to rule out intersections.\nreturn box.max.x>=this.min.x&&box.min.x<=this.max.x&&box.max.y>=this.min.y&&box.min.y<=this.max.y&&box.max.z>=this.min.z&&box.min.z<=this.max.z;}/**\n\t * Returns `true` if the given bounding sphere intersects with this bounding box.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n\t */intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.\nthis.clampPoint(sphere.center,_vector$b);// If that point is inside the sphere, the AABB and sphere intersect.\nreturn _vector$b.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;}/**\n\t * Returns `true` if the given plane intersects with this bounding box.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether the given plane intersects with this bounding box.\n\t */intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values\n// are on the same side (back or front) of the plane, then there is no intersection.\nlet min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else{min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else{min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else{min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;}/**\n\t * Returns `true` if the given triangle intersects with this bounding box.\n\t *\n\t * @param {Triangle} triangle - The triangle to test.\n\t * @return {boolean} Whether the given triangle intersects with this bounding box.\n\t */intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents\nthis.getCenter(_center);_extents.subVectors(this.max,_center);// translate triangle to aabb origin\n_v0$2.subVectors(triangle.a,_center);_v1$7.subVectors(triangle.b,_center);_v2$4.subVectors(triangle.c,_center);// compute edge vectors for triangle\n_f0.subVectors(_v1$7,_v0$2);_f1.subVectors(_v2$4,_v1$7);_f2.subVectors(_v0$2,_v2$4);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\nlet axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents)){return false;}// test 3 face normals from the aabb\naxes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents)){return false;}// finally testing the face normal of the triangle\n// use already existing triangle edge vectors here\n_triangleNormal.crossVectors(_f0,_f1);axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(axes,_v0$2,_v1$7,_v2$4,_extents);}/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector3} point - The point to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */clampPoint(point,target){return target.copy(point).clamp(this.min,this.max);}/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */distanceToPoint(point){return this.clampPoint(point,_vector$b).distanceTo(point);}/**\n\t * Returns a bounding sphere that encloses this bounding box.\n\t *\n\t * @param {Sphere} target - The target sphere that is used to store the method's result.\n\t * @return {Sphere} The bounding sphere that encloses this bounding box.\n\t */getBoundingSphere(target){if(this.isEmpty()){target.makeEmpty();}else{this.getCenter(target.center);target.radius=this.getSize(_vector$b).length()*0.5;}return target;}/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box3} box - The bounding box to intersect with.\n\t * @return {Box3} A reference to this bounding box.\n\t */intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\nif(this.isEmpty())this.makeEmpty();return this;}/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box3} box - The bounding box that will be unioned with this instance.\n\t * @return {Box3} A reference to this bounding box.\n\t */union(box){this.min.min(box.min);this.max.max(box.max);return this;}/**\n\t * Transforms this bounding box by the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Box3} A reference to this bounding box.\n\t */applyMatrix4(matrix){// transform of empty box is an empty box.\nif(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000\n_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001\n_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010\n_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011\n_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100\n_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101\n_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110\n_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111\nthis.setFromPoints(_points);return this;}/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 3D space.\n\t *\n\t * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */translate(offset){this.min.add(offset);this.max.add(offset);return this;}/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box3} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}const _points=[/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3()];const _vector$b=/*@__PURE__*/new Vector3();const _box$4=/*@__PURE__*/new Box3();// triangle centered vertices\nconst _v0$2=/*@__PURE__*/new Vector3();const _v1$7=/*@__PURE__*/new Vector3();const _v2$4=/*@__PURE__*/new Vector3();// triangle edge vectors\nconst _f0=/*@__PURE__*/new Vector3();const _f1=/*@__PURE__*/new Vector3();const _f2=/*@__PURE__*/new Vector3();const _center=/*@__PURE__*/new Vector3();const _extents=/*@__PURE__*/new Vector3();const _triangleNormal=/*@__PURE__*/new Vector3();const _testAxis=/*@__PURE__*/new Vector3();function satForAxes(axes,v0,v1,v2,extents){for(let i=0,j=axes.length-3;i<=j;i+=3){_testAxis.fromArray(axes,i);// project the aabb onto the separating axis\nconst r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z);// project all 3 vertices of the triangle onto the separating axis\nconst p0=v0.dot(_testAxis);const p1=v1.dot(_testAxis);const p2=v2.dot(_testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r\nif(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb\n// the axis is separating and we can exit\nreturn false;}}return true;}const _box$3=/*@__PURE__*/new Box3();const _v1$6=/*@__PURE__*/new Vector3();const _v2$3=/*@__PURE__*/new Vector3();/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */class Sphere{/**\n\t * Constructs a new sphere.\n\t *\n\t * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n\t * @param {number} [radius=-1] - The radius of the sphere.\n\t */constructor(center=new Vector3(),radius=-1){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSphere=true;/**\n\t\t * The center of the sphere\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.center=center;/**\n\t\t * The radius of the sphere.\n\t\t *\n\t\t * @type {number}\n\t\t */this.radius=radius;}/**\n\t * Sets the sphere's components by copying the given values.\n\t *\n\t * @param {Vector3} center - The center.\n\t * @param {number} radius - The radius.\n\t * @return {Sphere} A reference to this sphere.\n\t */set(center,radius){this.center.copy(center);this.radius=radius;return this;}/**\n\t * Computes the minimum bounding sphere for list of points.\n\t * If the optional center point is given, it is used as the sphere's\n\t * center. Otherwise, the center of the axis-aligned bounding box\n\t * encompassing the points is calculated.\n\t *\n\t * @param {Array<Vector3>} points - A list of points in 3D space.\n\t * @param {Vector3} [optionalCenter] - The center of the sphere.\n\t * @return {Sphere} A reference to this sphere.\n\t */setFromPoints(points,optionalCenter){const center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else{_box$3.setFromPoints(points).getCenter(center);}let maxRadiusSq=0;for(let i=0,il=points.length;i<il;i++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));}this.radius=Math.sqrt(maxRadiusSq);return this;}/**\n\t * Copies the values of the given sphere to this instance.\n\t *\n\t * @param {Sphere} sphere - The sphere to copy.\n\t * @return {Sphere} A reference to this sphere.\n\t */copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;}/**\n\t * Returns `true` if the sphere is empty (the radius set to a negative number).\n\t *\n\t * Spheres with a radius of `0` contain only their center point and are not\n\t * considered to be empty.\n\t *\n\t * @return {boolean} Whether this sphere is empty or not.\n\t */isEmpty(){return this.radius<0;}/**\n\t * Makes this sphere empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Sphere} A reference to this sphere.\n\t */makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this;}/**\n\t * Returns `true` if this sphere contains the given point inclusive of\n\t * the surface of the sphere.\n\t *\n\t * @param {Vector3} point - The point to check.\n\t * @return {boolean} Whether this sphere contains the given point or not.\n\t */containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;}/**\n\t * Returns the closest distance from the boundary of the sphere to the\n\t * given point. If the sphere contains the point, the distance will\n\t * be negative.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The distance to the point.\n\t */distanceToPoint(point){return point.distanceTo(this.center)-this.radius;}/**\n\t * Returns `true` if this sphere intersects with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test.\n\t * @return {boolean} Whether this sphere intersects with the given one or not.\n\t */intersectsSphere(sphere){const radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;}/**\n\t * Returns `true` if this sphere intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to test.\n\t * @return {boolean} Whether this sphere intersects with the given box or not.\n\t */intersectsBox(box){return box.intersectsSphere(this);}/**\n\t * Returns `true` if this sphere intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether this sphere intersects with the given plane or not.\n\t */intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;}/**\n\t * Clamps a point within the sphere. If the point is outside the sphere, it\n\t * will clamp it to the closest point on the edge of the sphere. Points\n\t * already inside the sphere will not be affected.\n\t *\n\t * @param {Vector3} point - The plane to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */clampPoint(point,target){const deltaLengthSq=this.center.distanceToSquared(point);target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;}/**\n\t * Returns a bounding box that encloses this sphere.\n\t *\n\t * @param {Box3} target - The target box that is used to store the method's result.\n\t * @return {Box3} The bounding box that encloses this sphere.\n\t */getBoundingBox(target){if(this.isEmpty()){// Empty sphere produces empty bounding box\ntarget.makeEmpty();return target;}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;}/**\n\t * Transforms this sphere with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Sphere} A reference to this sphere.\n\t */applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;}/**\n\t * Translates the sphere's center by the given offset.\n\t *\n\t * @param {Vector3} offset - The offset.\n\t * @return {Sphere} A reference to this sphere.\n\t */translate(offset){this.center.add(offset);return this;}/**\n\t * Expands the boundaries of this sphere to include the given point.\n\t *\n\t * @param {Vector3} point - The point to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */expandByPoint(point){if(this.isEmpty()){this.center.copy(point);this.radius=0;return this;}_v1$6.subVectors(point,this.center);const lengthSq=_v1$6.lengthSq();if(lengthSq>this.radius*this.radius){// calculate the minimal sphere\nconst length=Math.sqrt(lengthSq);const delta=(length-this.radius)*0.5;this.center.addScaledVector(_v1$6,delta/length);this.radius+=delta;}return this;}/**\n\t * Expands this sphere to enclose both the original sphere and the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */union(sphere){if(sphere.isEmpty()){return this;}if(this.isEmpty()){this.copy(sphere);return this;}if(this.center.equals(sphere.center)===true){this.radius=Math.max(this.radius,sphere.radius);}else{_v2$3.subVectors(sphere.center,this.center).setLength(sphere.radius);this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));}return this;}/**\n\t * Returns `true` if this sphere is equal with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test for equality.\n\t * @return {boolean} Whether this bounding sphere is equal with the given one.\n\t */equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}/**\n\t * Returns a new sphere with copied values from this instance.\n\t *\n\t * @return {Sphere} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}const _vector$a=/*@__PURE__*/new Vector3();const _segCenter=/*@__PURE__*/new Vector3();const _segDir=/*@__PURE__*/new Vector3();const _diff=/*@__PURE__*/new Vector3();const _edge1=/*@__PURE__*/new Vector3();const _edge2=/*@__PURE__*/new Vector3();const _normal$1=/*@__PURE__*/new Vector3();/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */class Ray{/**\n\t * Constructs a new ray.\n\t *\n\t * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n\t * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n\t */constructor(origin=new Vector3(),direction=new Vector3(0,0,-1)){/**\n\t\t * The origin of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.origin=origin;/**\n\t\t * The (normalized) direction of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.direction=direction;}/**\n\t * Sets the ray's components by copying the given values.\n\t *\n\t * @param {Vector3} origin - The origin.\n\t * @param {Vector3} direction - The direction.\n\t * @return {Ray} A reference to this ray.\n\t */set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;}/**\n\t * Copies the values of the given ray to this instance.\n\t *\n\t * @param {Ray} ray - The ray to copy.\n\t * @return {Ray} A reference to this ray.\n\t */copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;}/**\n\t * Returns a vector that is located at a given distance along this ray.\n\t *\n\t * @param {number} t - The distance along the ray to retrieve a position for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A position on the ray.\n\t */at(t,target){return target.copy(this.origin).addScaledVector(this.direction,t);}/**\n\t * Adjusts the direction of the ray to point at the given vector in world space.\n\t *\n\t * @param {Vector3} v - The target position.\n\t * @return {Ray} A reference to this ray.\n\t */lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;}/**\n\t * Shift the origin of this ray along its direction by the given distance.\n\t *\n\t * @param {number} t - The distance along the ray to interpolate.\n\t * @return {Ray} A reference to this ray.\n\t */recast(t){this.origin.copy(this.at(t,_vector$a));return this;}/**\n\t * Returns the point along this ray that is closest to the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on this ray.\n\t */closestPointToPoint(point,target){target.subVectors(point,this.origin);const directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.origin).addScaledVector(this.direction,directionDistance);}/**\n\t * Returns the distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The distance.\n\t */distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));}/**\n\t * Returns the squared distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The squared distance.\n\t */distanceSqToPoint(point){const directionDistance=_vector$a.subVectors(point,this.origin).dot(this.direction);// point behind the ray\nif(directionDistance<0){return this.origin.distanceToSquared(point);}_vector$a.copy(this.origin).addScaledVector(this.direction,directionDistance);return _vector$a.distanceToSquared(point);}/**\n\t * Returns the squared distance between this ray and the given line segment.\n\t *\n\t * @param {Vector3} v0 - The start point of the line segment.\n\t * @param {Vector3} v1 - The end point of the line segment.\n\t * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n\t * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n\t * @return {number} The squared distance.\n\t */distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n// It returns the min distance between the ray and the segment\n// defined by v0 and v1\n// It can also set two optional targets :\n// - The closest point on the ray\n// - The closest point on the segment\n_segCenter.copy(v0).add(v1).multiplyScalar(0.5);_segDir.copy(v1).sub(v0).normalize();_diff.copy(this.origin).sub(_segCenter);const segExtent=v0.distanceTo(v1)*0.5;const a01=-this.direction.dot(_segDir);const b0=_diff.dot(this.direction);const b1=-_diff.dot(_segDir);const c=_diff.lengthSq();const det=Math.abs(1-a01*a01);let s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.\ns0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0\n// Minimum at interior points of ray and segment.\nconst invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else{// region 1\ns1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{// region 5\ns1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{if(s1<=-extDet){// region 4\ns0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3\ns0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else{// region 2\ns0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else{// Ray and segment are parallel.\ns1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.origin).addScaledVector(this.direction,s0);}if(optionalPointOnSegment){optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir,s1);}return sqrDist;}/**\n\t * Intersects this ray with the given sphere, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */intersectSphere(sphere,target){_vector$a.subVectors(sphere.center,this.origin);const tca=_vector$a.dot(this.direction);const d2=_vector$a.dot(_vector$a)-tca*tca;const radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;const thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere\nconst t0=tca-thc;// t1 = second intersect point - exit point on back of sphere\nconst t1=tca+thc;// test to see if t1 is behind the ray - if so, return null\nif(t1<0)return null;// test to see if t0 is behind the ray:\n// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n// in order to always return an intersect point that is in front of the ray.\nif(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0\nreturn this.at(t0,target);}/**\n\t * Returns `true` if this ray intersects with the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @return {boolean} Whether this ray intersects with the given sphere or not.\n\t */intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;}/**\n\t * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n\t * does not intersect with the plane.\n\t *\n\t * @param {Plane} plane - The plane to compute the distance to.\n\t * @return {?number} Whether this ray intersects with the given sphere or not.\n\t */distanceToPlane(plane){const denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin\nif(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined\nreturn null;}const t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane\nreturn t>=0?t:null;}/**\n\t * Intersects this ray with the given plane, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */intersectPlane(plane,target){const t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);}/**\n\t * Returns `true` if this ray intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @return {boolean} Whether this ray intersects with the given plane or not.\n\t */intersectsPlane(plane){// check if the ray lies on the plane first\nconst distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}const denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)\nreturn false;}/**\n\t * Intersects this ray with the given bounding box, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */intersectBox(box,target){let tmin,tmax,tymin,tymax,tzmin,tzmax;const invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;const origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else{tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else{tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;if(tymin>tmin||isNaN(tmin))tmin=tymin;if(tymax<tmax||isNaN(tmax))tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else{tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)\nif(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);}/**\n\t * Returns `true` if this ray intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this ray intersects with the given box or not.\n\t */intersectsBox(box){return this.intersectBox(box,_vector$a)!==null;}/**\n\t * Intersects this ray with the given triangle, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Vector3} a - The first vertex of the triangle.\n\t * @param {Vector3} b - The second vertex of the triangle.\n\t * @param {Vector3} c - The third vertex of the triangle.\n\t * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */intersectTriangle(a,b,c,backfaceCulling,target){// Compute the offset origin, edges, and normal.\n// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n_edge1.subVectors(b,a);_edge2.subVectors(c,a);_normal$1.crossVectors(_edge1,_edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\nlet DdN=this.direction.dot(_normal$1);let sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else{return null;}_diff.subVectors(this.origin,a);const DdQxE2=sign*this.direction.dot(_edge2.crossVectors(_diff,_edge2));// b1 < 0, no intersection\nif(DdQxE2<0){return null;}const DdE1xQ=sign*this.direction.dot(_edge1.cross(_diff));// b2 < 0, no intersection\nif(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection\nif(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.\nconst QdN=-sign*_diff.dot(_normal$1);// t < 0, no intersection\nif(QdN<0){return null;}// Ray intersects triangle.\nreturn this.at(QdN/DdN,target);}/**\n\t * Transforms this ray with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The transformation matrix.\n\t * @return {Ray} A reference to this ray.\n\t */applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;}/**\n\t * Returns `true` if this ray is equal with the given one.\n\t *\n\t * @param {Ray} ray - The ray to test for equality.\n\t * @return {boolean} Whether this ray is equal with the given one.\n\t */equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}/**\n\t * Returns a new ray with copied values from this instance.\n\t *\n\t * @return {Ray} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */class Matrix4{/**\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t */constructor(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Matrix4.prototype.isMatrix4=true;/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(n11!==undefined){this.set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44);}}/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t * @return {Matrix4} A reference to this matrix.\n\t */set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){const te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;}/**\n\t * Sets this matrix to the 4x4 identity matrix.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;}/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix4} A clone of this instance.\n\t */clone(){return new Matrix4().fromArray(this.elements);}/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix4} m - The matrix to copy.\n\t * @return {Matrix4} A reference to this matrix.\n\t */copy(m){const te=this.elements;const me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;}/**\n\t * Copies the translation component of the given matrix\n\t * into this matrix's translation component.\n\t *\n\t * @param {Matrix4} m - The matrix to copy the translation component.\n\t * @return {Matrix4} A reference to this matrix.\n\t */copyPosition(m){const te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;}/**\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */setFromMatrix3(m){const me=m.elements;this.set(me[0],me[3],me[6],0,me[1],me[4],me[7],0,me[2],me[5],me[8],0,0,0,0,1);return this;}/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;}/**\n\t * Sets the given basis vectors to this matrix.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;}/**\n\t * Extracts the rotation component of the given matrix\n\t * into this matrix's rotation component.\n\t *\n\t * Note: This method does not support reflection matrices.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */extractRotation(m){const te=this.elements;const me=m.elements;const scaleX=1/_v1$5.setFromMatrixColumn(m,0).length();const scaleY=1/_v1$5.setFromMatrixColumn(m,1).length();const scaleZ=1/_v1$5.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}/**\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n\t * the rotation specified by the given Euler angles. The rest of\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n\t * for a complete list.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationFromEuler(euler){const te=this.elements;const x=euler.x,y=euler.y,z=euler.z;const a=Math.cos(x),b=Math.sin(x);const c=Math.cos(y),d=Math.sin(y);const e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b;te[4]=-a*f;te[8]=de+cf*b;te[1]=cf+de*b;te[5]=a*e;te[9]=df-ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=be*d-af;te[8]=ae*d+bf;te[1]=c*f;te[5]=bf*d+ae;te[9]=af*d-be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=ac*f+bd;te[5]=a*e;te[9]=ad*f-bc;te[2]=bc*f-ad;te[6]=b*e;te[10]=bd*f+ac;}// bottom row\nte[3]=0;te[7]=0;te[11]=0;// last column\nte[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}/**\n\t * Sets the rotation component of this matrix to the rotation specified by\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n\t * The rest of the matrix is set to the identity.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationFromQuaternion(q){return this.compose(_zero,q,_one);}/**\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\n\t * `target`, and oriented by the up-direction.\n\t *\n\t * @param {Vector3} eye - The eye vector.\n\t * @param {Vector3} target - The target vector.\n\t * @param {Vector3} up - The up vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */lookAt(eye,target,up){const te=this.elements;_z.subVectors(eye,target);if(_z.lengthSq()===0){// eye and target are in the same position\n_z.z=1;}_z.normalize();_x.crossVectors(up,_z);if(_x.lengthSq()===0){// up and z are parallel\nif(Math.abs(up.z)===1){_z.x+=0.0001;}else{_z.z+=0.0001;}_z.normalize();_x.crossVectors(up,_z);}_x.normalize();_y.crossVectors(_z,_x);te[0]=_x.x;te[4]=_y.x;te[8]=_z.x;te[1]=_x.y;te[5]=_y.y;te[9]=_z.y;te[2]=_x.z;te[6]=_y.z;te[10]=_z.z;return this;}/**\n\t * Post-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */multiply(m){return this.multiplyMatrices(this,m);}/**\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */premultiply(m){return this.multiplyMatrices(m,this);}/**\n\t * Multiples the given 4x4 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix4} a - The first matrix.\n\t * @param {Matrix4} b - The second matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */multiplyMatrices(a,b){const ae=a.elements;const be=b.elements;const te=this.elements;const a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];const a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];const a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];const a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];const b11=be[0],b12=be[4],b13=be[8],b14=be[12];const b21=be[1],b22=be[5],b23=be[9],b24=be[13];const b31=be[2],b32=be[6],b33=be[10],b34=be[14];const b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;}/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix4} A reference to this matrix.\n\t */multiplyScalar(s){const te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;}/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n\t *\n\t * @return {number} The determinant.\n\t */determinant(){const te=this.elements;const n11=te[0],n12=te[4],n13=te[8],n14=te[12];const n21=te[1],n22=te[5],n23=te[9],n24=te[13];const n31=te[2],n32=te[6],n33=te[10],n34=te[14];const n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient\nreturn n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);}/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */transpose(){const te=this.elements;let tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;}/**\n\t * Sets the position component for this matrix from the given vector,\n\t * without affecting the rest of the matrix.\n\t *\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n\t * @param {number} y - The y component of the vector.\n\t * @param {number} z - The z component of the vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */setPosition(x,y,z){const te=this.elements;if(x.isVector3){te[12]=x.x;te[13]=x.y;te[14]=x.z;}else{te[12]=x;te[13]=y;te[14]=z;}return this;}/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */invert(){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\nconst te=this.elements,n11=te[0],n21=te[1],n31=te[2],n41=te[3],n12=te[4],n22=te[5],n32=te[6],n42=te[7],n13=te[8],n23=te[9],n33=te[10],n43=te[11],n14=te[12],n24=te[13],n34=te[14],n44=te[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;const det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;}/**\n\t * Multiplies the columns of this matrix by the given vector.\n\t *\n\t * @param {Vector3} v - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */scale(v){const te=this.elements;const x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;}/**\n\t * Gets the maximum scale value of the three axes.\n\t *\n\t * @return {number} The maximum scale.\n\t */getMaxScaleOnAxis(){const te=this.elements;const scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];const scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];const scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));}/**\n\t * Sets this matrix as a translation transform from the given vector.\n\t *\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @param {number} z - The amount to translate in the z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeTranslation(x,y,z){if(x.isVector3){this.set(1,0,0,x.x,0,1,0,x.y,0,0,1,x.z,0,0,0,1);}else{this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);}return this;}/**\n\t * Sets this matrix as a rotational transformation around the X axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationX(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;}/**\n\t * Sets this matrix as a rotational transformation around the Y axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationY(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;}/**\n\t * Sets this matrix as a rotational transformation around the Z axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationZ(theta){const c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;}/**\n\t * Sets this matrix as a rotational transformation around the given axis by\n\t * the given angle.\n\t *\n\t * This is a somewhat controversial but mathematically sound alternative to\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n\t *\n\t * @param {Vector3} axis - The normalized rotation axis.\n\t * @param {number} angle - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp\nconst c=Math.cos(angle);const s=Math.sin(angle);const t=1-c;const x=axis.x,y=axis.y,z=axis.z;const tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;}/**\n\t * Sets this matrix as a scale transformation.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @param {number} z - The amount to scale in the Z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;}/**\n\t * Sets this matrix as a shear transformation.\n\t *\n\t * @param {number} xy - The amount to shear X by Y.\n\t * @param {number} xz - The amount to shear X by Z.\n\t * @param {number} yx - The amount to shear Y by X.\n\t * @param {number} yz - The amount to shear Y by Z.\n\t * @param {number} zx - The amount to shear Z by X.\n\t * @param {number} zy - The amount to shear Z by Y.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeShear(xy,xz,yx,yz,zx,zy){this.set(1,yx,zx,0,xy,1,zy,0,xz,yz,1,0,0,0,0,1);return this;}/**\n\t * Sets this matrix to the transformation composed of the given position,\n\t * rotation (Quaternion) and scale.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */compose(position,quaternion,scale){const te=this.elements;const x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;const x2=x+x,y2=y+y,z2=z+z;const xx=x*x2,xy=x*y2,xz=x*z2;const yy=y*y2,yz=y*z2,zz=z*z2;const wx=w*x2,wy=w*y2,wz=w*z2;const sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;}/**\n\t * Decomposes this matrix into its position, rotation and scale components\n\t * and provides the result in the given objects.\n\t *\n\t * Note: Not all matrices are decomposable in this way. For example, if an\n\t * object has a non-uniformly scaled parent, then the object's world matrix\n\t * may not be decomposable, and this method may not be appropriate.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */decompose(position,quaternion,scale){const te=this.elements;let sx=_v1$5.set(te[0],te[1],te[2]).length();const sy=_v1$5.set(te[4],te[5],te[6]).length();const sz=_v1$5.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale\nconst det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part\n_m1$2.copy(this);const invSX=1/sx;const invSY=1/sy;const invSZ=1/sz;_m1$2.elements[0]*=invSX;_m1$2.elements[1]*=invSX;_m1$2.elements[2]*=invSX;_m1$2.elements[4]*=invSY;_m1$2.elements[5]*=invSY;_m1$2.elements[6]*=invSY;_m1$2.elements[8]*=invSZ;_m1$2.elements[9]*=invSZ;_m1$2.elements[10]*=invSZ;quaternion.setFromRotationMatrix(_m1$2);scale.x=sx;scale.y=sy;scale.z=sz;return this;}/**\n\t * Creates a perspective projection matrix. This is used internally by\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makePerspective(left,right,top,bottom,near,far,coordinateSystem=WebGLCoordinateSystem){const te=this.elements;const x=2*near/(right-left);const y=2*near/(top-bottom);const a=(right+left)/(right-left);const b=(top+bottom)/(top-bottom);let c,d;if(coordinateSystem===WebGLCoordinateSystem){c=-(far+near)/(far-near);d=-2*far*near/(far-near);}else if(coordinateSystem===WebGPUCoordinateSystem){c=-far/(far-near);d=-far*near/(far-near);}else{throw new Error('THREE.Matrix4.makePerspective(): Invalid coordinate system: '+coordinateSystem);}te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;}/**\n\t * Creates a orthographic projection matrix. This is used internally by\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */makeOrthographic(left,right,top,bottom,near,far,coordinateSystem=WebGLCoordinateSystem){const te=this.elements;const w=1.0/(right-left);const h=1.0/(top-bottom);const p=1.0/(far-near);const x=(right+left)*w;const y=(top+bottom)*h;let z,zInv;if(coordinateSystem===WebGLCoordinateSystem){z=(far+near)*p;zInv=-2*p;}else if(coordinateSystem===WebGPUCoordinateSystem){z=near*p;zInv=-1*p;}else{throw new Error('THREE.Matrix4.makeOrthographic(): Invalid coordinate system: '+coordinateSystem);}te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=zInv;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;}/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix4} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */equals(matrix){const te=this.elements;const me=matrix.elements;for(let i=0;i<16;i++){if(te[i]!==me[i])return false;}return true;}/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix4} A reference to this matrix.\n\t */fromArray(array,offset=0){for(let i=0;i<16;i++){this.elements[i]=array[i+offset];}return this;}/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */toArray(array=[],offset=0){const te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}}const _v1$5=/*@__PURE__*/new Vector3();const _m1$2=/*@__PURE__*/new Matrix4();const _zero=/*@__PURE__*/new Vector3(0,0,0);const _one=/*@__PURE__*/new Vector3(1,1,1);const _x=/*@__PURE__*/new Vector3();const _y=/*@__PURE__*/new Vector3();const _z=/*@__PURE__*/new Vector3();const _matrix$2=/*@__PURE__*/new Matrix4();const _quaternion$3=/*@__PURE__*/new Quaternion();/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */class Euler{/**\n\t * Constructs a new euler instance.\n\t *\n\t * @param {number} [x=0] - The angle of the x axis in radians.\n\t * @param {number} [y=0] - The angle of the y axis in radians.\n\t * @param {number} [z=0] - The angle of the z axis in radians.\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n\t */constructor(x=0,y=0,z=0,order=Euler.DEFAULT_ORDER){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isEuler=true;this._x=x;this._y=y;this._z=z;this._order=order;}/**\n\t * The angle of the x axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get x(){return this._x;}set x(value){this._x=value;this._onChangeCallback();}/**\n\t * The angle of the y axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get y(){return this._y;}set y(value){this._y=value;this._onChangeCallback();}/**\n\t * The angle of the z axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get z(){return this._z;}set z(value){this._z=value;this._onChangeCallback();}/**\n\t * A string representing the order that the rotations are applied.\n\t *\n\t * @type {string}\n\t * @default 'XYZ'\n\t */get order(){return this._order;}set order(value){this._order=value;this._onChangeCallback();}/**\n\t * Sets the Euler components.\n\t *\n\t * @param {number} x - The angle of the x axis in radians.\n\t * @param {number} y - The angle of the y axis in radians.\n\t * @param {number} z - The angle of the z axis in radians.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */set(x,y,z,order=this._order){this._x=x;this._y=y;this._z=z;this._order=order;this._onChangeCallback();return this;}/**\n\t * Returns a new Euler instance with copied values from this instance.\n\t *\n\t * @return {Euler} A clone of this instance.\n\t */clone(){return new this.constructor(this._x,this._y,this._z,this._order);}/**\n\t * Copies the values of the given Euler instance to this instance.\n\t *\n\t * @param {Euler} euler - The Euler instance to copy.\n\t * @return {Euler} A reference to this Euler instance.\n\t */copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this._onChangeCallback();return this;}/**\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */setFromRotationMatrix(m,order=this._order,update=true){const te=m.elements;const m11=te[0],m12=te[4],m13=te[8];const m21=te[1],m22=te[5],m23=te[9];const m31=te[2],m32=te[6],m33=te[10];switch(order){case'XYZ':this._y=Math.asin(clamp(m13,-1,1));if(Math.abs(m13)<0.9999999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else{this._x=Math.atan2(m32,m22);this._z=0;}break;case'YXZ':this._x=Math.asin(-clamp(m23,-1,1));if(Math.abs(m23)<0.9999999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else{this._y=Math.atan2(-m31,m11);this._z=0;}break;case'ZXY':this._x=Math.asin(clamp(m32,-1,1));if(Math.abs(m32)<0.9999999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else{this._y=0;this._z=Math.atan2(m21,m11);}break;case'ZYX':this._y=Math.asin(-clamp(m31,-1,1));if(Math.abs(m31)<0.9999999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else{this._x=0;this._z=Math.atan2(-m12,m22);}break;case'YZX':this._z=Math.asin(clamp(m21,-1,1));if(Math.abs(m21)<0.9999999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else{this._x=0;this._y=Math.atan2(m13,m33);}break;case'XZY':this._z=Math.asin(-clamp(m12,-1,1));if(Math.abs(m12)<0.9999999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else{this._x=Math.atan2(-m23,m33);this._y=0;}break;default:console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: '+order);}this._order=order;if(update===true)this._onChangeCallback();return this;}/**\n\t * Sets the angles of this Euler instance from a normalized quaternion.\n\t *\n\t * @param {Quaternion} q - A normalized Quaternion.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */setFromQuaternion(q,order,update){_matrix$2.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(_matrix$2,order,update);}/**\n\t * Sets the angles of this Euler instance from the given vector.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */setFromVector3(v,order=this._order){return this.set(v.x,v.y,v.z,order);}/**\n\t * Resets the euler angle with a new order by creating a quaternion from this\n\t * euler angle and then setting this euler angle with the quaternion and the\n\t * new order.\n\t *\n\t * Warning: This discards revolution information.\n\t *\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */reorder(newOrder){_quaternion$3.setFromEuler(this);return this.setFromQuaternion(_quaternion$3,newOrder);}/**\n\t * Returns `true` if this Euler instance is equal with the given one.\n\t *\n\t * @param {Euler} euler - The Euler instance to test for equality.\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\n\t */equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;}/**\n\t * Sets this Euler instance's components to values from the given array. The first three\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\n\t * defines the Euler order.\n\t *\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n\t * @return {Euler} A reference to this Euler instance.\n\t */fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this._onChangeCallback();return this;}/**\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number,number,number,string>} The Euler components.\n\t */toArray(array=[],offset=0){array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;}_onChange(callback){this._onChangeCallback=callback;return this;}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order;}}/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */Euler.DEFAULT_ORDER='XYZ';/**\n * A layers object assigns an 3D object to 1 or more of 32\n * layers numbered `0` to `31` - internally the layers are stored as a\n * bit mask], and by default all 3D objects are a member of layer `0`.\n *\n * This can be used to control visibility - an object must share a layer with\n * a camera to be visible when that camera's view is\n * rendered.\n *\n * All classes that inherit from {@link Object3D} have an `layers` property which\n * is an instance of this class.\n */class Layers{/**\n\t * Constructs a new layers instance, with membership\n\t * initially set to layer `0`.\n\t */constructor(){/**\n\t\t * A bit mask storing which of the 32 layers this layers object is currently\n\t\t * a member of.\n\t\t *\n\t\t * @type {number}\n\t\t */this.mask=1|0;}/**\n\t * Sets membership to the given layer, and remove membership all other layers.\n\t *\n\t * @param {number} layer - The layer to set.\n\t */set(layer){this.mask=(1<<layer|0)>>>0;}/**\n\t * Adds membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */enable(layer){this.mask|=1<<layer|0;}/**\n\t * Adds membership to all layers.\n\t */enableAll(){this.mask=0xffffffff|0;}/**\n\t * Toggles the membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to toggle.\n\t */toggle(layer){this.mask^=1<<layer|0;}/**\n\t * Removes membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */disable(layer){this.mask&=~(1<<layer|0);}/**\n\t * Removes the membership from all layers.\n\t */disableAll(){this.mask=0;}/**\n\t * Returns `true` if this and the given layers object have at least one\n\t * layer in common.\n\t *\n\t * @param {Layers} layers - The layers to test.\n\t * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\n\t */test(layers){return(this.mask&layers.mask)!==0;}/**\n\t * Returns `true` if the given layer is enabled.\n\t *\n\t * @param {number} layer - The layer to test.\n\t * @return {boolean } Whether the given layer is enabled or not.\n\t */isEnabled(layer){return(this.mask&(1<<layer|0))!==0;}}let _object3DId=0;const _v1$4=/*@__PURE__*/new Vector3();const _q1=/*@__PURE__*/new Quaternion();const _m1$1=/*@__PURE__*/new Matrix4();const _target=/*@__PURE__*/new Vector3();const _position$3=/*@__PURE__*/new Vector3();const _scale$2=/*@__PURE__*/new Vector3();const _quaternion$2=/*@__PURE__*/new Quaternion();const _xAxis=/*@__PURE__*/new Vector3(1,0,0);const _yAxis=/*@__PURE__*/new Vector3(0,1,0);const _zAxis=/*@__PURE__*/new Vector3(0,0,1);/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */const _addedEvent={type:'added'};/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */const _removedEvent={type:'removed'};/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */const _childaddedEvent={type:'childadded',child:null};/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */const _childremovedEvent={type:'childremoved',child:null};/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */class Object3D extends EventDispatcher{/**\n\t * Constructs a new 3D object.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isObject3D=true;/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name Object3D#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_object3DId++});/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();/**\n\t\t * The name of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.type='Object3D';/**\n\t\t * A reference to the parent object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */this.parent=null;/**\n\t\t * An array holding the child 3D objects of this instance.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */this.children=[];/**\n\t\t * Defines the `up` direction of the 3D object which influences\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.up=Object3D.DEFAULT_UP.clone();const position=new Vector3();const rotation=new Euler();const quaternion=new Quaternion();const scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation._onChange(onRotationChange);quaternion._onChange(onQuaternionChange);Object.defineProperties(this,{/**\n\t\t\t * Represents the object's local position.\n\t\t\t *\n\t\t\t * @name Object3D#position\n\t\t\t * @type {Vector3}\n\t\t\t * @default (0,0,0)\n\t\t\t */position:{configurable:true,enumerable:true,value:position},/**\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\n\t\t\t *\n\t\t\t * @name Object3D#rotation\n\t\t\t * @type {Euler}\n\t\t\t * @default (0,0,0)\n\t\t\t */rotation:{configurable:true,enumerable:true,value:rotation},/**\n\t\t\t * Represents the object's local rotation as Quaternions.\n\t\t\t *\n\t\t\t * @name Object3D#quaternion\n\t\t\t * @type {Quaternion}\n\t\t\t */quaternion:{configurable:true,enumerable:true,value:quaternion},/**\n\t\t\t * Represents the object's local scale.\n\t\t\t *\n\t\t\t * @name Object3D#scale\n\t\t\t * @type {Vector3}\n\t\t\t * @default (1,1,1)\n\t\t\t */scale:{configurable:true,enumerable:true,value:scale},/**\n\t\t\t * Represents the object's model-view matrix.\n\t\t\t *\n\t\t\t * @name Object3D#modelViewMatrix\n\t\t\t * @type {Matrix4}\n\t\t\t */modelViewMatrix:{value:new Matrix4()},/**\n\t\t\t * Represents the object's normal matrix.\n\t\t\t *\n\t\t\t * @name Object3D#normalMatrix\n\t\t\t * @type {Matrix3}\n\t\t\t */normalMatrix:{value:new Matrix3()}});/**\n\t\t * Represents the object's transformation matrix in local space.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.matrix=new Matrix4();/**\n\t\t * Represents the object's transformation matrix in world space.\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.matrixWorld=new Matrix4();/**\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\n\t\t * rotation and scale every frame.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.matrixAutoUpdate=Object3D.DEFAULT_MATRIX_AUTO_UPDATE;/**\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\n\t\t * matrix and the object's transformation hierarchy.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.matrixWorldAutoUpdate=Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;// checked by the renderer\n/**\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\n\t\t * to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.matrixWorldNeedsUpdate=false;/**\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\n\t\t * at least one layer in common with the camera in use. This property can also be\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n\t\t *\n\t\t * @type {Layers}\n\t\t */this.layers=new Layers();/**\n\t\t * When set to `true`, the 3D object gets rendered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.visible=true;/**\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.castShadow=false;/**\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.receiveShadow=false;/**\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.frustumCulled=true;/**\n\t\t * This value allows the default rendering order of scene graph objects to be\n\t\t * overridden although opaque and transparent objects remain sorted independently.\n\t\t * When this property is set for an instance of {@link Group},all descendants\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\n\t\t * render order.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.renderOrder=0;/**\n\t\t * An array holding the animation clips of the 3D object.\n\t\t *\n\t\t * @type {Array<AnimationClip>}\n\t\t */this.animations=[];/**\n\t\t * Custom depth material to be used when rendering to the depth map. Can only be used\n\t\t * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n\t\t * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n\t\t * material for proper shadows.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */this.customDepthMaterial=undefined;/**\n\t\t * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */this.customDistanceMaterial=undefined;/**\n\t\t * An object that can be used to store custom data about the 3D object. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.userData={};}/**\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */onBeforeShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */){}/**\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */onAfterShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */){}/**\n\t * A callback that is executed immediately before a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */onBeforeRender(/* renderer, scene, camera, geometry, material, group */){}/**\n\t * A callback that is executed immediately after a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */onAfterRender(/* renderer, scene, camera, geometry, material, group */){}/**\n\t * Applies the given transformation matrix to the object and updates the object's position,\n\t * rotation and scale.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t */applyMatrix4(matrix){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);}/**\n\t * Applies a rotation represented by given the quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Object3D} A reference to this instance.\n\t */applyQuaternion(q){this.quaternion.premultiply(q);return this;}/**\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t */setRotationFromAxisAngle(axis,angle){// assumes axis is normalized\nthis.quaternion.setFromAxisAngle(axis,angle);}/**\n\t * Sets the given rotation represented as Euler angles to the 3D object.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t */setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);}/**\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\n\t *\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n\t * a pure rotation matrix (i.e, unscaled).\n\t */setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nthis.quaternion.setFromRotationMatrix(m);}/**\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The Quaternion\n\t */setRotationFromQuaternion(q){// assumes q is normalized\nthis.quaternion.copy(q);}/**\n\t * Rotates the 3D object along an axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */rotateOnAxis(axis,angle){// rotate object on axis in object space\n// axis is assumed to be normalized\n_q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(_q1);return this;}/**\n\t * Rotates the 3D object along an axis in world space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */rotateOnWorldAxis(axis,angle){// rotate object on axis in world space\n// axis is assumed to be normalized\n// method assumes no rotated parent\n_q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(_q1);return this;}/**\n\t * Rotates the 3D object around its X axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */rotateX(angle){return this.rotateOnAxis(_xAxis,angle);}/**\n\t * Rotates the 3D object around its Y axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */rotateY(angle){return this.rotateOnAxis(_yAxis,angle);}/**\n\t * Rotates the 3D object around its Z axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */rotateZ(angle){return this.rotateOnAxis(_zAxis,angle);}/**\n\t * Translate the 3D object by a distance along the given axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */translateOnAxis(axis,distance){// translate object by distance along axis in object space\n// axis is assumed to be normalized\n_v1$4.copy(axis).applyQuaternion(this.quaternion);this.position.add(_v1$4.multiplyScalar(distance));return this;}/**\n\t * Translate the 3D object by a distance along its X-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */translateX(distance){return this.translateOnAxis(_xAxis,distance);}/**\n\t * Translate the 3D object by a distance along its Y-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */translateY(distance){return this.translateOnAxis(_yAxis,distance);}/**\n\t * Translate the 3D object by a distance along its Z-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */translateZ(distance){return this.translateOnAxis(_zAxis,distance);}/**\n\t * Converts the given vector from this 3D object's local space to world space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */localToWorld(vector){this.updateWorldMatrix(true,false);return vector.applyMatrix4(this.matrixWorld);}/**\n\t * Converts the given vector from this 3D object's word space to local space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */worldToLocal(vector){this.updateWorldMatrix(true,false);return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());}/**\n\t * Rotates the object to face a point in world space.\n\t *\n\t * This method does not support objects having non-uniformly-scaled parent(s).\n\t *\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n\t * @param {number} [y] - The y coordinate in world space.\n\t * @param {number} [z] - The z coordinate in world space.\n\t */lookAt(x,y,z){// This method does not support objects having non-uniformly-scaled parent(s)\nif(x.isVector3){_target.copy(x);}else{_target.set(x,y,z);}const parent=this.parent;this.updateWorldMatrix(true,false);_position$3.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position$3,_target,this.up);}else{_m1$1.lookAt(_target,_position$3,this.up);}this.quaternion.setFromRotationMatrix(_m1$1);if(parent){_m1$1.extractRotation(parent.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.invert());}}/**\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n\t * objects may be added. Any current parent on an object passed in here will be\n\t * removed, since an object can have at most one parent.\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to add.\n\t * @return {Object3D} A reference to this instance.\n\t */add(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++){this.add(arguments[i]);}return this;}if(object===this){console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.',object);return this;}if(object&&object.isObject3D){object.removeFromParent();object.parent=this;this.children.push(object);object.dispatchEvent(_addedEvent);_childaddedEvent.child=object;this.dispatchEvent(_childaddedEvent);_childaddedEvent.child=null;}else{console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.',object);}return this;}/**\n\t * Removes the given 3D object as child from this 3D object.\n\t * An arbitrary number of objects may be removed.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @param {Object3D} object - The 3D object to remove.\n\t * @return {Object3D} A reference to this instance.\n\t */remove(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++){this.remove(arguments[i]);}return this;}const index=this.children.indexOf(object);if(index!==-1){object.parent=null;this.children.splice(index,1);object.dispatchEvent(_removedEvent);_childremovedEvent.child=object;this.dispatchEvent(_childremovedEvent);_childremovedEvent.child=null;}return this;}/**\n\t * Removes this 3D object from its current parent.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */removeFromParent(){const parent=this.parent;if(parent!==null){parent.remove(this);}return this;}/**\n\t * Removes all child objects.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */clear(){return this.remove(...this.children);}/**\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to attach.\n\t * @return {Object3D} A reference to this instance.\n\t */attach(object){// adds object as a child of this, while maintaining the object's world transform\n// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\nthis.updateWorldMatrix(true,false);_m1$1.copy(this.matrixWorld).invert();if(object.parent!==null){object.parent.updateWorldMatrix(true,false);_m1$1.multiply(object.parent.matrixWorld);}object.applyMatrix4(_m1$1);object.removeFromParent();object.parent=this;this.children.push(object);object.updateWorldMatrix(false,true);object.dispatchEvent(_addedEvent);_childaddedEvent.child=object;this.dispatchEvent(_childaddedEvent);_childaddedEvent.child=null;return this;}/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching ID.\n\t *\n\t * @param {number} id - The id.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */getObjectById(id){return this.getObjectByProperty('id',id);}/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching name.\n\t *\n\t * @param {string} name - The name.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */getObjectByName(name){return this.getObjectByProperty('name',name);}/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */getObjectByProperty(name,value){if(this[name]===value)return this;for(let i=0,l=this.children.length;i<l;i++){const child=this.children[i];const object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;}/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns all 3D objects with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\n\t * @return {Array<Object3D>} The found 3D objects.\n\t */getObjectsByProperty(name,value,result=[]){if(this[name]===value)result.push(this);const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].getObjectsByProperty(name,value,result);}return result;}/**\n\t * Returns a vector representing the position of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's position in world space.\n\t */getWorldPosition(target){this.updateWorldMatrix(true,false);return target.setFromMatrixPosition(this.matrixWorld);}/**\n\t * Returns a Quaternion representing the position of the 3D object in world space.\n\t *\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\n\t * @return {Quaternion} The 3D object's rotation in world space.\n\t */getWorldQuaternion(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,target,_scale$2);return target;}/**\n\t * Returns a vector representing the scale of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's scale in world space.\n\t */getWorldScale(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,_quaternion$2,target);return target;}/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */getWorldDirection(target){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();}/**\n\t * Abstract method to get intersections between a casted ray and this\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n\t * implement this method in order to use raycasting.\n\t *\n\t * @abstract\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\n\t */raycast(/* raycaster, intersects */){}/**\n\t * Executes the callback on this 3D object and all descendants.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */traverse(callback){callback(this);const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].traverse(callback);}}/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n\t * Descendants of invisible 3D objects are not traversed.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */traverseVisible(callback){if(this.visible===false)return;callback(this);const children=this.children;for(let i=0,l=children.length;i<l;i++){children[i].traverseVisible(callback);}}/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */traverseAncestors(callback){const parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}}/**\n\t * Updates the transformation matrix in local space by computing it from the current\n\t * position, rotation and scale values.\n\t */updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;}/**\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\n\t *\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n\t * local space. The computation of the local and world matrix can be controlled with the\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n\t */updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.matrixWorldAutoUpdate===true){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}}this.matrixWorldNeedsUpdate=false;force=true;}// make sure descendants are updated if required\nconst children=this.children;for(let i=0,l=children.length;i<l;i++){const child=children[i];child.updateMatrixWorld(force);}}/**\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n\t * update of ancestor and descendant nodes.\n\t *\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n\t */updateWorldMatrix(updateParents,updateChildren){const parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldAutoUpdate===true){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}}// make sure descendants are updated\nif(updateChildren===true){const children=this.children;for(let i=0,l=children.length;i<l;i++){const child=children[i];child.updateWorldMatrix(false,true);}}}/**\n\t * Serializes the 3D object into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized 3D object.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(meta){// meta is a string when called from JSON.stringify\nconst isRootObject=meta===undefined||typeof meta==='string';const output={};// meta is a hash used to collect geometries, materials.\n// not providing it implies that this is the root object\n// being serialized.\nif(isRootObject){// initialize meta obj\nmeta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};output.metadata={version:4.6,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization\nconst object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();object.up=this.up.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;// object specific properties\nif(this.isInstancedMesh){object.type='InstancedMesh';object.count=this.count;object.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)object.instanceColor=this.instanceColor.toJSON();}if(this.isBatchedMesh){object.type='BatchedMesh';object.perObjectFrustumCulled=this.perObjectFrustumCulled;object.sortObjects=this.sortObjects;object.drawRanges=this._drawRanges;object.reservedRanges=this._reservedRanges;object.geometryInfo=this._geometryInfo.map(info=>({...info,boundingBox:info.boundingBox?{min:info.boundingBox.min.toArray(),max:info.boundingBox.max.toArray()}:undefined,boundingSphere:info.boundingSphere?{radius:info.boundingSphere.radius,center:info.boundingSphere.center.toArray()}:undefined}));object.instanceInfo=this._instanceInfo.map(info=>({...info}));object.availableInstanceIds=this._availableInstanceIds.slice();object.availableGeometryIds=this._availableGeometryIds.slice();object.nextIndexStart=this._nextIndexStart;object.nextVertexStart=this._nextVertexStart;object.geometryCount=this._geometryCount;object.maxInstanceCount=this._maxInstanceCount;object.maxVertexCount=this._maxVertexCount;object.maxIndexCount=this._maxIndexCount;object.geometryInitialized=this._geometryInitialized;object.matricesTexture=this._matricesTexture.toJSON(meta);object.indirectTexture=this._indirectTexture.toJSON(meta);if(this._colorsTexture!==null){object.colorsTexture=this._colorsTexture.toJSON(meta);}if(this.boundingSphere!==null){object.boundingSphere={center:this.boundingSphere.center.toArray(),radius:this.boundingSphere.radius};}if(this.boundingBox!==null){object.boundingBox={min:this.boundingBox.min.toArray(),max:this.boundingBox.max.toArray()};}}//\nfunction serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isScene){if(this.background){if(this.background.isColor){object.background=this.background.toJSON();}else if(this.background.isTexture){object.background=this.background.toJSON(meta).uuid;}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){object.environment=this.environment.toJSON(meta).uuid;}}else if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);const parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){const shapes=parameters.shapes;if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];serialize(meta.shapes,shape);}}else{serialize(meta.shapes,shapes);}}}if(this.isSkinnedMesh){object.bindMode=this.bindMode;object.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){serialize(meta.skeletons,this.skeleton);object.skeleton=this.skeleton.uuid;}}if(this.material!==undefined){if(Array.isArray(this.material)){const uuids=[];for(let i=0,l=this.material.length;i<l;i++){uuids.push(serialize(meta.materials,this.material[i]));}object.material=uuids;}else{object.material=serialize(meta.materials,this.material);}}//\nif(this.children.length>0){object.children=[];for(let i=0;i<this.children.length;i++){object.children.push(this.children[i].toJSON(meta).object);}}//\nif(this.animations.length>0){object.animations=[];for(let i=0;i<this.animations.length;i++){const animation=this.animations[i];object.animations.push(serialize(meta.animations,animation));}}if(isRootObject){const geometries=extractFromCache(meta.geometries);const materials=extractFromCache(meta.materials);const textures=extractFromCache(meta.textures);const images=extractFromCache(meta.images);const shapes=extractFromCache(meta.shapes);const skeletons=extractFromCache(meta.skeletons);const animations=extractFromCache(meta.animations);const nodes=extractFromCache(meta.nodes);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(shapes.length>0)output.shapes=shapes;if(skeletons.length>0)output.skeletons=skeletons;if(animations.length>0)output.animations=animations;if(nodes.length>0)output.nodes=nodes;}output.object=object;return output;// extract data from the cache hash\n// remove metadata on each item\n// and return as array\nfunction extractFromCache(cache){const values=[];for(const key in cache){const data=cache[key];delete data.metadata;values.push(data);}return values;}}/**\n\t * Returns a new 3D object with copied values from this instance.\n\t *\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n\t * @return {Object3D} A clone of this instance.\n\t */clone(recursive){return new this.constructor().copy(this,recursive);}/**\n\t * Copies the values of the given 3D object to this instance.\n\t *\n\t * @param {Object3D} source - The 3D object to copy.\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n\t * @return {Object3D} A reference to this instance.\n\t */copy(source,recursive=true){this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.rotation.order=source.rotation.order;this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldAutoUpdate=source.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.animations=source.animations.slice();this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(let i=0;i<source.children.length;i++){const child=source.children[i];this.add(child.clone());}}return this;}}/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */Object3D.DEFAULT_UP=/*@__PURE__*/new Vector3(0,1,0);/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */Object3D.DEFAULT_MATRIX_AUTO_UPDATE=true;/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const _v0$1=/*@__PURE__*/new Vector3();const _v1$3=/*@__PURE__*/new Vector3();const _v2$2=/*@__PURE__*/new Vector3();const _v3$2=/*@__PURE__*/new Vector3();const _vab=/*@__PURE__*/new Vector3();const _vac=/*@__PURE__*/new Vector3();const _vbc=/*@__PURE__*/new Vector3();const _vap=/*@__PURE__*/new Vector3();const _vbp=/*@__PURE__*/new Vector3();const _vcp=/*@__PURE__*/new Vector3();const _v40=/*@__PURE__*/new Vector4();const _v41=/*@__PURE__*/new Vector4();const _v42=/*@__PURE__*/new Vector4();/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */class Triangle{/**\n\t * Constructs a new triangle.\n\t *\n\t * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n\t * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n\t * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n\t */constructor(a=new Vector3(),b=new Vector3(),c=new Vector3()){/**\n\t\t * The first corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.a=a;/**\n\t\t * The second corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.b=b;/**\n\t\t * The third corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.c=c;}/**\n\t * Computes the normal vector of a triangle.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */static getNormal(a,b,c,target){target.subVectors(c,b);_v0$1.subVectors(a,b);target.cross(_v0$1);const targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);}/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */static getBarycoord(point,a,b,c,target){// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n_v0$1.subVectors(c,a);_v1$3.subVectors(b,a);_v2$2.subVectors(point,a);const dot00=_v0$1.dot(_v0$1);const dot01=_v0$1.dot(_v1$3);const dot02=_v0$1.dot(_v2$2);const dot11=_v1$3.dot(_v1$3);const dot12=_v1$3.dot(_v2$2);const denom=dot00*dot11-dot01*dot01;// collinear or singular triangle\nif(denom===0){target.set(0,0,0);return null;}const invDenom=1/denom;const u=(dot11*dot02-dot01*dot12)*invDenom;const v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1\nreturn target.set(1-u-v,v,u);}/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */static containsPoint(point,a,b,c){// if the triangle is degenerate then we can't contain a point\nif(this.getBarycoord(point,a,b,c,_v3$2)===null){return false;}return _v3$2.x>=0&&_v3$2.y>=0&&_v3$2.x+_v3$2.y<=1;}/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} p1 - The first corner of the triangle.\n\t * @param {Vector3} p2 - The second corner of the triangle.\n\t * @param {Vector3} p3 - The third corner of the triangle.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */static getInterpolation(point,p1,p2,p3,v1,v2,v3,target){if(this.getBarycoord(point,p1,p2,p3,_v3$2)===null){target.x=0;target.y=0;if('z'in target)target.z=0;if('w'in target)target.w=0;return null;}target.setScalar(0);target.addScaledVector(v1,_v3$2.x);target.addScaledVector(v2,_v3$2.y);target.addScaledVector(v3,_v3$2.z);return target;}/**\n\t * Computes the value barycentrically interpolated for the given attribute and indices.\n\t *\n\t * @param {BufferAttribute} attr - The attribute to interpolate.\n\t * @param {number} i1 - Index of first vertex.\n\t * @param {number} i2 - Index of second vertex.\n\t * @param {number} i3 - Index of third vertex.\n\t * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The interpolated attribute value.\n\t */static getInterpolatedAttribute(attr,i1,i2,i3,barycoord,target){_v40.setScalar(0);_v41.setScalar(0);_v42.setScalar(0);_v40.fromBufferAttribute(attr,i1);_v41.fromBufferAttribute(attr,i2);_v42.fromBufferAttribute(attr,i3);target.setScalar(0);target.addScaledVector(_v40,barycoord.x);target.addScaledVector(_v41,barycoord.y);target.addScaledVector(_v42,barycoord.z);return target;}/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */static isFrontFacing(a,b,c,direction){_v0$1.subVectors(c,b);_v1$3.subVectors(a,b);// strictly front facing\nreturn _v0$1.cross(_v1$3).dot(direction)<0?true:false;}/**\n\t * Sets the triangle's vertices by copying the given values.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;}/**\n\t * Sets the triangle's vertices by copying the given array values.\n\t *\n\t * @param {Array<Vector3>} points - An array with 3D points.\n\t * @param {number} i0 - The array index representing the first corner of the triangle.\n\t * @param {number} i1 - The array index representing the second corner of the triangle.\n\t * @param {number} i2 - The array index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;}/**\n\t * Sets the triangle's vertices by copying the given attribute values.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n\t * @param {number} i0 - The attribute index representing the first corner of the triangle.\n\t * @param {number} i1 - The attribute index representing the second corner of the triangle.\n\t * @param {number} i2 - The attribute index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */setFromAttributeAndIndices(attribute,i0,i1,i2){this.a.fromBufferAttribute(attribute,i0);this.b.fromBufferAttribute(attribute,i1);this.c.fromBufferAttribute(attribute,i2);return this;}/**\n\t * Returns a new triangle with copied values from this instance.\n\t *\n\t * @return {Triangle} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given triangle to this instance.\n\t *\n\t * @param {Triangle} triangle - The triangle to copy.\n\t * @return {Triangle} A reference to this triangle.\n\t */copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;}/**\n\t * Computes the area of the triangle.\n\t *\n\t * @return {number} The triangle's area.\n\t */getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*0.5;}/**\n\t * Computes the midpoint of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's midpoint.\n\t */getMidpoint(target){return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);}/**\n\t * Computes the normal of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);}/**\n\t * Computes a plane the triangle lies within.\n\t *\n\t * @param {Plane} target - The target vector that is used to store the method's result.\n\t * @return {Plane} The plane the triangle lies within.\n\t */getPlane(target){return target.setFromCoplanarPoints(this.a,this.b,this.c);}/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);}/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */getInterpolation(point,v1,v2,v3,target){return Triangle.getInterpolation(point,this.a,this.b,this.c,v1,v2,v3,target);}/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);}/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction);}/**\n\t * Returns `true` if this triangle intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this triangle intersects with the given box or not.\n\t */intersectsBox(box){return box.intersectsTriangle(this);}/**\n\t * Returns the closest point on the triangle to the given point.\n\t *\n\t * @param {Vector3} p - The point to compute the closest point for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the triangle.\n\t */closestPointToPoint(p,target){const a=this.a,b=this.b,c=this.c;let v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n// basically, we're distinguishing which of the voronoi regions of the triangle\n// the point lies in with the minimum amount of redundant computation.\n_vab.subVectors(b,a);_vac.subVectors(c,a);_vap.subVectors(p,a);const d1=_vab.dot(_vap);const d2=_vac.dot(_vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)\nreturn target.copy(a);}_vbp.subVectors(p,b);const d3=_vab.dot(_vbp);const d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)\nreturn target.copy(b);}const vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)\nreturn target.copy(a).addScaledVector(_vab,v);}_vcp.subVectors(p,c);const d5=_vab.dot(_vcp);const d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)\nreturn target.copy(c);}const vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)\nreturn target.copy(a).addScaledVector(_vac,w);}const va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){_vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)\nreturn target.copy(b).addScaledVector(_vbc,w);// edge region of BC\n}// face region\nconst denom=1/(va+vb+vc);// u = va * denom\nv=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w);}/**\n\t * Returns `true` if this triangle is equal with the given one.\n\t *\n\t * @param {Triangle} triangle - The triangle to test for equality.\n\t * @return {boolean} Whether this triangle is equal with the given one.\n\t */equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}}const _colorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */class Color{/**\n\t * Constructs a new color.\n\t *\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n\t * and that method is used throughout the rest of the documentation.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t */constructor(r,g,b){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isColor=true;/**\n\t\t * The red component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.r=1;/**\n\t\t * The green component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.g=1;/**\n\t\t * The blue component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.b=1;return this.set(r,g,b);}/**\n\t * Sets the colors's components from the given values.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t * @return {Color} A reference to this color.\n\t */set(r,g,b){if(g===undefined&&b===undefined){// r is THREE.Color, hex or string\nconst value=r;if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}}else{this.setRGB(r,g,b);}return this;}/**\n\t * Sets the colors's components to the given scalar value.\n\t *\n\t * @param {number} scalar - The scalar value.\n\t * @return {Color} A reference to this color.\n\t */setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;}/**\n\t * Sets this color from a hexadecimal value.\n\t *\n\t * @param {number} hex - The hexadecimal value.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */setHex(hex,colorSpace=SRGBColorSpace){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;ColorManagement.toWorkingColorSpace(this,colorSpace);return this;}/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */setRGB(r,g,b,colorSpace=ColorManagement.workingColorSpace){this.r=r;this.g=g;this.b=b;ColorManagement.toWorkingColorSpace(this,colorSpace);return this;}/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */setHSL(h,s,l,colorSpace=ColorManagement.workingColorSpace){// h,s,l ranges are in 0.0 - 1.0\nh=euclideanModulo(h,1);s=clamp(s,0,1);l=clamp(l,0,1);if(s===0){this.r=this.g=this.b=l;}else{const p=l<=0.5?l*(1+s):l+s-l*s;const q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}ColorManagement.toWorkingColorSpace(this,colorSpace);return this;}/**\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n\t * all 140 color names are supported).\n\t *\n\t * @param {string} style - Color as a CSS-style string.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */setStyle(style,colorSpace=SRGBColorSpace){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}let m;if(m=/^(\\w+)\\(([^\\)]*)\\)/.exec(style)){// rgb / hsl\nlet color;const name=m[1];const components=m[2];switch(name){case'rgb':case'rgba':if(color=/^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)\nhandleAlpha(color[4]);return this.setRGB(Math.min(255,parseInt(color[1],10))/255,Math.min(255,parseInt(color[2],10))/255,Math.min(255,parseInt(color[3],10))/255,colorSpace);}if(color=/^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\nhandleAlpha(color[4]);return this.setRGB(Math.min(100,parseInt(color[1],10))/100,Math.min(100,parseInt(color[2],10))/100,Math.min(100,parseInt(color[3],10))/100,colorSpace);}break;case'hsl':case'hsla':if(color=/^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\nhandleAlpha(color[4]);return this.setHSL(parseFloat(color[1])/360,parseFloat(color[2])/100,parseFloat(color[3])/100,colorSpace);}break;default:console.warn('THREE.Color: Unknown color model '+style);}}else if(m=/^\\#([A-Fa-f\\d]+)$/.exec(style)){// hex color\nconst hex=m[1];const size=hex.length;if(size===3){// #ff0\nreturn this.setRGB(parseInt(hex.charAt(0),16)/15,parseInt(hex.charAt(1),16)/15,parseInt(hex.charAt(2),16)/15,colorSpace);}else if(size===6){// #ff0000\nreturn this.setHex(parseInt(hex,16),colorSpace);}else{console.warn('THREE.Color: Invalid hex color '+style);}}else if(style&&style.length>0){return this.setColorName(style,colorSpace);}return this;}/**\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\n\t * you don't need the other CSS-style formats.\n\t *\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n\t * ```js\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\n\t * ```\n\t *\n\t * @param {string} style - The color name.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */setColorName(style,colorSpace=SRGBColorSpace){// color keywords\nconst hex=_colorKeywords[style.toLowerCase()];if(hex!==undefined){// red\nthis.setHex(hex,colorSpace);}else{// unknown color\nconsole.warn('THREE.Color: Unknown color '+style);}return this;}/**\n\t * Returns a new color with copied values from this instance.\n\t *\n\t * @return {Color} A clone of this instance.\n\t */clone(){return new this.constructor(this.r,this.g,this.b);}/**\n\t * Copies the values of the given color to this instance.\n\t *\n\t * @param {Color} color - The color to copy.\n\t * @return {Color} A reference to this color.\n\t */copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;}/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;}/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;}/**\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */convertSRGBToLinear(){this.copySRGBToLinear(this);return this;}/**\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;}/**\n\t * Returns the hexadecimal value of this color.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {number} The hexadecimal value.\n\t */getHex(colorSpace=SRGBColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),colorSpace);return Math.round(clamp(_color.r*255,0,255))*65536+Math.round(clamp(_color.g*255,0,255))*256+Math.round(clamp(_color.b*255,0,255));}/**\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The hexadecimal value as a string.\n\t */getHexString(colorSpace=SRGBColorSpace){return('000000'+this.getHex(colorSpace).toString(16)).slice(-6);}/**\n\t * Converts the colors RGB values into the HSL format and stores them into the\n\t * given target object.\n\t *\n\t * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n\t */getHSL(target,colorSpace=ColorManagement.workingColorSpace){// h,s,l ranges are in 0.0 - 1.0\nColorManagement.fromWorkingColorSpace(_color.copy(this),colorSpace);const r=_color.r,g=_color.g,b=_color.b;const max=Math.max(r,g,b);const min=Math.min(r,g,b);let hue,saturation;const lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else{const delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;}/**\n\t * Returns the RGB values of this color and stores them into the given target object.\n\t *\n\t * @param {Color} target - The target color that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} The RGB representation of this color.\n\t */getRGB(target,colorSpace=ColorManagement.workingColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),colorSpace);target.r=_color.r;target.g=_color.g;target.b=_color.b;return target;}/**\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The CSS representation of this color.\n\t */getStyle(colorSpace=SRGBColorSpace){ColorManagement.fromWorkingColorSpace(_color.copy(this),colorSpace);const r=_color.r,g=_color.g,b=_color.b;if(colorSpace!==SRGBColorSpace){// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\nreturn`color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;}return`rgb(${Math.round(r*255)},${Math.round(g*255)},${Math.round(b*255)})`;}/**\n\t * Adds the given HSL values to this color's values.\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\n\t * and then converts the color back to RGB.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @return {Color} A reference to this color.\n\t */offsetHSL(h,s,l){this.getHSL(_hslA);return this.setHSL(_hslA.h+h,_hslA.s+s,_hslA.l+l);}/**\n\t * Adds the RGB values of the given color to the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to add.\n\t * @return {Color} A reference to this color.\n\t */add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;}/**\n\t * Adds the RGB values of the given colors and stores the result in this instance.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @return {Color} A reference to this color.\n\t */addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;}/**\n\t * Adds the given scalar value to the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Color} A reference to this color.\n\t */addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;}/**\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to subtract.\n\t * @return {Color} A reference to this color.\n\t */sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;}/**\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to multiply.\n\t * @return {Color} A reference to this color.\n\t */multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;}/**\n\t * Multiplies the given scalar value with the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to multiply.\n\t * @return {Color} A reference to this color.\n\t */multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;}/**\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\n\t * given color. The alpha argument can be thought of as the ratio between\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;}/**\n\t * Linearly interpolates between the given colors and stores the result in this instance.\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n\t * is the first and `1.0` is the second color.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */lerpColors(color1,color2,alpha){this.r=color1.r+(color2.r-color1.r)*alpha;this.g=color1.g+(color2.g-color1.g)*alpha;this.b=color1.b+(color2.b-color1.b)*alpha;return this;}/**\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\n\t * from one color to the other, but instead going through all the hues in between\n\t * those two colors. The alpha argument can be thought of as the ratio between\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */lerpHSL(color,alpha){this.getHSL(_hslA);color.getHSL(_hslB);const h=lerp(_hslA.h,_hslB.h,alpha);const s=lerp(_hslA.s,_hslB.s,alpha);const l=lerp(_hslA.l,_hslB.l,alpha);this.setHSL(h,s,l);return this;}/**\n\t * Sets the color's RGB components from the given 3D vector.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Color} A reference to this color.\n\t */setFromVector3(v){this.r=v.x;this.g=v.y;this.b=v.z;return this;}/**\n\t * Transforms this color with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix.\n\t * @return {Color} A reference to this color.\n\t */applyMatrix3(m){const r=this.r,g=this.g,b=this.b;const e=m.elements;this.r=e[0]*r+e[3]*g+e[6]*b;this.g=e[1]*r+e[4]*g+e[7]*b;this.b=e[2]*r+e[5]*g+e[8]*b;return this;}/**\n\t * Returns `true` if this color is equal with the given one.\n\t *\n\t * @param {Color} c - The color to test for equality.\n\t * @return {boolean} Whether this bounding color is equal with the given one.\n\t */equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;}/**\n\t * Sets this color's RGB components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the RGB values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Color} A reference to this color.\n\t */fromArray(array,offset=0){this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;}/**\n\t * Writes the RGB components of this color to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The color components.\n\t */toArray(array=[],offset=0){array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;}/**\n\t * Sets the components of this color from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Color} A reference to this color.\n\t */fromBufferAttribute(attribute,index){this.r=attribute.getX(index);this.g=attribute.getY(index);this.b=attribute.getZ(index);return this;}/**\n\t * This methods defines the serialization result of this class. Returns the color\n\t * as a hexadecimal value.\n\t *\n\t * @return {number} The hexadecimal value.\n\t */toJSON(){return this.getHex();}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b;}}const _color=/*@__PURE__*/new Color();/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */Color.NAMES=_colorKeywords;let _materialId=0;/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */class Material extends EventDispatcher{/**\n\t * Constructs a new material.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMaterial=true;/**\n\t\t * The ID of the material.\n\t\t *\n\t\t * @name Material#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_materialId++});/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.type='Material';/**\n\t\t * Defines the blending type of the material.\n\t\t *\n\t\t * It must be set to `CustomBlending` if custom blending properties like\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n\t\t * should have any effect.\n\t\t *\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n\t\t * @default NormalBlending\n\t\t */this.blending=NormalBlending;/**\n\t\t * Defines which side of faces will be rendered - front, back or both.\n\t\t *\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\n\t\t * @default FrontSide\n\t\t */this.side=FrontSide;/**\n\t\t * If set to `true`, vertex colors should be used.\n\t\t *\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n\t\t * four (RGBA) component color buffer attribute is used.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.vertexColors=false;/**\n\t\t * Defines how transparent the material is.\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n\t\t *\n\t\t * If the {@link Material#transparent} is not set to `true`,\n\t\t * the material will remain fully opaque and this value will only affect its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.opacity=1;/**\n\t\t * Defines whether this material is transparent. This has an effect on\n\t\t * rendering as transparent objects need special treatment and are rendered\n\t\t * after non-transparent objects.\n\t\t *\n\t\t * When set to true, the extent to which the material is transparent is\n\t\t * controlled by {@link Material#opacity}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.transparent=false;/**\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.alphaHash=false;/**\n\t\t * Defines the blending source factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default SrcAlphaFactor\n\t\t */this.blendSrc=SrcAlphaFactor;/**\n\t\t * Defines the blending destination factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */this.blendDst=OneMinusSrcAlphaFactor;/**\n\t\t * Defines the blending equation.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default AddEquation\n\t\t */this.blendEquation=AddEquation;/**\n\t\t * Defines the blending source alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */this.blendSrcAlpha=null;/**\n\t\t * Defines the blending destination alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */this.blendDstAlpha=null;/**\n\t\t * Defines the blending equation of the alpha channel.\n\t\t *\n\t\t * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default null\n\t\t */this.blendEquationAlpha=null;/**\n\t\t * Represents the RGB values of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.blendColor=new Color(0,0,0);/**\n\t\t * Represents the alpha value of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.blendAlpha=0;/**\n\t\t * Defines the depth function.\n\t\t *\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n\t\t * @default LessEqualDepth\n\t\t */this.depthFunc=LessEqualDepth;/**\n\t\t * Whether to have depth test enabled when rendering this material.\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.depthTest=true;/**\n\t\t * Whether rendering this material has any effect on the depth buffer.\n\t\t *\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\n\t\t * order to layer several things together without creating z-index artifacts.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.depthWrite=true;/**\n\t\t * The bit mask to use when writing to the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */this.stencilWriteMask=0xff;/**\n\t\t * The stencil comparison function to use.\n\t\t *\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n\t\t * @default AlwaysStencilFunc\n\t\t */this.stencilFunc=AlwaysStencilFunc;/**\n\t\t * The value to use when performing stencil comparisons or stencil operations.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.stencilRef=0;/**\n\t\t * The bit mask to use when comparing against the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */this.stencilFuncMask=0xff;/**\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */this.stencilFail=KeepStencilOp;/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` but the depth test fails.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */this.stencilZFail=KeepStencilOp;/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` and the depth test passes.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */this.stencilZPass=KeepStencilOp;/**\n\t\t * Whether stencil operations are performed against the stencil buffer. In\n\t\t * order to perform writes or comparisons against the stencil buffer this\n\t\t * value must be `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.stencilWrite=false;/**\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\n\t\t * space. These planes apply to the objects this material is attached to.\n\t\t * Points in space whose signed distance to the plane is negative are clipped\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n\t\t * be `true`.\n\t\t *\n\t\t * @type {?Array<Plane>}\n\t\t * @default null\n\t\t */this.clippingPlanes=null;/**\n\t\t * Changes the behavior of clipping planes so that only their intersection is\n\t\t * clipped, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.clipIntersection=false;/**\n\t\t * Defines whether to clip shadows according to the clipping planes specified\n\t\t * on this material.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.clipShadows=false;/**\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\n\t\t * is determined as follows:\n\t\t *\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n\t\t *\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\n\t\t * @default null\n\t\t */this.shadowSide=null;/**\n\t\t * Whether to render the material's color.\n\t\t *\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n\t\t * objects that occlude other objects.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.colorWrite=true;/**\n\t\t * Override the renderer's default precision for this material.\n\t\t *\n\t\t * @type {?('highp'|'mediump'|'lowp')}\n\t\t * @default null\n\t\t */this.precision=null;/**\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\n\t\t * The offset is added before the depth test is performed and before the value is written\n\t\t * into the depth buffer.\n\t\t *\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n\t\t * rendering solids with highlighted edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.polygonOffset=false;/**\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.polygonOffsetFactor=0;/**\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.polygonOffsetUnits=0;/**\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.dithering=false;/**\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.alphaToCoverage=false;/**\n\t\t * Whether to premultiply the alpha (transparency) value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.premultipliedAlpha=false;/**\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\n\t\t *\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n\t\t * disable the two pass rendering to avoid performance issues.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.forceSinglePass=false;/**\n\t\t * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.allowOverride=true;/**\n\t\t * Defines whether 3D objects using this material are visible.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.visible=true;/**\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n\t\t *\n\t\t * It is ignored when rendering to a render target or using post processing or when using\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.toneMapped=true;/**\n\t\t * An object that can be used to store custom data about the Material. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.userData={};/**\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */this.version=0;this._alphaTest=0;}/**\n\t * Sets the alpha value to be used when running an alpha test. The material\n\t * will not be rendered if the opacity is lower than this value.\n\t *\n\t * @type {number}\n\t * @readonly\n\t * @default 0\n\t */get alphaTest(){return this._alphaTest;}set alphaTest(value){if(this._alphaTest>0!==value>0){this.version++;}this._alphaTest=value;}/**\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Object} group - The geometry group data.\n\t */onBeforeRender(/* renderer, scene, camera, geometry, object, group */){}/**\n\t * An optional callback that is executed immediately before the shader\n\t * program is compiled. This function is called with the shader source code\n\t * as a parameter. Useful for the modification of built-in materials.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n\t *\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\n\t */onBeforeCompile(/* shaderobject, renderer */){}/**\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n\t * shader or recompile the shader for this material as needed.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @return {string} The custom program cache key.\n\t */customProgramCacheKey(){return this.onBeforeCompile.toString();}/**\n\t * This method can be used to set default values from parameter objects.\n\t * It is a generic implementation so it can be used with different types\n\t * of materials.\n\t *\n\t * @param {Object} [values] - The material values to set.\n\t */setValues(values){if(values===undefined)return;for(const key in values){const newValue=values[key];if(newValue===undefined){console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);continue;}const currentValue=this[key];if(currentValue===undefined){console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else{this[key]=newValue;}}}/**\n\t * Serializes the material into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized material.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(meta){const isRootObject=meta===undefined||typeof meta==='string';if(isRootObject){meta={textures:{},images:{}};}const data={metadata:{version:4.6,type:'Material',generator:'Material.toJSON'}};// standard Material serialization\ndata.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.sheen!==undefined)data.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)data.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)data.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity!==undefined&&this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.specularIntensity!==undefined)data.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)data.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearcoat!==undefined)data.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)data.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid;}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid;}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid;data.clearcoatNormalScale=this.clearcoatNormalScale.toArray();}if(this.dispersion!==undefined)data.dispersion=this.dispersion;if(this.iridescence!==undefined)data.iridescence=this.iridescence;if(this.iridescenceIOR!==undefined)data.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==undefined)data.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){data.iridescenceMap=this.iridescenceMap.toJSON(meta).uuid;}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){data.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(meta).uuid;}if(this.anisotropy!==undefined)data.anisotropy=this.anisotropy;if(this.anisotropyRotation!==undefined)data.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){data.anisotropyMap=this.anisotropyMap.toJSON(meta).uuid;}if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.matcap&&this.matcap.isTexture)data.matcap=this.matcap.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture){data.lightMap=this.lightMap.toJSON(meta).uuid;data.lightMapIntensity=this.lightMapIntensity;}if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)data.specularColorMap=this.specularColorMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;if(this.combine!==undefined)data.combine=this.combine;}if(this.envMapRotation!==undefined)data.envMapRotation=this.envMapRotation.toArray();if(this.envMapIntensity!==undefined)data.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)data.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)data.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.transmission!==undefined)data.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)data.transmissionMap=this.transmissionMap.toJSON(meta).uuid;if(this.thickness!==undefined)data.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)data.thicknessMap=this.thicknessMap.toJSON(meta).uuid;if(this.attenuationDistance!==undefined&&this.attenuationDistance!==Infinity)data.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)data.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)data.size=this.size;if(this.shadowSide!==null)data.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors===true)data.vertexColors=true;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=true;if(this.blendSrc!==SrcAlphaFactor)data.blendSrc=this.blendSrc;if(this.blendDst!==OneMinusSrcAlphaFactor)data.blendDst=this.blendDst;if(this.blendEquation!==AddEquation)data.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)data.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)data.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)data.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)data.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)data.blendAlpha=this.blendAlpha;if(this.depthFunc!==LessEqualDepth)data.depthFunc=this.depthFunc;if(this.depthTest===false)data.depthTest=this.depthTest;if(this.depthWrite===false)data.depthWrite=this.depthWrite;if(this.colorWrite===false)data.colorWrite=this.colorWrite;if(this.stencilWriteMask!==0xff)data.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==AlwaysStencilFunc)data.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)data.stencilRef=this.stencilRef;if(this.stencilFuncMask!==0xff)data.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==KeepStencilOp)data.stencilFail=this.stencilFail;if(this.stencilZFail!==KeepStencilOp)data.stencilZFail=this.stencilZFail;if(this.stencilZPass!==KeepStencilOp)data.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)data.stencilWrite=this.stencilWrite;// rotation (SpriteMaterial)\nif(this.rotation!==undefined&&this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==undefined&&this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.alphaHash===true)data.alphaHash=true;if(this.alphaToCoverage===true)data.alphaToCoverage=true;if(this.premultipliedAlpha===true)data.premultipliedAlpha=true;if(this.forceSinglePass===true)data.forceSinglePass=true;if(this.wireframe===true)data.wireframe=true;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)data.flatShading=true;if(this.visible===false)data.visible=false;if(this.toneMapped===false)data.toneMapped=false;if(this.fog===false)data.fog=false;if(Object.keys(this.userData).length>0)data.userData=this.userData;// TODO: Copied from Object3D.toJSON\nfunction extractFromCache(cache){const values=[];for(const key in cache){const data=cache[key];delete data.metadata;values.push(data);}return values;}if(isRootObject){const textures=extractFromCache(meta.textures);const images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;}/**\n\t * Returns a new material with copied values from this instance.\n\t *\n\t * @return {Material} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given material to this instance.\n\t *\n\t * @param {Material} source - The material to copy.\n\t * @return {Material} A reference to this instance.\n\t */copy(source){this.name=source.name;this.blending=source.blending;this.side=source.side;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.blendColor.copy(source.blendColor);this.blendAlpha=source.blendAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.stencilWriteMask=source.stencilWriteMask;this.stencilFunc=source.stencilFunc;this.stencilRef=source.stencilRef;this.stencilFuncMask=source.stencilFuncMask;this.stencilFail=source.stencilFail;this.stencilZFail=source.stencilZFail;this.stencilZPass=source.stencilZPass;this.stencilWrite=source.stencilWrite;const srcPlanes=source.clippingPlanes;let dstPlanes=null;if(srcPlanes!==null){const n=srcPlanes.length;dstPlanes=new Array(n);for(let i=0;i!==n;++i){dstPlanes[i]=srcPlanes[i].clone();}}this.clippingPlanes=dstPlanes;this.clipIntersection=source.clipIntersection;this.clipShadows=source.clipShadows;this.shadowSide=source.shadowSide;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.alphaHash=source.alphaHash;this.alphaToCoverage=source.alphaToCoverage;this.premultipliedAlpha=source.premultipliedAlpha;this.forceSinglePass=source.forceSinglePass;this.visible=source.visible;this.toneMapped=source.toneMapped;this.userData=JSON.parse(JSON.stringify(source.userData));return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Material#dispose\n\t */dispose(){/**\n\t\t * Fires when the material has been disposed of.\n\t\t *\n\t\t * @event Material#dispose\n\t\t * @type {Object}\n\t\t */this.dispatchEvent({type:'dispose'});}/**\n\t * Setting this property to `true` indicates the engine the material\n\t * needs to be recompiled.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true)this.version++;}}/**\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\n *\n * This material is not affected by lights.\n *\n * @augments Material\n */class MeshBasicMaterial extends Material{/**\n\t * Constructs a new mesh basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshBasicMaterial=true;this.type='MeshBasicMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);// emissive\n/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.lightMap=null;/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.lightMapIntensity=1.0;/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.aoMap=null;/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aoMapIntensity=1.0;/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.specularMap=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.envMap=null;/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.envMapRotation=new Euler();/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */this.combine=MultiplyOperation;/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.reflectivity=1;/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */this.refractionRatio=0.98;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinecap='round';/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinejoin='round';/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapRotation.copy(source.envMapRotation);this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.fog=source.fog;return this;}}// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\nconst _tables=/*@__PURE__*/_generateTables();function _generateTables(){// float32 to float16 helpers\nconst buffer=new ArrayBuffer(4);const floatView=new Float32Array(buffer);const uint32View=new Uint32Array(buffer);const baseTable=new Uint32Array(512);const shiftTable=new Uint32Array(512);for(let i=0;i<256;++i){const e=i-127;// very small number (0, -0)\nif(e<-27){baseTable[i]=0x0000;baseTable[i|0x100]=0x8000;shiftTable[i]=24;shiftTable[i|0x100]=24;// small number (denorm)\n}else if(e<-14){baseTable[i]=0x0400>>-e-14;baseTable[i|0x100]=0x0400>>-e-14|0x8000;shiftTable[i]=-e-1;shiftTable[i|0x100]=-e-1;// normal number\n}else if(e<=15){baseTable[i]=e+15<<10;baseTable[i|0x100]=e+15<<10|0x8000;shiftTable[i]=13;shiftTable[i|0x100]=13;// large number (Infinity, -Infinity)\n}else if(e<128){baseTable[i]=0x7c00;baseTable[i|0x100]=0xfc00;shiftTable[i]=24;shiftTable[i|0x100]=24;// stay (NaN, Infinity, -Infinity)\n}else{baseTable[i]=0x7c00;baseTable[i|0x100]=0xfc00;shiftTable[i]=13;shiftTable[i|0x100]=13;}}// float16 to float32 helpers\nconst mantissaTable=new Uint32Array(2048);const exponentTable=new Uint32Array(64);const offsetTable=new Uint32Array(64);for(let i=1;i<1024;++i){let m=i<<13;// zero pad mantissa bits\nlet e=0;// zero exponent\n// normalized\nwhile((m&0x00800000)===0){m<<=1;e-=0x00800000;// decrement exponent\n}m&=-8388609;// clear leading 1 bit\ne+=0x38800000;// adjust bias\nmantissaTable[i]=m|e;}for(let i=1024;i<2048;++i){mantissaTable[i]=0x38000000+(i-1024<<13);}for(let i=1;i<31;++i){exponentTable[i]=i<<23;}exponentTable[31]=0x47800000;exponentTable[32]=0x80000000;for(let i=33;i<63;++i){exponentTable[i]=0x80000000+(i-32<<23);}exponentTable[63]=0xc7800000;for(let i=1;i<64;++i){if(i!==32){offsetTable[i]=1024;}}return{floatView:floatView,uint32View:uint32View,baseTable:baseTable,shiftTable:shiftTable,mantissaTable:mantissaTable,exponentTable:exponentTable,offsetTable:offsetTable};}/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */function toHalfFloat(val){if(Math.abs(val)>65504)console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');val=clamp(val,-65504,65504);_tables.floatView[0]=val;const f=_tables.uint32View[0];const e=f>>23&0x1ff;return _tables.baseTable[e]+((f&0x007fffff)>>_tables.shiftTable[e]);}/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */function fromHalfFloat(val){const m=val>>10;_tables.uint32View[0]=_tables.mantissaTable[_tables.offsetTable[m]+(val&0x3ff)]+_tables.exponentTable[m];return _tables.floatView[0];}/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */class DataUtils{/**\n\t * Returns a half precision floating point value (FP16) from the given single\n\t * precision floating point value (FP32).\n\t *\n\t * @param {number} val - A single precision floating point value.\n\t * @return {number} The FP16 value.\n\t */static toHalfFloat(val){return toHalfFloat(val);}/**\n\t * Returns a single precision floating point value (FP32) from the given half\n\t * precision floating point value (FP16).\n\t *\n\t * @param {number} val - A half precision floating point value.\n\t * @return {number} The FP32 value.\n\t */static fromHalfFloat(val){return fromHalfFloat(val);}}const _vector$9=/*@__PURE__*/new Vector3();const _vector2$1=/*@__PURE__*/new Vector2();let _id$2=0;/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */class BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized=false){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBufferAttribute=true;/**\n\t\t * The ID of the buffer attribute.\n\t\t *\n\t\t * @name BufferAttribute#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_id$2++});/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The array holding the attribute data. It should have `itemSize * numVertices`\n\t\t * elements, where `numVertices` is the number of vertices in the associated geometry.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.array=array;/**\n\t\t * The number of values of the array that should be associated with a particular vertex.\n\t\t * For instance, if this attribute is storing a 3-component vector (such as a position,\n\t\t * normal, or color), then the value should be `3`.\n\t\t *\n\t\t * @type {number}\n\t\t */this.itemSize=itemSize;/**\n\t\t * Represents the number of items this buffer attribute stores. It is internally computed\n\t\t * by dividing the `array` length by the `itemSize`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */this.count=array!==undefined?array.length/itemSize:0;/**\n\t\t * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n\t\t * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n\t\t * and `normalized` is `true`, the values `0 -+65535` in the array data will be mapped to\n\t\t * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n\t\t * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */this.normalized=normalized;/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */this.usage=StaticDrawUsage;/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */this.updateRanges=[];/**\n\t\t * Configures the bound GPU type for use in shaders.\n\t\t *\n\t\t * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n\t\t * For lower precision float types, use `Float16BufferAttribute`.\n\t\t *\n\t\t * @type {(FloatType|IntType)}\n\t\t * @default FloatType\n\t\t */this.gpuType=FloatType;/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */this.version=0;}/**\n\t * A callback function that is executed after the renderer has transferred the attribute\n\t * array data to the GPU.\n\t */onUploadCallback(){}/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true)this.version++;}/**\n\t * Sets the usage of this buffer attribute.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {BufferAttribute} A reference to this buffer attribute.\n\t */setUsage(value){this.usage=value;return this;}/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */addUpdateRange(start,count){this.updateRanges.push({start,count});}/**\n\t * Clears the update ranges.\n\t */clearUpdateRanges(){this.updateRanges.length=0;}/**\n\t * Copies the values of the given buffer attribute to this instance.\n\t *\n\t * @param {BufferAttribute} source - The buffer attribute to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.usage=source.usage;this.gpuType=source.gpuType;return this;}/**\n\t * Copies a vector from the given buffer attribute to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this buffer attribute.\n\t * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n\t * @param {number} index2 - The source index into the given buffer attribute.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(let i=0,l=this.itemSize;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;}/**\n\t * Copies the given array data into this buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} array - The array to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */copyArray(array){this.array.set(array);return this;}/**\n\t * Applies the given 3x3 matrix to the given attribute. Works with\n\t * item size `2` and `3`.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */applyMatrix3(m){if(this.itemSize===2){for(let i=0,l=this.count;i<l;i++){_vector2$1.fromBufferAttribute(this,i);_vector2$1.applyMatrix3(m);this.setXY(i,_vector2$1.x,_vector2$1.y);}}else if(this.itemSize===3){for(let i=0,l=this.count;i<l;i++){_vector$9.fromBufferAttribute(this,i);_vector$9.applyMatrix3(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}}return this;}/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */applyMatrix4(m){for(let i=0,l=this.count;i<l;i++){_vector$9.fromBufferAttribute(this,i);_vector$9.applyMatrix4(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++){_vector$9.fromBufferAttribute(this,i);_vector$9.applyNormalMatrix(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */transformDirection(m){for(let i=0,l=this.count;i<l;i++){_vector$9.fromBufferAttribute(this,i);_vector$9.transformDirection(m);this.setXYZ(i,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}/**\n\t * Sets the given array data in the buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this buffer attribute's array.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */set(value,offset=0){// Matching BufferAttribute constructor, do not normalize the array.\nthis.array.set(value,offset);return this;}/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */getComponent(index,component){let value=this.array[index*this.itemSize+component];if(this.normalized)value=denormalize(value,this.array);return value;}/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setComponent(index,component,value){if(this.normalized)value=normalize(value,this.array);this.array[index*this.itemSize+component]=value;return this;}/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */getX(index){let x=this.array[index*this.itemSize];if(this.normalized)x=denormalize(x,this.array);return x;}/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setX(index,x){if(this.normalized)x=normalize(x,this.array);this.array[index*this.itemSize]=x;return this;}/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */getY(index){let y=this.array[index*this.itemSize+1];if(this.normalized)y=denormalize(y,this.array);return y;}/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setY(index,y){if(this.normalized)y=normalize(y,this.array);this.array[index*this.itemSize+1]=y;return this;}/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */getZ(index){let z=this.array[index*this.itemSize+2];if(this.normalized)z=denormalize(z,this.array);return z;}/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setZ(index,z){if(this.normalized)z=normalize(z,this.array);this.array[index*this.itemSize+2]=z;return this;}/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */getW(index){let w=this.array[index*this.itemSize+3];if(this.normalized)w=denormalize(w,this.array);return w;}/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setW(index,w){if(this.normalized)w=normalize(w,this.array);this.array[index*this.itemSize+3]=w;return this;}/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setXY(index,x,y){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);}this.array[index+0]=x;this.array[index+1]=y;return this;}/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setXYZ(index,x,y,z){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);}this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;}/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setXYZW(index,x,y,z,w){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);w=normalize(w,this.array);}this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;}/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the attribute array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when attribute data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */onUpload(callback){this.onUploadCallback=callback;return this;}/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * @return {BufferAttribute} A clone of this instance.\n\t */clone(){return new this.constructor(this.array,this.itemSize).copy(this);}/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */toJSON(){const data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=='')data.name=this.name;if(this.usage!==StaticDrawUsage)data.usage=this.usage;return data;}}/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Int8BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Int8Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Uint8BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Uint8Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Uint8ClampedBufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Uint8ClampedArray(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Int16BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Int16Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Uint16BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Int32BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Int32Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Uint32BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Uint32Array(array),itemSize,normalized);}}/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 since `Float16Array` is not\n * natively supported in JavaScript.\n *\n * @augments BufferAttribute\n */class Float16BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Uint16Array(array),itemSize,normalized);this.isFloat16BufferAttribute=true;}getX(index){let x=fromHalfFloat(this.array[index*this.itemSize]);if(this.normalized)x=denormalize(x,this.array);return x;}setX(index,x){if(this.normalized)x=normalize(x,this.array);this.array[index*this.itemSize]=toHalfFloat(x);return this;}getY(index){let y=fromHalfFloat(this.array[index*this.itemSize+1]);if(this.normalized)y=denormalize(y,this.array);return y;}setY(index,y){if(this.normalized)y=normalize(y,this.array);this.array[index*this.itemSize+1]=toHalfFloat(y);return this;}getZ(index){let z=fromHalfFloat(this.array[index*this.itemSize+2]);if(this.normalized)z=denormalize(z,this.array);return z;}setZ(index,z){if(this.normalized)z=normalize(z,this.array);this.array[index*this.itemSize+2]=toHalfFloat(z);return this;}getW(index){let w=fromHalfFloat(this.array[index*this.itemSize+3]);if(this.normalized)w=denormalize(w,this.array);return w;}setW(index,w){if(this.normalized)w=normalize(w,this.array);this.array[index*this.itemSize+3]=toHalfFloat(w);return this;}setXY(index,x,y){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);}this.array[index+0]=toHalfFloat(x);this.array[index+1]=toHalfFloat(y);return this;}setXYZ(index,x,y,z){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);}this.array[index+0]=toHalfFloat(x);this.array[index+1]=toHalfFloat(y);this.array[index+2]=toHalfFloat(z);return this;}setXYZW(index,x,y,z,w){index*=this.itemSize;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);w=normalize(w,this.array);}this.array[index+0]=toHalfFloat(x);this.array[index+1]=toHalfFloat(y);this.array[index+2]=toHalfFloat(z);this.array[index+3]=toHalfFloat(w);return this;}}/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */class Float32BufferAttribute extends BufferAttribute{/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(array,itemSize,normalized){super(new Float32Array(array),itemSize,normalized);}}let _id$1=0;const _m1=/*@__PURE__*/new Matrix4();const _obj=/*@__PURE__*/new Object3D();const _offset=/*@__PURE__*/new Vector3();const _box$2=/*@__PURE__*/new Box3();const _boxMorphTargets=/*@__PURE__*/new Box3();const _vector$8=/*@__PURE__*/new Vector3();/**\n * A representation of mesh, line, or point geometry. Includes vertex\n * positions, face indices, normals, colors, UVs, and custom attributes\n * within buffers, reducing the cost of passing all this data to the GPU.\n *\n * ```js\n * const geometry = new THREE.BufferGeometry();\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n * \t-1.0, -1.0,  1.0, // v0\n * \t 1.0, -1.0,  1.0, // v1\n * \t 1.0,  1.0,  1.0, // v2\n *\n * \t 1.0,  1.0,  1.0, // v3\n * \t-1.0,  1.0,  1.0, // v4\n * \t-1.0, -1.0,  1.0  // v5\n * ] );\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n *\n * @augments EventDispatcher\n */class BufferGeometry extends EventDispatcher{/**\n\t * Constructs a new geometry.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBufferGeometry=true;/**\n\t\t * The ID of the geometry.\n\t\t *\n\t\t * @name BufferGeometry#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_id$1++});/**\n\t\t * The UUID of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();/**\n\t\t * The name of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';this.type='BufferGeometry';/**\n\t\t * Allows for vertices to be re-used across multiple triangles; this is\n\t\t * called using \"indexed triangles\". Each triangle is associated with the\n\t\t * indices of three vertices. This attribute therefore stores the index of\n\t\t * each vertex for each triangular face. If this attribute is not set, the\n\t\t * renderer assumes that each three contiguous positions represent a single triangle.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */this.index=null;/**\n\t\t * A (storage) buffer attribute which was generated with a compute shader and\n\t\t * now defines indirect draw calls.\n\t\t *\n\t\t * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */this.indirect=null;/**\n\t\t * This dictionary has as id the name of the attribute to be set and as value\n\t\t * the buffer attribute to set it to. Rather than accessing this property directly,\n\t\t * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\n\t\t *\n\t\t * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\n\t\t */this.attributes={};/**\n\t\t * This dictionary holds the morph targets of the geometry.\n\t\t *\n\t\t * Note: Once the geometry has been rendered, the morph attribute data cannot\n\t\t * be changed. You will have to call `dispose()?, and create a new geometry instance.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.morphAttributes={};/**\n\t\t * Used to control the morph target behavior; when set to `true`, the morph\n\t\t * target data is treated as relative offsets, rather than as absolute\n\t\t * positions/normals.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.morphTargetsRelative=false;/**\n\t\t * Split the geometry into groups, each of which will be rendered in a\n\t\t * separate draw call. This allows an array of materials to be used with the geometry.\n\t\t *\n\t\t * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\n\t\t *\n\t\t * Every vertex and index must belong to exactly one group — groups must not share vertices or\n\t\t * indices, and must not leave vertices or indices unused.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */this.groups=[];/**\n\t\t * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\n\t\t *\n\t\t * @type {Box3}\n\t\t * @default null\n\t\t */this.boundingBox=null;/**\n\t\t * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\n\t\t *\n\t\t * @type {Sphere}\n\t\t * @default null\n\t\t */this.boundingSphere=null;/**\n\t\t * Determines the part of the geometry to render. This should not be set directly,\n\t\t * instead use `setDrawRange()`.\n\t\t *\n\t\t * @type {{start:number,count:number}}\n\t\t */this.drawRange={start:0,count:Infinity};/**\n\t\t * An object that can be used to store custom data about the geometry.\n\t\t * It should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.userData={};}/**\n\t * Returns the index of this geometry.\n\t *\n\t * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\n\t */getIndex(){return this.index;}/**\n\t * Sets the given index to this geometry.\n\t *\n\t * @param {Array<number>|BufferAttribute} index - The index to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */setIndex(index){if(Array.isArray(index)){this.index=new(arrayNeedsUint32(index)?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else{this.index=index;}return this;}/**\n\t * Sets the given indirect attribute to this geometry.\n\t *\n\t * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */setIndirect(indirect){this.indirect=indirect;return this;}/**\n\t * Returns the indirect attribute of this geometry.\n\t *\n\t * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\n\t */getIndirect(){return this.indirect;}/**\n\t * Returns the buffer attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\n\t * Returns `undefined` if not attribute has been found.\n\t */getAttribute(name){return this.attributes[name];}/**\n\t * Sets the given attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */setAttribute(name,attribute){this.attributes[name]=attribute;return this;}/**\n\t * Deletes the attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name to delete.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */deleteAttribute(name){delete this.attributes[name];return this;}/**\n\t * Returns `true` if this geometry has an attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {boolean} Whether this geometry has an attribute for the given name or not.\n\t */hasAttribute(name){return this.attributes[name]!==undefined;}/**\n\t * Adds a group to this geometry.\n\t *\n\t * @param {number} start - The first element in this draw call. That is the first\n\t * vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - Specifies how many vertices (or indices) are part of this group.\n\t * @param {number} [materialIndex=0] - The material array index to use.\n\t */addGroup(start,count,materialIndex=0){this.groups.push({start:start,count:count,materialIndex:materialIndex});}/**\n\t * Clears all groups.\n\t */clearGroups(){this.groups=[];}/**\n\t * Sets the draw range for this geometry.\n\t *\n\t * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\n\t * For indexed BufferGeometry, `count` is the number of indices to render.\n\t */setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;}/**\n\t * Applies the given 4x4 transformation matrix to the geometry.\n\t *\n\t * @param {Matrix4} matrix - The matrix to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */applyMatrix4(matrix){const position=this.attributes.position;if(position!==undefined){position.applyMatrix4(matrix);position.needsUpdate=true;}const normal=this.attributes.normal;if(normal!==undefined){const normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix);normal.needsUpdate=true;}const tangent=this.attributes.tangent;if(tangent!==undefined){tangent.transformDirection(matrix);tangent.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;}/**\n\t * Applies the rotation represented by the Quaternion to the geometry.\n\t *\n\t * @param {Quaternion} q - The Quaternion to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */applyQuaternion(q){_m1.makeRotationFromQuaternion(q);this.applyMatrix4(_m1);return this;}/**\n\t * Rotates the geometry about the X axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */rotateX(angle){// rotate geometry around world x-axis\n_m1.makeRotationX(angle);this.applyMatrix4(_m1);return this;}/**\n\t * Rotates the geometry about the Y axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */rotateY(angle){// rotate geometry around world y-axis\n_m1.makeRotationY(angle);this.applyMatrix4(_m1);return this;}/**\n\t * Rotates the geometry about the Z axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */rotateZ(angle){// rotate geometry around world z-axis\n_m1.makeRotationZ(angle);this.applyMatrix4(_m1);return this;}/**\n\t * Translates the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#position} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x offset.\n\t * @param {number} y - The y offset.\n\t * @param {number} z - The z offset.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */translate(x,y,z){// translate geometry\n_m1.makeTranslation(x,y,z);this.applyMatrix4(_m1);return this;}/**\n\t * Scales the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#scale} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x scale.\n\t * @param {number} y - The y scale.\n\t * @param {number} z - The z scale.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */scale(x,y,z){// scale geometry\n_m1.makeScale(x,y,z);this.applyMatrix4(_m1);return this;}/**\n\t * Rotates the geometry to face a point in 3D space. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {Vector3} vector - The target point.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */lookAt(vector){_obj.lookAt(vector);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this;}/**\n\t * Center the geometry based on its bounding box.\n\t *\n\t * @return {BufferGeometry} A reference to this instance.\n\t */center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this;}/**\n\t * Defines a geometry by creating a `position` attribute based on the given array of points. The array\n\t * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\n\t * set to `0`.\n\t *\n\t * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\n\t * data from the array. The length of the array must match the vertex count.\n\t *\n\t * @param {Array<Vector2>|Array<Vector3>} points - The points.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */setFromPoints(points){const positionAttribute=this.getAttribute('position');if(positionAttribute===undefined){const position=[];for(let i=0,l=points.length;i<l;i++){const point=points[i];position.push(point.x,point.y,point.z||0);}this.setAttribute('position',new Float32BufferAttribute(position,3));}else{const l=Math.min(points.length,positionAttribute.count);// make sure data do not exceed buffer size\nfor(let i=0;i<l;i++){const point=points[i];positionAttribute.setXYZ(i,point.x,point.y,point.z||0);}if(points.length>positionAttribute.count){console.warn('THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.');}positionAttribute.needsUpdate=true;}return this;}/**\n\t * Computes the bounding box of the geometry, and updates the `boundingBox` member.\n\t * The bounding box is not computed by the engine; it must be computed by your app.\n\t * You may need to recompute the bounding box if the geometry vertices are modified.\n\t */computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}const position=this.attributes.position;const morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return;}if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);// process morph attributes if present\nif(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];_box$2.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$8);_vector$8.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$8);}else{this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max);}}}}else{this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this);}}/**\n\t * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if the geometry vertices are modified.\n\t */computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}const position=this.attributes.position;const morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.',this);this.boundingSphere.set(new Vector3(),Infinity);return;}if(position){// first, find the center of the bounding sphere\nconst center=this.boundingSphere.center;_box$2.setFromBufferAttribute(position);// process morph attributes if present\nif(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];_boxMorphTargets.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$8);_vector$8.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$8);}else{_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max);}}}_box$2.getCenter(center);// second, try to find a boundingSphere with a radius smaller than the\n// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\nlet maxRadiusSq=0;for(let i=0,il=position.count;i<il;i++){_vector$8.fromBufferAttribute(position,i);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}// process morph attributes if present\nif(morphAttributesPosition){for(let i=0,il=morphAttributesPosition.length;i<il;i++){const morphAttribute=morphAttributesPosition[i];const morphTargetsRelative=this.morphTargetsRelative;for(let j=0,jl=morphAttribute.count;j<jl;j++){_vector$8.fromBufferAttribute(morphAttribute,j);if(morphTargetsRelative){_offset.fromBufferAttribute(position,j);_vector$8.add(_offset);}maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}}}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this);}}}/**\n\t * Calculates and adds a tangent attribute to this geometry.\n\t *\n\t * The computation is only supported for indexed geometries and if position, normal, and uv attributes\n\t * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n\t * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\n\t */computeTangents(){const index=this.index;const attributes=this.attributes;// based on http://www.terathon.com/code/tangent.html\n// (per vertex tangents)\nif(index===null||attributes.position===undefined||attributes.normal===undefined||attributes.uv===undefined){console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');return;}const positionAttribute=attributes.position;const normalAttribute=attributes.normal;const uvAttribute=attributes.uv;if(this.hasAttribute('tangent')===false){this.setAttribute('tangent',new BufferAttribute(new Float32Array(4*positionAttribute.count),4));}const tangentAttribute=this.getAttribute('tangent');const tan1=[],tan2=[];for(let i=0;i<positionAttribute.count;i++){tan1[i]=new Vector3();tan2[i]=new Vector3();}const vA=new Vector3(),vB=new Vector3(),vC=new Vector3(),uvA=new Vector2(),uvB=new Vector2(),uvC=new Vector2(),sdir=new Vector3(),tdir=new Vector3();function handleTriangle(a,b,c){vA.fromBufferAttribute(positionAttribute,a);vB.fromBufferAttribute(positionAttribute,b);vC.fromBufferAttribute(positionAttribute,c);uvA.fromBufferAttribute(uvAttribute,a);uvB.fromBufferAttribute(uvAttribute,b);uvC.fromBufferAttribute(uvAttribute,c);vB.sub(vA);vC.sub(vA);uvB.sub(uvA);uvC.sub(uvA);const r=1.0/(uvB.x*uvC.y-uvC.x*uvB.y);// silently ignore degenerate uv triangles having coincident or colinear vertices\nif(!isFinite(r))return;sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC,-uvB.y).multiplyScalar(r);tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB,-uvC.x).multiplyScalar(r);tan1[a].add(sdir);tan1[b].add(sdir);tan1[c].add(sdir);tan2[a].add(tdir);tan2[b].add(tdir);tan2[c].add(tdir);}let groups=this.groups;if(groups.length===0){groups=[{start:0,count:index.count}];}for(let i=0,il=groups.length;i<il;++i){const group=groups[i];const start=group.start;const count=group.count;for(let j=start,jl=start+count;j<jl;j+=3){handleTriangle(index.getX(j+0),index.getX(j+1),index.getX(j+2));}}const tmp=new Vector3(),tmp2=new Vector3();const n=new Vector3(),n2=new Vector3();function handleVertex(v){n.fromBufferAttribute(normalAttribute,v);n2.copy(n);const t=tan1[v];// Gram-Schmidt orthogonalize\ntmp.copy(t);tmp.sub(n.multiplyScalar(n.dot(t))).normalize();// Calculate handedness\ntmp2.crossVectors(n2,t);const test=tmp2.dot(tan2[v]);const w=test<0.0?-1:1.0;tangentAttribute.setXYZW(v,tmp.x,tmp.y,tmp.z,w);}for(let i=0,il=groups.length;i<il;++i){const group=groups[i];const start=group.start;const count=group.count;for(let j=start,jl=start+count;j<jl;j+=3){handleVertex(index.getX(j+0));handleVertex(index.getX(j+1));handleVertex(index.getX(j+2));}}}/**\n\t * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\n\t * each vertex normal to be the average of the face normals of the faces that share that vertex.\n\t * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\n\t * to be the same as the face normal.\n\t */computeVertexNormals(){const index=this.index;const positionAttribute=this.getAttribute('position');if(positionAttribute!==undefined){let normalAttribute=this.getAttribute('normal');if(normalAttribute===undefined){normalAttribute=new BufferAttribute(new Float32Array(positionAttribute.count*3),3);this.setAttribute('normal',normalAttribute);}else{// reset existing normals to zero\nfor(let i=0,il=normalAttribute.count;i<il;i++){normalAttribute.setXYZ(i,0,0,0);}}const pA=new Vector3(),pB=new Vector3(),pC=new Vector3();const nA=new Vector3(),nB=new Vector3(),nC=new Vector3();const cb=new Vector3(),ab=new Vector3();// indexed elements\nif(index){for(let i=0,il=index.count;i<il;i+=3){const vA=index.getX(i+0);const vB=index.getX(i+1);const vC=index.getX(i+2);pA.fromBufferAttribute(positionAttribute,vA);pB.fromBufferAttribute(positionAttribute,vB);pC.fromBufferAttribute(positionAttribute,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);nA.fromBufferAttribute(normalAttribute,vA);nB.fromBufferAttribute(normalAttribute,vB);nC.fromBufferAttribute(normalAttribute,vC);nA.add(cb);nB.add(cb);nC.add(cb);normalAttribute.setXYZ(vA,nA.x,nA.y,nA.z);normalAttribute.setXYZ(vB,nB.x,nB.y,nB.z);normalAttribute.setXYZ(vC,nC.x,nC.y,nC.z);}}else{// non-indexed elements (unconnected triangle soup)\nfor(let i=0,il=positionAttribute.count;i<il;i+=3){pA.fromBufferAttribute(positionAttribute,i+0);pB.fromBufferAttribute(positionAttribute,i+1);pC.fromBufferAttribute(positionAttribute,i+2);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normalAttribute.setXYZ(i+0,cb.x,cb.y,cb.z);normalAttribute.setXYZ(i+1,cb.x,cb.y,cb.z);normalAttribute.setXYZ(i+2,cb.x,cb.y,cb.z);}}this.normalizeNormals();normalAttribute.needsUpdate=true;}}/**\n\t * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\n\t * correct lighting on the geometry surfaces.\n\t */normalizeNormals(){const normals=this.attributes.normal;for(let i=0,il=normals.count;i<il;i++){_vector$8.fromBufferAttribute(normals,i);_vector$8.normalize();normals.setXYZ(i,_vector$8.x,_vector$8.y,_vector$8.z);}}/**\n\t * Return a new non-index version of this indexed geometry. If the geometry\n\t * is already non-indexed, the method is a NOOP.\n\t *\n\t * @return {BufferGeometry} The non-indexed version of this indexed geometry.\n\t */toNonIndexed(){function convertBufferAttribute(attribute,indices){const array=attribute.array;const itemSize=attribute.itemSize;const normalized=attribute.normalized;const array2=new array.constructor(indices.length*itemSize);let index=0,index2=0;for(let i=0,l=indices.length;i<l;i++){if(attribute.isInterleavedBufferAttribute){index=indices[i]*attribute.data.stride+attribute.offset;}else{index=indices[i]*itemSize;}for(let j=0;j<itemSize;j++){array2[index2++]=array[index++];}}return new BufferAttribute(array2,itemSize,normalized);}//\nif(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');return this;}const geometry2=new BufferGeometry();const indices=this.index.array;const attributes=this.attributes;// attributes\nfor(const name in attributes){const attribute=attributes[name];const newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute);}// morph attributes\nconst morphAttributes=this.morphAttributes;for(const name in morphAttributes){const morphArray=[];const morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes\nfor(let i=0,il=morphAttribute.length;i<il;i++){const attribute=morphAttribute[i];const newAttribute=convertBufferAttribute(attribute,indices);morphArray.push(newAttribute);}geometry2.morphAttributes[name]=morphArray;}geometry2.morphTargetsRelative=this.morphTargetsRelative;// groups\nconst groups=this.groups;for(let i=0,l=groups.length;i<l;i++){const group=groups[i];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;}/**\n\t * Serializes the geometry into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized geometry.\n\t */toJSON(){const data={metadata:{version:4.6,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization\ndata.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){const parameters=this.parameters;for(const key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}// for simplicity the code assumes attributes are not shared across geometries, see #15811\ndata.data={attributes:{}};const index=this.index;if(index!==null){data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)};}const attributes=this.attributes;for(const key in attributes){const attribute=attributes[key];data.data.attributes[key]=attribute.toJSON(data.data);}const morphAttributes={};let hasMorphAttributes=false;for(const key in this.morphAttributes){const attributeArray=this.morphAttributes[key];const array=[];for(let i=0,il=attributeArray.length;i<il;i++){const attribute=attributeArray[i];array.push(attribute.toJSON(data.data));}if(array.length>0){morphAttributes[key]=array;hasMorphAttributes=true;}}if(hasMorphAttributes){data.data.morphAttributes=morphAttributes;data.data.morphTargetsRelative=this.morphTargetsRelative;}const groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}const boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;}/**\n\t * Returns a new geometry with copied values from this instance.\n\t *\n\t * @return {BufferGeometry} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given geometry to this instance.\n\t *\n\t * @param {BufferGeometry} source - The geometry to copy.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */copy(source){// reset\nthis.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// used for storing cloned, shared data\nconst data={};// name\nthis.name=source.name;// index\nconst index=source.index;if(index!==null){this.setIndex(index.clone());}// attributes\nconst attributes=source.attributes;for(const name in attributes){const attribute=attributes[name];this.setAttribute(name,attribute.clone(data));}// morph attributes\nconst morphAttributes=source.morphAttributes;for(const name in morphAttributes){const array=[];const morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes\nfor(let i=0,l=morphAttribute.length;i<l;i++){array.push(morphAttribute[i].clone(data));}this.morphAttributes[name]=array;}this.morphTargetsRelative=source.morphTargetsRelative;// groups\nconst groups=source.groups;for(let i=0,l=groups.length;i<l;i++){const group=groups[i];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box\nconst boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere\nconst boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range\nthis.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data\nthis.userData=source.userData;return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires BufferGeometry#dispose\n\t */dispose(){this.dispatchEvent({type:'dispose'});}}const _inverseMatrix$3=/*@__PURE__*/new Matrix4();const _ray$3=/*@__PURE__*/new Ray();const _sphere$6=/*@__PURE__*/new Sphere();const _sphereHitAt=/*@__PURE__*/new Vector3();const _vA$1=/*@__PURE__*/new Vector3();const _vB$1=/*@__PURE__*/new Vector3();const _vC$1=/*@__PURE__*/new Vector3();const _tempA=/*@__PURE__*/new Vector3();const _morphA=/*@__PURE__*/new Vector3();const _intersectionPoint=/*@__PURE__*/new Vector3();const _intersectionPointWorld=/*@__PURE__*/new Vector3();/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */class Mesh extends Object3D{/**\n\t * Constructs a new mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */constructor(geometry=new BufferGeometry(),material=new MeshBasicMaterial()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMesh=true;this.type='Mesh';/**\n\t\t * The mesh geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */this.geometry=geometry;/**\n\t\t * The mesh material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default MeshBasicMaterial\n\t\t */this.material=material;/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetDictionary=undefined;/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetInfluences=undefined;this.updateMorphTargets();}copy(source,recursive){super.copy(source,recursive);if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}this.material=Array.isArray(source.material)?source.material.slice():source.material;this.geometry=source.geometry;return this;}/**\n\t * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */updateMorphTargets(){const geometry=this.geometry;const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}/**\n\t * Returns the local-space position of the vertex at the given index, taking into\n\t * account the current animation state of both morph targets and skinning.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * @return {Vector3} The vertex position in local space.\n\t */getVertexPosition(index,target){const geometry=this.geometry;const position=geometry.attributes.position;const morphPosition=geometry.morphAttributes.position;const morphTargetsRelative=geometry.morphTargetsRelative;target.fromBufferAttribute(position,index);const morphInfluences=this.morphTargetInfluences;if(morphPosition&&morphInfluences){_morphA.set(0,0,0);for(let i=0,il=morphPosition.length;i<il;i++){const influence=morphInfluences[i];const morphAttribute=morphPosition[i];if(influence===0)continue;_tempA.fromBufferAttribute(morphAttribute,index);if(morphTargetsRelative){_morphA.addScaledVector(_tempA,influence);}else{_morphA.addScaledVector(_tempA.sub(target),influence);}}target.add(_morphA);}return target;}/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */raycast(raycaster,intersects){const geometry=this.geometry;const material=this.material;const matrixWorld=this.matrixWorld;if(material===undefined)return;// test with bounding sphere in world space\nif(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$6.copy(geometry.boundingSphere);_sphere$6.applyMatrix4(matrixWorld);// check distance from ray origin to bounding sphere\n_ray$3.copy(raycaster.ray).recast(raycaster.near);if(_sphere$6.containsPoint(_ray$3.origin)===false){if(_ray$3.intersectSphere(_sphere$6,_sphereHitAt)===null)return;if(_ray$3.origin.distanceToSquared(_sphereHitAt)>(raycaster.far-raycaster.near)**2)return;}// convert ray to local space of mesh\n_inverseMatrix$3.copy(matrixWorld).invert();_ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);// test with bounding box in local space\nif(geometry.boundingBox!==null){if(_ray$3.intersectsBox(geometry.boundingBox)===false)return;}// test for intersections with geometry\nthis._computeIntersections(raycaster,intersects,_ray$3);}_computeIntersections(raycaster,intersects,rayLocalSpace){let intersection;const geometry=this.geometry;const material=this.material;const index=geometry.index;const position=geometry.attributes.position;const uv=geometry.attributes.uv;const uv1=geometry.attributes.uv1;const normal=geometry.attributes.normal;const groups=geometry.groups;const drawRange=geometry.drawRange;if(index!==null){// indexed buffer geometry\nif(Array.isArray(material)){for(let i=0,il=groups.length;i<il;i++){const group=groups[i];const groupMaterial=material[group.materialIndex];const start=Math.max(group.start,drawRange.start);const end=Math.min(index.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){const a=index.getX(j);const b=index.getX(j+1);const c=index.getX(j+2);intersection=checkGeometryIntersection(this,groupMaterial,raycaster,rayLocalSpace,uv,uv1,normal,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics\nintersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else{const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){const a=index.getX(i);const b=index.getX(i+1);const c=index.getX(i+2);intersection=checkGeometryIntersection(this,material,raycaster,rayLocalSpace,uv,uv1,normal,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in indexed buffer semantics\nintersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry\nif(Array.isArray(material)){for(let i=0,il=groups.length;i<il;i++){const group=groups[i];const groupMaterial=material[group.materialIndex];const start=Math.max(group.start,drawRange.start);const end=Math.min(position.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(let j=start,jl=end;j<jl;j+=3){const a=j;const b=j+1;const c=j+2;intersection=checkGeometryIntersection(this,groupMaterial,raycaster,rayLocalSpace,uv,uv1,normal,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in non-indexed buffer semantics\nintersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else{const start=Math.max(0,drawRange.start);const end=Math.min(position.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i+=3){const a=i;const b=i+1;const c=i+2;intersection=checkGeometryIntersection(this,material,raycaster,rayLocalSpace,uv,uv1,normal,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in non-indexed buffer semantics\nintersects.push(intersection);}}}}}}function checkIntersection$1(object,material,raycaster,ray,pA,pB,pC,point){let intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else{intersect=ray.intersectTriangle(pA,pB,pC,material.side===FrontSide,point);}if(intersect===null)return null;_intersectionPointWorld.copy(point);_intersectionPointWorld.applyMatrix4(object.matrixWorld);const distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return{distance:distance,point:_intersectionPointWorld.clone(),object:object};}function checkGeometryIntersection(object,material,raycaster,ray,uv,uv1,normal,a,b,c){object.getVertexPosition(a,_vA$1);object.getVertexPosition(b,_vB$1);object.getVertexPosition(c,_vC$1);const intersection=checkIntersection$1(object,material,raycaster,ray,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(intersection){const barycoord=new Vector3();Triangle.getBarycoord(_intersectionPoint,_vA$1,_vB$1,_vC$1,barycoord);if(uv){intersection.uv=Triangle.getInterpolatedAttribute(uv,a,b,c,barycoord,new Vector2());}if(uv1){intersection.uv1=Triangle.getInterpolatedAttribute(uv1,a,b,c,barycoord,new Vector2());}if(normal){intersection.normal=Triangle.getInterpolatedAttribute(normal,a,b,c,barycoord,new Vector3());if(intersection.normal.dot(ray.direction)>0){intersection.normal.multiplyScalar(-1);}}const face={a:a,b:b,c:c,normal:new Vector3(),materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,face.normal);intersection.face=face;intersection.barycoord=barycoord;}return intersection;}/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */class BoxGeometry extends BufferGeometry{/**\n\t * Constructs a new box geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n\t */constructor(width=1,height=1,depth=1,widthSegments=1,heightSegments=1,depthSegments=1){super();this.type='BoxGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};const scope=this;// segments\nwidthSegments=Math.floor(widthSegments);heightSegments=Math.floor(heightSegments);depthSegments=Math.floor(depthSegments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nlet numberOfVertices=0;let groupStart=0;// build each side of the box geometry\nbuildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px\nbuildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx\nbuildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py\nbuildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny\nbuildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz\nbuildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz\n// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){const segmentWidth=width/gridX;const segmentHeight=height/gridY;const widthHalf=width/2;const heightHalf=height/2;const depthHalf=depth/2;const gridX1=gridX+1;const gridY1=gridY+1;let vertexCounter=0;let groupCount=0;const vector=new Vector3();// generate vertices, normals and uvs\nfor(let iy=0;iy<gridY1;iy++){const y=iy*segmentHeight-heightHalf;for(let ix=0;ix<gridX1;ix++){const x=ix*segmentWidth-widthHalf;// set values to correct vector component\nvector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer\nvertices.push(vector.x,vector.y,vector.z);// set values to correct vector component\nvector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer\nnormals.push(vector.x,vector.y,vector.z);// uvs\nuvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters\nvertexCounter+=1;}}// indices\n// 1. you need three indices to draw a single face\n// 2. a single segment consists of two faces\n// 3. so we need to generate six (2*3) indices per segment\nfor(let iy=0;iy<gridY;iy++){for(let ix=0;ix<gridX;ix++){const a=numberOfVertices+ix+gridX1*iy;const b=numberOfVertices+ix+gridX1*(iy+1);const c=numberOfVertices+(ix+1)+gridX1*(iy+1);const d=numberOfVertices+(ix+1)+gridX1*iy;// faces\nindices.push(a,b,d);indices.push(b,c,d);// increase counter\ngroupCount+=6;}}// add a group to the geometry. this will ensure multi material support\nscope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups\ngroupStart+=groupCount;// update total number of vertices\nnumberOfVertices+=vertexCounter;}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {BoxGeometry} A new instance.\n\t */static fromJSON(data){return new BoxGeometry(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);}}// Uniform Utilities\nfunction cloneUniforms(src){const dst={};for(const u in src){dst[u]={};for(const p in src[u]){const property=src[u][p];if(property&&(property.isColor||property.isMatrix3||property.isMatrix4||property.isVector2||property.isVector3||property.isVector4||property.isTexture||property.isQuaternion)){if(property.isRenderTargetTexture){console.warn('UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().');dst[u][p]=null;}else{dst[u][p]=property.clone();}}else if(Array.isArray(property)){dst[u][p]=property.slice();}else{dst[u][p]=property;}}}return dst;}function mergeUniforms(uniforms){const merged={};for(let u=0;u<uniforms.length;u++){const tmp=cloneUniforms(uniforms[u]);for(const p in tmp){merged[p]=tmp[p];}}return merged;}function cloneUniformsGroups(src){const dst=[];for(let u=0;u<src.length;u++){dst.push(src[u].clone());}return dst;}function getUnlitUniformColorSpace(renderer){const currentRenderTarget=renderer.getRenderTarget();if(currentRenderTarget===null){// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\nreturn renderer.outputColorSpace;}// https://github.com/mrdoob/three.js/issues/27868\nif(currentRenderTarget.isXRRenderTarget===true){return currentRenderTarget.texture.colorSpace;}return ColorManagement.workingColorSpace;}// Legacy\nconst UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";var default_fragment=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";/**\n * A material rendered with custom shaders. A shader is a small program written in GLSL.\n * that runs on the GPU. You may want to use a custom shader if you need to implement an\n * effect not included with any of the built-in materials.\n *\n * There are the following notes to bear in mind when using a `ShaderMaterial`:\n *\n * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.\n * - Built in attributes and uniforms are passed to the shaders along with your code. If\n * you don't want that, use {@link RawShaderMaterial} instead.\n * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`\n * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has\n * to be placed right above the loop. The loop formatting has to correspond to a defined standard.\n *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.\n *   - The loop variable has to be *i*.\n *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly\n * value of *i* for the given iteration and can be used in preprocessor\n * statements.\n *\n * ```js\n * const material = new THREE.ShaderMaterial( {\n * \tuniforms: {\n * \t\ttime: { value: 1.0 },\n * \t\tresolution: { value: new THREE.Vector2() }\n * \t},\n * \tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n * \tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n * } );\n * ```\n *\n * @augments Material\n */class ShaderMaterial extends Material{/**\n\t * Constructs a new shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isShaderMaterial=true;this.type='ShaderMaterial';/**\n\t\t * Defines custom constants using `#define` directives within the GLSL code\n\t\t * for both the vertex shader and the fragment shader; each key/value pair\n\t\t * yields another directive.\n\t\t * ```js\n\t\t * defines: {\n\t\t * \tFOO: 15,\n\t\t * \tBAR: true\n\t\t * }\n\t\t * ```\n\t\t * Yields the lines:\n\t\t * ```\n\t\t * #define FOO 15\n\t\t * #define BAR true\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */this.defines={};/**\n\t\t * An object of the form:\n\t\t * ```js\n\t\t * {\n\t\t * \t\"uniform1\": { value: 1.0 },\n\t\t * \t\"uniform2\": { value: 2 }\n\t\t * }\n\t\t * ```\n\t\t * specifying the uniforms to be passed to the shader code; keys are uniform\n\t\t * names, values are definitions of the form\n\t\t * ```\n\t\t * {\n\t\t * \tvalue: 1.0\n\t\t * }\n\t\t * ```\n\t\t * where `value` is the value of the uniform. Names must match the name of\n\t\t * the uniform, as defined in the GLSL code. Note that uniforms are refreshed\n\t\t * on every frame, so updating the value of the uniform will immediately\n\t\t * update the value available to the GLSL code.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.uniforms={};/**\n\t\t * An array holding uniforms groups for configuring UBOs.\n\t\t *\n\t\t * @type {Array<UniformsGroup>}\n\t\t */this.uniformsGroups=[];/**\n\t\t * Vertex shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */this.vertexShader=default_vertex;/**\n\t\t * Fragment shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */this.fragmentShader=default_fragment;/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * WebGL and WebGPU ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.linewidth=1;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Define whether the material color is affected by global fog settings; `true`\n\t\t * to pass fog uniforms to the shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.fog=false;/**\n\t\t * Defines whether this material uses lighting; `true` to pass uniform data\n\t\t * related to lighting to this shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.lights=false;/**\n\t\t * Defines whether this material supports clipping; `true` to let the renderer\n\t\t * pass the clippingPlanes uniform.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.clipping=false;/**\n\t\t * Overwritten and set to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.forceSinglePass=true;/**\n\t\t * This object allows to enable certain WebGL 2 extensions.\n\t\t *\n\t\t * - clipCullDistance: set to `true` to use vertex shader clipping\n\t\t * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID\n\t\t *\n\t\t * @type {{clipCullDistance:false,multiDraw:false}}\n\t\t */this.extensions={clipCullDistance:false,// set to use vertex shader clipping\nmultiDraw:false// set to use vertex shader multi_draw / enable gl_DrawID\n};/**\n\t\t * When the rendered geometry doesn't include these attributes but the\n\t\t * material does, these default values will be passed to the shaders. This\n\t\t * avoids errors when buffer data is missing.\n\t\t *\n\t\t * - color: [ 1, 1, 1 ]\n\t\t * - uv: [ 0, 0 ]\n\t\t * - uv1: [ 0, 0 ]\n\t\t *\n\t\t * @type {Object}\n\t\t */this.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv1':[0,0]};/**\n\t\t * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}\n\t\t * to bind a generic vertex index to an attribute variable.\n\t\t *\n\t\t * @type {string|undefined}\n\t\t * @default undefined\n\t\t */this.index0AttributeName=undefined;/**\n\t\t * Can be used to force a uniform update while changing uniforms in\n\t\t * {@link Object3D#onBeforeRender}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.uniformsNeedUpdate=false;/**\n\t\t * Defines the GLSL version of custom shader code.\n\t\t *\n\t\t * @type {?(GLSL1|GLSL3)}\n\t\t * @default null\n\t\t */this.glslVersion=null;if(parameters!==undefined){this.setValues(parameters);}}copy(source){super.copy(source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=cloneUniforms(source.uniforms);this.uniformsGroups=cloneUniformsGroups(source.uniformsGroups);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.fog=source.fog;this.lights=source.lights;this.clipping=source.clipping;this.extensions=Object.assign({},source.extensions);this.glslVersion=source.glslVersion;return this;}toJSON(meta){const data=super.toJSON(meta);data.glslVersion=this.glslVersion;data.uniforms={};for(const name in this.uniforms){const uniform=this.uniforms[name];const value=uniform.value;if(value&&value.isTexture){data.uniforms[name]={type:'t',value:value.toJSON(meta).uuid};}else if(value&&value.isColor){data.uniforms[name]={type:'c',value:value.getHex()};}else if(value&&value.isVector2){data.uniforms[name]={type:'v2',value:value.toArray()};}else if(value&&value.isVector3){data.uniforms[name]={type:'v3',value:value.toArray()};}else if(value&&value.isVector4){data.uniforms[name]={type:'v4',value:value.toArray()};}else if(value&&value.isMatrix3){data.uniforms[name]={type:'m3',value:value.toArray()};}else if(value&&value.isMatrix4){data.uniforms[name]={type:'m4',value:value.toArray()};}else{data.uniforms[name]={value:value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n}}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;data.lights=this.lights;data.clipping=this.clipping;const extensions={};for(const key in this.extensions){if(this.extensions[key]===true)extensions[key]=true;}if(Object.keys(extensions).length>0)data.extensions=extensions;return data;}}/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */class Camera extends Object3D{/**\n\t * Constructs a new camera.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCamera=true;this.type='Camera';/**\n\t\t * The inverse of the camera's world matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.matrixWorldInverse=new Matrix4();/**\n\t\t * The camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.projectionMatrix=new Matrix4();/**\n\t\t * The inverse of the camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.projectionMatrixInverse=new Matrix4();/**\n\t\t * The coordinate system in which the camera is used.\n\t\t *\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t */this.coordinateSystem=WebGLCoordinateSystem;}copy(source,recursive){super.copy(source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);this.coordinateSystem=source.coordinateSystem;return this;}/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * This method is overwritten since cameras have a different forward vector compared to other\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */getWorldDirection(target){return super.getWorldDirection(target).negate();}updateMatrixWorld(force){super.updateMatrixWorld(force);this.matrixWorldInverse.copy(this.matrixWorld).invert();}updateWorldMatrix(updateParents,updateChildren){super.updateWorldMatrix(updateParents,updateChildren);this.matrixWorldInverse.copy(this.matrixWorld).invert();}clone(){return new this.constructor().copy(this);}}const _v3$1=/*@__PURE__*/new Vector3();const _minTarget=/*@__PURE__*/new Vector2();const _maxTarget=/*@__PURE__*/new Vector2();/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */class PerspectiveCamera extends Camera{/**\n\t * Constructs a new perspective camera.\n\t *\n\t * @param {number} [fov=50] - The vertical field of view.\n\t * @param {number} [aspect=1] - The aspect ratio.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */constructor(fov=50,aspect=1,near=0.1,far=2000){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPerspectiveCamera=true;this.type='PerspectiveCamera';/**\n\t\t * The vertical field of view, from bottom to top of view,\n\t\t * in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 50\n\t\t */this.fov=fov;/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.zoom=1;/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link PerspectiveCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n\t\t * valid value for a perspective camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */this.near=near;/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link PerspectiveCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */this.far=far;/**\n\t\t * Object distance used for stereoscopy and depth-of-field effects. This\n\t\t * parameter does not influence the projection matrix unless a\n\t\t * {@link StereoCamera} is being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */this.focus=10;/**\n\t\t * The aspect ratio, usually the canvas width / canvas height.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aspect=aspect;/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */this.view=null;/**\n\t\t * Film size used for the larger axis. Default is `35` (millimeters). This\n\t\t * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n\t\t * is set to a nonzero value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 35\n\t\t */this.filmGauge=35;/**\n\t\t * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.filmOffset=0;this.updateProjectionMatrix();}copy(source,recursive){super.copy(source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;}/**\n\t * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n\t */setFocalLength(focalLength){/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */const vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();}/**\n\t * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n\t * {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The computed focal length.\n\t */getFocalLength(){const vExtentSlope=Math.tan(DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;}/**\n\t * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n\t *\n\t * @return {number} The effective FOV.\n\t */getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*0.5*this.fov)/this.zoom);}/**\n\t * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */getFilmWidth(){// film not completely covered in portrait format (aspect < 1)\nreturn this.filmGauge*Math.min(this.aspect,1);}/**\n\t * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */getFilmHeight(){// film not completely covered in landscape format (aspect > 1)\nreturn this.filmGauge/Math.max(this.aspect,1);}/**\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n\t * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n\t */getViewBounds(distance,minTarget,maxTarget){_v3$1.set(-1,-1,0.5).applyMatrix4(this.projectionMatrixInverse);minTarget.set(_v3$1.x,_v3$1.y).multiplyScalar(-distance/_v3$1.z);_v3$1.set(1,1,0.5).applyMatrix4(this.projectionMatrixInverse);maxTarget.set(_v3$1.x,_v3$1.y).multiplyScalar(-distance/_v3$1.z);}/**\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n\t * @returns {Vector2} The view size.\n\t */getViewSize(distance,target){this.getViewBounds(distance,_minTarget,_maxTarget);return target.subVectors(_maxTarget,_minTarget);}/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *```\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *```\n\t * then for each monitor you would call it like this:\n\t *```js\n\t * const w = 1920;\n\t * const h = 1080;\n\t * const fullWidth = w * 3;\n\t * const fullHeight = h * 2;\n\t *\n\t * // --A--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t * // --B--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t * // --C--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t * // --D--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t * // --E--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t * // --F--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t * ```\n\t *\n\t * Note there is no reason monitors have to be the same size or in a grid.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t */setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}/**\n\t * Removes the view offset from the projection matrix.\n\t */clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */updateProjectionMatrix(){const near=this.near;let top=near*Math.tan(DEG2RAD*0.5*this.fov)/this.zoom;let height=2*top;let width=this.aspect*height;let left=-0.5*width;const view=this.view;if(this.view!==null&&this.view.enabled){const fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}const skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(meta){const data=super.toJSON(meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}}const fov=-90;// negative fov is not an error\nconst aspect=1;/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */class CubeCamera extends Object3D{/**\n\t * Constructs a new cube camera.\n\t *\n\t * @param {number} near - The camera's near plane.\n\t * @param {number} far - The camera's far plane.\n\t * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n\t */constructor(near,far,renderTarget){super();this.type='CubeCamera';/**\n\t\t * A reference to the cube render target.\n\t\t *\n\t\t * @type {WebGLCubeRenderTarget}\n\t\t */this.renderTarget=renderTarget;/**\n\t\t * The current active coordinate system.\n\t\t *\n\t\t * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t * @default null\n\t\t */this.coordinateSystem=null;/**\n\t\t * The current active mipmap level\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.activeMipmapLevel=0;const cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.layers=this.layers;this.add(cameraPX);const cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.layers=this.layers;this.add(cameraNX);const cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.layers=this.layers;this.add(cameraPY);const cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.layers=this.layers;this.add(cameraNY);const cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.layers=this.layers;this.add(cameraPZ);const cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.layers=this.layers;this.add(cameraNZ);}/**\n\t * Must be called when the coordinate system of the cube camera is changed.\n\t */updateCoordinateSystem(){const coordinateSystem=this.coordinateSystem;const cameras=this.children.concat();const[cameraPX,cameraNX,cameraPY,cameraNY,cameraPZ,cameraNZ]=cameras;for(const camera of cameras)this.remove(camera);if(coordinateSystem===WebGLCoordinateSystem){cameraPX.up.set(0,1,0);cameraPX.lookAt(1,0,0);cameraNX.up.set(0,1,0);cameraNX.lookAt(-1,0,0);cameraPY.up.set(0,0,-1);cameraPY.lookAt(0,1,0);cameraNY.up.set(0,0,1);cameraNY.lookAt(0,-1,0);cameraPZ.up.set(0,1,0);cameraPZ.lookAt(0,0,1);cameraNZ.up.set(0,1,0);cameraNZ.lookAt(0,0,-1);}else if(coordinateSystem===WebGPUCoordinateSystem){cameraPX.up.set(0,-1,0);cameraPX.lookAt(-1,0,0);cameraNX.up.set(0,-1,0);cameraNX.lookAt(1,0,0);cameraPY.up.set(0,0,1);cameraPY.lookAt(0,1,0);cameraNY.up.set(0,0,-1);cameraNY.lookAt(0,-1,0);cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(0,0,1);cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(0,0,-1);}else{throw new Error('THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: '+coordinateSystem);}for(const camera of cameras){this.add(camera);camera.updateMatrixWorld();}}/**\n\t * Calling this method will render the given scene with the given renderer\n\t * into the cube render target of the camera.\n\t *\n\t * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n\t * @param {Scene} scene - The scene to render.\n\t */update(renderer,scene){if(this.parent===null)this.updateMatrixWorld();const{renderTarget,activeMipmapLevel}=this;if(this.coordinateSystem!==renderer.coordinateSystem){this.coordinateSystem=renderer.coordinateSystem;this.updateCoordinateSystem();}const[cameraPX,cameraNX,cameraPY,cameraNY,cameraPZ,cameraNZ]=this.children;const currentRenderTarget=renderer.getRenderTarget();const currentActiveCubeFace=renderer.getActiveCubeFace();const currentActiveMipmapLevel=renderer.getActiveMipmapLevel();const currentXrEnabled=renderer.xr.enabled;renderer.xr.enabled=false;const generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderer.setRenderTarget(renderTarget,0,activeMipmapLevel);renderer.render(scene,cameraPX);renderer.setRenderTarget(renderTarget,1,activeMipmapLevel);renderer.render(scene,cameraNX);renderer.setRenderTarget(renderTarget,2,activeMipmapLevel);renderer.render(scene,cameraPY);renderer.setRenderTarget(renderTarget,3,activeMipmapLevel);renderer.render(scene,cameraNY);renderer.setRenderTarget(renderTarget,4,activeMipmapLevel);renderer.render(scene,cameraPZ);// mipmaps are generated during the last call of render()\n// at this point, all sides of the cube render target are defined\nrenderTarget.texture.generateMipmaps=generateMipmaps;renderer.setRenderTarget(renderTarget,5,activeMipmapLevel);renderer.render(scene,cameraNZ);renderer.setRenderTarget(currentRenderTarget,currentActiveCubeFace,currentActiveMipmapLevel);renderer.xr.enabled=currentXrEnabled;renderTarget.texture.needsPMREMUpdate=true;}}/**\n * Creates a cube texture made up of six images.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath( 'textures/cube/pisa/' );\n *\n * const textureCube = loader.load( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\n * ```\n *\n * @augments Texture\n */class CubeTexture extends Texture{/**\n\t * Constructs a new cube texture.\n\t *\n\t * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\n\t * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space value.\n\t */constructor(images=[],mapping=CubeReflectionMapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,colorSpace){super(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,colorSpace);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCubeTexture=true;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;}/**\n\t * Alias for {@link CubeTexture#image}.\n\t *\n\t * @type {Array<Image>}\n\t */get images(){return this.image;}set images(value){this.image=value;}}/**\n * A cube render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */class WebGLCubeRenderTarget extends WebGLRenderTarget{/**\n\t * Constructs a new cube render target.\n\t *\n\t * @param {number} [size=1] - The size of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(size=1,options={}){super(size,size,options);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isWebGLCubeRenderTarget=true;const image={width:size,height:size,depth:1};const images=[image,image,image,image,image,image];/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */this.texture=new CubeTexture(images,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.colorSpace);// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\nthis.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;this.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;}/**\n\t * Converts the given equirectangular texture to a cube map.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Texture} texture - The equirectangular texture.\n\t * @return {WebGLCubeRenderTarget} A reference to this cube render target.\n\t */fromEquirectangularTexture(renderer,texture){this.texture.type=texture.type;this.texture.colorSpace=texture.colorSpace;this.texture.generateMipmaps=texture.generateMipmaps;this.texture.minFilter=texture.minFilter;this.texture.magFilter=texture.magFilter;const shader={uniforms:{tEquirect:{value:null}},vertexShader:/* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,fragmentShader:/* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`};const geometry=new BoxGeometry(5,5,5);const material=new ShaderMaterial({name:'CubemapFromEquirect',uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;const mesh=new Mesh(geometry,material);const currentMinFilter=texture.minFilter;// Avoid blurred poles\nif(texture.minFilter===LinearMipmapLinearFilter)texture.minFilter=LinearFilter;const camera=new CubeCamera(1,10,this);camera.update(renderer,mesh);texture.minFilter=currentMinFilter;mesh.geometry.dispose();mesh.material.dispose();return this;}/**\n\t * Clears this cube render target.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n\t * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n\t */clear(renderer,color=true,depth=true,stencil=true){const currentRenderTarget=renderer.getRenderTarget();for(let i=0;i<6;i++){renderer.setRenderTarget(this,i);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(currentRenderTarget);}}/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */class Group extends Object3D{constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isGroup=true;this.type='Group';}}const _moveEvent={type:'move'};/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */class WebXRController{/**\n\t * Constructs a new XR controller.\n\t */constructor(){/**\n\t\t * A group representing the target ray space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */this._targetRay=null;/**\n\t\t * A group representing the grip space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */this._grip=null;/**\n\t\t * A group representing the hand space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */this._hand=null;}/**\n\t * Returns a group representing the hand space of the XR controller.\n\t *\n\t * @return {Group} A group representing the hand space of the XR controller.\n\t */getHandSpace(){if(this._hand===null){this._hand=new Group();this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false};}return this._hand;}/**\n\t * Returns a group representing the target ray space of the XR controller.\n\t *\n\t * @return {Group} A group representing the target ray space of the XR controller.\n\t */getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group();this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new Vector3();this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new Vector3();}return this._targetRay;}/**\n\t * Returns a group representing the grip space of the XR controller.\n\t *\n\t * @return {Group} A group representing the grip space of the XR controller.\n\t */getGripSpace(){if(this._grip===null){this._grip=new Group();this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new Vector3();this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new Vector3();}return this._grip;}/**\n\t * Dispatches the given event to the groups representing\n\t * the different coordinate spaces of the XR controller.\n\t *\n\t * @param {Object} event - The event to dispatch.\n\t * @return {WebXRController} A reference to this instance.\n\t */dispatchEvent(event){if(this._targetRay!==null){this._targetRay.dispatchEvent(event);}if(this._grip!==null){this._grip.dispatchEvent(event);}if(this._hand!==null){this._hand.dispatchEvent(event);}return this;}/**\n\t * Connects the controller with the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */connect(inputSource){if(inputSource&&inputSource.hand){const hand=this._hand;if(hand){for(const inputjoint of inputSource.hand.values()){// Initialize hand with joints when connected\nthis._getHandJoint(hand,inputjoint);}}}this.dispatchEvent({type:'connected',data:inputSource});return this;}/**\n\t * Disconnects the controller from the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */disconnect(inputSource){this.dispatchEvent({type:'disconnected',data:inputSource});if(this._targetRay!==null){this._targetRay.visible=false;}if(this._grip!==null){this._grip.visible=false;}if(this._hand!==null){this._hand.visible=false;}return this;}/**\n\t * Updates the controller with the given input source, XR frame and reference space.\n\t * This updates the transformations of the groups that represent the different\n\t * coordinate systems of the controller.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @param {XRFrame} frame - The XR frame.\n\t * @param {XRReferenceSpace} referenceSpace - The reference space.\n\t * @return {WebXRController} A reference to this instance.\n\t */update(inputSource,frame,referenceSpace){let inputPose=null;let gripPose=null;let handPose=null;const targetRay=this._targetRay;const grip=this._grip;const hand=this._hand;if(inputSource&&frame.session.visibilityState!=='visible-blurred'){if(hand&&inputSource.hand){handPose=true;for(const inputjoint of inputSource.hand.values()){// Update the joints groups with the XRJoint poses\nconst jointPose=frame.getJointPose(inputjoint,referenceSpace);// The transform of this joint will be updated with the joint pose on each frame\nconst joint=this._getHandJoint(hand,inputjoint);if(jointPose!==null){joint.matrix.fromArray(jointPose.transform.matrix);joint.matrix.decompose(joint.position,joint.rotation,joint.scale);joint.matrixWorldNeedsUpdate=true;joint.jointRadius=jointPose.radius;}joint.visible=jointPose!==null;}// Custom events\n// Check pinchz\nconst indexTip=hand.joints['index-finger-tip'];const thumbTip=hand.joints['thumb-tip'];const distance=indexTip.position.distanceTo(thumbTip.position);const distanceToPinch=0.02;const threshold=0.005;if(hand.inputState.pinching&&distance>distanceToPinch+threshold){hand.inputState.pinching=false;this.dispatchEvent({type:'pinchend',handedness:inputSource.handedness,target:this});}else if(!hand.inputState.pinching&&distance<=distanceToPinch-threshold){hand.inputState.pinching=true;this.dispatchEvent({type:'pinchstart',handedness:inputSource.handedness,target:this});}}else{if(grip!==null&&inputSource.gripSpace){gripPose=frame.getPose(inputSource.gripSpace,referenceSpace);if(gripPose!==null){grip.matrix.fromArray(gripPose.transform.matrix);grip.matrix.decompose(grip.position,grip.rotation,grip.scale);grip.matrixWorldNeedsUpdate=true;if(gripPose.linearVelocity){grip.hasLinearVelocity=true;grip.linearVelocity.copy(gripPose.linearVelocity);}else{grip.hasLinearVelocity=false;}if(gripPose.angularVelocity){grip.hasAngularVelocity=true;grip.angularVelocity.copy(gripPose.angularVelocity);}else{grip.hasAngularVelocity=false;}}}}if(targetRay!==null){inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace);// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\nif(inputPose===null&&gripPose!==null){inputPose=gripPose;}if(inputPose!==null){targetRay.matrix.fromArray(inputPose.transform.matrix);targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale);targetRay.matrixWorldNeedsUpdate=true;if(inputPose.linearVelocity){targetRay.hasLinearVelocity=true;targetRay.linearVelocity.copy(inputPose.linearVelocity);}else{targetRay.hasLinearVelocity=false;}if(inputPose.angularVelocity){targetRay.hasAngularVelocity=true;targetRay.angularVelocity.copy(inputPose.angularVelocity);}else{targetRay.hasAngularVelocity=false;}this.dispatchEvent(_moveEvent);}}}if(targetRay!==null){targetRay.visible=inputPose!==null;}if(grip!==null){grip.visible=gripPose!==null;}if(hand!==null){hand.visible=handPose!==null;}return this;}/**\n\t * Returns a group representing the hand joint for the given input joint.\n\t *\n\t * @private\n\t * @param {Group} hand - The group representing the hand space.\n\t * @param {XRJointSpace} inputjoint - The hand joint data.\n\t * @return {Group} A group representing the hand joint for the given input joint.\n\t */_getHandJoint(hand,inputjoint){if(hand.joints[inputjoint.jointName]===undefined){const joint=new Group();joint.matrixAutoUpdate=false;joint.visible=false;hand.joints[inputjoint.jointName]=joint;hand.add(joint);}return hand.joints[inputjoint.jointName];}}/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */class FogExp2{/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n\t */constructor(color,density=0.00025){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isFogExp2=true;/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.color=new Color(color);/**\n\t\t *  Defines how fast the fog will grow dense.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.00025\n\t\t */this.density=density;}/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {FogExp2} A clone of this instance.\n\t */clone(){return new FogExp2(this.color,this.density);}/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */toJSON(/* meta */){return{type:'FogExp2',name:this.name,color:this.color.getHex(),density:this.density};}}/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */class Fog{/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [near=1] - The minimum distance to start applying fog.\n\t * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n\t */constructor(color,near=1,far=1000){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isFog=true;/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.color=new Color(color);/**\n\t\t * The minimum distance to start applying fog. Objects that are less than\n\t\t * `near` units from the active camera won't be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.near=near;/**\n\t\t * The maximum distance at which fog stops being calculated and applied.\n\t\t * Objects that are more than `far` units away from the active camera won't\n\t\t * be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1000\n\t\t */this.far=far;}/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {Fog} A clone of this instance.\n\t */clone(){return new Fog(this.color,this.near,this.far);}/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */toJSON(/* meta */){return{type:'Fog',name:this.name,color:this.color.getHex(),near:this.near,far:this.far};}}/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */class Scene extends Object3D{/**\n\t * Constructs a new scene.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isScene=true;this.type='Scene';/**\n\t\t * Defines the background of the scene. Valid inputs are:\n\t\t *\n\t\t * - A color for defining a uniform colored background.\n\t\t * - A texture for defining a (flat) textured background.\n\t\t * - Cube textures or equirectangular textures for defining a skybox.\n\t\t *\n\t\t * @type {?(Color|Texture)}\n\t\t * @default null\n\t\t */this.background=null;/**\n\t\t * Sets the environment map for all physical materials in the scene. However,\n\t\t * it's not possible to overwrite an existing texture assigned to the `envMap`\n\t\t * material property.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.environment=null;/**\n\t\t * A fog instance defining the type of fog that affects everything\n\t\t * rendered in the scene.\n\t\t *\n\t\t * @type {?(Fog|FogExp2)}\n\t\t * @default null\n\t\t */this.fog=null;/**\n\t\t * Sets the blurriness of the background. Only influences environment maps\n\t\t * assigned to {@link Scene#background}. Valid input is a float between `0`\n\t\t * and `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.backgroundBlurriness=0;/**\n\t\t * Attenuates the color of the background. Only applies to background textures.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.backgroundIntensity=1;/**\n\t\t * The rotation of the background in radians. Only influences environment maps\n\t\t * assigned to {@link Scene#background}.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.backgroundRotation=new Euler();/**\n\t\t * Attenuates the color of the environment. Only influences environment maps\n\t\t * assigned to {@link Scene#environment}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.environmentIntensity=1;/**\n\t\t * The rotation of the environment map in radians. Only influences physical materials\n\t\t * in the scene when {@link Scene#environment} is used.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.environmentRotation=new Euler();/**\n\t\t * Forces everything in the scene to be rendered with the defined material. It is possible\n\t\t * to exclude materials from override by setting {@link Material#allowOverride} to `false`.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));}}copy(source,recursive){super.copy(source,recursive);if(source.background!==null)this.background=source.background.clone();if(source.environment!==null)this.environment=source.environment.clone();if(source.fog!==null)this.fog=source.fog.clone();this.backgroundBlurriness=source.backgroundBlurriness;this.backgroundIntensity=source.backgroundIntensity;this.backgroundRotation.copy(source.backgroundRotation);this.environmentIntensity=source.environmentIntensity;this.environmentRotation.copy(source.environmentRotation);if(source.overrideMaterial!==null)this.overrideMaterial=source.overrideMaterial.clone();this.matrixAutoUpdate=source.matrixAutoUpdate;return this;}toJSON(meta){const data=super.toJSON(meta);if(this.fog!==null)data.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)data.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)data.object.backgroundIntensity=this.backgroundIntensity;data.object.backgroundRotation=this.backgroundRotation.toArray();if(this.environmentIntensity!==1)data.object.environmentIntensity=this.environmentIntensity;data.object.environmentRotation=this.environmentRotation.toArray();return data;}}/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */class InterleavedBuffer{/**\n\t * Constructs a new interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t */constructor(array,stride){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInterleavedBuffer=true;/**\n\t\t * A typed array with a shared buffer storing attribute data.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.array=array;/**\n\t\t * The number of typed-array elements per vertex.\n\t\t *\n\t\t * @type {number}\n\t\t */this.stride=stride;/**\n\t\t * The total number of elements in the array\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */this.count=array!==undefined?array.length/stride:0;/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */this.usage=StaticDrawUsage;/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */this.updateRanges=[];/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */this.version=0;/**\n\t\t * The UUID of the interleaved buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();}/**\n\t * A callback function that is executed after the renderer has transferred the attribute array\n\t * data to the GPU.\n\t */onUploadCallback(){}/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true)this.version++;}/**\n\t * Sets the usage of this interleaved buffer.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {InterleavedBuffer} A reference to this interleaved buffer.\n\t */setUsage(value){this.usage=value;return this;}/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */addUpdateRange(start,count){this.updateRanges.push({start,count});}/**\n\t * Clears the update ranges.\n\t */clearUpdateRanges(){this.updateRanges.length=0;}/**\n\t * Copies the values of the given interleaved buffer to this instance.\n\t *\n\t * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */copy(source){this.array=new source.array.constructor(source.array);this.count=source.count;this.stride=source.stride;this.usage=source.usage;return this;}/**\n\t * Copies a vector from the given interleaved buffer to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this interleaved buffer.\n\t * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n\t * @param {number} index2 - The source index into the given interleaved buffer.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */copyAt(index1,interleavedBuffer,index2){index1*=this.stride;index2*=interleavedBuffer.stride;for(let i=0,l=this.stride;i<l;i++){this.array[index1+i]=interleavedBuffer.array[index2+i];}return this;}/**\n\t * Sets the given array data in the interleaved buffer.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */set(value,offset=0){this.array.set(value,offset);return this;}/**\n\t * Returns a new interleaved buffer with copied values from this instance.\n\t *\n\t * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n\t * @return {InterleavedBuffer} A clone of this instance.\n\t */clone(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer;}const array=new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);const ib=new this.constructor(array,this.stride);ib.setUsage(this.usage);return ib;}/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */onUpload(callback){this.onUploadCallback=callback;return this;}/**\n\t * Serializes the interleaved buffer into JSON.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized interleaved buffer.\n\t */toJSON(data){if(data.arrayBuffers===undefined){data.arrayBuffers={};}// generate UUID for array buffer if necessary\nif(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID();}if(data.arrayBuffers[this.array.buffer._uuid]===undefined){data.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer));}//\nreturn{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride};}}const _vector$7=/*@__PURE__*/new Vector3();/**\n * An alternative version of a buffer attribute with interleaved data. Interleaved\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\n * different offsets into the buffer.\n */class InterleavedBufferAttribute{/**\n\t * Constructs a new interleaved buffer attribute.\n\t *\n\t * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\n\t * @param {number} itemSize - The item size.\n\t * @param {number} offset - The attribute offset into the buffer.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */constructor(interleavedBuffer,itemSize,offset,normalized=false){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInterleavedBufferAttribute=true;/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The buffer holding the interleaved data.\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */this.data=interleavedBuffer;/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */this.itemSize=itemSize;/**\n\t\t * The attribute offset into the buffer.\n\t\t *\n\t\t * @type {number}\n\t\t */this.offset=offset;/**\n\t\t * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */this.normalized=normalized;}/**\n\t * The item count of this buffer attribute.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */get count(){return this.data.count;}/**\n\t * The array holding the interleaved buffer attribute data.\n\t *\n\t * @type {TypedArray}\n\t */get array(){return this.data.array;}/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){this.data.needsUpdate=value;}/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */applyMatrix4(m){for(let i=0,l=this.data.count;i<l;i++){_vector$7.fromBufferAttribute(this,i);_vector$7.applyMatrix4(m);this.setXYZ(i,_vector$7.x,_vector$7.y,_vector$7.z);}return this;}/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */applyNormalMatrix(m){for(let i=0,l=this.count;i<l;i++){_vector$7.fromBufferAttribute(this,i);_vector$7.applyNormalMatrix(m);this.setXYZ(i,_vector$7.x,_vector$7.y,_vector$7.z);}return this;}/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */transformDirection(m){for(let i=0,l=this.count;i<l;i++){_vector$7.fromBufferAttribute(this,i);_vector$7.transformDirection(m);this.setXYZ(i,_vector$7.x,_vector$7.y,_vector$7.z);}return this;}/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */getComponent(index,component){let value=this.array[index*this.data.stride+this.offset+component];if(this.normalized)value=denormalize(value,this.array);return value;}/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setComponent(index,component,value){if(this.normalized)value=normalize(value,this.array);this.data.array[index*this.data.stride+this.offset+component]=value;return this;}/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setX(index,x){if(this.normalized)x=normalize(x,this.array);this.data.array[index*this.data.stride+this.offset]=x;return this;}/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setY(index,y){if(this.normalized)y=normalize(y,this.array);this.data.array[index*this.data.stride+this.offset+1]=y;return this;}/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setZ(index,z){if(this.normalized)z=normalize(z,this.array);this.data.array[index*this.data.stride+this.offset+2]=z;return this;}/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setW(index,w){if(this.normalized)w=normalize(w,this.array);this.data.array[index*this.data.stride+this.offset+3]=w;return this;}/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */getX(index){let x=this.data.array[index*this.data.stride+this.offset];if(this.normalized)x=denormalize(x,this.array);return x;}/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */getY(index){let y=this.data.array[index*this.data.stride+this.offset+1];if(this.normalized)y=denormalize(y,this.array);return y;}/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */getZ(index){let z=this.data.array[index*this.data.stride+this.offset+2];if(this.normalized)z=denormalize(z,this.array);return z;}/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */getW(index){let w=this.data.array[index*this.data.stride+this.offset+3];if(this.normalized)w=denormalize(w,this.array);return w;}/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setXY(index,x,y){index=index*this.data.stride+this.offset;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);}this.data.array[index+0]=x;this.data.array[index+1]=y;return this;}/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setXYZ(index,x,y,z){index=index*this.data.stride+this.offset;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);}this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;return this;}/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */setXYZW(index,x,y,z,w){index=index*this.data.stride+this.offset;if(this.normalized){x=normalize(x,this.array);y=normalize(y,this.array);z=normalize(z,this.array);w=normalize(w,this.array);}this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this;}/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\n\t * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\n\t */clone(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');const array=[];for(let i=0;i<this.count;i++){const index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}return new BufferAttribute(new this.array.constructor(array),this.itemSize,this.normalized);}else{if(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.clone(data);}return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);}}/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */toJSON(data){if(data===undefined){console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');const array=[];for(let i=0;i<this.count;i++){const index=i*this.data.stride+this.offset;for(let j=0;j<this.itemSize;j++){array.push(this.data.array[index+j]);}}// de-interleave data and save it as an ordinary buffer attribute for now\nreturn{itemSize:this.itemSize,type:this.array.constructor.name,array:array,normalized:this.normalized};}else{// save as true interleaved attribute\nif(data.interleavedBuffers===undefined){data.interleavedBuffers={};}if(data.interleavedBuffers[this.data.uuid]===undefined){data.interleavedBuffers[this.data.uuid]=this.data.toJSON(data);}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};}}}/**\n * A material for rendering instances of {@link Sprite}.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );\n *\n * const sprite = new THREE.Sprite( material );\n * sprite.scale.set(200, 200, 1)\n * scene.add( sprite );\n * ```\n *\n * @augments Material\n */class SpriteMaterial extends Material{/**\n\t * Constructs a new sprite material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSpriteMaterial=true;this.type='SpriteMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The rotation of the sprite in radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.rotation=0;/**\n\t\t * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.sizeAttenuation=true;/**\n\t\t * Overwritten since sprite materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.transparent=true;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;this.fog=source.fog;return this;}}let _geometry;const _intersectPoint=/*@__PURE__*/new Vector3();const _worldScale=/*@__PURE__*/new Vector3();const _mvPosition=/*@__PURE__*/new Vector3();const _alignedPosition=/*@__PURE__*/new Vector2();const _rotatedPosition=/*@__PURE__*/new Vector2();const _viewWorldMatrix=/*@__PURE__*/new Matrix4();const _vA=/*@__PURE__*/new Vector3();const _vB=/*@__PURE__*/new Vector3();const _vC=/*@__PURE__*/new Vector3();const _uvA=/*@__PURE__*/new Vector2();const _uvB=/*@__PURE__*/new Vector2();const _uvC=/*@__PURE__*/new Vector2();/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */class Sprite extends Object3D{/**\n\t * Constructs a new sprite.\n\t *\n\t * @param {SpriteMaterial} [material] - The sprite material.\n\t */constructor(material=new SpriteMaterial()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSprite=true;this.type='Sprite';if(_geometry===undefined){_geometry=new BufferGeometry();const float32Array=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]);const interleavedBuffer=new InterleavedBuffer(float32Array,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute('position',new InterleavedBufferAttribute(interleavedBuffer,3,0,false));_geometry.setAttribute('uv',new InterleavedBufferAttribute(interleavedBuffer,2,3,false));}/**\n\t\t * The sprite geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */this.geometry=_geometry;/**\n\t\t * The sprite material.\n\t\t *\n\t\t * @type {SpriteMaterial}\n\t\t */this.material=material;/**\n\t\t * The sprite's anchor point, and the point around which the sprite rotates.\n\t\t * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n\t\t * of `(0, 0)` corresponds to the lower left corner of the sprite.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */this.center=new Vector2(0.5,0.5);}/**\n\t * Computes intersection points between a casted ray and this sprite.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */raycast(raycaster,intersects){if(raycaster.camera===null){console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(raycaster.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(raycaster.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z);}const rotation=this.material.rotation;let sin,cos;if(rotation!==0){cos=Math.cos(rotation);sin=Math.sin(rotation);}const center=this.center;transformVertex(_vA.set(-0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vB.set(0.5,-0.5,0),_mvPosition,center,_worldScale,sin,cos);transformVertex(_vC.set(0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvA.set(0,0);_uvB.set(1,0);_uvC.set(1,1);// check first triangle\nlet intersect=raycaster.ray.intersectTriangle(_vA,_vB,_vC,false,_intersectPoint);if(intersect===null){// check second triangle\ntransformVertex(_vB.set(-0.5,0.5,0),_mvPosition,center,_worldScale,sin,cos);_uvB.set(0,1);intersect=raycaster.ray.intersectTriangle(_vA,_vC,_vB,false,_intersectPoint);if(intersect===null){return;}}const distance=raycaster.ray.origin.distanceTo(_intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,point:_intersectPoint.clone(),uv:Triangle.getInterpolation(_intersectPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2()),face:null,object:this});}copy(source,recursive){super.copy(source,recursive);if(source.center!==undefined)this.center.copy(source.center);this.material=source.material;return this;}}function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){// compute position in camera space\n_alignedPosition.subVectors(vertexPosition,center).addScalar(0.5).multiply(scale);// to check if rotation is not zero\nif(sin!==undefined){_rotatedPosition.x=cos*_alignedPosition.x-sin*_alignedPosition.y;_rotatedPosition.y=sin*_alignedPosition.x+cos*_alignedPosition.y;}else{_rotatedPosition.copy(_alignedPosition);}vertexPosition.copy(mvPosition);vertexPosition.x+=_rotatedPosition.x;vertexPosition.y+=_rotatedPosition.y;// transform to world space\nvertexPosition.applyMatrix4(_viewWorldMatrix);}const _v1$2=/*@__PURE__*/new Vector3();const _v2$1=/*@__PURE__*/new Vector3();/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */class LOD extends Object3D{/**\n\t * Constructs a new LOD.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLOD=true;/**\n\t\t * The current LOD index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this._currentLevel=0;this.type='LOD';Object.defineProperties(this,{/**\n\t\t\t * This array holds the LOD levels.\n\t\t\t *\n\t\t\t * @name LOD#levels\n\t\t\t * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n\t\t\t */levels:{enumerable:true,value:[]}});/**\n\t\t * Whether the LOD object is updated automatically by the renderer per frame\n\t\t * or not. If set to `false`, you have to call {@link LOD#update} in the\n\t\t * render loop by yourself.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.autoUpdate=true;}copy(source){super.copy(source,false);const levels=source.levels;for(let i=0,l=levels.length;i<l;i++){const level=levels[i];this.addLevel(level.object.clone(),level.distance,level.hysteresis);}this.autoUpdate=source.autoUpdate;return this;}/**\n\t * Adds a mesh that will display at a certain distance and greater. Typically\n\t * the further away the distance, the lower the detail on the mesh.\n\t *\n\t * @param {Object3D} object - The 3D object to display at this level.\n\t * @param {number} [distance=0] - The distance at which to display this level of detail.\n\t * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n\t * @return {LOD} A reference to this instance.\n\t */addLevel(object,distance=0,hysteresis=0){distance=Math.abs(distance);const levels=this.levels;let l;for(l=0;l<levels.length;l++){if(distance<levels[l].distance){break;}}levels.splice(l,0,{distance:distance,hysteresis:hysteresis,object:object});this.add(object);return this;}/**\n\t * Removes an existing level, based on the distance from the camera.\n\t * Returns `true` when the level has been removed. Otherwise `false`.\n\t *\n\t * @param {number} distance - Distance of the level to remove.\n\t * @return {boolean} Whether the level has been removed or not.\n\t */removeLevel(distance){const levels=this.levels;for(let i=0;i<levels.length;i++){if(levels[i].distance===distance){const removedElements=levels.splice(i,1);this.remove(removedElements[0].object);return true;}}return false;}/**\n\t * Returns the currently active LOD level index.\n\t *\n\t * @return {number} The current active LOD level index.\n\t */getCurrentLevel(){return this._currentLevel;}/**\n\t * Returns a reference to the first 3D object that is greater than\n\t * the given distance.\n\t *\n\t * @param {number} distance - The LOD distance.\n\t * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n\t */getObjectForDistance(distance){const levels=this.levels;if(levels.length>0){let i,l;for(i=1,l=levels.length;i<l;i++){let levelDistance=levels[i].distance;if(levels[i].object.visible){levelDistance-=levelDistance*levels[i].hysteresis;}if(distance<levelDistance){break;}}return levels[i-1].object;}return null;}/**\n\t * Computes intersection points between a casted ray and this LOD.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */raycast(raycaster,intersects){const levels=this.levels;if(levels.length>0){_v1$2.setFromMatrixPosition(this.matrixWorld);const distance=raycaster.ray.origin.distanceTo(_v1$2);this.getObjectForDistance(distance).raycast(raycaster,intersects);}}/**\n\t * Updates the LOD by computing which LOD level should be visible according\n\t * to the current distance of the given camera.\n\t *\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t */update(camera){const levels=this.levels;if(levels.length>1){_v1$2.setFromMatrixPosition(camera.matrixWorld);_v2$1.setFromMatrixPosition(this.matrixWorld);const distance=_v1$2.distanceTo(_v2$1)/camera.zoom;levels[0].object.visible=true;let i,l;for(i=1,l=levels.length;i<l;i++){let levelDistance=levels[i].distance;if(levels[i].object.visible){levelDistance-=levelDistance*levels[i].hysteresis;}if(distance>=levelDistance){levels[i-1].object.visible=false;levels[i].object.visible=true;}else{break;}}this._currentLevel=i-1;for(;i<l;i++){levels[i].object.visible=false;}}}toJSON(meta){const data=super.toJSON(meta);if(this.autoUpdate===false)data.object.autoUpdate=false;data.object.levels=[];const levels=this.levels;for(let i=0,l=levels.length;i<l;i++){const level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance,hysteresis:level.hysteresis});}return data;}}const _basePosition=/*@__PURE__*/new Vector3();const _skinIndex=/*@__PURE__*/new Vector4();const _skinWeight=/*@__PURE__*/new Vector4();const _vector3=/*@__PURE__*/new Vector3();const _matrix4=/*@__PURE__*/new Matrix4();const _vertex=/*@__PURE__*/new Vector3();const _sphere$5=/*@__PURE__*/new Sphere();const _inverseMatrix$2=/*@__PURE__*/new Matrix4();const _ray$2=/*@__PURE__*/new Ray();/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */class SkinnedMesh extends Mesh{/**\n\t * Constructs a new skinned mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */constructor(geometry,material){super(geometry,material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSkinnedMesh=true;this.type='SkinnedMesh';/**\n\t\t * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n\t\t * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n\t\t * across multiple skinned meshes.\n\t\t *\n\t\t * @type {(AttachedBindMode|DetachedBindMode)}\n\t\t * @default AttachedBindMode\n\t\t */this.bindMode=AttachedBindMode;/**\n\t\t * The base matrix that is used for the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.bindMatrix=new Matrix4();/**\n\t\t * The base matrix that is used for resetting the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.bindMatrixInverse=new Matrix4();/**\n\t\t * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */this.boundingBox=null;/**\n\t\t * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */this.boundingSphere=null;}/**\n\t * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n\t * the current animation state.\n\t */computeBoundingBox(){const geometry=this.geometry;if(this.boundingBox===null){this.boundingBox=new Box3();}this.boundingBox.makeEmpty();const positionAttribute=geometry.getAttribute('position');for(let i=0;i<positionAttribute.count;i++){this.getVertexPosition(i,_vertex);this.boundingBox.expandByPoint(_vertex);}}/**\n\t * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n\t * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n\t * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n\t * per frame in order to reflect the current animation state.\n\t */computeBoundingSphere(){const geometry=this.geometry;if(this.boundingSphere===null){this.boundingSphere=new Sphere();}this.boundingSphere.makeEmpty();const positionAttribute=geometry.getAttribute('position');for(let i=0;i<positionAttribute.count;i++){this.getVertexPosition(i,_vertex);this.boundingSphere.expandByPoint(_vertex);}}copy(source,recursive){super.copy(source,recursive);this.bindMode=source.bindMode;this.bindMatrix.copy(source.bindMatrix);this.bindMatrixInverse.copy(source.bindMatrixInverse);this.skeleton=source.skeleton;if(source.boundingBox!==null)this.boundingBox=source.boundingBox.clone();if(source.boundingSphere!==null)this.boundingSphere=source.boundingSphere.clone();return this;}raycast(raycaster,intersects){const material=this.material;const matrixWorld=this.matrixWorld;if(material===undefined)return;// test with bounding sphere in world space\nif(this.boundingSphere===null)this.computeBoundingSphere();_sphere$5.copy(this.boundingSphere);_sphere$5.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere$5)===false)return;// convert ray to local space of skinned mesh\n_inverseMatrix$2.copy(matrixWorld).invert();_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);// test with bounding box in local space\nif(this.boundingBox!==null){if(_ray$2.intersectsBox(this.boundingBox)===false)return;}// test for intersections with geometry\nthis._computeIntersections(raycaster,intersects,_ray$2);}getVertexPosition(index,target){super.getVertexPosition(index,target);this.applyBoneTransform(index,target);return target;}/**\n\t * Binds the given skeleton to the skinned mesh.\n\t *\n\t * @param {Skeleton} skeleton - The skeleton to bind.\n\t * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n\t * the skinned mesh's world matrix will be used instead.\n\t */bind(skeleton,bindMatrix){this.skeleton=skeleton;if(bindMatrix===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();bindMatrix=this.matrixWorld;}this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.copy(bindMatrix).invert();}/**\n\t * This method sets the skinned mesh in the rest pose).\n\t */pose(){this.skeleton.pose();}/**\n\t * Normalizes the skin weights which are defined as a buffer attribute\n\t * in the skinned mesh's geometry.\n\t */normalizeSkinWeights(){const vector=new Vector4();const skinWeight=this.geometry.attributes.skinWeight;for(let i=0,l=skinWeight.count;i<l;i++){vector.fromBufferAttribute(skinWeight,i);const scale=1.0/vector.manhattanLength();if(scale!==Infinity){vector.multiplyScalar(scale);}else{vector.set(1,0,0,0);// do something reasonable\n}skinWeight.setXYZW(i,vector.x,vector.y,vector.z,vector.w);}}updateMatrixWorld(force){super.updateMatrixWorld(force);if(this.bindMode===AttachedBindMode){this.bindMatrixInverse.copy(this.matrixWorld).invert();}else if(this.bindMode===DetachedBindMode){this.bindMatrixInverse.copy(this.bindMatrix).invert();}else{console.warn('THREE.SkinnedMesh: Unrecognized bindMode: '+this.bindMode);}}/**\n\t * Applies the bone transform associated with the given index to the given\n\t * vertex position. Returns the updated vector.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * the skinned mesh's world matrix will be used instead.\n\t * @return {Vector3} The updated vertex position.\n\t */applyBoneTransform(index,target){const skeleton=this.skeleton;const geometry=this.geometry;_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex,index);_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight,index);_basePosition.copy(target).applyMatrix4(this.bindMatrix);target.set(0,0,0);for(let i=0;i<4;i++){const weight=_skinWeight.getComponent(i);if(weight!==0){const boneIndex=_skinIndex.getComponent(i);_matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld,skeleton.boneInverses[boneIndex]);target.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4),weight);}}return target.applyMatrix4(this.bindMatrixInverse);}}/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */class Bone extends Object3D{/**\n\t * Constructs a new bone.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBone=true;this.type='Bone';}}/**\n * Creates a texture directly from raw buffer data.\n *\n * The interpretation of the data depends on type and format: If the type is\n * `UnsignedByteType`, a `Uint8Array` will be useful for addressing the\n * texel data. If the format is `RGBAFormat`, data needs four values for\n * one texel; Red, Green, Blue and Alpha (typically the opacity).\n *\n * @augments Texture\n */class DataTexture extends Texture{/**\n\t * Constructs a new data texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=NearestFilter] - The mag filter value.\n\t * @param {number} [minFilter=NearestFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */constructor(data=null,width=1,height=1,format,type,mapping,wrapS,wrapT,magFilter=NearestFilter,minFilter=NearestFilter,anisotropy,colorSpace){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,colorSpace);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDataTexture=true;/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number}}\n\t\t */this.image={data:data,width:width,height:height};/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */this.unpackAlignment=1;}}const _offsetMatrix=/*@__PURE__*/new Matrix4();const _identityMatrix=/*@__PURE__*/new Matrix4();/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */class Skeleton{/**\n\t * Constructs a new skeleton.\n\t *\n\t * @param {Array<Bone>} [bones] - An array of bones.\n\t * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n\t * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n\t */constructor(bones=[],boneInverses=[]){this.uuid=generateUUID();/**\n\t\t * An array of bones defining the skeleton.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */this.bones=bones.slice(0);/**\n\t\t * An array of bone inverse matrices.\n\t\t *\n\t\t * @type {Array<Matrix4>}\n\t\t */this.boneInverses=boneInverses;/**\n\t\t * An array buffer holding the bone data.\n\t\t * Input data for {@link Skeleton#boneTexture}.\n\t\t *\n\t\t * @type {?Float32Array}\n\t\t * @default null\n\t\t */this.boneMatrices=null;/**\n\t\t * A texture holding the bone data for use\n\t\t * in the vertex shader.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */this.boneTexture=null;this.init();}/**\n\t * Initializes the skeleton. This method gets automatically called by the constructor\n\t * but depending on how the skeleton is created it might be necessary to call this method\n\t * manually.\n\t */init(){const bones=this.bones;const boneInverses=this.boneInverses;this.boneMatrices=new Float32Array(bones.length*16);// calculate inverse bone matrices if necessary\nif(boneInverses.length===0){this.calculateInverses();}else{// handle special case\nif(bones.length!==boneInverses.length){console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');this.boneInverses=[];for(let i=0,il=this.bones.length;i<il;i++){this.boneInverses.push(new Matrix4());}}}}/**\n\t * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n\t * and fills it with new matrices.\n\t */calculateInverses(){this.boneInverses.length=0;for(let i=0,il=this.bones.length;i<il;i++){const inverse=new Matrix4();if(this.bones[i]){inverse.copy(this.bones[i].matrixWorld).invert();}this.boneInverses.push(inverse);}}/**\n\t * Resets the skeleton to the base pose.\n\t */pose(){// recover the bind-time world matrices\nfor(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone){bone.matrixWorld.copy(this.boneInverses[i]).invert();}}// compute the local matrices, positions, rotations and scales\nfor(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone){if(bone.parent&&bone.parent.isBone){bone.matrix.copy(bone.parent.matrixWorld).invert();bone.matrix.multiply(bone.matrixWorld);}else{bone.matrix.copy(bone.matrixWorld);}bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);}}}/**\n\t * Resets the skeleton to the base pose.\n\t */update(){const bones=this.bones;const boneInverses=this.boneInverses;const boneMatrices=this.boneMatrices;const boneTexture=this.boneTexture;// flatten bone matrices to array\nfor(let i=0,il=bones.length;i<il;i++){// compute the offset between the current and the original transform\nconst matrix=bones[i]?bones[i].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(matrix,boneInverses[i]);_offsetMatrix.toArray(boneMatrices,i*16);}if(boneTexture!==null){boneTexture.needsUpdate=true;}}/**\n\t * Returns a new skeleton with copied values from this instance.\n\t *\n\t * @return {Skeleton} A clone of this instance.\n\t */clone(){return new Skeleton(this.bones,this.boneInverses);}/**\n\t * Computes a data texture for passing bone data to the vertex shader.\n\t *\n\t * @return {Skeleton} A reference of this instance.\n\t */computeBoneTexture(){// layout (1 matrix = 4 pixels)\n//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\nlet size=Math.sqrt(this.bones.length*4);// 4 pixels needed for 1 matrix\nsize=Math.ceil(size/4)*4;size=Math.max(size,4);const boneMatrices=new Float32Array(size*size*4);// 4 floats per RGBA pixel\nboneMatrices.set(this.boneMatrices);// copy current values\nconst boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);boneTexture.needsUpdate=true;this.boneMatrices=boneMatrices;this.boneTexture=boneTexture;return this;}/**\n\t * Searches through the skeleton's bone array and returns the first with a\n\t * matching name.\n\t *\n\t * @param {string} name - The name of the bone.\n\t * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n\t */getBoneByName(name){for(let i=0,il=this.bones.length;i<il;i++){const bone=this.bones[i];if(bone.name===name){return bone;}}return undefined;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null;}}/**\n\t * Setups the skeleton by the given JSON and bones.\n\t *\n\t * @param {Object} json - The skeleton as serialized JSON.\n\t * @param {Object<string, Bone>} bones - An array of bones.\n\t * @return {Skeleton} A reference of this instance.\n\t */fromJSON(json,bones){this.uuid=json.uuid;for(let i=0,l=json.bones.length;i<l;i++){const uuid=json.bones[i];let bone=bones[uuid];if(bone===undefined){console.warn('THREE.Skeleton: No bone found with UUID:',uuid);bone=new Bone();}this.bones.push(bone);this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));}this.init();return this;}/**\n\t * Serializes the skeleton into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized skeleton.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(){const data={metadata:{version:4.6,type:'Skeleton',generator:'Skeleton.toJSON'},bones:[],boneInverses:[]};data.uuid=this.uuid;const bones=this.bones;const boneInverses=this.boneInverses;for(let i=0,l=bones.length;i<l;i++){const bone=bones[i];data.bones.push(bone.uuid);const boneInverse=boneInverses[i];data.boneInverses.push(boneInverse.toArray());}return data;}}/**\n * An instanced version of a buffer attribute.\n *\n * @augments BufferAttribute\n */class InstancedBufferAttribute extends BufferAttribute{/**\n\t * Constructs a new instanced buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\n\t */constructor(array,itemSize,normalized,meshPerAttribute=1){super(array,itemSize,normalized);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInstancedBufferAttribute=true;/**\n\t\t * Defines how often a value of this buffer attribute should be repeated. A\n\t\t * value of one means that each value of the instanced attribute is used for\n\t\t * a single instance. A value of two means that each value is used for two\n\t\t * consecutive instances (and so on).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.meshPerAttribute=meshPerAttribute;}copy(source){super.copy(source);this.meshPerAttribute=source.meshPerAttribute;return this;}toJSON(){const data=super.toJSON();data.meshPerAttribute=this.meshPerAttribute;data.isInstancedBufferAttribute=true;return data;}}const _instanceLocalMatrix=/*@__PURE__*/new Matrix4();const _instanceWorldMatrix=/*@__PURE__*/new Matrix4();const _instanceIntersects=[];const _box3=/*@__PURE__*/new Box3();const _identity=/*@__PURE__*/new Matrix4();const _mesh$1=/*@__PURE__*/new Mesh();const _sphere$4=/*@__PURE__*/new Sphere();/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */class InstancedMesh extends Mesh{/**\n\t * Constructs a new instanced mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t * @param {number} count - The number of instances.\n\t */constructor(geometry,material,count){super(geometry,material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInstancedMesh=true;/**\n\t\t * Represents the local transformation of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMatrixAt}.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */this.instanceMatrix=new InstancedBufferAttribute(new Float32Array(count*16),16);/**\n\t\t * Represents the color of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setColorAt}.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t * @default null\n\t\t */this.instanceColor=null;/**\n\t\t * Represents the morph target weights of all instances. You have to set its\n\t\t * {@link Texture#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMorphAt}.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */this.morphTexture=null;/**\n\t\t * The number of instances.\n\t\t *\n\t\t * @type {number}\n\t\t */this.count=count;/**\n\t\t * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */this.boundingBox=null;/**\n\t\t * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */this.boundingSphere=null;for(let i=0;i<count;i++){this.setMatrixAt(i,_identity);}}/**\n\t * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */computeBoundingBox(){const geometry=this.geometry;const count=this.count;if(this.boundingBox===null){this.boundingBox=new Box3();}if(geometry.boundingBox===null){geometry.computeBoundingBox();}this.boundingBox.makeEmpty();for(let i=0;i<count;i++){this.getMatrixAt(i,_instanceLocalMatrix);_box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);this.boundingBox.union(_box3);}}/**\n\t * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */computeBoundingSphere(){const geometry=this.geometry;const count=this.count;if(this.boundingSphere===null){this.boundingSphere=new Sphere();}if(geometry.boundingSphere===null){geometry.computeBoundingSphere();}this.boundingSphere.makeEmpty();for(let i=0;i<count;i++){this.getMatrixAt(i,_instanceLocalMatrix);_sphere$4.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);this.boundingSphere.union(_sphere$4);}}copy(source,recursive){super.copy(source,recursive);this.instanceMatrix.copy(source.instanceMatrix);if(source.morphTexture!==null)this.morphTexture=source.morphTexture.clone();if(source.instanceColor!==null)this.instanceColor=source.instanceColor.clone();this.count=source.count;if(source.boundingBox!==null)this.boundingBox=source.boundingBox.clone();if(source.boundingSphere!==null)this.boundingSphere=source.boundingSphere.clone();return this;}/**\n\t * Gets the color of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t */getColorAt(index,color){color.fromArray(this.instanceColor.array,index*3);}/**\n\t * Gets the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t */getMatrixAt(index,matrix){matrix.fromArray(this.instanceMatrix.array,index*16);}/**\n\t * Gets the morph target weights of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object - The target object that is used to store the method's result.\n\t */getMorphAt(index,object){const objectInfluences=object.morphTargetInfluences;const array=this.morphTexture.source.data.data;const len=objectInfluences.length+1;// All influences + the baseInfluenceSum\nconst dataIndex=index*len+1;// Skip the baseInfluenceSum at the beginning\nfor(let i=0;i<objectInfluences.length;i++){objectInfluences[i]=array[dataIndex+i];}}raycast(raycaster,intersects){const matrixWorld=this.matrixWorld;const raycastTimes=this.count;_mesh$1.geometry=this.geometry;_mesh$1.material=this.material;if(_mesh$1.material===undefined)return;// test with bounding sphere first\nif(this.boundingSphere===null)this.computeBoundingSphere();_sphere$4.copy(this.boundingSphere);_sphere$4.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere$4)===false)return;// now test each instance\nfor(let instanceId=0;instanceId<raycastTimes;instanceId++){// calculate the world matrix for each instance\nthis.getMatrixAt(instanceId,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(matrixWorld,_instanceLocalMatrix);// the mesh represents this single instance\n_mesh$1.matrixWorld=_instanceWorldMatrix;_mesh$1.raycast(raycaster,_instanceIntersects);// process the result of raycast\nfor(let i=0,l=_instanceIntersects.length;i<l;i++){const intersect=_instanceIntersects[i];intersect.instanceId=instanceId;intersect.object=this;intersects.push(intersect);}_instanceIntersects.length=0;}}/**\n\t * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The instance color.\n\t */setColorAt(index,color){if(this.instanceColor===null){this.instanceColor=new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count*3).fill(1),3);}color.toArray(this.instanceColor.array,index*3);}/**\n\t * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The local transformation.\n\t */setMatrixAt(index,matrix){matrix.toArray(this.instanceMatrix.array,index*16);}/**\n\t * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n\t * of a single instance.\n\t */setMorphAt(index,object){const objectInfluences=object.morphTargetInfluences;const len=objectInfluences.length+1;// morphBaseInfluence + all influences\nif(this.morphTexture===null){this.morphTexture=new DataTexture(new Float32Array(len*this.count),len,this.count,RedFormat,FloatType);}const array=this.morphTexture.source.data.data;let morphInfluencesSum=0;for(let i=0;i<objectInfluences.length;i++){morphInfluencesSum+=objectInfluences[i];}const morphBaseInfluence=this.geometry.morphTargetsRelative?1:1-morphInfluencesSum;const dataIndex=len*index;array[dataIndex]=morphBaseInfluence;array.set(objectInfluences,dataIndex+1);}updateMorphTargets(){}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.dispatchEvent({type:'dispose'});if(this.morphTexture!==null){this.morphTexture.dispose();this.morphTexture=null;}}}const _vector1=/*@__PURE__*/new Vector3();const _vector2=/*@__PURE__*/new Vector3();const _normalMatrix=/*@__PURE__*/new Matrix3();/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */class Plane{/**\n\t * Constructs a new plane.\n\t *\n\t * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n\t * @param {number} [constant=0] - The signed distance from the origin to the plane.\n\t */constructor(normal=new Vector3(1,0,0),constant=0){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPlane=true;/**\n\t\t * A unit length vector defining the normal of the plane.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.normal=normal;/**\n\t\t * The signed distance from the origin to the plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.constant=constant;}/**\n\t * Sets the plane components by copying the given values.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {number} constant - The constant.\n\t * @return {Plane} A reference to this plane.\n\t */set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;}/**\n\t * Sets the plane components by defining `x`, `y`, `z` as the\n\t * plane normal and `w` as the constant.\n\t *\n\t * @param {number} x - The value for the normal's x component.\n\t * @param {number} y - The value for the normal's y component.\n\t * @param {number} z - The value for the normal's z component.\n\t * @param {number} w - The constant value.\n\t * @return {Plane} A reference to this plane.\n\t */setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;}/**\n\t * Sets the plane from the given normal and coplanar point (that is a point\n\t * that lies onto the plane).\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Vector3} point - A coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;}/**\n\t * Sets the plane from three coplanar points. The winding order is\n\t * assumed to be counter-clockwise, and determines the direction of\n\t * the plane normal.\n\t *\n\t * @param {Vector3} a - The first coplanar point.\n\t * @param {Vector3} b - The second coplanar point.\n\t * @param {Vector3} c - The third coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */setFromCoplanarPoints(a,b,c){const normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\nthis.setFromNormalAndCoplanarPoint(normal,a);return this;}/**\n\t * Copies the values of the given plane to this instance.\n\t *\n\t * @param {Plane} plane - The plane to copy.\n\t * @return {Plane} A reference to this plane.\n\t */copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;}/**\n\t * Normalizes the plane normal and adjusts the constant accordingly.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */normalize(){// Note: will lead to a divide by zero if the plane is invalid.\nconst inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;}/**\n\t * Negates both the plane normal and the constant.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */negate(){this.constant*=-1;this.normal.negate();return this;}/**\n\t * Returns the signed distance from the given point to this plane.\n\t *\n\t * @param {Vector3} point - The point to compute the distance for.\n\t * @return {number} The signed distance.\n\t */distanceToPoint(point){return this.normal.dot(point)+this.constant;}/**\n\t * Returns the signed distance from the given sphere to this plane.\n\t *\n\t * @param {Sphere} sphere - The sphere to compute the distance for.\n\t * @return {number} The signed distance.\n\t */distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;}/**\n\t * Projects a the given point onto the plane.\n\t *\n\t * @param {Vector3} point - The point to project.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The projected point on the plane.\n\t */projectPoint(point,target){return target.copy(point).addScaledVector(this.normal,-this.distanceToPoint(point));}/**\n\t * Returns the intersection point of the passed line and the plane. Returns\n\t * `null` if the line does not intersect. Returns the line's starting point if\n\t * the line is coplanar with the plane.\n\t *\n\t * @param {Line3} line - The line to compute the intersection for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */intersectLine(line,target){const direction=line.delta(_vector1);const denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin\nif(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.\nreturn null;}const t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return null;}return target.copy(line.start).addScaledVector(direction,t);}/**\n\t * Returns `true` if the given line segment intersects with (passes through) the plane.\n\t *\n\t * @param {Line3} line - The line to test.\n\t * @return {boolean} Whether the given line segment intersects with the plane or not.\n\t */intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\nconst startSign=this.distanceToPoint(line.start);const endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;}/**\n\t * Returns `true` if the given bounding box intersects with the plane.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with the plane or not.\n\t */intersectsBox(box){return box.intersectsPlane(this);}/**\n\t * Returns `true` if the given bounding sphere intersects with the plane.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n\t */intersectsSphere(sphere){return sphere.intersectsPlane(this);}/**\n\t * Returns a coplanar vector to the plane, by calculating the\n\t * projection of the normal at the origin onto the plane.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The coplanar point.\n\t */coplanarPoint(target){return target.copy(this.normal).multiplyScalar(-this.constant);}/**\n\t * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n\t *\n\t * The optional normal matrix can be pre-computed like so:\n\t * ```js\n\t * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t * ```\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n\t * @return {Plane} A reference to this plane.\n\t */applyMatrix4(matrix,optionalNormalMatrix){const normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix);const referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix);const normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;}/**\n\t * Translates the plane by the distance defined by the given offset vector.\n\t * Note that this only affects the plane constant and will not affect the normal vector.\n\t *\n\t * @param {Vector3} offset - The offset vector.\n\t * @return {Plane} A reference to this plane.\n\t */translate(offset){this.constant-=offset.dot(this.normal);return this;}/**\n\t * Returns `true` if this plane is equal with the given one.\n\t *\n\t * @param {Plane} plane - The plane to test for equality.\n\t * @return {boolean} Whether this plane is equal with the given one.\n\t */equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}/**\n\t * Returns a new plane with copied values from this instance.\n\t *\n\t * @return {Plane} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}const _sphere$3=/*@__PURE__*/new Sphere();const _vector$6=/*@__PURE__*/new Vector3();/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */class Frustum{/**\n\t * Constructs a new frustum.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t */constructor(p0=new Plane(),p1=new Plane(),p2=new Plane(),p3=new Plane(),p4=new Plane(),p5=new Plane()){/**\n\t\t * This array holds the planes that enclose the frustum.\n\t\t *\n\t\t * @type {Array<Plane>}\n\t\t */this.planes=[p0,p1,p2,p3,p4,p5];}/**\n\t * Sets the frustum planes by copying the given planes.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t * @return {Frustum} A reference to this frustum.\n\t */set(p0,p1,p2,p3,p4,p5){const planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;}/**\n\t * Copies the values of the given frustum to this instance.\n\t *\n\t * @param {Frustum} frustum - The frustum to copy.\n\t * @return {Frustum} A reference to this frustum.\n\t */copy(frustum){const planes=this.planes;for(let i=0;i<6;i++){planes[i].copy(frustum.planes[i]);}return this;}/**\n\t * Sets the frustum planes from the given projection matrix.\n\t *\n\t * @param {Matrix4} m - The projection matrix.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n\t * @return {Frustum} A reference to this frustum.\n\t */setFromProjectionMatrix(m,coordinateSystem=WebGLCoordinateSystem){const planes=this.planes;const me=m.elements;const me0=me[0],me1=me[1],me2=me[2],me3=me[3];const me4=me[4],me5=me[5],me6=me[6],me7=me[7];const me8=me[8],me9=me[9],me10=me[10],me11=me[11];const me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();if(coordinateSystem===WebGLCoordinateSystem){planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();}else if(coordinateSystem===WebGPUCoordinateSystem){planes[5].setComponents(me2,me6,me10,me14).normalize();}else{throw new Error('THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: '+coordinateSystem);}return this;}/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n\t *\n\t * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n\t */intersectsObject(object){if(object.boundingSphere!==undefined){if(object.boundingSphere===null)object.computeBoundingSphere();_sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);}else{const geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);}return this.intersectsSphere(_sphere$3);}/**\n\t * Returns `true` if the given sprite is intersecting this frustum.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @return {boolean} Whether the sprite is intersecting this frustum or not.\n\t */intersectsSprite(sprite){_sphere$3.center.set(0,0,0);_sphere$3.radius=0.7071067811865476;_sphere$3.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(_sphere$3);}/**\n\t * Returns `true` if the given bounding sphere is intersecting this frustum.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n\t */intersectsSphere(sphere){const planes=this.planes;const center=sphere.center;const negRadius=-sphere.radius;for(let i=0;i<6;i++){const distance=planes[i].distanceToPoint(center);if(distance<negRadius){return false;}}return true;}/**\n\t * Returns `true` if the given bounding box is intersecting this frustum.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n\t */intersectsBox(box){const planes=this.planes;for(let i=0;i<6;i++){const plane=planes[i];// corner at max distance\n_vector$6.x=plane.normal.x>0?box.max.x:box.min.x;_vector$6.y=plane.normal.y>0?box.max.y:box.min.y;_vector$6.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(_vector$6)<0){return false;}}return true;}/**\n\t * Returns `true` if the given point lies within the frustum.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the point lies within this frustum or not.\n\t */containsPoint(point){const planes=this.planes;for(let i=0;i<6;i++){if(planes[i].distanceToPoint(point)<0){return false;}}return true;}/**\n\t * Returns a new frustum with copied values from this instance.\n\t *\n\t * @return {Frustum} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}const _projScreenMatrix$2=/*@__PURE__*/new Matrix4();const _frustum$1=/*@__PURE__*/new Frustum();/**\n * FrustumArray is used to determine if an object is visible in at least one camera\n * from an array of cameras. This is particularly useful for multi-view renderers.\n*/class FrustumArray{/**\n\t * Constructs a new frustum array.\n\t *\n\t */constructor(){/**\n\t\t * The coordinate system to use.\n\t\t *\n\t\t * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n\t\t * @default WebGLCoordinateSystem\n\t\t */this.coordinateSystem=WebGLCoordinateSystem;}/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the 3D object is visible in any camera.\n\t */intersectsObject(object,cameraArray){if(!cameraArray.isArrayCamera||cameraArray.cameras.length===0){return false;}for(let i=0;i<cameraArray.cameras.length;i++){const camera=cameraArray.cameras[i];_projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum$1.setFromProjectionMatrix(_projScreenMatrix$2,this.coordinateSystem);if(_frustum$1.intersectsObject(object)){return true;// Object is visible in at least one camera\n}}return false;// Not visible in any camera\n}/**\n\t * Returns `true` if the given sprite is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sprite is visible in any camera.\n\t */intersectsSprite(sprite,cameraArray){if(!cameraArray||!cameraArray.cameras||cameraArray.cameras.length===0){return false;}for(let i=0;i<cameraArray.cameras.length;i++){const camera=cameraArray.cameras[i];_projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum$1.setFromProjectionMatrix(_projScreenMatrix$2,this.coordinateSystem);if(_frustum$1.intersectsSprite(sprite)){return true;// Sprite is visible in at least one camera\n}}return false;// Not visible in any camera\n}/**\n\t * Returns `true` if the given bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sphere is visible in any camera.\n\t */intersectsSphere(sphere,cameraArray){if(!cameraArray||!cameraArray.cameras||cameraArray.cameras.length===0){return false;}for(let i=0;i<cameraArray.cameras.length;i++){const camera=cameraArray.cameras[i];_projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum$1.setFromProjectionMatrix(_projScreenMatrix$2,this.coordinateSystem);if(_frustum$1.intersectsSphere(sphere)){return true;// Sphere is visible in at least one camera\n}}return false;// Not visible in any camera\n}/**\n\t * Returns `true` if the given bounding box is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the box is visible in any camera.\n\t */intersectsBox(box,cameraArray){if(!cameraArray||!cameraArray.cameras||cameraArray.cameras.length===0){return false;}for(let i=0;i<cameraArray.cameras.length;i++){const camera=cameraArray.cameras[i];_projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum$1.setFromProjectionMatrix(_projScreenMatrix$2,this.coordinateSystem);if(_frustum$1.intersectsBox(box)){return true;// Box is visible in at least one camera\n}}return false;// Not visible in any camera\n}/**\n\t * Returns `true` if the given point lies within any frustum\n\t * from the camera array.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the point is visible in any camera.\n\t */containsPoint(point,cameraArray){if(!cameraArray||!cameraArray.cameras||cameraArray.cameras.length===0){return false;}for(let i=0;i<cameraArray.cameras.length;i++){const camera=cameraArray.cameras[i];_projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum$1.setFromProjectionMatrix(_projScreenMatrix$2,this.coordinateSystem);if(_frustum$1.containsPoint(point)){return true;// Point is visible in at least one camera\n}}return false;// Not visible in any camera\n}/**\n\t * Returns a new frustum array with copied values from this instance.\n\t *\n\t * @return {FrustumArray} A clone of this instance.\n\t */clone(){return new FrustumArray();}}function ascIdSort(a,b){return a-b;}function sortOpaque(a,b){return a.z-b.z;}function sortTransparent(a,b){return b.z-a.z;}class MultiDrawRenderList{constructor(){this.index=0;this.pool=[];this.list=[];}push(start,count,z,index){const pool=this.pool;const list=this.list;if(this.index>=pool.length){pool.push({start:-1,count:-1,z:-1,index:-1});}const item=pool[this.index];list.push(item);this.index++;item.start=start;item.count=count;item.z=z;item.index=index;}reset(){this.list.length=0;this.index=0;}}const _matrix$1=/*@__PURE__*/new Matrix4();const _whiteColor=/*@__PURE__*/new Color(1,1,1);const _frustum=/*@__PURE__*/new Frustum();const _frustumArray=/*@__PURE__*/new FrustumArray();const _box$1=/*@__PURE__*/new Box3();const _sphere$2=/*@__PURE__*/new Sphere();const _vector$5=/*@__PURE__*/new Vector3();const _forward=/*@__PURE__*/new Vector3();const _temp=/*@__PURE__*/new Vector3();const _renderList=/*@__PURE__*/new MultiDrawRenderList();const _mesh=/*@__PURE__*/new Mesh();const _batchIntersects=[];// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData(src,target,targetOffset=0){const itemSize=target.itemSize;if(src.isInterleavedBufferAttribute||src.array.constructor!==target.array.constructor){// use the component getters and setters if the array data cannot\n// be copied directly\nconst vertexCount=src.count;for(let i=0;i<vertexCount;i++){for(let c=0;c<itemSize;c++){target.setComponent(i+targetOffset,c,src.getComponent(i,c));}}}else{// faster copy approach using typed array set function\ntarget.array.set(src.array,targetOffset*itemSize);}target.needsUpdate=true;}// safely copies array contents to a potentially smaller array\nfunction copyArrayContents(src,target){if(src.constructor!==target.constructor){// if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\nconst len=Math.min(src.length,target.length);for(let i=0;i<len;i++){target[i]=src[i];}}else{// if the arrays use the same data layout we can use a fast block copy\nconst len=Math.min(src.length,target.length);target.set(new src.constructor(src.buffer,0,len));}}/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */class BatchedMesh extends Mesh{/**\n\t * Constructs a new batched mesh.\n\t *\n\t * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n\t * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */constructor(maxInstanceCount,maxVertexCount,maxIndexCount=maxVertexCount*2,material){super(new BufferGeometry(),material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBatchedMesh=true;/**\n\t\t * When set ot `true`, the individual objects of a batch are frustum culled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.perObjectFrustumCulled=true;/**\n\t\t * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n\t\t * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n\t\t * rendered front to back.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.sortObjects=true;/**\n\t\t * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */this.boundingBox=null;/**\n\t\t * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */this.boundingSphere=null;/**\n\t\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n\t\t * sort with.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */this.customSort=null;// stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\nthis._instanceInfo=[];this._geometryInfo=[];// instance, geometry ids that have been set as inactive, and are available to be overwritten\nthis._availableInstanceIds=[];this._availableGeometryIds=[];// used to track where the next point is that geometry should be inserted\nthis._nextIndexStart=0;this._nextVertexStart=0;this._geometryCount=0;// flags\nthis._visibilityChanged=true;this._geometryInitialized=false;// cached user options\nthis._maxInstanceCount=maxInstanceCount;this._maxVertexCount=maxVertexCount;this._maxIndexCount=maxIndexCount;// buffers for multi draw\nthis._multiDrawCounts=new Int32Array(maxInstanceCount);this._multiDrawStarts=new Int32Array(maxInstanceCount);this._multiDrawCount=0;this._multiDrawInstances=null;// Local matrix per geometry by using data texture\nthis._matricesTexture=null;this._indirectTexture=null;this._colorsTexture=null;this._initMatricesTexture();this._initIndirectTexture();}/**\n\t * The maximum number of individual instances that can be stored in the batch.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */get maxInstanceCount(){return this._maxInstanceCount;}/**\n\t * The instance count.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length;}/**\n\t * The number of unused vertices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart;}/**\n\t * The number of unused indices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart;}_initMatricesTexture(){// layout (1 matrix = 4 pixels)\n//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\nlet size=Math.sqrt(this._maxInstanceCount*4);// 4 pixels needed for 1 matrix\nsize=Math.ceil(size/4)*4;size=Math.max(size,4);const matricesArray=new Float32Array(size*size*4);// 4 floats per RGBA pixel\nconst matricesTexture=new DataTexture(matricesArray,size,size,RGBAFormat,FloatType);this._matricesTexture=matricesTexture;}_initIndirectTexture(){let size=Math.sqrt(this._maxInstanceCount);size=Math.ceil(size);const indirectArray=new Uint32Array(size*size);const indirectTexture=new DataTexture(indirectArray,size,size,RedIntegerFormat,UnsignedIntType);this._indirectTexture=indirectTexture;}_initColorsTexture(){let size=Math.sqrt(this._maxInstanceCount);size=Math.ceil(size);// 4 floats per RGBA pixel initialized to white\nconst colorsArray=new Float32Array(size*size*4).fill(1);const colorsTexture=new DataTexture(colorsArray,size,size,RGBAFormat,FloatType);colorsTexture.colorSpace=ColorManagement.workingColorSpace;this._colorsTexture=colorsTexture;}_initializeGeometry(reference){const geometry=this.geometry;const maxVertexCount=this._maxVertexCount;const maxIndexCount=this._maxIndexCount;if(this._geometryInitialized===false){for(const attributeName in reference.attributes){const srcAttribute=reference.getAttribute(attributeName);const{array,itemSize,normalized}=srcAttribute;const dstArray=new array.constructor(maxVertexCount*itemSize);const dstAttribute=new BufferAttribute(dstArray,itemSize,normalized);geometry.setAttribute(attributeName,dstAttribute);}if(reference.getIndex()!==null){// Reserve last u16 index for primitive restart.\nconst indexArray=maxVertexCount>65535?new Uint32Array(maxIndexCount):new Uint16Array(maxIndexCount);geometry.setIndex(new BufferAttribute(indexArray,1));}this._geometryInitialized=true;}}// Make sure the geometry is compatible with the existing combined geometry attributes\n_validateGeometry(geometry){// check to ensure the geometries are using consistent attributes and indices\nconst batchGeometry=this.geometry;if(Boolean(geometry.getIndex())!==Boolean(batchGeometry.getIndex())){throw new Error('THREE.BatchedMesh: All geometries must consistently have \"index\".');}for(const attributeName in batchGeometry.attributes){if(!geometry.hasAttribute(attributeName)){throw new Error(`THREE.BatchedMesh: Added geometry missing \"${attributeName}\". All geometries must have consistent attributes.`);}const srcAttribute=geometry.getAttribute(attributeName);const dstAttribute=batchGeometry.getAttribute(attributeName);if(srcAttribute.itemSize!==dstAttribute.itemSize||srcAttribute.normalized!==dstAttribute.normalized){throw new Error('THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.');}}}/**\n\t * Validates the instance defined by the given ID.\n\t *\n\t * @param {number} instanceId - The instance to validate.\n\t */validateInstanceId(instanceId){const instanceInfo=this._instanceInfo;if(instanceId<0||instanceId>=instanceInfo.length||instanceInfo[instanceId].active===false){throw new Error(`THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.`);}}/**\n\t * Validates the geometry defined by the given ID.\n\t *\n\t * @param {number} geometryId - The geometry to validate.\n\t */validateGeometryId(geometryId){const geometryInfoList=this._geometryInfo;if(geometryId<0||geometryId>=geometryInfoList.length||geometryInfoList[geometryId].active===false){throw new Error(`THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.`);}}/**\n\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n\t *\n\t * @param {Function} func - The custom sort function.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */setCustomSort(func){this.customSort=func;return this;}/**\n\t * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n\t * Bounding boxes aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}const boundingBox=this.boundingBox;const instanceInfo=this._instanceInfo;boundingBox.makeEmpty();for(let i=0,l=instanceInfo.length;i<l;i++){if(instanceInfo[i].active===false)continue;const geometryId=instanceInfo[i].geometryIndex;this.getMatrixAt(i,_matrix$1);this.getBoundingBoxAt(geometryId,_box$1).applyMatrix4(_matrix$1);boundingBox.union(_box$1);}}/**\n\t * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n\t * Bounding spheres aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}const boundingSphere=this.boundingSphere;const instanceInfo=this._instanceInfo;boundingSphere.makeEmpty();for(let i=0,l=instanceInfo.length;i<l;i++){if(instanceInfo[i].active===false)continue;const geometryId=instanceInfo[i].geometryIndex;this.getMatrixAt(i,_matrix$1);this.getBoundingSphereAt(geometryId,_sphere$2).applyMatrix4(_matrix$1);boundingSphere.union(_sphere$2);}}/**\n\t * Adds a new instance to the batch using the geometry of the given ID and returns\n\t * a new id referring to the new instance to be used by other functions.\n\t *\n\t * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n\t * @return {number} The instance ID.\n\t */addInstance(geometryId){const atCapacity=this._instanceInfo.length>=this.maxInstanceCount;// ensure we're not over geometry\nif(atCapacity&&this._availableInstanceIds.length===0){throw new Error('THREE.BatchedMesh: Maximum item count reached.');}const instanceInfo={visible:true,active:true,geometryIndex:geometryId};let drawId=null;// Prioritize using previously freed instance ids\nif(this._availableInstanceIds.length>0){this._availableInstanceIds.sort(ascIdSort);drawId=this._availableInstanceIds.shift();this._instanceInfo[drawId]=instanceInfo;}else{drawId=this._instanceInfo.length;this._instanceInfo.push(instanceInfo);}const matricesTexture=this._matricesTexture;_matrix$1.identity().toArray(matricesTexture.image.data,drawId*16);matricesTexture.needsUpdate=true;const colorsTexture=this._colorsTexture;if(colorsTexture){_whiteColor.toArray(colorsTexture.image.data,drawId*4);colorsTexture.needsUpdate=true;}this._visibilityChanged=true;return drawId;}/**\n\t * Adds the given geometry to the batch and returns the associated\n\t * geometry id referring to it to be used in other functions.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to add.\n\t * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n\t * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n\t * to set a new geometry at this index at a later time that is larger than the original geometry.\n\t * Defaults to the length of the given geometry vertex buffer.\n\t * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n\t * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n\t * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n\t * the length of the given geometry index buffer.\n\t * @return {number} The geometry ID.\n\t */addGeometry(geometry,reservedVertexCount=-1,reservedIndexCount=-1){this._initializeGeometry(geometry);this._validateGeometry(geometry);const geometryInfo={// geometry information\nvertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,// draw range information\nstart:-1,count:-1,// state\nboundingBox:null,boundingSphere:null,active:true};const geometryInfoList=this._geometryInfo;geometryInfo.vertexStart=this._nextVertexStart;geometryInfo.reservedVertexCount=reservedVertexCount===-1?geometry.getAttribute('position').count:reservedVertexCount;const index=geometry.getIndex();const hasIndex=index!==null;if(hasIndex){geometryInfo.indexStart=this._nextIndexStart;geometryInfo.reservedIndexCount=reservedIndexCount===-1?index.count:reservedIndexCount;}if(geometryInfo.indexStart!==-1&&geometryInfo.indexStart+geometryInfo.reservedIndexCount>this._maxIndexCount||geometryInfo.vertexStart+geometryInfo.reservedVertexCount>this._maxVertexCount){throw new Error('THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.');}// update id\nlet geometryId;if(this._availableGeometryIds.length>0){this._availableGeometryIds.sort(ascIdSort);geometryId=this._availableGeometryIds.shift();geometryInfoList[geometryId]=geometryInfo;}else{geometryId=this._geometryCount;this._geometryCount++;geometryInfoList.push(geometryInfo);}// update the geometry\nthis.setGeometryAt(geometryId,geometry);// increment the next geometry position\nthis._nextIndexStart=geometryInfo.indexStart+geometryInfo.reservedIndexCount;this._nextVertexStart=geometryInfo.vertexStart+geometryInfo.reservedVertexCount;return geometryId;}/**\n\t * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n\t * is not enough space reserved for geometry. Calling this will change all instances that are\n\t * rendering that geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.\n\t * @param {BufferGeometry} geometry - The new geometry.\n\t * @return {number} The geometry ID.\n\t */setGeometryAt(geometryId,geometry){if(geometryId>=this._geometryCount){throw new Error('THREE.BatchedMesh: Maximum geometry count reached.');}this._validateGeometry(geometry);const batchGeometry=this.geometry;const hasIndex=batchGeometry.getIndex()!==null;const dstIndex=batchGeometry.getIndex();const srcIndex=geometry.getIndex();const geometryInfo=this._geometryInfo[geometryId];if(hasIndex&&srcIndex.count>geometryInfo.reservedIndexCount||geometry.attributes.position.count>geometryInfo.reservedVertexCount){throw new Error('THREE.BatchedMesh: Reserved space not large enough for provided geometry.');}// copy geometry buffer data over\nconst vertexStart=geometryInfo.vertexStart;const reservedVertexCount=geometryInfo.reservedVertexCount;geometryInfo.vertexCount=geometry.getAttribute('position').count;for(const attributeName in batchGeometry.attributes){// copy attribute data\nconst srcAttribute=geometry.getAttribute(attributeName);const dstAttribute=batchGeometry.getAttribute(attributeName);copyAttributeData(srcAttribute,dstAttribute,vertexStart);// fill the rest in with zeroes\nconst itemSize=srcAttribute.itemSize;for(let i=srcAttribute.count,l=reservedVertexCount;i<l;i++){const index=vertexStart+i;for(let c=0;c<itemSize;c++){dstAttribute.setComponent(index,c,0);}}dstAttribute.needsUpdate=true;dstAttribute.addUpdateRange(vertexStart*itemSize,reservedVertexCount*itemSize);}// copy index\nif(hasIndex){const indexStart=geometryInfo.indexStart;const reservedIndexCount=geometryInfo.reservedIndexCount;geometryInfo.indexCount=geometry.getIndex().count;// copy index data over\nfor(let i=0;i<srcIndex.count;i++){dstIndex.setX(indexStart+i,vertexStart+srcIndex.getX(i));}// fill the rest in with zeroes\nfor(let i=srcIndex.count,l=reservedIndexCount;i<l;i++){dstIndex.setX(indexStart+i,vertexStart);}dstIndex.needsUpdate=true;dstIndex.addUpdateRange(indexStart,geometryInfo.reservedIndexCount);}// update the draw range\ngeometryInfo.start=hasIndex?geometryInfo.indexStart:geometryInfo.vertexStart;geometryInfo.count=hasIndex?geometryInfo.indexCount:geometryInfo.vertexCount;// store the bounding boxes\ngeometryInfo.boundingBox=null;if(geometry.boundingBox!==null){geometryInfo.boundingBox=geometry.boundingBox.clone();}geometryInfo.boundingSphere=null;if(geometry.boundingSphere!==null){geometryInfo.boundingSphere=geometry.boundingSphere.clone();}this._visibilityChanged=true;return geometryId;}/**\n\t * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n\t * this geometry will also be removed as a side effect.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */deleteGeometry(geometryId){const geometryInfoList=this._geometryInfo;if(geometryId>=geometryInfoList.length||geometryInfoList[geometryId].active===false){return this;}// delete any instances associated with this geometry\nconst instanceInfo=this._instanceInfo;for(let i=0,l=instanceInfo.length;i<l;i++){if(instanceInfo[i].active&&instanceInfo[i].geometryIndex===geometryId){this.deleteInstance(i);}}geometryInfoList[geometryId].active=false;this._availableGeometryIds.push(geometryId);this._visibilityChanged=true;return this;}/**\n\t * Deletes an existing instance from the batch using the given ID.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */deleteInstance(instanceId){this.validateInstanceId(instanceId);this._instanceInfo[instanceId].active=false;this._availableInstanceIds.push(instanceId);this._visibilityChanged=true;return this;}/**\n\t * Repacks the sub geometries in [name] to remove any unused space remaining from\n\t * previously deleted geometry, freeing up space to add new geometry.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */optimize(){// track the next indices to copy data to\nlet nextVertexStart=0;let nextIndexStart=0;// Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n// in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\nconst geometryInfoList=this._geometryInfo;const indices=geometryInfoList.map((e,i)=>i).sort((a,b)=>{return geometryInfoList[a].vertexStart-geometryInfoList[b].vertexStart;});const geometry=this.geometry;for(let i=0,l=geometryInfoList.length;i<l;i++){// if a geometry range is inactive then don't copy anything\nconst index=indices[i];const geometryInfo=geometryInfoList[index];if(geometryInfo.active===false){continue;}// if a geometry contains an index buffer then shift it, as well\nif(geometry.index!==null){if(geometryInfo.indexStart!==nextIndexStart){const{indexStart,vertexStart,reservedIndexCount}=geometryInfo;const index=geometry.index;const array=index.array;// shift the index pointers based on how the vertex data will shift\n// adjusting the index must happen first so the original vertex start value is available\nconst elementDelta=nextVertexStart-vertexStart;for(let j=indexStart;j<indexStart+reservedIndexCount;j++){array[j]=array[j]+elementDelta;}index.array.copyWithin(nextIndexStart,indexStart,indexStart+reservedIndexCount);index.addUpdateRange(nextIndexStart,reservedIndexCount);geometryInfo.indexStart=nextIndexStart;}nextIndexStart+=geometryInfo.reservedIndexCount;}// if a geometry needs to be moved then copy attribute data to overwrite unused space\nif(geometryInfo.vertexStart!==nextVertexStart){const{vertexStart,reservedVertexCount}=geometryInfo;const attributes=geometry.attributes;for(const key in attributes){const attribute=attributes[key];const{array,itemSize}=attribute;array.copyWithin(nextVertexStart*itemSize,vertexStart*itemSize,(vertexStart+reservedVertexCount)*itemSize);attribute.addUpdateRange(nextVertexStart*itemSize,reservedVertexCount*itemSize);}geometryInfo.vertexStart=nextVertexStart;}nextVertexStart+=geometryInfo.reservedVertexCount;geometryInfo.start=geometry.index?geometryInfo.indexStart:geometryInfo.vertexStart;// step the next geometry points to the shifted position\nthis._nextIndexStart=geometry.index?geometryInfo.indexStart+geometryInfo.reservedIndexCount:0;this._nextVertexStart=geometryInfo.vertexStart+geometryInfo.reservedVertexCount;}return this;}/**\n\t * Returns the bounding box for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n\t * @param {Box3} target - The target object that is used to store the method's result.\n\t * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n\t */getBoundingBoxAt(geometryId,target){if(geometryId>=this._geometryCount){return null;}// compute bounding box\nconst geometry=this.geometry;const geometryInfo=this._geometryInfo[geometryId];if(geometryInfo.boundingBox===null){const box=new Box3();const index=geometry.index;const position=geometry.attributes.position;for(let i=geometryInfo.start,l=geometryInfo.start+geometryInfo.count;i<l;i++){let iv=i;if(index){iv=index.getX(iv);}box.expandByPoint(_vector$5.fromBufferAttribute(position,iv));}geometryInfo.boundingBox=box;}target.copy(geometryInfo.boundingBox);return target;}/**\n\t * Returns the bounding sphere for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n\t * @param {Sphere} target - The target object that is used to store the method's result.\n\t * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n\t */getBoundingSphereAt(geometryId,target){if(geometryId>=this._geometryCount){return null;}// compute bounding sphere\nconst geometry=this.geometry;const geometryInfo=this._geometryInfo[geometryId];if(geometryInfo.boundingSphere===null){const sphere=new Sphere();this.getBoundingBoxAt(geometryId,_box$1);_box$1.getCenter(sphere.center);const index=geometry.index;const position=geometry.attributes.position;let maxRadiusSq=0;for(let i=geometryInfo.start,l=geometryInfo.start+geometryInfo.count;i<l;i++){let iv=i;if(index){iv=index.getX(iv);}_vector$5.fromBufferAttribute(position,iv);maxRadiusSq=Math.max(maxRadiusSq,sphere.center.distanceToSquared(_vector$5));}sphere.radius=Math.sqrt(maxRadiusSq);geometryInfo.boundingSphere=sphere;}target.copy(geometryInfo.boundingSphere);return target;}/**\n\t * Sets the given local transformation matrix to the defined instance.\n\t * Negatively scaled matrices are not supported.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the matrix of.\n\t * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */setMatrixAt(instanceId,matrix){this.validateInstanceId(instanceId);const matricesTexture=this._matricesTexture;const matricesArray=this._matricesTexture.image.data;matrix.toArray(matricesArray,instanceId*16);matricesTexture.needsUpdate=true;return this;}/**\n\t * Returns the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the matrix of.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t * @return {Matrix4} The instance's local transformation matrix.\n\t */getMatrixAt(instanceId,matrix){this.validateInstanceId(instanceId);return matrix.fromArray(this._matricesTexture.image.data,instanceId*16);}/**\n\t * Sets the given color to the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the color of.\n\t * @param {Color} color - The color to set the instance to.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */setColorAt(instanceId,color){this.validateInstanceId(instanceId);if(this._colorsTexture===null){this._initColorsTexture();}color.toArray(this._colorsTexture.image.data,instanceId*4);this._colorsTexture.needsUpdate=true;return this;}/**\n\t * Returns the color of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the color of.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t * @return {Color} The instance's color.\n\t */getColorAt(instanceId,color){this.validateInstanceId(instanceId);return color.fromArray(this._colorsTexture.image.data,instanceId*4);}/**\n\t * Sets the visibility of the instance.\n\t *\n\t * @param {number} instanceId - The id of the instance to set the visibility of.\n\t * @param {boolean} visible - Whether the instance is visible or not.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */setVisibleAt(instanceId,visible){this.validateInstanceId(instanceId);if(this._instanceInfo[instanceId].visible===visible){return this;}this._instanceInfo[instanceId].visible=visible;this._visibilityChanged=true;return this;}/**\n\t * Returns the visibility state of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the visibility state of.\n\t * @return {boolean} Whether the instance is visible or not.\n\t */getVisibleAt(instanceId){this.validateInstanceId(instanceId);return this._instanceInfo[instanceId].visible;}/**\n\t * Sets the geometry ID of the instance at the given index.\n\t *\n\t * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n\t * @param {number} geometryId - The geometry ID to be use by the instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */setGeometryIdAt(instanceId,geometryId){this.validateInstanceId(instanceId);this.validateGeometryId(geometryId);this._instanceInfo[instanceId].geometryIndex=geometryId;return this;}/**\n\t * Returns the geometry ID of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n\t * @return {number} The instance's geometry ID.\n\t */getGeometryIdAt(instanceId){this.validateInstanceId(instanceId);return this._instanceInfo[instanceId].geometryIndex;}/**\n\t * Get the range representing the subset of triangles related to the attached geometry,\n\t * indicating the starting offset and count, or `null` if invalid.\n\t *\n\t * @param {number} geometryId - The id of the geometry to get the range of.\n\t * @param {Object} [target] - The target object that is used to store the method's result.\n\t * @return {{\n\t * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n\t * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n\t * \tstart:number,count:number\n\t * }} The result object with range data.\n\t */getGeometryRangeAt(geometryId,target={}){this.validateGeometryId(geometryId);const geometryInfo=this._geometryInfo[geometryId];target.vertexStart=geometryInfo.vertexStart;target.vertexCount=geometryInfo.vertexCount;target.reservedVertexCount=geometryInfo.reservedVertexCount;target.indexStart=geometryInfo.indexStart;target.indexCount=geometryInfo.indexCount;target.reservedIndexCount=geometryInfo.reservedIndexCount;target.start=geometryInfo.start;target.count=geometryInfo.count;return target;}/**\n\t * Resizes the necessary buffers to support the provided number of instances.\n\t * If the provided arguments shrink the number of instances but there are not enough\n\t * unused Ids at the end of the list then an error is thrown.\n\t *\n\t * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n\t*/setInstanceCount(maxInstanceCount){// shrink the available instances as much as possible\nconst availableInstanceIds=this._availableInstanceIds;const instanceInfo=this._instanceInfo;availableInstanceIds.sort(ascIdSort);while(availableInstanceIds[availableInstanceIds.length-1]===instanceInfo.length){instanceInfo.pop();availableInstanceIds.pop();}// throw an error if it can't be shrunk to the desired size\nif(maxInstanceCount<instanceInfo.length){throw new Error(`BatchedMesh: Instance ids outside the range ${maxInstanceCount} are being used. Cannot shrink instance count.`);}// copy the multi draw counts\nconst multiDrawCounts=new Int32Array(maxInstanceCount);const multiDrawStarts=new Int32Array(maxInstanceCount);copyArrayContents(this._multiDrawCounts,multiDrawCounts);copyArrayContents(this._multiDrawStarts,multiDrawStarts);this._multiDrawCounts=multiDrawCounts;this._multiDrawStarts=multiDrawStarts;this._maxInstanceCount=maxInstanceCount;// update texture data for instance sampling\nconst indirectTexture=this._indirectTexture;const matricesTexture=this._matricesTexture;const colorsTexture=this._colorsTexture;indirectTexture.dispose();this._initIndirectTexture();copyArrayContents(indirectTexture.image.data,this._indirectTexture.image.data);matricesTexture.dispose();this._initMatricesTexture();copyArrayContents(matricesTexture.image.data,this._matricesTexture.image.data);if(colorsTexture){colorsTexture.dispose();this._initColorsTexture();copyArrayContents(colorsTexture.image.data,this._colorsTexture.image.data);}}/**\n\t * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n\t * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n\t * end of the geometry attributes then an error is thrown.\n\t *\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n\t * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n\t*/setGeometrySize(maxVertexCount,maxIndexCount){// Check if we can shrink to the requested vertex attribute size\nconst validRanges=[...this._geometryInfo].filter(info=>info.active);const requiredVertexLength=Math.max(...validRanges.map(range=>range.vertexStart+range.reservedVertexCount));if(requiredVertexLength>maxVertexCount){throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);}// Check if we can shrink to the requested index attribute size\nif(this.geometry.index){const requiredIndexLength=Math.max(...validRanges.map(range=>range.indexStart+range.reservedIndexCount));if(requiredIndexLength>maxIndexCount){throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);}}//\n// dispose of the previous geometry\nconst oldGeometry=this.geometry;oldGeometry.dispose();// recreate the geometry needed based on the previous variant\nthis._maxVertexCount=maxVertexCount;this._maxIndexCount=maxIndexCount;if(this._geometryInitialized){this._geometryInitialized=false;this.geometry=new BufferGeometry();this._initializeGeometry(oldGeometry);}// copy data from the previous geometry\nconst geometry=this.geometry;if(oldGeometry.index){copyArrayContents(oldGeometry.index.array,geometry.index.array);}for(const key in oldGeometry.attributes){copyArrayContents(oldGeometry.attributes[key].array,geometry.attributes[key].array);}}raycast(raycaster,intersects){const instanceInfo=this._instanceInfo;const geometryInfoList=this._geometryInfo;const matrixWorld=this.matrixWorld;const batchGeometry=this.geometry;// iterate over each geometry\n_mesh.material=this.material;_mesh.geometry.index=batchGeometry.index;_mesh.geometry.attributes=batchGeometry.attributes;if(_mesh.geometry.boundingBox===null){_mesh.geometry.boundingBox=new Box3();}if(_mesh.geometry.boundingSphere===null){_mesh.geometry.boundingSphere=new Sphere();}for(let i=0,l=instanceInfo.length;i<l;i++){if(!instanceInfo[i].visible||!instanceInfo[i].active){continue;}const geometryId=instanceInfo[i].geometryIndex;const geometryInfo=geometryInfoList[geometryId];_mesh.geometry.setDrawRange(geometryInfo.start,geometryInfo.count);// get the intersects\nthis.getMatrixAt(i,_mesh.matrixWorld).premultiply(matrixWorld);this.getBoundingBoxAt(geometryId,_mesh.geometry.boundingBox);this.getBoundingSphereAt(geometryId,_mesh.geometry.boundingSphere);_mesh.raycast(raycaster,_batchIntersects);// add batch id to the intersects\nfor(let j=0,l=_batchIntersects.length;j<l;j++){const intersect=_batchIntersects[j];intersect.object=this;intersect.batchId=i;intersects.push(intersect);}_batchIntersects.length=0;}_mesh.material=null;_mesh.geometry.index=null;_mesh.geometry.attributes={};_mesh.geometry.setDrawRange(0,Infinity);}copy(source){super.copy(source);this.geometry=source.geometry.clone();this.perObjectFrustumCulled=source.perObjectFrustumCulled;this.sortObjects=source.sortObjects;this.boundingBox=source.boundingBox!==null?source.boundingBox.clone():null;this.boundingSphere=source.boundingSphere!==null?source.boundingSphere.clone():null;this._geometryInfo=source._geometryInfo.map(info=>({...info,boundingBox:info.boundingBox!==null?info.boundingBox.clone():null,boundingSphere:info.boundingSphere!==null?info.boundingSphere.clone():null}));this._instanceInfo=source._instanceInfo.map(info=>({...info}));this._availableInstanceIds=source._availableInstanceIds.slice();this._availableGeometryIds=source._availableGeometryIds.slice();this._nextIndexStart=source._nextIndexStart;this._nextVertexStart=source._nextVertexStart;this._geometryCount=source._geometryCount;this._maxInstanceCount=source._maxInstanceCount;this._maxVertexCount=source._maxVertexCount;this._maxIndexCount=source._maxIndexCount;this._geometryInitialized=source._geometryInitialized;this._multiDrawCounts=source._multiDrawCounts.slice();this._multiDrawStarts=source._multiDrawStarts.slice();this._indirectTexture=source._indirectTexture.clone();this._indirectTexture.image.data=this._indirectTexture.image.data.slice();this._matricesTexture=source._matricesTexture.clone();this._matricesTexture.image.data=this._matricesTexture.image.data.slice();if(this._colorsTexture!==null){this._colorsTexture=source._colorsTexture.clone();this._colorsTexture.image.data=this._colorsTexture.image.data.slice();}return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){// Assuming the geometry is not shared with other meshes\nthis.geometry.dispose();this._matricesTexture.dispose();this._matricesTexture=null;this._indirectTexture.dispose();this._indirectTexture=null;if(this._colorsTexture!==null){this._colorsTexture.dispose();this._colorsTexture=null;}}onBeforeRender(renderer,scene,camera,geometry,material/*, _group*/){// if visibility has not changed and frustum culling and object sorting is not required\n// then skip iterating over all items\nif(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects){return;}// the indexed version of the multi draw function requires specifying the start\n// offset in bytes.\nconst index=geometry.getIndex();const bytesPerElement=index===null?1:index.array.BYTES_PER_ELEMENT;const instanceInfo=this._instanceInfo;const multiDrawStarts=this._multiDrawStarts;const multiDrawCounts=this._multiDrawCounts;const geometryInfoList=this._geometryInfo;const perObjectFrustumCulled=this.perObjectFrustumCulled;const indirectTexture=this._indirectTexture;const indirectArray=indirectTexture.image.data;const frustum=camera.isArrayCamera?_frustumArray:_frustum;// prepare the frustum in the local frame\nif(perObjectFrustumCulled&&!camera.isArrayCamera){_matrix$1.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse).multiply(this.matrixWorld);_frustum.setFromProjectionMatrix(_matrix$1,renderer.coordinateSystem);}let multiDrawCount=0;if(this.sortObjects){// get the camera position in the local frame\n_matrix$1.copy(this.matrixWorld).invert();_vector$5.setFromMatrixPosition(camera.matrixWorld).applyMatrix4(_matrix$1);_forward.set(0,0,-1).transformDirection(camera.matrixWorld).transformDirection(_matrix$1);for(let i=0,l=instanceInfo.length;i<l;i++){if(instanceInfo[i].visible&&instanceInfo[i].active){const geometryId=instanceInfo[i].geometryIndex;// get the bounds in world space\nthis.getMatrixAt(i,_matrix$1);this.getBoundingSphereAt(geometryId,_sphere$2).applyMatrix4(_matrix$1);// determine whether the batched geometry is within the frustum\nlet culled=false;if(perObjectFrustumCulled){culled=!frustum.intersectsSphere(_sphere$2,camera);}if(!culled){// get the distance from camera used for sorting\nconst geometryInfo=geometryInfoList[geometryId];const z=_temp.subVectors(_sphere$2.center,_vector$5).dot(_forward);_renderList.push(geometryInfo.start,geometryInfo.count,z,i);}}}// Sort the draw ranges and prep for rendering\nconst list=_renderList.list;const customSort=this.customSort;if(customSort===null){list.sort(material.transparent?sortTransparent:sortOpaque);}else{customSort.call(this,list,camera);}for(let i=0,l=list.length;i<l;i++){const item=list[i];multiDrawStarts[multiDrawCount]=item.start*bytesPerElement;multiDrawCounts[multiDrawCount]=item.count;indirectArray[multiDrawCount]=item.index;multiDrawCount++;}_renderList.reset();}else{for(let i=0,l=instanceInfo.length;i<l;i++){if(instanceInfo[i].visible&&instanceInfo[i].active){const geometryId=instanceInfo[i].geometryIndex;// determine whether the batched geometry is within the frustum\nlet culled=false;if(perObjectFrustumCulled){// get the bounds in world space\nthis.getMatrixAt(i,_matrix$1);this.getBoundingSphereAt(geometryId,_sphere$2).applyMatrix4(_matrix$1);culled=!frustum.intersectsSphere(_sphere$2,camera);}if(!culled){const geometryInfo=geometryInfoList[geometryId];multiDrawStarts[multiDrawCount]=geometryInfo.start*bytesPerElement;multiDrawCounts[multiDrawCount]=geometryInfo.count;indirectArray[multiDrawCount]=i;multiDrawCount++;}}}}indirectTexture.needsUpdate=true;this._multiDrawCount=multiDrawCount;this._visibilityChanged=false;}onBeforeShadow(renderer,object,camera,shadowCamera,geometry,depthMaterial/* , group */){this.onBeforeRender(renderer,null,shadowCamera,geometry,depthMaterial);}}/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */class LineBasicMaterial extends Material{/**\n\t * Constructs a new line basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineBasicMaterial=true;this.type='LineBasicMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);/**\n\t\t * Sets the color of the lines using data from a texture. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n\t\t * ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.linewidth=1;/**\n\t\t * Defines appearance of line ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('butt'|'round'|'square')}\n\t\t * @default 'round'\n\t\t */this.linecap='round';/**\n\t\t * Defines appearance of line joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.linejoin='round';/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;this.fog=source.fog;return this;}}const _vStart=/*@__PURE__*/new Vector3();const _vEnd=/*@__PURE__*/new Vector3();const _inverseMatrix$1=/*@__PURE__*/new Matrix4();const _ray$1=/*@__PURE__*/new Ray();const _sphere$1=/*@__PURE__*/new Sphere();const _intersectPointOnRay=/*@__PURE__*/new Vector3();const _intersectPointOnSegment=/*@__PURE__*/new Vector3();/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */class Line extends Object3D{/**\n\t * Constructs a new line.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */constructor(geometry=new BufferGeometry(),material=new LineBasicMaterial()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLine=true;this.type='Line';/**\n\t\t * The line geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */this.geometry=geometry;/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default LineBasicMaterial\n\t\t */this.material=material;/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetDictionary=undefined;/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetInfluences=undefined;this.updateMorphTargets();}copy(source,recursive){super.copy(source,recursive);this.material=Array.isArray(source.material)?source.material.slice():source.material;this.geometry=source.geometry;return this;}/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Line} A reference to this line.\n\t */computeLineDistances(){const geometry=this.geometry;// we assume non-indexed geometry\nif(geometry.index===null){const positionAttribute=geometry.attributes.position;const lineDistances=[0];for(let i=1,l=positionAttribute.count;i<l;i++){_vStart.fromBufferAttribute(positionAttribute,i-1);_vEnd.fromBufferAttribute(positionAttribute,i);lineDistances[i]=lineDistances[i-1];lineDistances[i]+=_vStart.distanceTo(_vEnd);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}return this;}/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */raycast(raycaster,intersects){const geometry=this.geometry;const matrixWorld=this.matrixWorld;const threshold=raycaster.params.Line.threshold;const drawRange=geometry.drawRange;// Checking boundingSphere distance to ray\nif(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$1.copy(geometry.boundingSphere);_sphere$1.applyMatrix4(matrixWorld);_sphere$1.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$1)===false)return;//\n_inverseMatrix$1.copy(matrixWorld).invert();_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);const localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);const localThresholdSq=localThreshold*localThreshold;const step=this.isLineSegments?2:1;const index=geometry.index;const attributes=geometry.attributes;const positionAttribute=attributes.position;if(index!==null){const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){const a=index.getX(i);const b=index.getX(i+1);const intersect=checkIntersection(this,raycaster,_ray$1,localThresholdSq,a,b,i);if(intersect){intersects.push(intersect);}}if(this.isLineLoop){const a=index.getX(end-1);const b=index.getX(start);const intersect=checkIntersection(this,raycaster,_ray$1,localThresholdSq,a,b,end-1);if(intersect){intersects.push(intersect);}}}else{const start=Math.max(0,drawRange.start);const end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end-1;i<l;i+=step){const intersect=checkIntersection(this,raycaster,_ray$1,localThresholdSq,i,i+1,i);if(intersect){intersects.push(intersect);}}if(this.isLineLoop){const intersect=checkIntersection(this,raycaster,_ray$1,localThresholdSq,end-1,start,end-1);if(intersect){intersects.push(intersect);}}}}/**\n\t * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */updateMorphTargets(){const geometry=this.geometry;const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}}function checkIntersection(object,raycaster,ray,thresholdSq,a,b,i){const positionAttribute=object.geometry.attributes.position;_vStart.fromBufferAttribute(positionAttribute,a);_vEnd.fromBufferAttribute(positionAttribute,b);const distSq=ray.distanceSqToSegment(_vStart,_vEnd,_intersectPointOnRay,_intersectPointOnSegment);if(distSq>thresholdSq)return;_intersectPointOnRay.applyMatrix4(object.matrixWorld);// Move back to world space for distance calculation\nconst distance=raycaster.ray.origin.distanceTo(_intersectPointOnRay);if(distance<raycaster.near||distance>raycaster.far)return;return{distance:distance,// What do we want? intersection point on the ray or on the segment??\n// point: raycaster.ray.at( distance ),\npoint:_intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),index:i,face:null,faceIndex:null,barycoord:null,object:object};}const _start=/*@__PURE__*/new Vector3();const _end=/*@__PURE__*/new Vector3();/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */class LineSegments extends Line{/**\n\t * Constructs a new line segments.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */constructor(geometry,material){super(geometry,material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineSegments=true;this.type='LineSegments';}computeLineDistances(){const geometry=this.geometry;// we assume non-indexed geometry\nif(geometry.index===null){const positionAttribute=geometry.attributes.position;const lineDistances=[];for(let i=0,l=positionAttribute.count;i<l;i+=2){_start.fromBufferAttribute(positionAttribute,i);_end.fromBufferAttribute(positionAttribute,i+1);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+_start.distanceTo(_end);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}return this;}}/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */class LineLoop extends Line{/**\n\t * Constructs a new line loop.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */constructor(geometry,material){super(geometry,material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineLoop=true;this.type='LineLoop';}}/**\n * A material for rendering point primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const vertices = [];\n *\n * for ( let i = 0; i < 10000; i ++ ) {\n * \tconst x = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst y = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst z = THREE.MathUtils.randFloatSpread( 2000 );\n *\n * \tvertices.push( x, y, z );\n * }\n *\n * const geometry = new THREE.BufferGeometry();\n * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n * const material = new THREE.PointsMaterial( { color: 0x888888 } );\n * const points = new THREE.Points( geometry, material );\n * scene.add( points );\n * ```\n *\n * @augments Material\n */class PointsMaterial extends Material{/**\n\t * Constructs a new points material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPointsMaterial=true;this.type='PointsMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * Defines the size of the points in pixels.\n\t\t *\n\t\t * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.size=1;/**\n\t\t * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.sizeAttenuation=true;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;this.fog=source.fog;return this;}}const _inverseMatrix=/*@__PURE__*/new Matrix4();const _ray=/*@__PURE__*/new Ray();const _sphere=/*@__PURE__*/new Sphere();const _position$2=/*@__PURE__*/new Vector3();/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */class Points extends Object3D{/**\n\t * Constructs a new point cloud.\n\t *\n\t * @param {BufferGeometry} [geometry] - The points geometry.\n\t * @param {Material|Array<Material>} [material] - The points material.\n\t */constructor(geometry=new BufferGeometry(),material=new PointsMaterial()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPoints=true;this.type='Points';/**\n\t\t * The points geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */this.geometry=geometry;/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default PointsMaterial\n\t\t */this.material=material;/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetDictionary=undefined;/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */this.morphTargetInfluences=undefined;this.updateMorphTargets();}copy(source,recursive){super.copy(source,recursive);this.material=Array.isArray(source.material)?source.material.slice():source.material;this.geometry=source.geometry;return this;}/**\n\t * Computes intersection points between a casted ray and this point cloud.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */raycast(raycaster,intersects){const geometry=this.geometry;const matrixWorld=this.matrixWorld;const threshold=raycaster.params.Points.threshold;const drawRange=geometry.drawRange;// Checking boundingSphere distance to ray\nif(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere.copy(geometry.boundingSphere);_sphere.applyMatrix4(matrixWorld);_sphere.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere)===false)return;//\n_inverseMatrix.copy(matrixWorld).invert();_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);const localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);const localThresholdSq=localThreshold*localThreshold;const index=geometry.index;const attributes=geometry.attributes;const positionAttribute=attributes.position;if(index!==null){const start=Math.max(0,drawRange.start);const end=Math.min(index.count,drawRange.start+drawRange.count);for(let i=start,il=end;i<il;i++){const a=index.getX(i);_position$2.fromBufferAttribute(positionAttribute,a);testPoint(_position$2,a,localThresholdSq,matrixWorld,raycaster,intersects,this);}}else{const start=Math.max(0,drawRange.start);const end=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(let i=start,l=end;i<l;i++){_position$2.fromBufferAttribute(positionAttribute,i);testPoint(_position$2,i,localThresholdSq,matrixWorld,raycaster,intersects,this);}}}/**\n\t * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */updateMorphTargets(){const geometry=this.geometry;const morphAttributes=geometry.morphAttributes;const keys=Object.keys(morphAttributes);if(keys.length>0){const morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let m=0,ml=morphAttribute.length;m<ml;m++){const name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}}function testPoint(point,index,localThresholdSq,matrixWorld,raycaster,intersects,object){const rayPointDistanceSq=_ray.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){const intersectPoint=new Vector3();_ray.closestPointToPoint(point,intersectPoint);intersectPoint.applyMatrix4(matrixWorld);const distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint,index:index,face:null,faceIndex:null,barycoord:null,object:object});}}/**\n * A texture for use with a video.\n *\n * ```js\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById( 'video' );\n * const texture = new THREE.VideoTexture( video );\n * ```\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments Texture\n */class VideoTexture extends Texture{/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */constructor(video,mapping,wrapS,wrapT,magFilter=LinearFilter,minFilter=LinearFilter,format,type,anisotropy){super(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isVideoTexture=true;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;const scope=this;function updateVideo(){scope.needsUpdate=true;video.requestVideoFrameCallback(updateVideo);}if('requestVideoFrameCallback'in video){video.requestVideoFrameCallback(updateVideo);}}clone(){return new this.constructor(this.image).copy(this);}/**\n\t * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}\n\t * to `true` every time a new frame is available.\n\t *\n\t * Only relevant if `requestVideoFrameCallback` is not supported in the browser.\n\t */update(){const video=this.image;const hasVideoFrameCallback=('requestVideoFrameCallback'in video);if(hasVideoFrameCallback===false&&video.readyState>=video.HAVE_CURRENT_DATA){this.needsUpdate=true;}}}/**\n * This class can be used as an alternative way to define video data. Instead of using\n * an instance of `HTMLVideoElement` like with `VideoTexture`, `VideoFrameTexture` expects each frame is\n * defined manually via {@link VideoFrameTexture#setFrame}. A typical use case for this module is when\n * video frames are decoded with the WebCodecs API.\n *\n * ```js\n * const texture = new THREE.VideoFrameTexture();\n * texture.setFrame( frame );\n * ```\n *\n * @augments VideoTexture\n */class VideoFrameTexture extends VideoTexture{/**\n\t * Constructs a new video frame texture.\n\t *\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */constructor(mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super({},mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isVideoFrameTexture=true;}/**\n\t * This method overwritten with an empty implementation since\n\t * this type of texture is updated via `setFrame()`.\n\t */update(){}clone(){return new this.constructor().copy(this);// restoring Texture.clone()\n}/**\n\t * Sets the current frame of the video. This will automatically update the texture\n\t * so the data can be used for rendering.\n\t *\n\t * @param {VideoFrame} frame - The video frame.\n\t */setFrame(frame){this.image=frame;this.needsUpdate=true;}}/**\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\n * as a texture for further usage.\n *\n * ```js\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( frameTexture, vector );\n * ```\n *\n * @augments Texture\n */class FramebufferTexture extends Texture{/**\n\t * Constructs a new framebuffer texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t */constructor(width,height){super({width,height});/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isFramebufferTexture=true;/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.magFilter=NearestFilter;/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */this.minFilter=NearestFilter;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;this.needsUpdate=true;}}/**\n * Creates a texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments Texture\n */class CompressedTexture extends Texture{/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */constructor(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,colorSpace){super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,colorSpace);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCompressedTexture=true;/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */this.image={width:width,height:height};/**\n\t\t * This array holds for all mipmaps (including the bases mip) the data and dimensions.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */this.mipmaps=mipmaps;/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not possible to\n\t\t * flip compressed textures.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */this.flipY=false;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not\n\t\t * possible to generate mipmaps for compressed data. Mipmaps\n\t\t * must be embedded in the compressed texture file.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */this.generateMipmaps=false;}}/**\n * Creates a texture 2D array based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */class CompressedArrayTexture extends CompressedTexture{/**\n\t * Constructs a new compressed array texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} depth - The depth of the texture.\n\t * @param {number} [format=RGBAFormat] - The min filter value.\n\t * @param {number} [type=UnsignedByteType] - The min filter value.\n\t */constructor(mipmaps,width,height,depth,format,type){super(mipmaps,width,height,format,type);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCompressedArrayTexture=true;/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @name CompressedArrayTexture#image\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */this.image.depth=depth;/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */this.wrapR=ClampToEdgeWrapping;/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */this.layerUpdates=new Set();}/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire compressed texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */addLayerUpdate(layerIndex){this.layerUpdates.add(layerIndex);}/**\n\t * Resets the layer updates registry.\n\t */clearLayerUpdates(){this.layerUpdates.clear();}}/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */class CompressedCubeTexture extends CompressedTexture{/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<CompressedTexture>} images - An array of compressed textures.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t */constructor(images,format,type){super(undefined,images[0].width,images[0].height,format,type,CubeReflectionMapping);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCompressedCubeTexture=true;/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCubeTexture=true;this.image=images;}}/**\n * Creates a texture from a canvas element.\n *\n * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}\n * to `true` immediately since a canvas can directly be used for rendering.\n *\n * @augments Texture\n */class CanvasTexture extends Texture{/**\n\t * Constructs a new texture.\n\t *\n\t * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */constructor(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){super(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCanvasTexture=true;this.needsUpdate=true;}}/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */class DepthTexture extends Texture{/**\n\t * Constructs a new depth texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [type=UnsignedIntType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {number} [format=DepthFormat] - The texture format.\n\t */constructor(width,height,type=UnsignedIntType,mapping,wrapS,wrapT,magFilter=NearestFilter,minFilter=NearestFilter,anisotropy,format=DepthFormat){if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}super(null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDepthTexture=true;/**\n\t\t * The image property of a depth texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */this.image={width:width,height:height};/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */this.compareFunction=null;}copy(source){super.copy(source);this.source=new Source(Object.assign({},source.image));// see #30540\nthis.compareFunction=source.compareFunction;return this;}toJSON(meta){const data=super.toJSON(meta);if(this.compareFunction!==null)data.compareFunction=this.compareFunction;return data;}}/**\n * Creates an array of depth textures.\n *\n * @augments DepthTexture\n */class DepthArrayTexture extends DepthTexture{/**\n\t * Constructs a new depth array texture.\n\t *\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */constructor(width=1,height=1,depth=1){super(width,height);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDepthArrayTexture=true;/**\n\t\t * The image definition of a depth texture.\n\t\t *\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */this.image={width:width,height:height,depth:depth};/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flipY=false;/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.generateMipmaps=false;/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */this.compareFunction=null;/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */this.layerUpdates=new Set();}/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire slice is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */addLayerUpdate(layerIndex){this.layerUpdates.add(layerIndex);}/**\n\t * Resets the layer updates registry.\n\t */clearLayerUpdates(){this.layerUpdates.clear();}}/**\n * A geometry class for representing a capsule.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments BufferGeometry\n */class CapsuleGeometry extends BufferGeometry{/**\n\t * Constructs a new capsule geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the capsule.\n\t * @param {number} [height=1] - Height of the middle section.\n\t * @param {number} [capSegments=4] - Number of curve segments used to build each cap.\n\t * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.\n\t */constructor(radius=1,height=1,capSegments=4,radialSegments=8,heightSegments=1){super();this.type='CapsuleGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,height:height,capSegments:capSegments,radialSegments:radialSegments,heightSegments:heightSegments};height=Math.max(0,height);capSegments=Math.max(1,Math.floor(capSegments));radialSegments=Math.max(3,Math.floor(radialSegments));heightSegments=Math.max(1,Math.floor(heightSegments));// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nconst halfHeight=height/2;const capArcLength=Math.PI/2*radius;const cylinderPartLength=height;const totalArcLength=2*capArcLength+cylinderPartLength;const numVerticalSegments=capSegments*2+heightSegments;const verticesPerRow=radialSegments+1;const normal=new Vector3();const vertex=new Vector3();// generate vertices, normals, and uvs\nfor(let iy=0;iy<=numVerticalSegments;iy++){let currentArcLength=0;let profileY=0;let profileRadius=0;let normalYComponent=0;if(iy<=capSegments){// bottom cap\nconst segmentProgress=iy/capSegments;const angle=segmentProgress*Math.PI/2;profileY=-halfHeight-radius*Math.cos(angle);profileRadius=radius*Math.sin(angle);normalYComponent=-radius*Math.cos(angle);currentArcLength=segmentProgress*capArcLength;}else if(iy<=capSegments+heightSegments){// middle section\nconst segmentProgress=(iy-capSegments)/heightSegments;profileY=-halfHeight+segmentProgress*height;profileRadius=radius;normalYComponent=0;currentArcLength=capArcLength+segmentProgress*cylinderPartLength;}else{// top cap\nconst segmentProgress=(iy-capSegments-heightSegments)/capSegments;const angle=segmentProgress*Math.PI/2;profileY=halfHeight+radius*Math.sin(angle);profileRadius=radius*Math.cos(angle);normalYComponent=radius*Math.sin(angle);currentArcLength=capArcLength+cylinderPartLength+segmentProgress*capArcLength;}const v=Math.max(0,Math.min(1,currentArcLength/totalArcLength));// special case for the poles\nlet uOffset=0;if(iy===0){uOffset=0.5/radialSegments;}else if(iy===numVerticalSegments){uOffset=-0.5/radialSegments;}for(let ix=0;ix<=radialSegments;ix++){const u=ix/radialSegments;const theta=u*Math.PI*2;const sinTheta=Math.sin(theta);const cosTheta=Math.cos(theta);// vertex\nvertex.x=-profileRadius*cosTheta;vertex.y=profileY;vertex.z=profileRadius*sinTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormal.set(-profileRadius*cosTheta,normalYComponent,profileRadius*sinTheta);normal.normalize();normals.push(normal.x,normal.y,normal.z);// uv\nuvs.push(u+uOffset,v);}if(iy>0){const prevIndexRow=(iy-1)*verticesPerRow;for(let ix=0;ix<radialSegments;ix++){const i1=prevIndexRow+ix;const i2=prevIndexRow+ix+1;const i3=iy*verticesPerRow+ix;const i4=iy*verticesPerRow+ix+1;indices.push(i1,i2,i3);indices.push(i2,i4,i3);}}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CapsuleGeometry} A new instance.\n\t */static fromJSON(data){return new CapsuleGeometry(data.radius,data.height,data.capSegments,data.radialSegments,data.heightSegments);}}/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */class CircleGeometry extends BufferGeometry{/**\n\t * Constructs a new circle geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the circle.\n\t * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n\t * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n\t * of the circular sector in radians. The default value results in a complete circle.\n\t */constructor(radius=1,segments=32,thetaStart=0,thetaLength=Math.PI*2){super();this.type='CircleGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};segments=Math.max(3,segments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nconst vertex=new Vector3();const uv=new Vector2();// center point\nvertices.push(0,0,0);normals.push(0,0,1);uvs.push(0.5,0.5);for(let s=0,i=3;s<=segments;s++,i+=3){const segment=thetaStart+s/segments*thetaLength;// vertex\nvertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormals.push(0,0,1);// uvs\nuv.x=(vertices[i]/radius+1)/2;uv.y=(vertices[i+1]/radius+1)/2;uvs.push(uv.x,uv.y);}// indices\nfor(let i=1;i<=segments;i++){indices.push(i,i+1,0);}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CircleGeometry} A new instance.\n\t */static fromJSON(data){return new CircleGeometry(data.radius,data.segments,data.thetaStart,data.thetaLength);}}/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */class CylinderGeometry extends BufferGeometry{/**\n\t * Constructs a new cylinder geometry.\n\t *\n\t * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n\t * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n\t * @param {number} [height=1] - Height of the cylinder.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cylinder.\n\t */constructor(radiusTop=1,radiusBottom=1,height=1,radialSegments=32,heightSegments=1,openEnded=false,thetaStart=0,thetaLength=Math.PI*2){super();this.type='CylinderGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};const scope=this;radialSegments=Math.floor(radialSegments);heightSegments=Math.floor(heightSegments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nlet index=0;const indexArray=[];const halfHeight=height/2;let groupStart=0;// generate geometry\ngenerateTorso();if(openEnded===false){if(radiusTop>0)generateCap(true);if(radiusBottom>0)generateCap(false);}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));function generateTorso(){const normal=new Vector3();const vertex=new Vector3();let groupCount=0;// this will be used to calculate the normal\nconst slope=(radiusBottom-radiusTop)/height;// generate vertices, normals and uvs\nfor(let y=0;y<=heightSegments;y++){const indexRow=[];const v=y/heightSegments;// calculate the radius of the current row\nconst radius=v*(radiusBottom-radiusTop)+radiusTop;for(let x=0;x<=radialSegments;x++){const u=x/radialSegments;const theta=u*thetaLength+thetaStart;const sinTheta=Math.sin(theta);const cosTheta=Math.cos(theta);// vertex\nvertex.x=radius*sinTheta;vertex.y=-v*height+halfHeight;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormal.set(sinTheta,slope,cosTheta).normalize();normals.push(normal.x,normal.y,normal.z);// uv\nuvs.push(u,1-v);// save index of vertex in respective row\nindexRow.push(index++);}// now save vertices of the row in our index array\nindexArray.push(indexRow);}// generate indices\nfor(let x=0;x<radialSegments;x++){for(let y=0;y<heightSegments;y++){// we use the index array to access the correct indices\nconst a=indexArray[y][x];const b=indexArray[y+1][x];const c=indexArray[y+1][x+1];const d=indexArray[y][x+1];// faces\nif(radiusTop>0||y!==0){indices.push(a,b,d);groupCount+=3;}if(radiusBottom>0||y!==heightSegments-1){indices.push(b,c,d);groupCount+=3;}}}// add a group to the geometry. this will ensure multi material support\nscope.addGroup(groupStart,groupCount,0);// calculate new start value for groups\ngroupStart+=groupCount;}function generateCap(top){// save the index of the first center vertex\nconst centerIndexStart=index;const uv=new Vector2();const vertex=new Vector3();let groupCount=0;const radius=top===true?radiusTop:radiusBottom;const sign=top===true?1:-1;// first we generate the center vertex data of the cap.\n// because the geometry needs one set of uvs per face,\n// we must generate a center vertex per face/segment\nfor(let x=1;x<=radialSegments;x++){// vertex\nvertices.push(0,halfHeight*sign,0);// normal\nnormals.push(0,sign,0);// uv\nuvs.push(0.5,0.5);// increase index\nindex++;}// save the index of the last center vertex\nconst centerIndexEnd=index;// now we generate the surrounding vertices, normals and uvs\nfor(let x=0;x<=radialSegments;x++){const u=x/radialSegments;const theta=u*thetaLength+thetaStart;const cosTheta=Math.cos(theta);const sinTheta=Math.sin(theta);// vertex\nvertex.x=radius*sinTheta;vertex.y=halfHeight*sign;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormals.push(0,sign,0);// uv\nuv.x=cosTheta*0.5+0.5;uv.y=sinTheta*0.5*sign+0.5;uvs.push(uv.x,uv.y);// increase index\nindex++;}// generate indices\nfor(let x=0;x<radialSegments;x++){const c=centerIndexStart+x;const i=centerIndexEnd+x;if(top===true){// face top\nindices.push(i,i+1,c);}else{// face bottom\nindices.push(i+1,i,c);}groupCount+=3;}// add a group to the geometry. this will ensure multi material support\nscope.addGroup(groupStart,groupCount,top===true?1:2);// calculate new start value for groups\ngroupStart+=groupCount;}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CylinderGeometry} A new instance.\n\t */static fromJSON(data){return new CylinderGeometry(data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);}}/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */class ConeGeometry extends CylinderGeometry{/**\n\t * Constructs a new cone geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the cone base.\n\t * @param {number} [height=1] - Height of the cone.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cone.\n\t */constructor(radius=1,height=1,radialSegments=32,heightSegments=1,openEnded=false,thetaStart=0,thetaLength=Math.PI*2){super(0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {ConeGeometry} A new instance.\n\t */static fromJSON(data){return new ConeGeometry(data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);}}/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */class PolyhedronGeometry extends BufferGeometry{/**\n\t * Constructs a new polyhedron geometry.\n\t *\n\t * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n\t * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n\t * @param {number} [radius=1] - The radius of the shape.\n\t * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n\t */constructor(vertices=[],indices=[],radius=1,detail=0){super();this.type='PolyhedronGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};// default buffer data\nconst vertexBuffer=[];const uvBuffer=[];// the subdivision creates the vertex buffer data\nsubdivide(detail);// all vertices should lie on a conceptual sphere with a given radius\napplyRadius(radius);// finally, create the uv data\ngenerateUVs();// build non-indexed geometry\nthis.setAttribute('position',new Float32BufferAttribute(vertexBuffer,3));this.setAttribute('normal',new Float32BufferAttribute(vertexBuffer.slice(),3));this.setAttribute('uv',new Float32BufferAttribute(uvBuffer,2));if(detail===0){this.computeVertexNormals();// flat normals\n}else{this.normalizeNormals();// smooth normals\n}// helper functions\nfunction subdivide(detail){const a=new Vector3();const b=new Vector3();const c=new Vector3();// iterate over all faces and apply a subdivision with the given detail value\nfor(let i=0;i<indices.length;i+=3){// get the vertices of the face\ngetVertexByIndex(indices[i+0],a);getVertexByIndex(indices[i+1],b);getVertexByIndex(indices[i+2],c);// perform subdivision\nsubdivideFace(a,b,c,detail);}}function subdivideFace(a,b,c,detail){const cols=detail+1;// we use this multidimensional array as a data structure for creating the subdivision\nconst v=[];// construct all of the vertices for this subdivision\nfor(let i=0;i<=cols;i++){v[i]=[];const aj=a.clone().lerp(c,i/cols);const bj=b.clone().lerp(c,i/cols);const rows=cols-i;for(let j=0;j<=rows;j++){if(j===0&&i===cols){v[i][j]=aj;}else{v[i][j]=aj.clone().lerp(bj,j/rows);}}}// construct all of the faces\nfor(let i=0;i<cols;i++){for(let j=0;j<2*(cols-i)-1;j++){const k=Math.floor(j/2);if(j%2===0){pushVertex(v[i][k+1]);pushVertex(v[i+1][k]);pushVertex(v[i][k]);}else{pushVertex(v[i][k+1]);pushVertex(v[i+1][k+1]);pushVertex(v[i+1][k]);}}}}function applyRadius(radius){const vertex=new Vector3();// iterate over the entire buffer and apply the radius to each vertex\nfor(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];vertex.normalize().multiplyScalar(radius);vertexBuffer[i+0]=vertex.x;vertexBuffer[i+1]=vertex.y;vertexBuffer[i+2]=vertex.z;}}function generateUVs(){const vertex=new Vector3();for(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];const u=azimuth(vertex)/2/Math.PI+0.5;const v=inclination(vertex)/Math.PI+0.5;uvBuffer.push(u,1-v);}correctUVs();correctSeam();}function correctSeam(){// handle case when face straddles the seam, see #3269\nfor(let i=0;i<uvBuffer.length;i+=6){// uv data of a single face\nconst x0=uvBuffer[i+0];const x1=uvBuffer[i+2];const x2=uvBuffer[i+4];const max=Math.max(x0,x1,x2);const min=Math.min(x0,x1,x2);// 0.9 is somewhat arbitrary\nif(max>0.9&&min<0.1){if(x0<0.2)uvBuffer[i+0]+=1;if(x1<0.2)uvBuffer[i+2]+=1;if(x2<0.2)uvBuffer[i+4]+=1;}}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z);}function getVertexByIndex(index,vertex){const stride=index*3;vertex.x=vertices[stride+0];vertex.y=vertices[stride+1];vertex.z=vertices[stride+2];}function correctUVs(){const a=new Vector3();const b=new Vector3();const c=new Vector3();const centroid=new Vector3();const uvA=new Vector2();const uvB=new Vector2();const uvC=new Vector2();for(let i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]);b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]);c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]);uvA.set(uvBuffer[j+0],uvBuffer[j+1]);uvB.set(uvBuffer[j+2],uvBuffer[j+3]);uvC.set(uvBuffer[j+4],uvBuffer[j+5]);centroid.copy(a).add(b).add(c).divideScalar(3);const azi=azimuth(centroid);correctUV(uvA,j+0,a,azi);correctUV(uvB,j+2,b,azi);correctUV(uvC,j+4,c,azi);}}function correctUV(uv,stride,vector,azimuth){if(azimuth<0&&uv.x===1){uvBuffer[stride]=uv.x-1;}if(vector.x===0&&vector.z===0){uvBuffer[stride]=azimuth/2/Math.PI+0.5;}}// Angle around the Y axis, counter-clockwise when looking from above.\nfunction azimuth(vector){return Math.atan2(vector.z,-vector.x);}// Angle above the XZ plane.\nfunction inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z));}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PolyhedronGeometry} A new instance.\n\t */static fromJSON(data){return new PolyhedronGeometry(data.vertices,data.indices,data.radius,data.details);}}/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */class DodecahedronGeometry extends PolyhedronGeometry{/**\n\t * Constructs a new dodecahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the dodecahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n\t */constructor(radius=1,detail=0){const t=(1+Math.sqrt(5))/2;const r=1/t;const vertices=[// (±1, ±1, ±1)\n-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,// (0, ±1/φ, ±φ)\n0,-r,-t,0,-r,t,0,r,-t,0,r,t,// (±1/φ, ±φ, 0)\n-r,-t,0,-r,t,0,r,-t,0,r,t,0,// (±φ, 0, ±1/φ)\n-t,0,-r,t,0,-r,-t,0,r,t,0,r];const indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(vertices,indices,radius,detail);this.type='DodecahedronGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,detail:detail};}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {DodecahedronGeometry} A new instance.\n\t */static fromJSON(data){return new DodecahedronGeometry(data.radius,data.detail);}}const _v0=/*@__PURE__*/new Vector3();const _v1$1=/*@__PURE__*/new Vector3();const _normal=/*@__PURE__*/new Vector3();const _triangle=/*@__PURE__*/new Triangle();/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */class EdgesGeometry extends BufferGeometry{/**\n\t * Constructs a new edges geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n\t * between the face normals of the adjoining faces exceeds this value.\n\t */constructor(geometry=null,thresholdAngle=1){super();this.type='EdgesGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={geometry:geometry,thresholdAngle:thresholdAngle};if(geometry!==null){const precisionPoints=4;const precision=Math.pow(10,precisionPoints);const thresholdDot=Math.cos(DEG2RAD*thresholdAngle);const indexAttr=geometry.getIndex();const positionAttr=geometry.getAttribute('position');const indexCount=indexAttr?indexAttr.count:positionAttr.count;const indexArr=[0,0,0];const vertKeys=['a','b','c'];const hashes=new Array(3);const edgeData={};const vertices=[];for(let i=0;i<indexCount;i+=3){if(indexAttr){indexArr[0]=indexAttr.getX(i);indexArr[1]=indexAttr.getX(i+1);indexArr[2]=indexAttr.getX(i+2);}else{indexArr[0]=i;indexArr[1]=i+1;indexArr[2]=i+2;}const{a,b,c}=_triangle;a.fromBufferAttribute(positionAttr,indexArr[0]);b.fromBufferAttribute(positionAttr,indexArr[1]);c.fromBufferAttribute(positionAttr,indexArr[2]);_triangle.getNormal(_normal);// create hashes for the edge from the vertices\nhashes[0]=`${Math.round(a.x*precision)},${Math.round(a.y*precision)},${Math.round(a.z*precision)}`;hashes[1]=`${Math.round(b.x*precision)},${Math.round(b.y*precision)},${Math.round(b.z*precision)}`;hashes[2]=`${Math.round(c.x*precision)},${Math.round(c.y*precision)},${Math.round(c.z*precision)}`;// skip degenerate triangles\nif(hashes[0]===hashes[1]||hashes[1]===hashes[2]||hashes[2]===hashes[0]){continue;}// iterate over every edge\nfor(let j=0;j<3;j++){// get the first and next vertex making up the edge\nconst jNext=(j+1)%3;const vecHash0=hashes[j];const vecHash1=hashes[jNext];const v0=_triangle[vertKeys[j]];const v1=_triangle[vertKeys[jNext]];const hash=`${vecHash0}_${vecHash1}`;const reverseHash=`${vecHash1}_${vecHash0}`;if(reverseHash in edgeData&&edgeData[reverseHash]){// if we found a sibling edge add it into the vertex array if\n// it meets the angle threshold and delete the edge from the map.\nif(_normal.dot(edgeData[reverseHash].normal)<=thresholdDot){vertices.push(v0.x,v0.y,v0.z);vertices.push(v1.x,v1.y,v1.z);}edgeData[reverseHash]=null;}else if(!(hash in edgeData)){// if we've already got an edge here then skip adding a new one\nedgeData[hash]={index0:indexArr[j],index1:indexArr[jNext],normal:_normal.clone()};}}}// iterate over all remaining, unmatched edges and add them to the vertex array\nfor(const key in edgeData){if(edgeData[key]){const{index0,index1}=edgeData[key];_v0.fromBufferAttribute(positionAttr,index0);_v1$1.fromBufferAttribute(positionAttr,index1);vertices.push(_v0.x,_v0.y,_v0.z);vertices.push(_v1$1.x,_v1$1.y,_v1$1.z);}}this.setAttribute('position',new Float32BufferAttribute(vertices,3));}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}}/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */class Curve{/**\n\t * Constructs a new curve.\n\t */constructor(){/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.type='Curve';/**\n\t\t * This value determines the amount of divisions when calculating the\n\t\t * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n\t\t * precision when using methods like {@link Curve#getSpacedPoints}, it is\n\t\t * recommended to increase the value of this property if the curve is very large.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 200\n\t\t */this.arcLengthDivisions=200;/**\n\t\t * Must be set to `true` if the curve parameters have changed.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.needsUpdate=false;/**\n\t\t * An internal cache that holds precomputed curve length values.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<number>}\n\t\t * @default null\n\t\t */this.cacheArcLengths=null;}/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor.\n\t *\n\t * @abstract\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */getPoint(/* t, optionalTarget */){console.warn('THREE.Curve: .getPoint() not implemented.');}/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n\t * of the curve which equidistant samples.\n\t *\n\t * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */getPointAt(u,optionalTarget){const t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);}/**\n\t * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n\t * the curve shape.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */getPoints(divisions=5){const points=[];for(let d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;}// Get sequence of points using getPointAt( u )\n/**\n\t * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n\t * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n\t * curve.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */getSpacedPoints(divisions=5){const points=[];for(let d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;}/**\n\t * Returns the total arc length of the curve.\n\t *\n\t * @return {number} The length of the curve.\n\t */getLength(){const lengths=this.getLengths();return lengths[lengths.length-1];}/**\n\t * Returns an array of cumulative segment lengths of the curve.\n\t *\n\t * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n\t * @return {Array<number>} An array holding the cumulative segment lengths.\n\t */getLengths(divisions=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;const cache=[];let current,last=this.getPoint(0);let sum=0;cache.push(0);for(let p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.\n}/**\n\t * Update the cumulative segment distance cache. The method must be called\n\t * every time curve parameters are changed. If an updated curve is part of a\n\t * composed curve like {@link CurvePath}, this method must be called on the\n\t * composed curve, too.\n\t */updateArcLengths(){this.needsUpdate=true;this.getLengths();}/**\n\t * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n\t * interpolation factor in the same range that can be ued to sample equidistant points\n\t * from a curve.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {?number} distance - An optional distance on the curve.\n\t * @return {number} The updated interpolation factor.\n\t */getUtoTmapping(u,distance=null){const arcLengths=this.getLengths();let i=0;const il=arcLengths.length;let targetArcLength;// The targeted u distance value to get\nif(distance){targetArcLength=distance;}else{targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance\nlet low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\ncomparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else{high=i;break;// DONE\n}}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points\nconst lengthBefore=arcLengths[i];const lengthAfter=arcLengths[i+1];const segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points\nconst segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t\nconst t=(i+segmentFraction)/(il-1);return t;}/**\n\t * Returns a unit vector tangent for the given interpolation factor.\n\t * If the derived curve does not implement its tangent derivation,\n\t * two points a small delta apart will be used to find its gradient\n\t * which seems to give a reasonable approximation.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t */getTangent(t,optionalTarget){const delta=0.0001;let t1=t-delta;let t2=t+delta;// Capping in case of danger\nif(t1<0)t1=0;if(t2>1)t2=1;const pt1=this.getPoint(t1);const pt2=this.getPoint(t2);const tangent=optionalTarget||(pt1.isVector2?new Vector2():new Vector3());tangent.copy(pt2).sub(pt1).normalize();return tangent;}/**\n\t * Same as {@link Curve#getTangent} but with equidistant samples.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t * @see {@link Curve#getPointAt}\n\t */getTangentAt(u,optionalTarget){const t=this.getUtoTmapping(u);return this.getTangent(t,optionalTarget);}/**\n\t * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n\t * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n\t *\n\t * @param {number} segments - The number of segments.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n\t */computeFrenetFrames(segments,closed=false){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\nconst normal=new Vector3();const tangents=[];const normals=[];const binormals=[];const vec=new Vector3();const mat=new Matrix4();// compute the tangent vectors for each segment on the curve\nfor(let i=0;i<=segments;i++){const u=i/segments;tangents[i]=this.getTangentAt(u,new Vector3());}// select an initial normal vector perpendicular to the first tangent vector,\n// and in the direction of the minimum tangent xyz component\nnormals[0]=new Vector3();binormals[0]=new Vector3();let min=Number.MAX_VALUE;const tx=Math.abs(tangents[0].x);const ty=Math.abs(tangents[0].y);const tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve\nfor(let i=1;i<=segments;i++){normals[i]=normals[i-1].clone();binormals[i]=binormals[i-1].clone();vec.crossVectors(tangents[i-1],tangents[i]);if(vec.length()>Number.EPSILON){vec.normalize();const theta=Math.acos(clamp(tangents[i-1].dot(tangents[i]),-1,1));// clamp for floating pt errors\nnormals[i].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[i].crossVectors(tangents[i],normals[i]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\nif(closed===true){let theta=Math.acos(clamp(normals[0].dot(normals[segments]),-1,1));theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){theta=-theta;}for(let i=1;i<=segments;i++){// twist a little...\nnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i));binormals[i].crossVectors(tangents[i],normals[i]);}}return{tangents:tangents,normals:normals,binormals:binormals};}/**\n\t * Returns a new curve with copied values from this instance.\n\t *\n\t * @return {Curve} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given curve to this instance.\n\t *\n\t * @param {Curve} source - The curve to copy.\n\t * @return {Curve} A reference to this curve.\n\t */copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;}/**\n\t * Serializes the curve into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized curve.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(){const data={metadata:{version:4.6,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;}/**\n\t * Deserializes the curve from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized curve.\n\t * @return {Curve} A reference to this curve.\n\t */fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}}/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */class EllipseCurve extends Curve{/**\n\t * Constructs a new ellipse curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t */constructor(aX=0,aY=0,xRadius=1,yRadius=1,aStartAngle=0,aEndAngle=Math.PI*2,aClockwise=false,aRotation=0){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isEllipseCurve=true;this.type='EllipseCurve';/**\n\t\t * The X center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.aX=aX;/**\n\t\t * The Y center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.aY=aY;/**\n\t\t * The radius of the ellipse in the x direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.xRadius=xRadius;/**\n\t\t * The radius of the ellipse in the y direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.yRadius=yRadius;/**\n\t\t * The start angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.aStartAngle=aStartAngle;/**\n\t\t * The end angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI*2\n\t\t */this.aEndAngle=aEndAngle;/**\n\t\t * Whether the ellipse is drawn clockwise or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.aClockwise=aClockwise;/**\n\t\t * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.aRotation=aRotation;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const twoPi=Math.PI*2;let deltaAngle=this.aEndAngle-this.aStartAngle;const samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI\nwhile(deltaAngle<0)deltaAngle+=twoPi;while(deltaAngle>twoPi)deltaAngle-=twoPi;if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else{deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else{deltaAngle=deltaAngle-twoPi;}}const angle=this.aStartAngle+t*deltaAngle;let x=this.aX+this.xRadius*Math.cos(angle);let y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){const cos=Math.cos(this.aRotation);const sin=Math.sin(this.aRotation);const tx=x-this.aX;const ty=y-this.aY;// Rotate the point about the center of the ellipse.\nx=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);}copy(source){super.copy(source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;}toJSON(){const data=super.toJSON();data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;}fromJSON(json){super.fromJSON(json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;}}/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */class ArcCurve extends EllipseCurve{/**\n\t * Constructs a new arc curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t */constructor(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){super(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isArcCurve=true;this.type='ArcCurve';}}function CubicPoly(){/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t* cusps and self-intersections in non-uniform catmull rom curves.\n\t* http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t*\n\t* curve.type accepts centripetal(default), chordal and catmullrom\n\t* curve.tension is used for catmullrom which defaults to 0.5\n\t*/ /*\n\tBased on an optimized c++ solution in\n\t- http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t- http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/let c0=0,c1=0,c2=0,c3=0;/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return{initCatmullRom:function(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]\nlet t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;let t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]\nt1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function(t){const t2=t*t;const t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//\nconst tmp=/*@__PURE__*/new Vector3();const px=/*@__PURE__*/new CubicPoly();const py=/*@__PURE__*/new CubicPoly();const pz=/*@__PURE__*/new CubicPoly();/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */class CatmullRomCurve3 extends Curve{/**\n\t * Constructs a new Catmull-Rom curve.\n\t *\n\t * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n\t * @param {number} [tension=0.5] - Tension of the curve.\n\t */constructor(points=[],closed=false,curveType='centripetal',tension=0.5){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCatmullRomCurve3=true;this.type='CatmullRomCurve3';/**\n\t\t * An array of 3D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */this.points=points;/**\n\t\t * Whether the curve is closed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.closed=closed;/**\n\t\t * The curve type.\n\t\t *\n\t\t * @type {('centripetal'|'chordal'|'catmullrom')}\n\t\t * @default 'centripetal'\n\t\t */this.curveType=curveType;/**\n\t\t * Tension of the curve.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */this.tension=tension;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const points=this.points;const l=points.length;const p=(l-(this.closed?0:1))*t;let intPoint=Math.floor(p);let weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}let p0,p3;// 4 points (p1 & p2 defined below)\nif(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else{// extrapolate first point\ntmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}const p1=points[intPoint%l];const p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else{// extrapolate last point\ntmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom\nconst pow=this.curveType==='chordal'?0.5:0.25;let dt0=Math.pow(p0.distanceToSquared(p1),pow);let dt1=Math.pow(p1.distanceToSquared(p2),pow);let dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points\nif(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;}copy(source){super.copy(source);this.points=[];for(let i=0,l=source.points.length;i<l;i++){const point=source.points[i];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){const point=this.points[i];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;}fromJSON(json){super.fromJSON(json);this.points=[];for(let i=0,l=json.points.length;i<l;i++){const point=json.points[i];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;}}// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */function CatmullRom(t,p0,p1,p2,p3){const v0=(p2-p0)*0.5;const v1=(p3-p1)*0.5;const t2=t*t;const t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//\nfunction QuadraticBezierP0(t,p){const k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//\nfunction CubicBezierP0(t,p){const k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){const k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */class CubicBezierCurve extends Curve{/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The first control point.\n\t * @param {Vector2} [v2] - The second control point.\n\t * @param {Vector2} [v3] - The end point.\n\t */constructor(v0=new Vector2(),v1=new Vector2(),v2=new Vector2(),v3=new Vector2()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCubicBezierCurve=true;this.type='CubicBezierCurve';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v0=v0;/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v1=v1;/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v2=v2;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v3=v3;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */class CubicBezierCurve3 extends Curve{/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The first control point.\n\t * @param {Vector3} [v2] - The second control point.\n\t * @param {Vector3} [v3] - The end point.\n\t */constructor(v0=new Vector3(),v1=new Vector3(),v2=new Vector3(),v3=new Vector3()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isCubicBezierCurve3=true;this.type='CubicBezierCurve3';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v0=v0;/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v1=v1;/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v2=v2;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v3=v3;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */class LineCurve extends Curve{/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector2} [v1] - The start point.\n\t * @param {Vector2} [v2] - The end point.\n\t */constructor(v1=new Vector2(),v2=new Vector2()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineCurve=true;this.type='LineCurve';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v1=v1;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v2=v2;}/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the line.\n\t */getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt\ngetPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}getTangent(t,optionalTarget=new Vector2()){return optionalTarget.subVectors(this.v2,this.v1).normalize();}getTangentAt(u,optionalTarget){return this.getTangent(u,optionalTarget);}copy(source){super.copy(source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */class LineCurve3 extends Curve{/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector3} [v1] - The start point.\n\t * @param {Vector3} [v2] - The end point.\n\t */constructor(v1=new Vector3(),v2=new Vector3()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineCurve3=true;this.type='LineCurve3';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v1=v1;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v2=v2;}/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the line.\n\t */getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt\ngetPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}getTangent(t,optionalTarget=new Vector3()){return optionalTarget.subVectors(this.v2,this.v1).normalize();}getTangentAt(u,optionalTarget){return this.getTangent(u,optionalTarget);}copy(source){super.copy(source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */class QuadraticBezierCurve extends Curve{/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The control point.\n\t * @param {Vector2} [v2] - The end point.\n\t */constructor(v0=new Vector2(),v1=new Vector2(),v2=new Vector2()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isQuadraticBezierCurve=true;this.type='QuadraticBezierCurve';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v0=v0;/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v1=v1;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.v2=v2;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */class QuadraticBezierCurve3 extends Curve{/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The control point.\n\t * @param {Vector3} [v2] - The end point.\n\t */constructor(v0=new Vector3(),v1=new Vector3(),v2=new Vector3()){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isQuadraticBezierCurve3=true;this.type='QuadraticBezierCurve3';/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v0=v0;/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v1=v1;/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.v2=v2;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector3()){const point=optionalTarget;const v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;}copy(source){super.copy(source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}toJSON(){const data=super.toJSON();data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}fromJSON(json){super.fromJSON(json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */class SplineCurve extends Curve{/**\n\t * Constructs a new 2D spline curve.\n\t *\n\t * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n\t */constructor(points=[]){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSplineCurve=true;this.type='SplineCurve';/**\n\t\t * An array of 2D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector2>}\n\t\t */this.points=points;}/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */getPoint(t,optionalTarget=new Vector2()){const point=optionalTarget;const points=this.points;const p=(points.length-1)*t;const intPoint=Math.floor(p);const weight=p-intPoint;const p0=points[intPoint===0?intPoint:intPoint-1];const p1=points[intPoint];const p2=points[intPoint>points.length-2?points.length-1:intPoint+1];const p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;}copy(source){super.copy(source);this.points=[];for(let i=0,l=source.points.length;i<l;i++){const point=source.points[i];this.points.push(point.clone());}return this;}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,l=this.points.length;i<l;i++){const point=this.points[i];data.points.push(point.toArray());}return data;}fromJSON(json){super.fromJSON(json);this.points=[];for(let i=0,l=json.points.length;i<l;i++){const point=json.points[i];this.points.push(new Vector2().fromArray(point));}return this;}}var Curves=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */class CurvePath extends Curve{/**\n\t * Constructs a new curve path.\n\t */constructor(){super();this.type='CurvePath';/**\n\t\t * An array of curves defining the\n\t\t * path.\n\t\t *\n\t\t * @type {Array<Curve>}\n\t\t */this.curves=[];/**\n\t\t * Whether the path should automatically be closed\n\t\t * by a line curve.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.autoClose=false;}/**\n\t * Adds a curve to this curve path.\n\t *\n\t * @param {Curve} curve - The curve to add.\n\t */add(curve){this.curves.push(curve);}/**\n\t * Adds a line curve to close the path.\n\t *\n\t * @return {CurvePath} A reference to this curve path.\n\t */closePath(){// Add a line curve if start and end of lines are not connected\nconst startPoint=this.curves[0].getPoint(0);const endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){const lineType=startPoint.isVector2===true?'LineCurve':'LineCurve3';this.curves.push(new Curves[lineType](endPoint,startPoint));}return this;}/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n\t * for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */getPoint(t,optionalTarget){// To get accurate point with reference to\n// entire path distance at time t,\n// following has to be done:\n// 1. Length of each sub path have to be known\n// 2. Locate and identify type of curve\n// 3. Get t for the curve\n// 4. Return curve.getPointAt(t')\nconst d=t*this.getLength();const curveLengths=this.getCurveLengths();let i=0;// To think about boundaries points.\nwhile(i<curveLengths.length){if(curveLengths[i]>=d){const diff=curveLengths[i]-d;const curve=this.curves[i];const segmentLength=curve.getLength();const u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u,optionalTarget);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d\n}getLength(){// We cannot use the default THREE.Curve getPoint() with getLength() because in\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n// getPoint() depends on getLength\nconst lens=this.getCurveLengths();return lens[lens.length-1];}updateArcLengths(){// cacheLengths must be recalculated.\nthis.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();}/**\n\t * Returns list of cumulative curve lengths of the defined curves.\n\t *\n\t * @return {Array<number>} The curve lengths.\n\t */getCurveLengths(){// Compute lengths and cache them\n// We cannot overwrite getLengths() because UtoT mapping uses it.\n// We use cache values if curves and cache array are same length\nif(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve\n// Push sums into cached array\nconst lengths=[];let sums=0;for(let i=0,l=this.curves.length;i<l;i++){sums+=this.curves[i].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;}getSpacedPoints(divisions=40){const points=[];for(let i=0;i<=divisions;i++){points.push(this.getPoint(i/divisions));}if(this.autoClose){points.push(points[0]);}return points;}getPoints(divisions=12){const points=[];let last;for(let i=0,curves=this.curves;i<curves.length;i++){const curve=curves[i];const resolution=curve.isEllipseCurve?divisions*2:curve.isLineCurve||curve.isLineCurve3?1:curve.isSplineCurve?divisions*curve.points.length:divisions;const pts=curve.getPoints(resolution);for(let j=0;j<pts.length;j++){const point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates\npoints.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;}copy(source){super.copy(source);this.curves=[];for(let i=0,l=source.curves.length;i<l;i++){const curve=source.curves[i];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;}toJSON(){const data=super.toJSON();data.autoClose=this.autoClose;data.curves=[];for(let i=0,l=this.curves.length;i<l;i++){const curve=this.curves[i];data.curves.push(curve.toJSON());}return data;}fromJSON(json){super.fromJSON(json);this.autoClose=json.autoClose;this.curves=[];for(let i=0,l=json.curves.length;i<l;i++){const curve=json.curves[i];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}}/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */class Path extends CurvePath{/**\n\t * Constructs a new path.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n\t */constructor(points){super();this.type='Path';/**\n\t\t * The current offset of the path. Any new curve added will start here.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.currentPoint=new Vector2();if(points){this.setFromPoints(points);}}/**\n\t * Creates a path from the given list of points. The points are added\n\t * to the path as instances of {@link LineCurve}.\n\t *\n\t * @param {Array<Vector2>} points - An array of 2D points.\n\t * @return {Path} A reference to this path.\n\t */setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(let i=1,l=points.length;i<l;i++){this.lineTo(points[i].x,points[i].y);}return this;}/**\n\t * Moves {@link Path#currentPoint} to the given point.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {Path} A reference to this path.\n\t */moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?\nreturn this;}/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */lineTo(x,y){const curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);return this;}/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */quadraticCurveTo(aCPx,aCPy,aX,aY){const curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){const curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {Path} A reference to this path.\n\t */splineThru(pts){const npts=[this.currentPoint.clone()].concat(pts);const curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);return this;}/**\n\t * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){const x0=this.currentPoint.x;const y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}/**\n\t * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc.\n\t * @param {number} aY - The y coordinate of the center of the arc.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}/**\n\t * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point\n\t *\n\t * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){const x0=this.currentPoint.x;const y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);return this;}/**\n\t * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n\t * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){const curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join\nconst firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);const lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);return this;}copy(source){super.copy(source);this.currentPoint.copy(source.currentPoint);return this;}toJSON(){const data=super.toJSON();data.currentPoint=this.currentPoint.toArray();return data;}fromJSON(json){super.fromJSON(json);this.currentPoint.fromArray(json.currentPoint);return this;}}/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */class Shape extends Path{/**\n\t * Constructs a new shape.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n\t */constructor(points){super(points);/**\n\t\t * The UUID of the shape.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();this.type='Shape';/**\n\t\t * Defines the holes in the shape. Hole definitions must use the\n\t\t * opposite winding order (CW/CCW) than the outer shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @readonly\n\t\t */this.holes=[];}/**\n\t * Returns an array representing each contour of the holes\n\t * as a list of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n\t */getPointsHoles(divisions){const holesPts=[];for(let i=0,l=this.holes.length;i<l;i++){holesPts[i]=this.holes[i].getPoints(divisions);}return holesPts;}// get points of shape and holes (keypoints based on segments parameter)\n/**\n\t * Returns an object that holds contour data for the shape and its holes as\n\t * arrays of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n\t */extractPoints(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};}copy(source){super.copy(source);this.holes=[];for(let i=0,l=source.holes.length;i<l;i++){const hole=source.holes[i];this.holes.push(hole.clone());}return this;}toJSON(){const data=super.toJSON();data.uuid=this.uuid;data.holes=[];for(let i=0,l=this.holes.length;i<l;i++){const hole=this.holes[i];data.holes.push(hole.toJSON());}return data;}fromJSON(json){super.fromJSON(json);this.uuid=json.uuid;this.holes=[];for(let i=0,l=json.holes.length;i<l;i++){const hole=json.holes[i];this.holes.push(new Path().fromJSON(hole));}return this;}}/* eslint-disable */ // copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\nfunction earcut(data,holeIndices,dim=2){const hasHoles=holeIndices&&holeIndices.length;const outerLen=hasHoles?holeIndices[0]*dim:data.length;let outerNode=linkedList(data,0,outerLen,dim,true);const triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;let minX,minY,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\nif(data.length>80*dim){minX=Infinity;minY=Infinity;let maxX=-Infinity;let maxY=-Infinity;for(let i=dim;i<outerLen;i+=dim){const x=data[i];const y=data[i+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation\ninvSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?32767/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize,0);return triangles;}// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data,start,end,dim,clockwise){let last;if(clockwise===signedArea(data,start,end,dim)>0){for(let i=start;i<end;i+=dim)last=insertNode(i/dim|0,data[i],data[i+1],last);}else{for(let i=end-dim;i>=start;i-=dim)last=insertNode(i/dim|0,data[i],data[i+1],last);}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points\nfunction filterPoints(start,end){if(!start)return start;if(!end)end=start;let p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else{p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order\nif(!pass&&invSize)indexCurve(ear,minX,minY,invSize);let stop=ear;// iterate through ears, slicing them one by one\nwhile(ear.prev!==ear.next){const prev=ear.prev;const next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){triangles.push(prev.i,ear.i,next.i);// cut off the triangle\nremoveNode(ear);// skipping the next vertex leads to less sliver triangles\near=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears\nif(ear===stop){// try filtering points and slicing again\nif(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally\n}else if(pass===1){ear=cureLocalIntersections(filterPoints(ear),triangles);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two\n}else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear){const a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear\n// now make sure we don't have other points inside the potential ear\nconst ax=a.x,bx=b.x,cx=c.x,ay=a.y,by=b.y,cy=c.y;// triangle bbox\nconst x0=Math.min(ax,bx,cx),y0=Math.min(ay,by,cy),x1=Math.max(ax,bx,cx),y1=Math.max(ay,by,cy);let p=c.next;while(p!==a){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){const a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear\nconst ax=a.x,bx=b.x,cx=c.x,ay=a.y,by=b.y,cy=c.y;// triangle bbox\nconst x0=Math.min(ax,bx,cx),y0=Math.min(ay,by,cy),x1=Math.max(ax,bx,cx),y1=Math.max(ay,by,cy);// z-order range for the current triangle bbox;\nconst minZ=zOrder(x0,y0,minX,minY,invSize),maxZ=zOrder(x1,y1,minX,minY,invSize);let p=ear.prevZ,n=ear.nextZ;// look for points inside the triangle in both directions\nwhile(p&&p.z>=minZ&&n&&n.z<=maxZ){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&p!==a&&p!==c&&pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;if(n.x>=x0&&n.x<=x1&&n.y>=y0&&n.y<=y1&&n!==a&&n!==c&&pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}// look for remaining points in decreasing z-order\nwhile(p&&p.z>=minZ){if(p.x>=x0&&p.x<=x1&&p.y>=y0&&p.y<=y1&&p!==a&&p!==c&&pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}// look for remaining points in increasing z-order\nwhile(n&&n.z<=maxZ){if(n.x>=x0&&n.x<=x1&&n.y>=y0&&n.y<=y1&&n!==a&&n!==c&&pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}return true;}// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start,triangles){let p=start;do{const a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i,p.i,b.i);// remove two nodes involved\nremoveNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return filterPoints(p);}// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two\nlet a=start;do{let b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal\nlet c=splitPolygon(a,b);// filter colinear points around the cuts\na=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half\nearcutLinked(a,triangles,dim,minX,minY,invSize,0);earcutLinked(c,triangles,dim,minX,minY,invSize,0);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data,holeIndices,outerNode,dim){const queue=[];for(let i=0,len=holeIndices.length;i<len;i++){const start=holeIndices[i]*dim;const end=i<len-1?holeIndices[i+1]*dim:data.length;const list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareXYSlope);// process holes from left to right\nfor(let i=0;i<queue.length;i++){outerNode=eliminateHole(queue[i],outerNode);}return outerNode;}function compareXYSlope(a,b){let result=a.x-b.x;// when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n// the bridge to the outer shell is always the point that they meet at.\nif(result===0){result=a.y-b.y;if(result===0){const aSlope=(a.next.y-a.y)/(a.next.x-a.x);const bSlope=(b.next.y-b.y)/(b.next.x-b.x);result=aSlope-bSlope;}}return result;}// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole,outerNode){const bridge=findHoleBridge(hole,outerNode);if(!bridge){return outerNode;}const bridgeReverse=splitPolygon(bridge,hole);// filter collinear points around the cuts\nfilterPoints(bridgeReverse,bridgeReverse.next);return filterPoints(bridge,bridge.next);}// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole,outerNode){let p=outerNode;const hx=hole.x;const hy=hole.y;let qx=-Infinity;let m;// find a segment intersected by a ray from the hole's leftmost point to the left;\n// segment's endpoint with lesser x will be potential connection point\n// unless they intersect at a vertex, then choose the vertex\nif(equals(hole,p))return p;do{if(equals(hole,p.next))return p.next;else if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){const x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;m=p.x<p.next.x?p:p.next;if(x===hx)return m;// hole touches outer segment; pick leftmost endpoint\n}}p=p.next;}while(p!==outerNode);if(!m)return null;// look for points inside the triangle of hole point, segment intersection and endpoint;\n// if there are no points found, we have a valid connection;\n// otherwise choose the point of the minimum angle with the ray as connection point\nconst stop=m;const mx=m.x;const my=m.y;let tanMin=Infinity;p=m;do{if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){const tan=Math.abs(hy-p.y)/(hx-p.x);// tangential\nif(locallyInside(p,hole)&&(tan<tanMin||tan===tanMin&&(p.x>m.x||p.x===m.x&&sectorContainsSector(m,p)))){m=p;tanMin=tan;}}p=p.next;}while(p!==stop);return m;}// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m,p){return area(m.prev,m,p.prev)<0&&area(p.next,m,m.next)<0;}// interlink polygon nodes in z-order\nfunction indexCurve(start,minX,minY,invSize){let p=start;do{if(p.z===0)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list){let numMerges;let inSize=1;do{let p=list;let e;list=null;let tail=null;numMerges=0;while(p){numMerges++;let q=p;let pSize=0;for(let i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}let qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else{e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range\nx=(x-minX)*invSize|0;y=(y-minY)*invSize|0;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring\nfunction getLeftmost(start){let p=start,leftmost=start;do{if(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle\nfunction pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return(cx-px)*(ay-py)>=(ax-px)*(cy-py)&&(ax-px)*(by-py)>=(bx-px)*(ay-py)&&(bx-px)*(cy-py)>=(cx-px)*(by-py);}// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax,ay,bx,by,cx,cy,px,py){return!(ax===px&&ay===py)&&pointInTriangle(ax,ay,bx,by,cx,cy,px,py);}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&(// dones't intersect other edges\nlocallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b)&&(// locally visible\narea(a.prev,a,b.prev)||area(a,b.prev,b))||// does not create opposite-facing sectors\nequals(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0);// special zero-length case\n}// signed area of a triangle\nfunction area(p,q,r){return(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal\nfunction equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect\nfunction intersects(p1,q1,p2,q2){const o1=sign(area(p1,q1,p2));const o2=sign(area(p1,q1,q2));const o3=sign(area(p2,q2,p1));const o4=sign(area(p2,q2,q1));if(o1!==o2&&o3!==o4)return true;// general case\nif(o1===0&&onSegment(p1,p2,q1))return true;// p1, q1 and p2 are collinear and p2 lies on p1q1\nif(o2===0&&onSegment(p1,q2,q1))return true;// p1, q1 and q2 are collinear and q2 lies on p1q1\nif(o3===0&&onSegment(p2,p1,q2))return true;// p2, q2 and p1 are collinear and p1 lies on p2q2\nif(o4===0&&onSegment(p2,q1,q2))return true;// p2, q2 and q1 are collinear and q1 lies on p2q2\nreturn false;}// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p,q,r){return q.x<=Math.max(p.x,r.x)&&q.x>=Math.min(p.x,r.x)&&q.y<=Math.max(p.y,r.y)&&q.y>=Math.min(p.y,r.y);}function sign(num){return num>0?1:num<0?-1:0;}// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a,b){let p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return true;p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a,b){let p=a;let inside=false;const px=(a.x+b.x)/2;const py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x)inside=!inside;p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a,b){const a2=createNode(a.i,a.x,a.y),b2=createNode(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i,x,y,last){const p=createNode(i,x,y);if(!last){p.prev=p;p.next=p;}else{p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function createNode(i,x,y){return{i,// vertex index in coordinates array\nx,y,// vertex coordinates\nprev:null,// previous and next vertex nodes in a polygon ring\nnext:null,z:0,// z-order curve value\nprevZ:null,// previous and next nodes in z-order\nnextZ:null,steiner:false// indicates whether this is a steiner point\n};}function signedArea(data,start,end,dim){let sum=0;for(let i=start,j=end-dim;i<end;i+=dim){sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);j=i;}return sum;}class Earcut{/**\n\t * Triangulates the given shape definition by returning an array of triangles.\n\t *\n\t * @param {Array<number>} data - An array with 2D points.\n\t * @param {Array<number>} holeIndices - An array with indices defining holes.\n\t * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n\t * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n\t * representing vertex indices.\n\t */static triangulate(data,holeIndices,dim=2){return earcut(data,holeIndices,dim);}}/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */class ShapeUtils{/**\n\t * Calculate area of a ( 2D ) contour polygon.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points.\n\t * @return {number} The area.\n\t */static area(contour){const n=contour.length;let a=0.0;for(let p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;}/**\n\t * Returns `true` if the given contour uses a clockwise winding order.\n\t *\n\t * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n\t * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n\t */static isClockWise(pts){return ShapeUtils.area(pts)<0;}/**\n\t * Triangulates the given shape definition.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n\t * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n\t * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n\t */static triangulateShape(contour,holes){const vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\nconst holeIndices=[];// array of hole indices\nconst faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\nremoveDupEndPts(contour);addContour(vertices,contour);//\nlet holeIndex=contour.length;holes.forEach(removeDupEndPts);for(let i=0;i<holes.length;i++){holeIndices.push(holeIndex);holeIndex+=holes[i].length;addContour(vertices,holes[i]);}//\nconst triangles=Earcut.triangulate(vertices,holeIndices);//\nfor(let i=0;i<triangles.length;i+=3){faces.push(triangles.slice(i,i+3));}return faces;}}function removeDupEndPts(points){const l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(let i=0;i<contour.length;i++){vertices.push(contour[i].x);vertices.push(contour[i].y);}}/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */class ExtrudeGeometry extends BufferGeometry{/**\n\t * Constructs a new extrude geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {ExtrudeGeometry~Options} [options] - The extrude settings.\n\t */constructor(shapes=new Shape([new Vector2(0.5,0.5),new Vector2(-0.5,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]),options={}){super();this.type='ExtrudeGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];const scope=this;const verticesArray=[];const uvArray=[];for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];addShape(shape);}// build geometry\nthis.setAttribute('position',new Float32BufferAttribute(verticesArray,3));this.setAttribute('uv',new Float32BufferAttribute(uvArray,2));this.computeVertexNormals();// functions\nfunction addShape(shape){const placeholder=[];// options\nconst curveSegments=options.curveSegments!==undefined?options.curveSegments:12;const steps=options.steps!==undefined?options.steps:1;const depth=options.depth!==undefined?options.depth:1;let bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;let bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:0.2;let bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-0.1;let bevelOffset=options.bevelOffset!==undefined?options.bevelOffset:0;let bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;const extrudePath=options.extrudePath;const uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;//\nlet extrudePts,extrudeByPath=false;let splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion\n// SETUP TNB variables\n// TODO1 - have a .isClosed in spline?\nsplineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\nbinormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled\nif(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;bevelOffset=0;}// Variables initialization\nconst shapePoints=shape.extractPoints(curveSegments);let vertices=shapePoints.shape;const holes=shapePoints.holes;const reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...\nfor(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}/**Merges index-adjacent points that are within a threshold distance of each other. Array is modified in-place. Threshold distance is empirical, and scaled based on the magnitude of point coordinates.\n\t\t\t * @param {Array<Vector2>} points\n\t\t\t*/function mergeOverlappingPoints(points){const THRESHOLD=1e-10;const THRESHOLD_SQ=THRESHOLD*THRESHOLD;let prevPos=points[0];for(let i=1;i<=points.length;i++){const currentIndex=i%points.length;const currentPos=points[currentIndex];const dx=currentPos.x-prevPos.x;const dy=currentPos.y-prevPos.y;const distSq=dx*dx+dy*dy;const scalingFactorSqrt=Math.max(Math.abs(currentPos.x),Math.abs(currentPos.y),Math.abs(prevPos.x),Math.abs(prevPos.y));const thresholdSqScaled=THRESHOLD_SQ*scalingFactorSqrt*scalingFactorSqrt;if(distSq<=thresholdSqScaled){points.splice(currentIndex,1);i--;continue;}prevPos=currentPos;}}mergeOverlappingPoints(vertices);holes.forEach(mergeOverlappingPoints);const numHoles=holes.length;/* Vertices */const contour=vertices;// vertices has all points but contour has only points of circumference\nfor(let h=0;h<numHoles;h++){const ahole=holes[h];vertices=vertices.concat(ahole);}function scalePt2(pt,vec,size){if(!vec)console.error('THREE.ExtrudeGeometry: vec does not exist');return pt.clone().addScaledVector(vec,size);}const vlen=vertices.length;// Find directions for point movement\nfunction getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour\n//   shifted by 1 unit (length of normalized vector) to the left\n// if we walk along contour clockwise, this new contour is outside the old one\n//\n// inPt' is the intersection of the two lines parallel to the two\n//  adjacent edges of inPt at a distance of 1 unit on the left side.\nlet v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt\n// good reading for geometry algorithms (here: line-line intersection)\n// http://geomalgorithms.com/a05-_intersect-1.html\nconst v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;const v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;const v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges\nconst collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear\n// length of vectors for normalizing\nconst v_prev_len=Math.sqrt(v_prev_lensq);const v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left\nconst ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;const ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;const ptNextShift_x=inNext.x-v_next_y/v_next_len;const ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point\nconst sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point\nv_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly\n//  but prevent crazy spikes\nconst v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else{shrink_by=Math.sqrt(v_trans_lensq/2);}}else{// handle special case of collinear edges\nlet direction_eq=false;// assumes: opposite\nif(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else{if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else{if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log(\"Warning: lines are a straight sequence\");\nv_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else{// console.log(\"Warning: lines are a straight spike\");\nv_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}const contourMovements=[];for(let i=0,il=contour.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)\n// console.log('i,j,k', i, j , k)\ncontourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);}const holesMovements=[];let oneHoleMovements,verticesMovements=contourMovements.concat();for(let h=0,hl=numHoles;h<hl;h++){const ahole=holes[h];oneHoleMovements=[];for(let i=0,il=ahole.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)\noneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}let faces;if(bevelSegments===0){faces=ShapeUtils.triangulateShape(contour,holes);}else{const contractedContourVertices=[];const expandedHoleVertices=[];// Loop bevelSegments, 1 for the front, 1 for the back\nfor(let b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {\nconst t=b/bevelSegments;const z=bevelThickness*Math.cos(t*Math.PI/2);const bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape\nfor(let i=0,il=contour.length;i<il;i++){const vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,-z);if(t===0)contractedContourVertices.push(vert);}// expand holes\nfor(let h=0,hl=numHoles;h<hl;h++){const ahole=holes[h];oneHoleMovements=holesMovements[h];const oneHoleVertices=[];for(let i=0,il=ahole.length;i<il;i++){const vert=scalePt2(ahole[i],oneHoleMovements[i],bs);v(vert.x,vert.y,-z);if(t===0)oneHoleVertices.push(vert);}if(t===0)expandedHoleVertices.push(oneHoleVertices);}}faces=ShapeUtils.triangulateShape(contractedContourVertices,expandedHoleVertices);}const flen=faces.length;const bs=bevelSize+bevelOffset;// Back facing vertices\nfor(let i=0;i<vlen;i++){const vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,0);}else{// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\nnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...\n// Including front facing vertices\nfor(let s=1;s<=steps;s++){for(let i=0;i<vlen;i++){const vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,depth/steps*s);}else{// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\nnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes\n//for ( b = 1; b <= bevelSegments; b ++ ) {\nfor(let b=bevelSegments-1;b>=0;b--){const t=b/bevelSegments;const z=bevelThickness*Math.cos(t*Math.PI/2);const bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape\nfor(let i=0,il=contour.length;i<il;i++){const vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,depth+z);}// expand holes\nfor(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];oneHoleMovements=holesMovements[h];for(let i=0,il=ahole.length;i<il;i++){const vert=scalePt2(ahole[i],oneHoleMovements[i],bs);if(!extrudeByPath){v(vert.x,vert.y,depth+z);}else{v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z);}}}}/* Faces */ // Top and bottom faces\nbuildLidFaces();// Sides faces\nbuildSideFaces();/////  Internal functions\nfunction buildLidFaces(){const start=verticesArray.length/3;if(bevelEnabled){let layer=0;// steps + 1\nlet offset=vlen*layer;// Bottom faces\nfor(let i=0;i<flen;i++){const face=faces[i];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces\nfor(let i=0;i<flen;i++){const face=faces[i];f3(face[0]+offset,face[1]+offset,face[2]+offset);}}else{// Bottom faces\nfor(let i=0;i<flen;i++){const face=faces[i];f3(face[2],face[1],face[0]);}// Top faces\nfor(let i=0;i<flen;i++){const face=faces[i];f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape\nfunction buildSideFaces(){const start=verticesArray.length/3;let layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(let h=0,hl=holes.length;h<hl;h++){const ahole=holes[h];sidewalls(ahole,layeroffset);//, true\nlayeroffset+=ahole.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){let i=contour.length;while(--i>=0){const j=i;let k=i-1;if(k<0)k=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);\nfor(let s=0,sl=steps+bevelSegments*2;s<sl;s++){const slen1=vlen*s;const slen2=vlen*(s+1);const a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);const nextIndex=verticesArray.length/3;const uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);const nextIndex=verticesArray.length/3;const uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}toJSON(){const data=super.toJSON();const shapes=this.parameters.shapes;const options=this.parameters.options;return toJSON$1(shapes,options,data);}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ExtrudeGeometry} A new instance.\n\t */static fromJSON(data,shapes){const geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){const shape=shapes[data.shapes[j]];geometryShapes.push(shape);}const extrudePath=data.options.extrudePath;if(extrudePath!==undefined){data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath);}return new ExtrudeGeometry(geometryShapes,data.options);}}const WorldUVGenerator={generateTopUV:function(geometry,vertices,indexA,indexB,indexC){const a_x=vertices[indexA*3];const a_y=vertices[indexA*3+1];const b_x=vertices[indexB*3];const b_y=vertices[indexB*3+1];const c_x=vertices[indexC*3];const c_y=vertices[indexC*3+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function(geometry,vertices,indexA,indexB,indexC,indexD){const a_x=vertices[indexA*3];const a_y=vertices[indexA*3+1];const a_z=vertices[indexA*3+2];const b_x=vertices[indexB*3];const b_y=vertices[indexB*3+1];const b_z=vertices[indexB*3+2];const c_x=vertices[indexC*3];const c_y=vertices[indexC*3+1];const c_z=vertices[indexC*3+2];const d_x=vertices[indexD*3];const d_y=vertices[indexD*3+1];const d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<Math.abs(a_x-b_x)){return[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else{return[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function toJSON$1(shapes,options,data){data.shapes=[];if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}data.options=Object.assign({},options);if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */class IcosahedronGeometry extends PolyhedronGeometry{/**\n\t * Constructs a new icosahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the icosahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n\t */constructor(radius=1,detail=0){const t=(1+Math.sqrt(5))/2;const vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1];const indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(vertices,indices,radius,detail);this.type='IcosahedronGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,detail:detail};}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {IcosahedronGeometry} A new instance.\n\t */static fromJSON(data){return new IcosahedronGeometry(data.radius,data.detail);}}/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */class LatheGeometry extends BufferGeometry{/**\n\t * Constructs a new lathe geometry.\n\t *\n\t * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point\n\t * must be greater than zero.\n\t * @param {number} [segments=12] - The number of circumference segments to generate.\n\t * @param {number} [phiStart=0] - The starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n\t * closed lathe, less than 2PI is a portion.\n\t */constructor(points=[new Vector2(0,-0.5),new Vector2(0.5,0),new Vector2(0,0.5)],segments=12,phiStart=0,phiLength=Math.PI*2){super();this.type='LatheGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};segments=Math.floor(segments);// clamp phiLength so it's in range of [ 0, 2PI ]\nphiLength=clamp(phiLength,0,Math.PI*2);// buffers\nconst indices=[];const vertices=[];const uvs=[];const initNormals=[];const normals=[];// helper variables\nconst inverseSegments=1.0/segments;const vertex=new Vector3();const uv=new Vector2();const normal=new Vector3();const curNormal=new Vector3();const prevNormal=new Vector3();let dx=0;let dy=0;// pre-compute normals for initial \"meridian\"\nfor(let j=0;j<=points.length-1;j++){switch(j){case 0:// special handling for 1st vertex on path\ndx=points[j+1].x-points[j].x;dy=points[j+1].y-points[j].y;normal.x=dy*1.0;normal.y=-dx;normal.z=dy*0.0;prevNormal.copy(normal);normal.normalize();initNormals.push(normal.x,normal.y,normal.z);break;case points.length-1:// special handling for last Vertex on path\ninitNormals.push(prevNormal.x,prevNormal.y,prevNormal.z);break;default:// default handling for all vertices in between\ndx=points[j+1].x-points[j].x;dy=points[j+1].y-points[j].y;normal.x=dy*1.0;normal.y=-dx;normal.z=dy*0.0;curNormal.copy(normal);normal.x+=prevNormal.x;normal.y+=prevNormal.y;normal.z+=prevNormal.z;normal.normalize();initNormals.push(normal.x,normal.y,normal.z);prevNormal.copy(curNormal);}}// generate vertices, uvs and normals\nfor(let i=0;i<=segments;i++){const phi=phiStart+i*inverseSegments*phiLength;const sin=Math.sin(phi);const cos=Math.cos(phi);for(let j=0;j<=points.length-1;j++){// vertex\nvertex.x=points[j].x*sin;vertex.y=points[j].y;vertex.z=points[j].x*cos;vertices.push(vertex.x,vertex.y,vertex.z);// uv\nuv.x=i/segments;uv.y=j/(points.length-1);uvs.push(uv.x,uv.y);// normal\nconst x=initNormals[3*j+0]*sin;const y=initNormals[3*j+1];const z=initNormals[3*j+0]*cos;normals.push(x,y,z);}}// indices\nfor(let i=0;i<segments;i++){for(let j=0;j<points.length-1;j++){const base=j+i*points.length;const a=base;const b=base+points.length;const c=base+points.length+1;const d=base+1;// faces\nindices.push(a,b,d);indices.push(c,d,b);}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));this.setAttribute('normal',new Float32BufferAttribute(normals,3));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {LatheGeometry} A new instance.\n\t */static fromJSON(data){return new LatheGeometry(data.points,data.segments,data.phiStart,data.phiLength);}}/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */class OctahedronGeometry extends PolyhedronGeometry{/**\n\t * Constructs a new octahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the octahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n\t */constructor(radius=1,detail=0){const vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(vertices,indices,radius,detail);this.type='OctahedronGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,detail:detail};}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {OctahedronGeometry} A new instance.\n\t */static fromJSON(data){return new OctahedronGeometry(data.radius,data.detail);}}/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */class PlaneGeometry extends BufferGeometry{/**\n\t * Constructs a new plane geometry.\n\t *\n\t * @param {number} [width=1] - The width along the X axis.\n\t * @param {number} [height=1] - The height along the Y axis\n\t * @param {number} [widthSegments=1] - The number of segments along the X axis.\n\t * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n\t */constructor(width=1,height=1,widthSegments=1,heightSegments=1){super();this.type='PlaneGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};const width_half=width/2;const height_half=height/2;const gridX=Math.floor(widthSegments);const gridY=Math.floor(heightSegments);const gridX1=gridX+1;const gridY1=gridY+1;const segment_width=width/gridX;const segment_height=height/gridY;//\nconst indices=[];const vertices=[];const normals=[];const uvs=[];for(let iy=0;iy<gridY1;iy++){const y=iy*segment_height-height_half;for(let ix=0;ix<gridX1;ix++){const x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}for(let iy=0;iy<gridY;iy++){for(let ix=0;ix<gridX;ix++){const a=ix+gridX1*iy;const b=ix+gridX1*(iy+1);const c=ix+1+gridX1*(iy+1);const d=ix+1+gridX1*iy;indices.push(a,b,d);indices.push(b,c,d);}}this.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PlaneGeometry} A new instance.\n\t */static fromJSON(data){return new PlaneGeometry(data.width,data.height,data.widthSegments,data.heightSegments);}}/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */class RingGeometry extends BufferGeometry{/**\n\t * Constructs a new ring geometry.\n\t *\n\t * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n\t * @param {number} [outerRadius=1] - The outer radius of the ring.\n\t * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n\t * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n\t * @param {number} [thetaStart=0] - Starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n\t */constructor(innerRadius=0.5,outerRadius=1,thetaSegments=32,phiSegments=1,thetaStart=0,thetaLength=Math.PI*2){super();this.type='RingGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};thetaSegments=Math.max(3,thetaSegments);phiSegments=Math.max(1,phiSegments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// some helper variables\nlet radius=innerRadius;const radiusStep=(outerRadius-innerRadius)/phiSegments;const vertex=new Vector3();const uv=new Vector2();// generate vertices, normals and uvs\nfor(let j=0;j<=phiSegments;j++){for(let i=0;i<=thetaSegments;i++){// values are generate from the inside of the ring to the outside\nconst segment=thetaStart+i/thetaSegments*thetaLength;// vertex\nvertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormals.push(0,0,1);// uv\nuv.x=(vertex.x/outerRadius+1)/2;uv.y=(vertex.y/outerRadius+1)/2;uvs.push(uv.x,uv.y);}// increase the radius for next row of vertices\nradius+=radiusStep;}// indices\nfor(let j=0;j<phiSegments;j++){const thetaSegmentLevel=j*(thetaSegments+1);for(let i=0;i<thetaSegments;i++){const segment=i+thetaSegmentLevel;const a=segment;const b=segment+thetaSegments+1;const c=segment+thetaSegments+2;const d=segment+1;// faces\nindices.push(a,b,d);indices.push(b,c,d);}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {RingGeometry} A new instance.\n\t */static fromJSON(data){return new RingGeometry(data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);}}/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */class ShapeGeometry extends BufferGeometry{/**\n\t * Constructs a new shape geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {number} [curveSegments=12] - Number of segments per shape.\n\t */constructor(shapes=new Shape([new Vector2(0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]),curveSegments=12){super();this.type='ShapeGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={shapes:shapes,curveSegments:curveSegments};// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nlet groupStart=0;let groupCount=0;// allow single and array values for \"shapes\" parameter\nif(Array.isArray(shapes)===false){addShape(shapes);}else{for(let i=0;i<shapes.length;i++){addShape(shapes[i]);this.addGroup(groupStart,groupCount,i);// enables MultiMaterial support\ngroupStart+=groupCount;groupCount=0;}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions\nfunction addShape(shape){const indexOffset=vertices.length/3;const points=shape.extractPoints(curveSegments);let shapeVertices=points.shape;const shapeHoles=points.holes;// check direction of vertices\nif(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();}for(let i=0,l=shapeHoles.length;i<l;i++){const shapeHole=shapeHoles[i];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[i]=shapeHole.reverse();}}const faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array\nfor(let i=0,l=shapeHoles.length;i<l;i++){const shapeHole=shapeHoles[i];shapeVertices=shapeVertices.concat(shapeHole);}// vertices, normals, uvs\nfor(let i=0,l=shapeVertices.length;i<l;i++){const vertex=shapeVertices[i];vertices.push(vertex.x,vertex.y,0);normals.push(0,0,1);uvs.push(vertex.x,vertex.y);// world uvs\n}// indices\nfor(let i=0,l=faces.length;i<l;i++){const face=faces[i];const a=face[0]+indexOffset;const b=face[1]+indexOffset;const c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}toJSON(){const data=super.toJSON();const shapes=this.parameters.shapes;return toJSON(shapes,data);}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ShapeGeometry} A new instance.\n\t */static fromJSON(data,shapes){const geometryShapes=[];for(let j=0,jl=data.shapes.length;j<jl;j++){const shape=shapes[data.shapes[j]];geometryShapes.push(shape);}return new ShapeGeometry(geometryShapes,data.curveSegments);}}function toJSON(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(let i=0,l=shapes.length;i<l;i++){const shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}return data;}/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */class SphereGeometry extends BufferGeometry{/**\n\t * Constructs a new sphere geometry.\n\t *\n\t * @param {number} [radius=1] - The sphere radius.\n\t * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n\t * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n\t * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n\t * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n\t */constructor(radius=1,widthSegments=32,heightSegments=16,phiStart=0,phiLength=Math.PI*2,thetaStart=0,thetaLength=Math.PI){super();this.type='SphereGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};widthSegments=Math.max(3,Math.floor(widthSegments));heightSegments=Math.max(2,Math.floor(heightSegments));const thetaEnd=Math.min(thetaStart+thetaLength,Math.PI);let index=0;const grid=[];const vertex=new Vector3();const normal=new Vector3();// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// generate vertices, normals and uvs\nfor(let iy=0;iy<=heightSegments;iy++){const verticesRow=[];const v=iy/heightSegments;// special case for the poles\nlet uOffset=0;if(iy===0&&thetaStart===0){uOffset=0.5/widthSegments;}else if(iy===heightSegments&&thetaEnd===Math.PI){uOffset=-0.5/widthSegments;}for(let ix=0;ix<=widthSegments;ix++){const u=ix/widthSegments;// vertex\nvertex.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertex.y=radius*Math.cos(thetaStart+v*thetaLength);vertex.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertices.push(vertex.x,vertex.y,vertex.z);// normal\nnormal.copy(vertex).normalize();normals.push(normal.x,normal.y,normal.z);// uv\nuvs.push(u+uOffset,1-v);verticesRow.push(index++);}grid.push(verticesRow);}// indices\nfor(let iy=0;iy<heightSegments;iy++){for(let ix=0;ix<widthSegments;ix++){const a=grid[iy][ix+1];const b=grid[iy][ix];const c=grid[iy+1][ix];const d=grid[iy+1][ix+1];if(iy!==0||thetaStart>0)indices.push(a,b,d);if(iy!==heightSegments-1||thetaEnd<Math.PI)indices.push(b,c,d);}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {SphereGeometry} A new instance.\n\t */static fromJSON(data){return new SphereGeometry(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);}}/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */class TetrahedronGeometry extends PolyhedronGeometry{/**\n\t * Constructs a new tetrahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the tetrahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n\t */constructor(radius=1,detail=0){const vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const indices=[2,1,0,0,3,2,1,3,0,2,3,1];super(vertices,indices,radius,detail);this.type='TetrahedronGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,detail:detail};}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TetrahedronGeometry} A new instance.\n\t */static fromJSON(data){return new TetrahedronGeometry(data.radius,data.detail);}}/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */class TorusGeometry extends BufferGeometry{/**\n\t * Constructs a new torus geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n\t * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n\t * @param {number} [radialSegments=12] - The number of radial segments.\n\t * @param {number} [tubularSegments=48] - The number of tubular segments.\n\t * @param {number} [arc=Math.PI*2] - Central angle in radians.\n\t */constructor(radius=1,tube=0.4,radialSegments=12,tubularSegments=48,arc=Math.PI*2){super();this.type='TorusGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};radialSegments=Math.floor(radialSegments);tubularSegments=Math.floor(tubularSegments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nconst center=new Vector3();const vertex=new Vector3();const normal=new Vector3();// generate vertices, normals and uvs\nfor(let j=0;j<=radialSegments;j++){for(let i=0;i<=tubularSegments;i++){const u=i/tubularSegments*arc;const v=j/radialSegments*Math.PI*2;// vertex\nvertex.x=(radius+tube*Math.cos(v))*Math.cos(u);vertex.y=(radius+tube*Math.cos(v))*Math.sin(u);vertex.z=tube*Math.sin(v);vertices.push(vertex.x,vertex.y,vertex.z);// normal\ncenter.x=radius*Math.cos(u);center.y=radius*Math.sin(u);normal.subVectors(vertex,center).normalize();normals.push(normal.x,normal.y,normal.z);// uv\nuvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices\nfor(let j=1;j<=radialSegments;j++){for(let i=1;i<=tubularSegments;i++){// indices\nconst a=(tubularSegments+1)*j+i-1;const b=(tubularSegments+1)*(j-1)+i-1;const c=(tubularSegments+1)*(j-1)+i;const d=(tubularSegments+1)*j+i;// faces\nindices.push(a,b,d);indices.push(b,c,d);}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusGeometry} A new instance.\n\t */static fromJSON(data){return new TorusGeometry(data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);}}/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */class TorusKnotGeometry extends BufferGeometry{/**\n\t * Constructs a new torus knot geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus knot.\n\t * @param {number} [tube=0.4] - Radius of the tube.\n\t * @param {number} [tubularSegments=64] - The number of tubular segments.\n\t * @param {number} [radialSegments=8] - The number of radial segments.\n\t * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n\t * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n\t */constructor(radius=1,tube=0.4,tubularSegments=64,radialSegments=8,p=2,q=3){super();this.type='TorusKnotGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};tubularSegments=Math.floor(tubularSegments);radialSegments=Math.floor(radialSegments);// buffers\nconst indices=[];const vertices=[];const normals=[];const uvs=[];// helper variables\nconst vertex=new Vector3();const normal=new Vector3();const P1=new Vector3();const P2=new Vector3();const B=new Vector3();const T=new Vector3();const N=new Vector3();// generate vertices, normals and uvs\nfor(let i=0;i<=tubularSegments;++i){// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\nconst u=i/tubularSegments*p*Math.PI*2;// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\ncalculatePositionOnCurve(u,p,q,radius,P1);calculatePositionOnCurve(u+0.01,p,q,radius,P2);// calculate orthonormal basis\nT.subVectors(P2,P1);N.addVectors(P2,P1);B.crossVectors(T,N);N.crossVectors(B,T);// normalize B, N. T can be ignored, we don't use it\nB.normalize();N.normalize();for(let j=0;j<=radialSegments;++j){// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\nconst v=j/radialSegments*Math.PI*2;const cx=-tube*Math.cos(v);const cy=tube*Math.sin(v);// now calculate the final vertex position.\n// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\nvertex.x=P1.x+(cx*N.x+cy*B.x);vertex.y=P1.y+(cx*N.y+cy*B.y);vertex.z=P1.z+(cx*N.z+cy*B.z);vertices.push(vertex.x,vertex.y,vertex.z);// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\nnormal.subVectors(vertex,P1).normalize();normals.push(normal.x,normal.y,normal.z);// uv\nuvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices\nfor(let j=1;j<=tubularSegments;j++){for(let i=1;i<=radialSegments;i++){// indices\nconst a=(radialSegments+1)*(j-1)+(i-1);const b=(radialSegments+1)*j+(i-1);const c=(radialSegments+1)*j+i;const d=(radialSegments+1)*(j-1)+i;// faces\nindices.push(a,b,d);indices.push(b,c,d);}}// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// this function calculates the current position on the torus curve\nfunction calculatePositionOnCurve(u,p,q,radius,position){const cu=Math.cos(u);const su=Math.sin(u);const quOverP=q/p*u;const cs=Math.cos(quOverP);position.x=radius*(2+cs)*0.5*cu;position.y=radius*(2+cs)*su*0.5;position.z=radius*Math.sin(quOverP)*0.5;}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusKnotGeometry} A new instance.\n\t */static fromJSON(data){return new TorusKnotGeometry(data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);}}/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */class TubeGeometry extends BufferGeometry{/**\n\t * Constructs a new tube geometry.\n\t *\n\t * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n\t * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n\t * @param {number} [radius=1] -The radius of the tube.\n\t * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n\t * @param {boolean} [closed=false] - Whether the tube is closed or not.\n\t */constructor(path=new QuadraticBezierCurve3(new Vector3(-1,-1,0),new Vector3(-1,1,0),new Vector3(1,1,0)),tubularSegments=64,radius=1,radialSegments=8,closed=false){super();this.type='TubeGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};const frames=path.computeFrenetFrames(tubularSegments,closed);// expose internals\nthis.tangents=frames.tangents;this.normals=frames.normals;this.binormals=frames.binormals;// helper variables\nconst vertex=new Vector3();const normal=new Vector3();const uv=new Vector2();let P=new Vector3();// buffer\nconst vertices=[];const normals=[];const uvs=[];const indices=[];// create buffer data\ngenerateBufferData();// build geometry\nthis.setIndex(indices);this.setAttribute('position',new Float32BufferAttribute(vertices,3));this.setAttribute('normal',new Float32BufferAttribute(normals,3));this.setAttribute('uv',new Float32BufferAttribute(uvs,2));// functions\nfunction generateBufferData(){for(let i=0;i<tubularSegments;i++){generateSegment(i);}// if the geometry is not closed, generate the last row of vertices and normals\n// at the regular position on the given path\n//\n// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\ngenerateSegment(closed===false?tubularSegments:0);// uvs are generated in a separate function.\n// this makes it easy compute correct values for closed geometries\ngenerateUVs();// finally create faces\ngenerateIndices();}function generateSegment(i){// we use getPointAt to sample evenly distributed points from the given path\nP=path.getPointAt(i/tubularSegments,P);// retrieve corresponding normal and binormal\nconst N=frames.normals[i];const B=frames.binormals[i];// generate normals and vertices for the current segment\nfor(let j=0;j<=radialSegments;j++){const v=j/radialSegments*Math.PI*2;const sin=Math.sin(v);const cos=-Math.cos(v);// normal\nnormal.x=cos*N.x+sin*B.x;normal.y=cos*N.y+sin*B.y;normal.z=cos*N.z+sin*B.z;normal.normalize();normals.push(normal.x,normal.y,normal.z);// vertex\nvertex.x=P.x+radius*normal.x;vertex.y=P.y+radius*normal.y;vertex.z=P.z+radius*normal.z;vertices.push(vertex.x,vertex.y,vertex.z);}}function generateIndices(){for(let j=1;j<=tubularSegments;j++){for(let i=1;i<=radialSegments;i++){const a=(radialSegments+1)*(j-1)+(i-1);const b=(radialSegments+1)*j+(i-1);const c=(radialSegments+1)*j+i;const d=(radialSegments+1)*(j-1)+i;// faces\nindices.push(a,b,d);indices.push(b,c,d);}}}function generateUVs(){for(let i=0;i<=tubularSegments;i++){for(let j=0;j<=radialSegments;j++){uv.x=i/tubularSegments;uv.y=j/radialSegments;uvs.push(uv.x,uv.y);}}}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}toJSON(){const data=super.toJSON();data.path=this.parameters.path.toJSON();return data;}/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TubeGeometry} A new instance.\n\t */static fromJSON(data){// This only works for built-in curves (e.g. CatmullRomCurve3).\n// User defined curves or instances of CurvePath will not be deserialized.\nreturn new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path),data.tubularSegments,data.radius,data.radialSegments,data.closed);}}/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */class WireframeGeometry extends BufferGeometry{/**\n\t * Constructs a new wireframe geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t */constructor(geometry=null){super();this.type='WireframeGeometry';/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parameters={geometry:geometry};if(geometry!==null){// buffer\nconst vertices=[];const edges=new Set();// helper variables\nconst start=new Vector3();const end=new Vector3();if(geometry.index!==null){// indexed BufferGeometry\nconst position=geometry.attributes.position;const indices=geometry.index;let groups=geometry.groups;if(groups.length===0){groups=[{start:0,count:indices.count,materialIndex:0}];}// create a data structure that contains all edges without duplicates\nfor(let o=0,ol=groups.length;o<ol;++o){const group=groups[o];const groupStart=group.start;const groupCount=group.count;for(let i=groupStart,l=groupStart+groupCount;i<l;i+=3){for(let j=0;j<3;j++){const index1=indices.getX(i+j);const index2=indices.getX(i+(j+1)%3);start.fromBufferAttribute(position,index1);end.fromBufferAttribute(position,index2);if(isUniqueEdge(start,end,edges)===true){vertices.push(start.x,start.y,start.z);vertices.push(end.x,end.y,end.z);}}}}}else{// non-indexed BufferGeometry\nconst position=geometry.attributes.position;for(let i=0,l=position.count/3;i<l;i++){for(let j=0;j<3;j++){// three edges per triangle, an edge is represented as (index1, index2)\n// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\nconst index1=3*i+j;const index2=3*i+(j+1)%3;start.fromBufferAttribute(position,index1);end.fromBufferAttribute(position,index2);if(isUniqueEdge(start,end,edges)===true){vertices.push(start.x,start.y,start.z);vertices.push(end.x,end.y,end.z);}}}}// build geometry\nthis.setAttribute('position',new Float32BufferAttribute(vertices,3));}}copy(source){super.copy(source);this.parameters=Object.assign({},source.parameters);return this;}}function isUniqueEdge(start,end,edges){const hash1=`${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;const hash2=`${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;// coincident edge\nif(edges.has(hash1)===true||edges.has(hash2)===true){return false;}else{edges.add(hash1);edges.add(hash2);return true;}}var Geometries=/*#__PURE__*/Object.freeze({__proto__:null,BoxGeometry:BoxGeometry,CapsuleGeometry:CapsuleGeometry,CircleGeometry:CircleGeometry,ConeGeometry:ConeGeometry,CylinderGeometry:CylinderGeometry,DodecahedronGeometry:DodecahedronGeometry,EdgesGeometry:EdgesGeometry,ExtrudeGeometry:ExtrudeGeometry,IcosahedronGeometry:IcosahedronGeometry,LatheGeometry:LatheGeometry,OctahedronGeometry:OctahedronGeometry,PlaneGeometry:PlaneGeometry,PolyhedronGeometry:PolyhedronGeometry,RingGeometry:RingGeometry,ShapeGeometry:ShapeGeometry,SphereGeometry:SphereGeometry,TetrahedronGeometry:TetrahedronGeometry,TorusGeometry:TorusGeometry,TorusKnotGeometry:TorusKnotGeometry,TubeGeometry:TubeGeometry,WireframeGeometry:WireframeGeometry});/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */class ShadowMaterial extends Material{/**\n\t * Constructs a new shadow material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isShadowMaterial=true;this.type='ShadowMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.color=new Color(0x000000);/**\n\t\t * Overwritten since shadow materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.transparent=true;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.fog=source.fog;return this;}}/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */class RawShaderMaterial extends ShaderMaterial{/**\n\t * Constructs a new raw shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super(parameters);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isRawShaderMaterial=true;this.type='RawShaderMaterial';}}/**\n * A standard physically based material, using Metallic-Roughness workflow.\n *\n * Physically based rendering (PBR) has recently become the standard in many\n * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},\n * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and\n * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.\n *\n * This approach differs from older approaches in that instead of using\n * approximations for the way in which light interacts with a surface, a\n * physically correct model is used. The idea is that, instead of tweaking\n * materials to look good under specific lighting, a material can be created\n * that will react 'correctly' under all lighting scenarios.\n *\n * In practice this gives a more accurate and realistic looking result than\n * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of\n * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment\n * shading.\n *\n * Note that for best results you should always specify an environment map when using this material.\n *\n * For a non-technical introduction to the concept of PBR and how to set up a\n * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:\n *\n * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}\n * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}\n *\n * Technical details of the approach used in three.js (and most other PBR systems) can be found is this\n * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}\n * (pdf), by Brent Burley.\n *\n * @augments Material\n */class MeshStandardMaterial extends Material{/**\n\t * Constructs a new mesh standard material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshStandardMaterial=true;this.type='MeshStandardMaterial';this.defines={'STANDARD':''};/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);// diffuse\n/**\n\t\t * How rough the material appears. `0.0` means a smooth mirror reflection, `1.0`\n\t\t * means fully diffuse. If `roughnessMap` is also provided,\n\t\t * both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.roughness=1.0;/**\n\t\t * How much the material is like a metal. Non-metallic materials such as wood\n\t\t * or stone use `0.0`, metallic use `1.0`, with nothing (usually) in between.\n\t\t * A value between `0.0` and `1.0` could be used for a rusty metal look.\n\t\t * If `metalnessMap` is also provided, both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.metalness=0.0;/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.lightMap=null;/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.lightMapIntensity=1.0;/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.aoMap=null;/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aoMapIntensity=1.0;/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.emissive=new Color(0x000000);/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.emissiveIntensity=1.0;/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.emissiveMap=null;/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * The green channel of this texture is used to alter the roughness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.roughnessMap=null;/**\n\t\t * The blue channel of this texture is used to alter the metalness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.metalnessMap=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The environment map. To ensure a physically correct rendering, environment maps\n\t\t * are internally pre-processed with {@link PMREMGenerator}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.envMap=null;/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.envMapRotation=new Euler();/**\n\t\t * Scales the effect of the environment map by multiplying its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.envMapIntensity=1.0;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinecap='round';/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinejoin='round';/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flatShading=false;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapRotation.copy(source.envMapRotation);this.envMapIntensity=source.envMapIntensity;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;this.fog=source.fog;return this;}}/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */class MeshPhysicalMaterial extends MeshStandardMaterial{/**\n\t * Constructs a new mesh physical material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshPhysicalMaterial=true;this.defines={'STANDARD':'','PHYSICAL':''};this.type='MeshPhysicalMaterial';/**\n\t\t * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n\t\t * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n\t\t * property provides additional rotation to the vectors in the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.anisotropyRotation=0;/**\n\t\t * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n\t\t * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n\t\t * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.anisotropyMap=null;/**\n\t\t * The red channel of this texture is multiplied against `clearcoat`,\n\t\t * for per-pixel control over a coating's intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.clearcoatMap=null;/**\n\t\t * Roughness of the clear coat layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.clearcoatRoughness=0.0;/**\n\t\t * The green channel of this texture is multiplied against\n\t\t * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.clearcoatRoughnessMap=null;/**\n\t\t * How much `clearcoatNormalMap` affects the clear coat layer, from\n\t\t * `(0,0)` to `(1,1)`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.clearcoatNormalScale=new Vector2(1,1);/**\n\t\t * Can be used to enable independent normals for the clear coat layer.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.clearcoatNormalMap=null;/**\n\t\t * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.5\n\t\t */this.ior=1.5;/**\n\t\t * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n\t\t * corresponds to an index-of-refraction of `1.5`.\n\t\t *\n\t\t * This models the reflectivity of non-metallic materials. It has no effect\n\t\t * when `metalness` is `1.0`\n\t\t *\n\t\t * @name MeshPhysicalMaterial#reflectivity\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */Object.defineProperty(this,'reflectivity',{get:function(){return clamp(2.5*(this.ior-1)/(this.ior+1),0,1);},set:function(reflectivity){this.ior=(1+0.4*reflectivity)/(1-0.4*reflectivity);}});/**\n\t\t * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n\t\t * control over iridescence.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.iridescenceMap=null;/**\n\t\t * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n\t\t * Between `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.3\n\t\t */this.iridescenceIOR=1.3;/**\n\t\t *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n\t\t Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n\t\t *\n\t\t * @type {Array<number,number>}\n\t\t * @default [100,400]\n\t\t */this.iridescenceThicknessRange=[100,400];/**\n\t\t * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n\t\t * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n\t\t * - `0.0` in the green channel will result in thickness equal to first element of the array.\n\t\t * - `1.0` in the green channel will result in thickness equal to second element of the array.\n\t\t * - Values in-between will linearly interpolate between the elements of the array.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.iridescenceThicknessMap=null;/**\n\t\t * The sheen tint.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.sheenColor=new Color(0x000000);/**\n\t\t * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n\t\t * over sheen tint.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.sheenColorMap=null;/**\n\t\t * Roughness of the sheen layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.sheenRoughness=1.0;/**\n\t\t * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n\t\t * over sheen roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.sheenRoughnessMap=null;/**\n\t\t * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n\t\t * optical transparency.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.transmissionMap=null;/**\n\t\t * The thickness of the volume beneath the surface. The value is given in the\n\t\t * coordinate space of the mesh. If the value is `0` the material is\n\t\t * thin-walled. Otherwise the material is a volume boundary.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.thickness=0;/**\n\t\t * A texture that defines the thickness, stored in the green channel. This will\n\t\t * be multiplied by `thickness`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.thicknessMap=null;/**\n\t\t * Density of the medium given as the average distance that light travels in\n\t\t * the medium before interacting with a particle. The value is given in world\n\t\t * space units, and must be greater than zero.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */this.attenuationDistance=Infinity;/**\n\t\t * The color that white light turns into due to absorption when reaching the\n\t\t * attenuation distance.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.attenuationColor=new Color(1,1,1);/**\n\t\t * A float that scales the amount of specular reflection for non-metals only.\n\t\t * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.specularIntensity=1.0;/**\n\t\t * The alpha channel of this texture is multiplied against `specularIntensity`,\n\t\t * for per-pixel control over specular intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.specularIntensityMap=null;/**\n\t\t * Tints the specular reflection at normal incidence for non-metals only.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.specularColor=new Color(1,1,1);/**\n\t\t * The RGB channels of this texture are multiplied against `specularColor`,\n\t\t * for per-pixel control over specular color.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.specularColorMap=null;this._anisotropy=0;this._clearcoat=0;this._dispersion=0;this._iridescence=0;this._sheen=0.0;this._transmission=0;this.setValues(parameters);}/**\n\t * The anisotropy strength.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get anisotropy(){return this._anisotropy;}set anisotropy(value){if(this._anisotropy>0!==value>0){this.version++;}this._anisotropy=value;}/**\n\t * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n\t * clear coat related properties to enable multilayer materials that have a\n\t * thin translucent layer over the base layer.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get clearcoat(){return this._clearcoat;}set clearcoat(value){if(this._clearcoat>0!==value>0){this.version++;}this._clearcoat=value;}/**\n\t * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n\t * the surface and the viewer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get iridescence(){return this._iridescence;}set iridescence(value){if(this._iridescence>0!==value>0){this.version++;}this._iridescence=value;}/**\n\t * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n\t * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n\t * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get dispersion(){return this._dispersion;}set dispersion(value){if(this._dispersion>0!==value>0){this.version++;}this._dispersion=value;}/**\n\t * The intensity of the sheen layer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get sheen(){return this._sheen;}set sheen(value){if(this._sheen>0!==value>0){this.version++;}this._sheen=value;}/**\n\t * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n\t *\n\t * Thin, transparent or semitransparent, plastic or glass materials remain\n\t * largely reflective even if they are fully transmissive. The transmission\n\t * property can be used to model these materials.\n\t *\n\t * When transmission is non-zero, `opacity` should be  set to `1`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */get transmission(){return this._transmission;}set transmission(value){if(this._transmission>0!==value>0){this.version++;}this._transmission=value;}copy(source){super.copy(source);this.defines={'STANDARD':'','PHYSICAL':''};this.anisotropy=source.anisotropy;this.anisotropyRotation=source.anisotropyRotation;this.anisotropyMap=source.anisotropyMap;this.clearcoat=source.clearcoat;this.clearcoatMap=source.clearcoatMap;this.clearcoatRoughness=source.clearcoatRoughness;this.clearcoatRoughnessMap=source.clearcoatRoughnessMap;this.clearcoatNormalMap=source.clearcoatNormalMap;this.clearcoatNormalScale.copy(source.clearcoatNormalScale);this.dispersion=source.dispersion;this.ior=source.ior;this.iridescence=source.iridescence;this.iridescenceMap=source.iridescenceMap;this.iridescenceIOR=source.iridescenceIOR;this.iridescenceThicknessRange=[...source.iridescenceThicknessRange];this.iridescenceThicknessMap=source.iridescenceThicknessMap;this.sheen=source.sheen;this.sheenColor.copy(source.sheenColor);this.sheenColorMap=source.sheenColorMap;this.sheenRoughness=source.sheenRoughness;this.sheenRoughnessMap=source.sheenRoughnessMap;this.transmission=source.transmission;this.transmissionMap=source.transmissionMap;this.thickness=source.thickness;this.thicknessMap=source.thicknessMap;this.attenuationDistance=source.attenuationDistance;this.attenuationColor.copy(source.attenuationColor);this.specularIntensity=source.specularIntensity;this.specularIntensityMap=source.specularIntensityMap;this.specularColor.copy(source.specularColor);this.specularColorMap=source.specularColorMap;return this;}}/**\n * A material for shiny surfaces with specular highlights.\n *\n * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}\n * model for calculating reflectance. Unlike the Lambertian model used in the\n * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular\n * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.\n *\n * Performance will generally be greater when using this material over the\n * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of\n * some graphical accuracy.\n *\n * @augments Material\n */class MeshPhongMaterial extends Material{/**\n\t * Constructs a new mesh phong material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshPhongMaterial=true;this.type='MeshPhongMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);// diffuse\n/**\n\t\t * Specular color of the material. The default color is set to `0x111111` (very dark grey)\n\t\t *\n\t\t * This defines how shiny the material is and the color of its shine.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.specular=new Color(0x111111);/**\n\t\t * How shiny the specular highlight is; a higher value gives a sharper highlight.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 30\n\t\t */this.shininess=30;/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.lightMap=null;/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.lightMapIntensity=1.0;/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.aoMap=null;/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aoMapIntensity=1.0;/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.emissive=new Color(0x000000);/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.emissiveIntensity=1.0;/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.emissiveMap=null;/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * The specular map value affects both how much the specular surface\n\t\t * highlight contributes and how much of the environment map affects the\n\t\t * surface.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.specularMap=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.envMap=null;/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.envMapRotation=new Euler();/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */this.combine=MultiplyOperation;/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.reflectivity=1;/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */this.refractionRatio=0.98;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinecap='round';/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinejoin='round';/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flatShading=false;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapRotation.copy(source.envMapRotation);this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;this.fog=source.fog;return this;}}/**\n * A material implementing toon shading.\n *\n * @augments Material\n */class MeshToonMaterial extends Material{/**\n\t * Constructs a new mesh toon material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshToonMaterial=true;this.defines={'TOON':''};this.type='MeshToonMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * Gradient map for toon shading. It's required to set\n\t\t * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}\n\t\t * when using this type of texture.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.gradientMap=null;/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.lightMap=null;/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.lightMapIntensity=1.0;/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.aoMap=null;/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aoMapIntensity=1.0;/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.emissive=new Color(0x000000);/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.emissiveIntensity=1.0;/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.emissiveMap=null;/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinecap='round';/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinejoin='round';/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.gradientMap=source.gradientMap;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.fog=source.fog;return this;}}/**\n * A material that maps the normal vectors to RGB colors.\n *\n * @augments Material\n */class MeshNormalMaterial extends Material{/**\n\t * Constructs a new mesh normal material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshNormalMaterial=true;this.type='MeshNormalMaterial';/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flatShading=false;this.setValues(parameters);}copy(source){super.copy(source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.flatShading=source.flatShading;return this;}}/**\n * A material for non-shiny surfaces, without specular highlights.\n *\n * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}\n * model for calculating reflectance. This can simulate some surfaces (such\n * as untreated wood or stone) well, but cannot simulate shiny surfaces with\n * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment\n * shading.\n *\n * Due to the simplicity of the reflectance and illumination models,\n * performance will be greater when using this material over the\n * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or\n * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.\n *\n * @augments Material\n */class MeshLambertMaterial extends Material{/**\n\t * Constructs a new mesh lambert material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshLambertMaterial=true;this.type='MeshLambertMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);// diffuse\n/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.lightMap=null;/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.lightMapIntensity=1.0;/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.aoMap=null;/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aoMapIntensity=1.0;/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */this.emissive=new Color(0x000000);/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.emissiveIntensity=1.0;/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.emissiveMap=null;/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.specularMap=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.envMap=null;/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */this.envMapRotation=new Euler();/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */this.combine=MultiplyOperation;/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.reflectivity=1;/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */this.refractionRatio=0.98;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinecap='round';/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */this.wireframeLinejoin='round';/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flatShading=false;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapRotation.copy(source.envMapRotation);this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;this.fog=source.fog;return this;}}/**\n * A material for drawing geometry by depth. Depth is based off of the camera\n * near and far plane. White is nearest, black is farthest.\n *\n * @augments Material\n */class MeshDepthMaterial extends Material{/**\n\t * Constructs a new mesh depth material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshDepthMaterial=true;this.type='MeshDepthMaterial';/**\n\t\t * Type for depth packing.\n\t\t *\n\t\t * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}\n\t\t * @default BasicDepthPacking\n\t\t */this.depthPacking=BasicDepthPacking;/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.wireframe=false;/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.wireframeLinewidth=1;this.setValues(parameters);}copy(source){super.copy(source);this.depthPacking=source.depthPacking;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;}}/**\n * A material used internally for implementing shadow mapping with\n * point lights.\n *\n * Can also be used to customize the shadow casting of an object by assigning\n * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.\n * The following examples demonstrates this approach in order to ensure\n * transparent parts of objects do no cast shadows.\n *\n * @augments Material\n */class MeshDistanceMaterial extends Material{/**\n\t * Constructs a new mesh distance material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshDistanceMaterial=true;this.type='MeshDistanceMaterial';/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;this.setValues(parameters);}copy(source){super.copy(source);this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;}}/**\n * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the\n * material color and shading.\n *\n * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes\n * baked lighting. It will cast a shadow onto an object that receives shadows\n * (and shadow clipping works), but it will not self-shadow or receive\n * shadows.\n *\n * @augments Material\n */class MeshMatcapMaterial extends Material{/**\n\t * Constructs a new mesh matcap material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isMeshMatcapMaterial=true;this.defines={'MATCAP':''};this.type='MeshMatcapMaterial';/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */this.color=new Color(0xffffff);// diffuse\n/**\n\t\t * The matcap map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.matcap=null;/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.bumpMap=null;/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.bumpScale=1;/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.normalMap=null;/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */this.normalMapType=TangentSpaceNormalMap;/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */this.normalScale=new Vector2(1,1);/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.displacementMap=null;/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementScale=1;/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.displacementBias=0;/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.alphaMap=null;/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.flatShading=false;/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.fog=true;this.setValues(parameters);}copy(source){super.copy(source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.matcap;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.flatShading=source.flatShading;this.fog=source.fog;return this;}}/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineDashedMaterial( {\n * \tcolor: 0xffffff,\n * \tscale: 1,\n * \tdashSize: 3,\n * \tgapSize: 1,\n * } );\n * ```\n *\n * @augments LineBasicMaterial\n */class LineDashedMaterial extends LineBasicMaterial{/**\n\t * Constructs a new line dashed material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */constructor(parameters){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLineDashedMaterial=true;this.type='LineDashedMaterial';/**\n\t\t * The scale of the dashed part of a line.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.scale=1;/**\n\t\t * The size of the dash. This is both the gap with the stroke.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 3\n\t\t */this.dashSize=3;/**\n\t\t * The size of the gap.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.gapSize=1;this.setValues(parameters);}copy(source){super.copy(source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;}}/**\n * Converts an array to a specific type.\n *\n * @param {TypedArray|Array} array - The array to convert.\n * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.\n * @return {TypedArray} The converted array.\n */function convertArray(array,type){if(!array||array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array\n}return Array.prototype.slice.call(array);// create Array\n}/**\n * Returns `true` if the given object is a typed array.\n *\n * @param {any} object - The object to check.\n * @return {boolean} Whether the given object is a typed array.\n */function isTypedArray(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView);}/**\n * Returns an array by which times and values can be sorted.\n *\n * @param {Array<number>} times - The keyframe time values.\n * @return {Array<number>} The array.\n */function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j];}const n=times.length;const result=new Array(n);for(let i=0;i!==n;++i)result[i]=i;result.sort(compareTime);return result;}/**\n * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n *\n * @param {Array<number>} values - The values to sort.\n * @param {number} stride - The stride.\n * @param {Array<number>} order - The sort order.\n * @return {Array<number>} The sorted values.\n */function sortedArray(values,stride,order){const nValues=values.length;const result=new values.constructor(nValues);for(let i=0,dstOffset=0;dstOffset!==nValues;++i){const srcOffset=order[i]*stride;for(let j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;}/**\n * Used for parsing AOS keyframe formats.\n *\n * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n * @param {Array<number>} times - This array will be filled with keyframe times by this function.\n * @param {Array<number>} values - This array will be filled with keyframe values by this function.\n * @param {string} valuePropertyName - The name of the property to use.\n */function flattenJSON(jsonKeys,times,values,valuePropertyName){let i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data\nlet value=key[valuePropertyName];if(value===undefined)return;// no data\nif(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(...value);// push all elements\n}key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish\ndo{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else{// otherwise push as-is\ndo{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}}/**\n * Creates a new clip, containing only the segment of the original clip between the given frames.\n *\n * @param {AnimationClip} sourceClip - The values to sort.\n * @param {string} name - The name of the clip.\n * @param {number} startFrame - The start frame.\n * @param {number} endFrame - The end frame.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The new sub clip.\n */function subclip(sourceClip,name,startFrame,endFrame,fps=30){const clip=sourceClip.clone();clip.name=name;const tracks=[];for(let i=0;i<clip.tracks.length;++i){const track=clip.tracks[i];const valueSize=track.getValueSize();const times=[];const values=[];for(let j=0;j<track.times.length;++j){const frame=track.times[j]*fps;if(frame<startFrame||frame>=endFrame)continue;times.push(track.times[j]);for(let k=0;k<valueSize;++k){values.push(track.values[j*valueSize+k]);}}if(times.length===0)continue;track.times=convertArray(times,track.times.constructor);track.values=convertArray(values,track.values.constructor);tracks.push(track);}clip.tracks=tracks;// find minimum .times value across all tracks in the trimmed clip\nlet minStartTime=Infinity;for(let i=0;i<clip.tracks.length;++i){if(minStartTime>clip.tracks[i].times[0]){minStartTime=clip.tracks[i].times[0];}}// shift all tracks such that clip begins at t=0\nfor(let i=0;i<clip.tracks.length;++i){clip.tracks[i].shift(-1*minStartTime);}clip.resetDuration();return clip;}/**\n * Converts the keyframes of the given animation clip to an additive format.\n *\n * @param {AnimationClip} targetClip - The clip to make additive.\n * @param {number} [referenceFrame=0] - The reference frame.\n * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The updated clip which is now additive.\n */function makeClipAdditive(targetClip,referenceFrame=0,referenceClip=targetClip,fps=30){if(fps<=0)fps=30;const numTracks=referenceClip.tracks.length;const referenceTime=referenceFrame/fps;// Make each track's values relative to the values at the reference frame\nfor(let i=0;i<numTracks;++i){const referenceTrack=referenceClip.tracks[i];const referenceTrackType=referenceTrack.ValueTypeName;// Skip this track if it's non-numeric\nif(referenceTrackType==='bool'||referenceTrackType==='string')continue;// Find the track in the target clip whose name and type matches the reference track\nconst targetTrack=targetClip.tracks.find(function(track){return track.name===referenceTrack.name&&track.ValueTypeName===referenceTrackType;});if(targetTrack===undefined)continue;let referenceOffset=0;const referenceValueSize=referenceTrack.getValueSize();if(referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){referenceOffset=referenceValueSize/3;}let targetOffset=0;const targetValueSize=targetTrack.getValueSize();if(targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){targetOffset=targetValueSize/3;}const lastIndex=referenceTrack.times.length-1;let referenceValue;// Find the value to subtract out of the track\nif(referenceTime<=referenceTrack.times[0]){// Reference frame is earlier than the first keyframe, so just use the first keyframe\nconst startIndex=referenceOffset;const endIndex=referenceValueSize-referenceOffset;referenceValue=referenceTrack.values.slice(startIndex,endIndex);}else if(referenceTime>=referenceTrack.times[lastIndex]){// Reference frame is after the last keyframe, so just use the last keyframe\nconst startIndex=lastIndex*referenceValueSize+referenceOffset;const endIndex=startIndex+referenceValueSize-referenceOffset;referenceValue=referenceTrack.values.slice(startIndex,endIndex);}else{// Interpolate to the reference value\nconst interpolant=referenceTrack.createInterpolant();const startIndex=referenceOffset;const endIndex=referenceValueSize-referenceOffset;interpolant.evaluate(referenceTime);referenceValue=interpolant.resultBuffer.slice(startIndex,endIndex);}// Conjugate the quaternion\nif(referenceTrackType==='quaternion'){const referenceQuat=new Quaternion().fromArray(referenceValue).normalize().conjugate();referenceQuat.toArray(referenceValue);}// Subtract the reference value from all of the track values\nconst numTimes=targetTrack.times.length;for(let j=0;j<numTimes;++j){const valueStart=j*targetValueSize+targetOffset;if(referenceTrackType==='quaternion'){// Multiply the conjugate for quaternion track types\nQuaternion.multiplyQuaternionsFlat(targetTrack.values,valueStart,referenceValue,0,targetTrack.values,valueStart);}else{const valueEnd=targetValueSize-targetOffset*2;// Subtract each value for all other numeric track types\nfor(let k=0;k<valueEnd;++k){targetTrack.values[valueStart+k]-=referenceValue[k];}}}}targetClip.blendMode=AdditiveAnimationBlendMode;return targetClip;}/**\n * A class with various methods to assist with animations.\n *\n * @hideconstructor\n */class AnimationUtils{/**\n\t * Converts an array to a specific type\n\t *\n\t * @static\n\t * @param {TypedArray|Array} array - The array to convert.\n\t * @param {TypedArray.constructor} type - The constructor of a type array.\n\t * @return {TypedArray} The converted array\n\t */static convertArray(array,type){return convertArray(array,type);}/**\n\t * Returns `true` if the given object is a typed array.\n\t *\n\t * @static\n\t * @param {any} object - The object to check.\n\t * @return {boolean} Whether the given object is a typed array.\n\t */static isTypedArray(object){return isTypedArray(object);}/**\n\t * Returns an array by which times and values can be sorted.\n\t *\n\t * @static\n\t * @param {Array<number>} times - The keyframe time values.\n\t * @return {Array<number>} The array.\n\t */static getKeyframeOrder(times){return getKeyframeOrder(times);}/**\n\t * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n\t *\n\t * @static\n\t * @param {Array<number>} values - The values to sort.\n\t * @param {number} stride - The stride.\n\t * @param {Array<number>} order - The sort order.\n\t * @return {Array<number>} The sorted values.\n\t */static sortedArray(values,stride,order){return sortedArray(values,stride,order);}/**\n\t * Used for parsing AOS keyframe formats.\n\t *\n\t * @static\n\t * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n\t * @param {Array<number>} times - This array will be filled with keyframe times by this method.\n\t * @param {Array<number>} values - This array will be filled with keyframe values by this method.\n\t * @param {string} valuePropertyName - The name of the property to use.\n\t */static flattenJSON(jsonKeys,times,values,valuePropertyName){flattenJSON(jsonKeys,times,values,valuePropertyName);}/**\n\t * Creates a new clip, containing only the segment of the original clip between the given frames.\n\t *\n\t * @static\n\t * @param {AnimationClip} sourceClip - The values to sort.\n\t * @param {string} name - The name of the clip.\n\t * @param {number} startFrame - The start frame.\n\t * @param {number} endFrame - The end frame.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The new sub clip.\n\t */static subclip(sourceClip,name,startFrame,endFrame,fps=30){return subclip(sourceClip,name,startFrame,endFrame,fps);}/**\n\t * Converts the keyframes of the given animation clip to an additive format.\n\t *\n\t * @static\n\t * @param {AnimationClip} targetClip - The clip to make additive.\n\t * @param {number} [referenceFrame=0] - The reference frame.\n\t * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The updated clip which is now additive.\n\t */static makeClipAdditive(targetClip,referenceFrame=0,referenceClip=targetClip,fps=30){return makeClipAdditive(targetClip,referenceFrame,referenceClip,fps);}}/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */class Interpolant{/**\n\t * Constructs a new interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){/**\n\t\t * The parameter positions.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.parameterPositions=parameterPositions;/**\n\t\t * A cache index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this._cachedIndex=0;/**\n\t\t * The result buffer.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);/**\n\t\t * The sample values.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.sampleValues=sampleValues;/**\n\t\t * The value size.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */this.valueSize=sampleSize;/**\n\t\t * The interpolation settings.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */this.settings=null;/**\n\t\t * The default settings object.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.DefaultSettings_={};}/**\n\t * Evaluate the interpolant at position `t`.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */evaluate(t){const pp=this.parameterPositions;let i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{let right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3\n//- slower code:\n//-\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\nforward_scan:if(!(t<t1)){for(let giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end\ni1=pp.length;this._cachedIndex=i1;return this.copySampleValue_(i1-1);}if(i1===giveUpAt)break;// this loop\nt0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval\nbreak seek;}}// prepare binary search on the right side of the index\nright=pp.length;break linear_scan;}//- slower code:\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\nif(!(t>=t0)){// looping?\nconst t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details\nt0=t1global;}// linear reverse scan\nfor(let giveUpAt=i1-2;;){if(t0===undefined){// before start\nthis._cachedIndex=0;return this.copySampleValue_(0);}if(i1===giveUpAt)break;// this loop\nt1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval\nbreak seek;}}// prepare binary search on the left side of the index\nright=i1;i1=0;break linear_scan;}// the interval is valid\nbreak validate_interval;}// linear scan\n// binary search\nwhile(i1<right){const mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else{i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again\nif(t0===undefined){this._cachedIndex=0;return this.copySampleValue_(0);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.copySampleValue_(i1-1);}}// seek\nthis._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval\nreturn this.interpolate_(i1,t0,t,t1);}/**\n\t * Returns the interpolation settings.\n\t *\n\t * @return {Object} The interpolation settings.\n\t */getSettings_(){return this.settings||this.DefaultSettings_;}/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @param {number} index - An index into the sample value buffer.\n\t * @return {TypedArray} The result buffer.\n\t */copySampleValue_(index){// copies a sample value to the result buffer\nconst result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(let i=0;i!==stride;++i){result[i]=values[offset+i];}return result;}/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @abstract\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t * @param {number} t1 - The next interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */interpolate_(/* i1, t0, t, t1 */){throw new Error('call to abstract method');// implementations shall return this.resultBuffer\n}/**\n\t * Optional method that is executed when the interval has changed.\n\t *\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t */intervalChanged_(/* i1, t0, t1 */){// empty\n}}/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */class CubicInterpolant extends Interpolant{/**\n\t * Constructs a new cubic interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};}intervalChanged_(i1,t0,t1){const pp=this.parameterPositions;let iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0\niPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve\niPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding\n// f''(t0) = 0 a.k.a. Natural Spline\niPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0\niNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve\niNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding\n// f''(tN) = 0, a.k.a. Natural Spline\niNext=i1-1;tNext=t0;}}const halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials\nconst sP=-wP*ppp+2*wP*pp-wP*p;const s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;const s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;const sN=wN*ppp-wN*pp;// combine data linearly\nfor(let i=0;i!==stride;++i){result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];}return result;}}/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */class LinearInterpolant extends Interpolant{/**\n\t * Constructs a new linear interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(let i=0;i!==stride;++i){result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;}return result;}}/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */class DiscreteInterpolant extends Interpolant{/**\n\t * Constructs a new discrete interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}}/**\n * Represents s a timed sequence of keyframes, which are composed of lists of\n * times and related values, and which are used to animate a specific property\n * of an object.\n */class KeyframeTrack{/**\n\t * Constructs a new keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */constructor(name,times,values,interpolation){if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);/**\n\t\t * The track's name can refer to morph targets or bones or\n\t\t * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}\n\t\t * for the forms of strings that can be parsed for property binding.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name=name;/**\n\t\t * The keyframe times.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */this.times=convertArray(times,this.TimeBufferType);/**\n\t\t * The keyframe values.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */this.values=convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}/**\n\t * Converts the keyframe track to JSON.\n\t *\n\t * @static\n\t * @param {KeyframeTrack} track - The keyframe track to serialize.\n\t * @return {Object} The serialized keyframe track as JSON.\n\t */static toJSON(track){const trackType=track.constructor;let json;// derived classes can define a static toJSON method\nif(trackType.toJSON!==this.toJSON){json=trackType.toJSON(track);}else{// by default, we assume the data can be serialized as-is\njson={'name':track.name,'times':convertArray(track.times,Array),'values':convertArray(track.values,Array)};const interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory\nreturn json;}/**\n\t * Factory method for creating a new discrete interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {DiscreteInterpolant} The new interpolant.\n\t */InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);}/**\n\t * Factory method for creating a new linear interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {LinearInterpolant} The new interpolant.\n\t */InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);}/**\n\t * Factory method for creating a new smooth interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {CubicInterpolant} The new interpolant.\n\t */InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);}/**\n\t * Defines the interpolation factor method for this keyframe track.\n\t *\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */setInterpolation(interpolation){let factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){const message='unsupported interpolation for '+this.ValueTypeName+' keyframe track named '+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up\nif(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else{throw new Error(message);// fatal, in this case\n}}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;}/**\n\t * Returns the current interpolation type.\n\t *\n\t * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.\n\t */getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}}/**\n\t * Returns the value size.\n\t *\n\t * @return {number} The value size.\n\t */getValueSize(){return this.values.length/this.times.length;}/**\n\t * Moves all keyframes either forward or backward in time.\n\t *\n\t * @param {number} timeOffset - The offset to move the time values.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */shift(timeOffset){if(timeOffset!==0.0){const times=this.times;for(let i=0,n=times.length;i!==n;++i){times[i]+=timeOffset;}}return this;}/**\n\t * Scale all keyframe times by a factor (useful for frame - seconds conversions).\n\t *\n\t * @param {number} timeScale - The time scale.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */scale(timeScale){if(timeScale!==1.0){const times=this.times;for(let i=0,n=times.length;i!==n;++i){times[i]*=timeScale;}}return this;}/**\n\t * Removes keyframes before and after animation without changing any values within the defined time range.\n\t *\n\t * Note: The method does not shift around keys to the start of the track time, because for interpolated\n\t * keys this will change their values\n\t *\n\t * @param {number} startTime - The start time.\n\t * @param {number} endTime - The end time.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */trim(startTime,endTime){const times=this.times,nKeys=times.length;let from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound\nif(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe\nif(from>=to){to=Math.max(to,1);from=to-1;}const stride=this.getValueSize();this.times=times.slice(from,to);this.values=this.values.slice(from*stride,to*stride);}return this;}/**\n\t * Performs minimal validation on the keyframe track. Returns `true` if the values\n\t * are valid.\n\t *\n\t * @return {boolean} Whether the keyframes are valid or not.\n\t */validate(){let valid=true;const valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}const times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}let prevTime=null;for(let i=0;i!==nKeys;i++){const currTime=times[i];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,i,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,i,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(isTypedArray(values)){for(let i=0,n=values.length;i!==n;++i){const value=values[i];if(isNaN(value)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,i,value);valid=false;break;}}}}return valid;}/**\n\t * Optimizes this keyframe track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */optimize(){// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n// times or values may be shared with other tracks, so overwriting is unsafe\nconst times=this.times.slice(),values=this.values.slice(),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,lastIndex=times.length-1;let writeIndex=1;for(let i=1;i<lastIndex;++i){let keep=false;const time=times[i];const timeNext=times[i+1];// remove adjacent keyframes scheduled at the same time\nif(time!==timeNext&&(i!==1||time!==times[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors\nconst offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(let j=0;j!==stride;++j){const value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=true;break;}}}else{keep=true;}}// in-place compaction\nif(keep){if(i!==writeIndex){times[writeIndex]=times[i];const readOffset=i*stride,writeOffset=writeIndex*stride;for(let j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)\nif(lastIndex>0){times[writeIndex]=times[lastIndex];for(let readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}++writeIndex;}if(writeIndex!==times.length){this.times=times.slice(0,writeIndex);this.values=values.slice(0,writeIndex*stride);}else{this.times=times;this.values=values;}return this;}/**\n\t * Returns a new keyframe track with copied values from this instance.\n\t *\n\t * @return {KeyframeTrack} A clone of this instance.\n\t */clone(){const times=this.times.slice();const values=this.values.slice();const TypedKeyframeTrack=this.constructor;const track=new TypedKeyframeTrack(this.name,times,values);// Interpolant argument to constructor is not saved, so copy the factory method directly.\ntrack.createInterpolant=this.createInterpolant;return track;}}/**\n * The value type name.\n *\n * @type {String}\n * @default ''\n */KeyframeTrack.prototype.ValueTypeName='';/**\n * The time buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */KeyframeTrack.prototype.TimeBufferType=Float32Array;/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */KeyframeTrack.prototype.ValueBufferType=Float32Array;/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateLinear\n */KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;/**\n * A track for boolean keyframe values.\n *\n * @augments KeyframeTrack\n */class BooleanKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new boolean keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */constructor(name,times,values){super(name,times,values);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'bool'\n */BooleanKeyframeTrack.prototype.ValueTypeName='bool';/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */BooleanKeyframeTrack.prototype.ValueBufferType=Array;/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**\n * A track for color keyframe values.\n *\n * @augments KeyframeTrack\n */class ColorKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new color keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */constructor(name,times,values,interpolation){super(name,times,values,interpolation);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'color'\n */ColorKeyframeTrack.prototype.ValueTypeName='color';/**\n * A track for numeric keyframe values.\n *\n * @augments KeyframeTrack\n */class NumberKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new number keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */constructor(name,times,values,interpolation){super(name,times,values,interpolation);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'number'\n */NumberKeyframeTrack.prototype.ValueTypeName='number';/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */class QuaternionLinearInterpolant extends Interpolant{/**\n\t * Constructs a new SLERP interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */constructor(parameterPositions,sampleValues,sampleSize,resultBuffer){super(parameterPositions,sampleValues,sampleSize,resultBuffer);}interpolate_(i1,t0,t,t1){const result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,alpha=(t-t0)/(t1-t0);let offset=i1*stride;for(let end=offset+stride;offset!==end;offset+=4){Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);}return result;}}/**\n * A track for Quaternion keyframe values.\n *\n * @augments KeyframeTrack\n */class QuaternionKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new Quaternion keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */constructor(name,times,values,interpolation){super(name,times,values,interpolation);}/**\n\t * Overwritten so the method returns Quaternion based interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {QuaternionLinearInterpolant} The new interpolant.\n\t */InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'quaternion'\n */QuaternionKeyframeTrack.prototype.ValueTypeName='quaternion';// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**\n * A track for string keyframe values.\n *\n * @augments KeyframeTrack\n */class StringKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new string keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */constructor(name,times,values){super(name,times,values);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'string'\n */StringKeyframeTrack.prototype.ValueTypeName='string';/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */StringKeyframeTrack.prototype.ValueBufferType=Array;/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**\n * A track for vector keyframe values.\n *\n * @augments KeyframeTrack\n */class VectorKeyframeTrack extends KeyframeTrack{/**\n\t * Constructs a new vector keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */constructor(name,times,values,interpolation){super(name,times,values,interpolation);}}/**\n * The value type name.\n *\n * @type {String}\n * @default 'vector'\n */VectorKeyframeTrack.prototype.ValueTypeName='vector';/**\n * A reusable set of keyframe tracks which represent an animation.\n */class AnimationClip{/**\n\t * Constructs a new animation clip.\n\t *\n\t * Note: Instead of instantiating an AnimationClip directly with the constructor, you can\n\t * use the static interface of this class for creating clips. In most cases though, animation clips\n\t * will automatically be created by loaders when importing animated 3D assets.\n\t *\n\t * @param {string} [name=''] - The clip's name.\n\t * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,\n\t * the duration will be calculated from the passed keyframes.\n\t * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation\n\t * is blended/combined when two or more animations are simultaneously played.\n\t */constructor(name='',duration=-1,tracks=[],blendMode=NormalAnimationBlendMode){/**\n\t\t * The clip's name.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name=name;/**\n\t\t *  An array of keyframe tracks.\n\t\t *\n\t\t * @type {Array<KeyframeTrack>}\n\t\t */this.tracks=tracks;/**\n\t\t * The clip's duration in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t */this.duration=duration;/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */this.blendMode=blendMode;/**\n\t\t * The UUID of the animation clip.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();// this means it should figure out its duration by scanning the tracks\nif(this.duration<0){this.resetDuration();}}/**\n\t * Factory method for creating an animation clip from the given JSON.\n\t *\n\t * @static\n\t * @param {Object} json - The serialized animation clip.\n\t * @return {AnimationClip} The new animation clip.\n\t */static parse(json){const tracks=[],jsonTracks=json.tracks,frameTime=1.0/(json.fps||1.0);for(let i=0,n=jsonTracks.length;i!==n;++i){tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));}const clip=new this(json.name,json.duration,tracks,json.blendMode);clip.uuid=json.uuid;return clip;}/**\n\t * Serializes the given animation clip into JSON.\n\t *\n\t * @static\n\t * @param {AnimationClip} clip - The animation clip to serialize.\n\t * @return {Object} The JSON object.\n\t */static toJSON(clip){const tracks=[],clipTracks=clip.tracks;const json={'name':clip.name,'duration':clip.duration,'tracks':tracks,'uuid':clip.uuid,'blendMode':clip.blendMode};for(let i=0,n=clipTracks.length;i!==n;++i){tracks.push(KeyframeTrack.toJSON(clipTracks[i]));}return json;}/**\n\t * Returns a new animation clip from the passed morph targets array of a\n\t * geometry, taking a name and the number of frames per second.\n\t *\n\t * Note: The fps parameter is required, but the animation speed can be\n\t * overridden via {@link AnimationAction#setDuration}.\n\t *\n\t * @static\n\t * @param {string} name - The name of the animation clip.\n\t * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {AnimationClip} The new animation clip.\n\t */static CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){const numMorphTargets=morphTargetSequence.length;const tracks=[];for(let i=0;i<numMorphTargets;i++){let times=[];let values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets);values.push(0,1,0);const order=getKeyframeOrder(times);times=sortedArray(times,1,order);values=sortedArray(values,1,order);// if there is a key at the first frame, duplicate it as the\n// last frame as well for perfect loop.\nif(!noLoop&&times[0]===0){times.push(numMorphTargets);values.push(values[0]);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluences['+morphTargetSequence[i].name+']',times,values).scale(1.0/fps));}return new this(name,-1,tracks);}/**\n\t * Searches for an animation clip by name, taking as its first parameter\n\t * either an array of clips, or a mesh or geometry that contains an\n\t * array named \"animations\" property.\n\t *\n\t * @static\n\t * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.\n\t * @param {string} name - The name to search for.\n\t * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.\n\t */static findByName(objectOrClipArray,name){let clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){const o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations;}for(let i=0;i<clipArray.length;i++){if(clipArray[i].name===name){return clipArray[i];}}return null;}/**\n\t * Returns an array of new AnimationClips created from the morph target\n\t * sequences of a geometry, trying to sort morph target names into\n\t * animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002...\".\n\t *\n\t * See {@link MD2Loader#parse} as an example for how the method should be used.\n\t *\n\t * @static\n\t * @param {Array<Object>} morphTargets - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {Array<AnimationClip>} An array of new animation clips.\n\t */static CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){const animationToMorphTargets={};// tested with https://regex101.com/ on trick sequences\n// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\nconst pattern=/^([\\w-]*?)([\\d]+)$/;// sort morph target names into animation groups based\n// patterns like Walk_001, Walk_002, Run_001, Run_002\nfor(let i=0,il=morphTargets.length;i<il;i++){const morphTarget=morphTargets[i];const parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){const name=parts[1];let animationMorphTargets=animationToMorphTargets[name];if(!animationMorphTargets){animationToMorphTargets[name]=animationMorphTargets=[];}animationMorphTargets.push(morphTarget);}}const clips=[];for(const name in animationToMorphTargets){clips.push(this.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));}return clips;}/**\n\t * Parses the `animation.hierarchy` format and returns a new animation clip.\n\t *\n\t * @static\n\t * @deprecated since r175.\n\t * @param {Object} animation - A serialized animation clip as JSON.\n\t * @param {Array<Bones>} bones - An array of bones.\n\t * @return {?AnimationClip} The new animation clip.\n\t */static parseAnimation(animation,bones){console.warn('THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185');if(!animation){console.error('THREE.AnimationClip: No animation in JSONLoader data.');return null;}const addNonemptyTrack=function(trackType,trackName,animationKeys,propertyName,destTracks){// only return track if there are actually keys.\nif(animationKeys.length!==0){const times=[];const values=[];flattenJSON(animationKeys,times,values,propertyName);// empty keys are filtered out, so check again\nif(times.length!==0){destTracks.push(new trackType(trackName,times,values));}}};const tracks=[];const clipName=animation.name||'default';const fps=animation.fps||30;const blendMode=animation.blendMode;// automatic length determination in AnimationClip.\nlet duration=animation.length||-1;const hierarchyTracks=animation.hierarchy||[];for(let h=0;h<hierarchyTracks.length;h++){const animationKeys=hierarchyTracks[h].keys;// skip empty tracks\nif(!animationKeys||animationKeys.length===0)continue;// process morph targets\nif(animationKeys[0].morphTargets){// figure out all morph targets used in this track\nconst morphTargetNames={};let k;for(k=0;k<animationKeys.length;k++){if(animationKeys[k].morphTargets){for(let m=0;m<animationKeys[k].morphTargets.length;m++){morphTargetNames[animationKeys[k].morphTargets[m]]=-1;}}}// create a track for each morph target with all zero\n// morphTargetInfluences except for the keys in which\n// the morphTarget is named.\nfor(const morphTargetName in morphTargetNames){const times=[];const values=[];for(let m=0;m!==animationKeys[k].morphTargets.length;++m){const animationKey=animationKeys[k];times.push(animationKey.time);values.push(animationKey.morphTarget===morphTargetName?1:0);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluence['+morphTargetName+']',times,values));}duration=morphTargetNames.length*fps;}else{// ...assume skeletal animation\nconst boneName='.bones['+bones[h].name+']';addNonemptyTrack(VectorKeyframeTrack,boneName+'.position',animationKeys,'pos',tracks);addNonemptyTrack(QuaternionKeyframeTrack,boneName+'.quaternion',animationKeys,'rot',tracks);addNonemptyTrack(VectorKeyframeTrack,boneName+'.scale',animationKeys,'scl',tracks);}}if(tracks.length===0){return null;}const clip=new this(clipName,duration,tracks,blendMode);return clip;}/**\n\t * Sets the duration of this clip to the duration of its longest keyframe track.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */resetDuration(){const tracks=this.tracks;let duration=0;for(let i=0,n=tracks.length;i!==n;++i){const track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1]);}this.duration=duration;return this;}/**\n\t * Trims all tracks to the clip's duration.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */trim(){for(let i=0;i<this.tracks.length;i++){this.tracks[i].trim(0,this.duration);}return this;}/**\n\t * Performs minimal validation on each track in the clip. Returns `true` if all\n\t * tracks are valid.\n\t *\n\t * @return {boolean} Whether the clip's keyframes are valid or not.\n\t */validate(){let valid=true;for(let i=0;i<this.tracks.length;i++){valid=valid&&this.tracks[i].validate();}return valid;}/**\n\t * Optimizes each track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */optimize(){for(let i=0;i<this.tracks.length;i++){this.tracks[i].optimize();}return this;}/**\n\t * Returns a new animation clip with copied values from this instance.\n\t *\n\t * @return {AnimationClip} A clone of this instance.\n\t */clone(){const tracks=[];for(let i=0;i<this.tracks.length;i++){tracks.push(this.tracks[i].clone());}return new this.constructor(this.name,this.duration,tracks,this.blendMode);}/**\n\t * Serializes this animation clip into JSON.\n\t *\n\t * @return {Object} The JSON object.\n\t */toJSON(){return this.constructor.toJSON(this);}}function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case'scalar':case'double':case'float':case'number':case'integer':return NumberKeyframeTrack;case'vector':case'vector2':case'vector3':case'vector4':return VectorKeyframeTrack;case'color':return ColorKeyframeTrack;case'quaternion':return QuaternionKeyframeTrack;case'bool':case'boolean':return BooleanKeyframeTrack;case'string':return StringKeyframeTrack;}throw new Error('THREE.KeyframeTrack: Unsupported typeName: '+typeName);}function parseKeyframeTrack(json){if(json.type===undefined){throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');}const trackType=getTrackTypeForValueTypeName(json.type);if(json.times===undefined){const times=[],values=[];flattenJSON(json.keys,times,values,'value');json.times=times;json.values=values;}// derived classes can define a static parse method\nif(trackType.parse!==undefined){return trackType.parse(json);}else{// by default, we assume a constructor compatible with the base\nreturn new trackType(json.name,json.times,json.values,json.interpolation);}}/**\n * @class\n * @classdesc A simple caching system, used internally by {@link FileLoader}.\n * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.\n * @hideconstructor\n */const Cache={/**\n\t * Whether caching is enabled or not.\n\t *\n\t * @static\n\t * @type {boolean}\n\t * @default false\n\t */enabled:false,/**\n\t * A dictionary that holds cached files.\n\t *\n\t * @static\n\t * @type {Object<string,Object>}\n\t */files:{},/**\n\t * Adds a cache entry with a key to reference the file. If this key already\n\t * holds a file, it is overwritten.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @param {Object} file -  The file to be cached.\n\t */add:function(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );\nthis.files[key]=file;},/**\n\t * Gets the cached value for the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.\n\t */get:function(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );\nreturn this.files[key];},/**\n\t * Removes the cached file associated with the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t */remove:function(key){delete this.files[key];},/**\n\t * Remove all values from the cache.\n\t *\n\t * @static\n\t */clear:function(){this.files={};}};/**\n * Handles and keeps track of loaded and pending data. A default global\n * instance of this class is created and used by loaders if not supplied\n * manually.\n *\n * In general that should be sufficient, however there are times when it can\n * be useful to have separate loaders - for example if you want to show\n * separate loading bars for objects and textures.\n *\n * ```js\n * const manager = new THREE.LoadingManager();\n * manager.onLoad = () => console.log( 'Loading complete!' );\n *\n * const loader1 = new OBJLoader( manager );\n * const loader2 = new ColladaLoader( manager );\n * ```\n */class LoadingManager{/**\n\t * Constructs a new loading manager.\n\t *\n\t * @param {Function} [onLoad] - Executes when all items have been loaded.\n\t * @param {Function} [onProgress] - Executes when single items have been loaded.\n\t * @param {Function} [onError] - Executes when an error occurs.\n\t */constructor(onLoad,onProgress,onError){const scope=this;let isLoading=false;let itemsLoaded=0;let itemsTotal=0;let urlModifier=undefined;const handlers=[];// Refer to #5689 for the reason why we don't set .onStart\n// in the constructor\n/**\n\t\t * Executes when an item starts loading.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */this.onStart=undefined;/**\n\t\t * Executes when all items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */this.onLoad=onLoad;/**\n\t\t * Executes when single items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */this.onProgress=onProgress;/**\n\t\t * Executes when an error occurs.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */this.onError=onError;/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * starts loading an item.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t */this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * ended loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the loaded item.\n\t\t */this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * encounters an error when loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the item that produces an error.\n\t\t */this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};/**\n\t\t * Given a URL, uses the URL modifier callback (if any) and returns a\n\t\t * resolved URL. If no URL modifier is set, returns the original URL.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t * @return {string} The resolved URL.\n\t\t */this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};/**\n\t\t * If provided, the callback will be passed each resource URL before a\n\t\t * request is sent. The callback may return the original URL, or a new URL to\n\t\t * override loading behavior. This behavior can be used to load assets from\n\t\t * .ZIP files, drag-and-drop APIs, and Data URIs.\n\t\t *\n\t\t * ```js\n\t\t * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};\n\t\t *\n\t\t * const manager = new THREE.LoadingManager();\n\t\t *\n\t\t * // Initialize loading manager with URL callback.\n\t\t * const objectURLs = [];\n\t\t * manager.setURLModifier( ( url ) => {\n\t\t *\n\t\t * \turl = URL.createObjectURL( blobs[ url ] );\n\t\t * \tobjectURLs.push( url );\n\t\t * \treturn url;\n\t\t *\n\t\t * } );\n\t\t *\n\t\t * // Load as usual, then revoke the blob URLs.\n\t\t * const loader = new GLTFLoader( manager );\n\t\t * loader.load( 'fish.gltf', (gltf) => {\n\t\t *\n\t\t * \tscene.add( gltf.scene );\n\t\t * \tobjectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );\n\t\t *\n\t\t * } );\n\t\t * ```\n\t\t *\n\t\t * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */this.setURLModifier=function(transform){urlModifier=transform;return this;};/**\n\t\t * Registers a loader with the given regular expression. Can be used to\n\t\t * define what loader should be used in order to load specific files. A\n\t\t * typical use case is to overwrite the default loader for textures.\n\t\t *\n\t\t * ```js\n\t\t * // add handler for TGA textures\n\t\t * manager.addHandler( /\\.tga$/i, new TGALoader() );\n\t\t * ```\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @param {Loader} loader - A loader that should handle matched cases.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */this.addHandler=function(regex,loader){handlers.push(regex,loader);return this;};/**\n\t\t * Removes the loader for the given regular expression.\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */this.removeHandler=function(regex){const index=handlers.indexOf(regex);if(index!==-1){handlers.splice(index,2);}return this;};/**\n\t\t * Can be used to retrieve the registered loader for the given file path.\n\t\t *\n\t\t * @param {string} file - The file path.\n\t\t * @return {?Loader} The registered loader. Returns `null` if no loader was found.\n\t\t */this.getHandler=function(file){for(let i=0,l=handlers.length;i<l;i+=2){const regex=handlers[i];const loader=handlers[i+1];if(regex.global)regex.lastIndex=0;// see #17920\nif(regex.test(file)){return loader;}}return null;};}}/**\n * The global default loading manager.\n *\n * @constant\n * @type {LoadingManager}\n */const DefaultLoadingManager=/*@__PURE__*/new LoadingManager();/**\n * Abstract base class for loaders.\n *\n * @abstract\n */class Loader{/**\n\t * Constructs a new loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){/**\n\t\t * The loading manager.\n\t\t *\n\t\t * @type {LoadingManager}\n\t\t * @default DefaultLoadingManager\n\t\t */this.manager=manager!==undefined?manager:DefaultLoadingManager;/**\n\t\t * The crossOrigin string to implement CORS for loading the url from a\n\t\t * different domain that allows CORS.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'anonymous'\n\t\t */this.crossOrigin='anonymous';/**\n\t\t * Whether the XMLHttpRequest uses credentials.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.withCredentials=false;/**\n\t\t * The base path from which the asset will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */this.path='';/**\n\t\t * The base path from which additional resources like textures will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */this.resourcePath='';/**\n\t\t * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t\t * used in HTTP request.\n\t\t *\n\t\t * @type {Object<string, any>}\n\t\t */this.requestHeader={};}/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for loading assets from the backend.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t */load(/* url, onLoad, onProgress, onError */){}/**\n\t * A async version of {@link Loader#load}.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @return {Promise} A Promise that resolves when the asset has been loaded.\n\t */loadAsync(url,onProgress){const scope=this;return new Promise(function(resolve,reject){scope.load(url,resolve,onProgress,reject);});}/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for parsing the asset into three.js entities.\n\t *\n\t * @param {any} data - The data to parse.\n\t */parse(/* data */){}/**\n\t * Sets the `crossOrigin` String to implement CORS for loading the URL\n\t * from a different domain that allows CORS.\n\t *\n\t * @param {string} crossOrigin - The `crossOrigin` value.\n\t * @return {Loader} A reference to this instance.\n\t */setCrossOrigin(crossOrigin){this.crossOrigin=crossOrigin;return this;}/**\n\t * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n\t * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n\t *\n\t * Note: This setting has no effect if you are loading files locally or from the same domain.\n\t *\n\t * @param {boolean} value - The `withCredentials` value.\n\t * @return {Loader} A reference to this instance.\n\t */setWithCredentials(value){this.withCredentials=value;return this;}/**\n\t * Sets the base path for the asset.\n\t *\n\t * @param {string} path - The base path.\n\t * @return {Loader} A reference to this instance.\n\t */setPath(path){this.path=path;return this;}/**\n\t * Sets the base path for dependent resources like textures.\n\t *\n\t * @param {string} resourcePath - The resource path.\n\t * @return {Loader} A reference to this instance.\n\t */setResourcePath(resourcePath){this.resourcePath=resourcePath;return this;}/**\n\t * Sets the given request header.\n\t *\n\t * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t * for configuring the HTTP request.\n\t * @return {Loader} A reference to this instance.\n\t */setRequestHeader(requestHeader){this.requestHeader=requestHeader;return this;}}/**\n * Callback for onProgress in loaders.\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */ /**\n * Callback for onError in loaders.\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */ /**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */Loader.DEFAULT_MATERIAL_NAME='__DEFAULT';const loading={};class HttpError extends Error{constructor(message,response){super(message);this.response=response;}}/**\n * A low level class for loading resources with the Fetch API, used internally by\n * most loaders. It can also be used directly to load any file type that does\n * not have a loader.\n *\n * This loader supports caching. If you want to use it, add `THREE.Cache.enabled = true;`\n * once to your application.\n *\n * ```js\n * const loader = new THREE.FileLoader();\n * const data = await loader.loadAsync( 'example.txt' );\n * ```\n *\n * @augments Loader\n */class FileLoader extends Loader{/**\n\t * Constructs a new file loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);/**\n\t\t * The expected mime type.\n\t\t *\n\t\t * @type {string}\n\t\t */this.mimeType='';/**\n\t\t * The expected response type.\n\t\t *\n\t\t * @type {('arraybuffer'|'blob'|'document'|'json'|'')}\n\t\t * @default ''\n\t\t */this.responseType='';}/**\n\t * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(any)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t * @return {any|undefined} The cached resource if available.\n\t */load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const cached=Cache.get(url);if(cached!==undefined){this.manager.itemStart(url);setTimeout(()=>{if(onLoad)onLoad(cached);this.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate\nif(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Initialise array for duplicate requests\nloading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});// create request\nconst req=new Request(url,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?'include':'same-origin'// An abort controller could be added within a future PR\n});// record states ( avoid data race )\nconst mimeType=this.mimeType;const responseType=this.responseType;// start the fetch\nfetch(req).then(response=>{if(response.status===200||response.status===0){// Some browsers return HTTP Status 0 when using non-http protocol\n// e.g. 'file://' or 'data://'. Handle as success.\nif(response.status===0){console.warn('THREE.FileLoader: HTTP Status 0 received.');}// Workaround: Checking if response.body === undefined for Alipay browser #23548\nif(typeof ReadableStream==='undefined'||response.body===undefined||response.body.getReader===undefined){return response;}const callbacks=loading[url];const reader=response.body.getReader();// Nginx needs X-File-Size check\n// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\nconst contentLength=response.headers.get('X-File-Size')||response.headers.get('Content-Length');const total=contentLength?parseInt(contentLength):0;const lengthComputable=total!==0;let loaded=0;// periodically read data into the new stream tracking while download progress\nconst stream=new ReadableStream({start(controller){readData();function readData(){reader.read().then(({done,value})=>{if(done){controller.close();}else{loaded+=value.byteLength;const event=new ProgressEvent('progress',{lengthComputable,loaded,total});for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onProgress)callback.onProgress(event);}controller.enqueue(value);readData();}},e=>{controller.error(e);});}}});return new Response(stream);}else{throw new HttpError(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`,response);}}).then(response=>{switch(responseType){case'arraybuffer':return response.arrayBuffer();case'blob':return response.blob();case'document':return response.text().then(text=>{const parser=new DOMParser();return parser.parseFromString(text,mimeType);});case'json':return response.json();default:if(mimeType===''){return response.text();}else{// sniff encoding\nconst re=/charset=\"?([^;\"\\s]*)\"?/i;const exec=re.exec(mimeType);const label=exec&&exec[1]?exec[1].toLowerCase():undefined;const decoder=new TextDecoder(label);return response.arrayBuffer().then(ab=>decoder.decode(ab));}}}).then(data=>{// Add to cache only on HTTP success, so that we do not cache\n// error response bodies as proper responses to requests.\nCache.add(url,data);const callbacks=loading[url];delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onLoad)callback.onLoad(data);}}).catch(err=>{// Abort errors and other errors are handled the same\nconst callbacks=loading[url];if(callbacks===undefined){// When onLoad was called and url was deleted in `loading`\nthis.manager.itemError(url);throw err;}delete loading[url];for(let i=0,il=callbacks.length;i<il;i++){const callback=callbacks[i];if(callback.onError)callback.onError(err);}this.manager.itemError(url);}).finally(()=>{this.manager.itemEnd(url);});this.manager.itemStart(url);}/**\n\t * Sets the expected response type.\n\t *\n\t * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */setResponseType(value){this.responseType=value;return this;}/**\n\t * Sets the expected mime type of the loaded file.\n\t *\n\t * @param {string} value - The mime type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */setMimeType(value){this.mimeType=value;return this;}}/**\n * Class for loading animation clips in the JSON format. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.AnimationLoader();\n * const animations = await loader.loadAsync( 'animations/animation.js' );\n * ```\n *\n * @augments Loader\n */class AnimationLoader extends Loader{/**\n\t * Constructs a new animation loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and pass the loaded animations as an array\n\t * holding instances of {@link AnimationClip} to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}/**\n\t * Parses the given JSON object and returns an array of animation clips.\n\t *\n\t * @param {Object} json - The serialized animation clips.\n\t * @return {Array<AnimationClip>} The parsed animation clips.\n\t */parse(json){const animations=[];for(let i=0;i<json.length;i++){const clip=AnimationClip.parse(json[i]);animations.push(clip);}return animations;}}/**\n * Abstract base class for loading compressed texture formats S3TC, ASTC or ETC.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */class CompressedTextureLoader extends Loader{/**\n\t * Constructs a new compressed texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and passes the loaded compressed texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CompressedTexture} The compressed texture.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const images=[];const texture=new CompressedTexture();const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(scope.withCredentials);let loaded=0;function loadTexture(i){loader.load(url[i],function(buffer){const texDatas=scope.parse(buffer,true);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps};loaded+=1;if(loaded===6){if(texDatas.mipmapCount===1)texture.minFilter=LinearFilter;texture.image=images;texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);}},onProgress,onError);}if(Array.isArray(url)){for(let i=0,il=url.length;i<il;++i){loadTexture(i);}}else{// compressed cubemap texture stored in a single DDS file\nloader.load(url,function(buffer){const texDatas=scope.parse(buffer,true);if(texDatas.isCubemap){const faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(let f=0;f<faces;f++){images[f]={mipmaps:[]};for(let i=0;i<texDatas.mipmapCount;i++){images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]);images[f].format=texDatas.format;images[f].width=texDatas.width;images[f].height=texDatas.height;}}texture.image=images;}else{texture.image.width=texDatas.width;texture.image.height=texDatas.height;texture.mipmaps=texDatas.mipmaps;}if(texDatas.mipmapCount===1){texture.minFilter=LinearFilter;}texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);},onProgress,onError);}return texture;}}/**\n * A loader for loading images. The class loads images with the HTML `Image` API.\n *\n * ```js\n * const loader = new THREE.ImageLoader();\n * const image = await loader.loadAsync( 'image.png' );\n * ```\n * Please note that `ImageLoader` has dropped support for progress\n * events in `r84`. For an `ImageLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.\n *\n * @augments Loader\n */class ImageLoader extends Loader{/**\n\t * Constructs a new image loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and passes the loaded image\n\t * to the `onLoad()` callback. The method also returns a new `Image` object which can\n\t * directly be used for texture creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Image)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Image} The image.\n\t */load(url,onLoad,onProgress,onError){if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const scope=this;const cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}const image=createElementNS('img');function onImageLoad(){removeEventListeners();Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){removeEventListeners();if(onError)onError(event);scope.manager.itemError(url);scope.manager.itemEnd(url);}function removeEventListeners(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.slice(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;}}/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */class CubeTextureLoader extends Loader{/**\n\t * Constructs a new cube texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and pass the fully loaded cube texture\n\t * to the `onLoad()` callback. The method also returns a new cube texture object which can\n\t * directly be used for material creation. If you do it this way, the cube texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n\t * cube texture. The urls should be specified in the following order: pos-x,\n\t * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n\t * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CubeTexture} The cube texture.\n\t */load(urls,onLoad,onProgress,onError){const texture=new CubeTexture();texture.colorSpace=SRGBColorSpace;const loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);let loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(let i=0;i<urls.length;++i){loadTexture(i);}return texture;}}/**\n * Abstract base class for loading binary texture formats RGBE, EXR or TGA.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */class DataTextureLoader extends Loader{/**\n\t * Constructs a new data texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and passes the loaded data texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {DataTexture} The data texture.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const texture=new DataTexture();const loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setRequestHeader(this.requestHeader);loader.setPath(this.path);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(buffer){let texData;try{texData=scope.parse(buffer);}catch(error){if(onError!==undefined){onError(error);}else{console.error(error);return;}}if(texData.image!==undefined){texture.image=texData.image;}else if(texData.data!==undefined){texture.image.width=texData.width;texture.image.height=texData.height;texture.image.data=texData.data;}texture.wrapS=texData.wrapS!==undefined?texData.wrapS:ClampToEdgeWrapping;texture.wrapT=texData.wrapT!==undefined?texData.wrapT:ClampToEdgeWrapping;texture.magFilter=texData.magFilter!==undefined?texData.magFilter:LinearFilter;texture.minFilter=texData.minFilter!==undefined?texData.minFilter:LinearFilter;texture.anisotropy=texData.anisotropy!==undefined?texData.anisotropy:1;if(texData.colorSpace!==undefined){texture.colorSpace=texData.colorSpace;}if(texData.flipY!==undefined){texture.flipY=texData.flipY;}if(texData.format!==undefined){texture.format=texData.format;}if(texData.type!==undefined){texture.type=texData.type;}if(texData.mipmaps!==undefined){texture.mipmaps=texData.mipmaps;texture.minFilter=LinearMipmapLinearFilter;// presumably...\n}if(texData.mipmapCount===1){texture.minFilter=LinearFilter;}if(texData.generateMipmaps!==undefined){texture.generateMipmaps=texData.generateMipmaps;}texture.needsUpdate=true;if(onLoad)onLoad(texture,texData);},onProgress,onError);return texture;}}/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */class TextureLoader extends Loader{/**\n\t * Constructs a new texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and pass the fully loaded texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Texture} The texture.\n\t */load(url,onLoad,onProgress,onError){const texture=new Texture();const loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;}}/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */class Light extends Object3D{/**\n\t * Constructs a new light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */constructor(color,intensity=1){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLight=true;this.type='Light';/**\n\t\t * The light's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.color=new Color(color);/**\n\t\t * The light's intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.intensity=intensity;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){// Empty here in base class; some subclasses override.\n}copy(source,recursive){super.copy(source,recursive);this.color.copy(source.color);this.intensity=source.intensity;return this;}toJSON(meta){const data=super.toJSON(meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();if(this.target!==undefined)data.object.target=this.target.uuid;return data;}}/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */class HemisphereLight extends Light{/**\n\t * Constructs a new hemisphere light.\n\t *\n\t * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n\t * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */constructor(skyColor,groundColor,intensity){super(skyColor,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isHemisphereLight=true;this.type='HemisphereLight';this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();/**\n\t\t * The light's ground color.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.groundColor=new Color(groundColor);}copy(source,recursive){super.copy(source,recursive);this.groundColor.copy(source.groundColor);return this;}}const _projScreenMatrix$1=/*@__PURE__*/new Matrix4();const _lightPositionWorld$1=/*@__PURE__*/new Vector3();const _lookTarget$1=/*@__PURE__*/new Vector3();/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different light types.\n *\n * @abstract\n */class LightShadow{/**\n\t * Constructs a new light shadow.\n\t *\n\t * @param {Camera} camera - The light's view of the world.\n\t */constructor(camera){/**\n\t\t * The light's view of the world.\n\t\t *\n\t\t * @type {Camera}\n\t\t */this.camera=camera;/**\n\t\t * The intensity of the shadow. The default is `1`.\n\t\t * Valid values are in the range `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.intensity=1;/**\n\t\t * Shadow map bias, how much to add or subtract from the normalized depth\n\t\t * when deciding whether a surface is in shadow.\n\t\t *\n\t\t * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n\t\t * may help reduce artifacts in shadows.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.bias=0;/**\n\t\t * Defines how much the position used to query the shadow map is offset along\n\t\t * the object normal. The default is `0`. Increasing this value can be used to\n\t\t * reduce shadow acne especially in large scenes where light shines onto\n\t\t * geometry at a shallow angle. The cost is that shadows may appear distorted.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.normalBias=0;/**\n\t\t * Setting this to values greater than 1 will blur the edges of the shadow.\n\t\t * High values will cause unwanted banding effects in the shadows - a greater\n\t\t * map size will allow for a higher value to be used here before these effects\n\t\t * become visible.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n\t\t * and it is recommended to increase softness by decreasing the shadow map size instead.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `BasicShadowMap`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.radius=1;/**\n\t\t * The amount of samples to use when blurring a VSM shadow map.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 8\n\t\t */this.blurSamples=8;/**\n\t\t * Defines the width and height of the shadow map. Higher values give better quality\n\t\t * shadows at the cost of computation time. Values must be powers of two.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (512,512)\n\t\t */this.mapSize=new Vector2(512,512);/**\n\t\t * The type of shadow texture. The default is `UnsignedByteType`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */this.mapType=UnsignedByteType;/**\n\t\t * The depth map generated using the internal camera; a location beyond a\n\t\t * pixel's depth is in shadow. Computed internally during rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * The distribution map generated using the internal camera; an occlusion is\n\t\t * calculated based on the distribution of depths. Computed internally during\n\t\t * rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */this.mapPass=null;/**\n\t\t * Model to shadow camera space, to compute location and depth in shadow map.\n\t\t * This is computed internally during rendering.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */this.matrix=new Matrix4();/**\n\t\t * Enables automatic updates of the light's shadow. If you do not require dynamic\n\t\t * lighting / shadows, you may set this to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.autoUpdate=true;/**\n\t\t * When set to `true`, shadow maps will be updated in the next `render` call.\n\t\t * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n\t\t * set this property to `true` and then make a render call to update the light's shadow.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.needsUpdate=false;this._frustum=new Frustum();this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)];}/**\n\t * Used internally by the renderer to get the number of viewports that need\n\t * to be rendered for this shadow.\n\t *\n\t * @return {number} The viewport count.\n\t */getViewportCount(){return this._viewportCount;}/**\n\t * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n\t *\n\t * @return {Frustum} The shadow camera frustum.\n\t */getFrustum(){return this._frustum;}/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t */updateMatrices(light){const shadowCamera=this.camera;const shadowMatrix=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(_lightPositionWorld$1);_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(_lookTarget$1);shadowCamera.updateMatrixWorld();_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(_projScreenMatrix$1);}/**\n\t * Returns a viewport definition for the given viewport index.\n\t *\n\t * @param {number} viewportIndex - The viewport index.\n\t * @return {Vector4} The viewport.\n\t */getViewport(viewportIndex){return this._viewports[viewportIndex];}/**\n\t * Returns the frame extends.\n\t *\n\t * @return {Vector2} The frame extends.\n\t */getFrameExtents(){return this._frameExtents;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){if(this.map){this.map.dispose();}if(this.mapPass){this.mapPass.dispose();}}/**\n\t * Copies the values of the given light shadow instance to this instance.\n\t *\n\t * @param {LightShadow} source - The light shadow to copy.\n\t * @return {LightShadow} A reference to this light shadow instance.\n\t */copy(source){this.camera=source.camera.clone();this.intensity=source.intensity;this.bias=source.bias;this.radius=source.radius;this.autoUpdate=source.autoUpdate;this.needsUpdate=source.needsUpdate;this.normalBias=source.normalBias;this.blurSamples=source.blurSamples;this.mapSize.copy(source.mapSize);return this;}/**\n\t * Returns a new light shadow instance with copied values from this instance.\n\t *\n\t * @return {LightShadow} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Serializes the light shadow into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized light shadow.\n\t * @see {@link ObjectLoader#parse}\n\t */toJSON(){const object={};if(this.intensity!==1)object.intensity=this.intensity;if(this.bias!==0)object.bias=this.bias;if(this.normalBias!==0)object.normalBias=this.normalBias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}}/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */class SpotLightShadow extends LightShadow{/**\n\t * Constructs a new spot light shadow.\n\t */constructor(){super(new PerspectiveCamera(50,1,0.5,500));/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSpotLightShadow=true;/**\n\t\t * Used to focus the shadow camera. The camera's field of view is set as a\n\t\t * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.focus=1;}updateMatrices(light){const camera=this.camera;const fov=RAD2DEG*2*light.angle*this.focus;const aspect=this.mapSize.width/this.mapSize.height;const far=light.distance||camera.far;if(fov!==camera.fov||aspect!==camera.aspect||far!==camera.far){camera.fov=fov;camera.aspect=aspect;camera.far=far;camera.updateProjectionMatrix();}super.updateMatrices(light);}copy(source){super.copy(source);this.focus=source.focus;return this;}}/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */class SpotLight extends Light{/**\n\t * Constructs a new spot light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */constructor(color,intensity,distance=0,angle=Math.PI/3,penumbra=0,decay=2){super(color,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSpotLight=true;this.type='SpotLight';this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();/**\n\t\t * The spot light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */this.target=new Object3D();/**\n\t\t * Maximum range of the light. `0` means no limit.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.distance=distance;/**\n\t\t * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI/3\n\t\t */this.angle=angle;/**\n\t\t * Percent of the spotlight cone that is attenuated due to penumbra.\n\t\t * Value range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.penumbra=penumbra;/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */this.decay=decay;/**\n\t\t * A texture used to modulate the color of the light. The spot light\n\t\t * color is mixed with the RGB value of this texture, with a ratio\n\t\t * corresponding to its alpha value. The cookie-like masking effect is\n\t\t * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n\t\t *\n\t\t * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */this.map=null;/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {SpotLightShadow}\n\t\t */this.shadow=new SpotLightShadow();}/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t *  Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */get power(){// compute the light's luminous power (in lumens) from its intensity (in candela)\n// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\nreturn this.intensity*Math.PI;}set power(power){// set the light's intensity (in candela) from the desired luminous power (in lumens)\nthis.intensity=power/Math.PI;}dispose(){this.shadow.dispose();}copy(source,recursive){super.copy(source,recursive);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}}const _projScreenMatrix=/*@__PURE__*/new Matrix4();const _lightPositionWorld=/*@__PURE__*/new Vector3();const _lookTarget=/*@__PURE__*/new Vector3();/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */class PointLightShadow extends LightShadow{/**\n\t * Constructs a new point light shadow.\n\t */constructor(){super(new PerspectiveCamera(90,1,0.5,500));/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPointLightShadow=true;this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[// These viewports map a cube-map onto a 2D texture with the\n// following orientation:\n//\n//  xzXZ\n//   y Y\n//\n// X - Positive x direction\n// x - Negative x direction\n// Y - Positive y direction\n// y - Negative y direction\n// Z - Positive z direction\n// z - Negative z direction\n// positive X\nnew Vector4(2,1,1,1),// negative X\nnew Vector4(0,1,1,1),// positive Z\nnew Vector4(3,1,1,1),// negative Z\nnew Vector4(1,1,1,1),// positive Y\nnew Vector4(3,0,1,1),// negative Y\nnew Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)];}/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t * @param {number} [viewportIndex=0] - The viewport index.\n\t */updateMatrices(light,viewportIndex=0){const camera=this.camera;const shadowMatrix=this.matrix;const far=light.distance||camera.far;if(far!==camera.far){camera.far=far;camera.updateProjectionMatrix();}_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);camera.position.copy(_lightPositionWorld);_lookTarget.copy(camera.position);_lookTarget.add(this._cubeDirections[viewportIndex]);camera.up.copy(this._cubeUps[viewportIndex]);camera.lookAt(_lookTarget);camera.updateMatrixWorld();shadowMatrix.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix);}}/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */class PointLight extends Light{/**\n\t * Constructs a new point light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */constructor(color,intensity,distance=0,decay=2){super(color,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isPointLight=true;this.type='PointLight';/**\n\t\t * When distance is zero, light will attenuate according to inverse-square\n\t\t * law to infinite distance. When distance is non-zero, light will attenuate\n\t\t * according to inverse-square law until near the distance cutoff, where it\n\t\t * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n\t\t * physically correct.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.distance=distance;/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */this.decay=decay;/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {PointLightShadow}\n\t\t */this.shadow=new PointLightShadow();}/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */get power(){// compute the light's luminous power (in lumens) from its intensity (in candela)\n// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\nreturn this.intensity*4*Math.PI;}set power(power){// set the light's intensity (in candela) from the desired luminous power (in lumens)\nthis.intensity=power/(4*Math.PI);}dispose(){this.shadow.dispose();}copy(source,recursive){super.copy(source,recursive);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this;}}/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */class OrthographicCamera extends Camera{/**\n\t * Constructs a new orthographic camera.\n\t *\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */constructor(left=-1,right=1,top=1,bottom=-1,near=0.1,far=2000){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isOrthographicCamera=true;this.type='OrthographicCamera';/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.zoom=1;/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */this.view=null;/**\n\t\t * The left plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */this.left=left;/**\n\t\t * The right plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.right=right;/**\n\t\t * The top plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.top=top;/**\n\t\t * The bottom plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */this.bottom=bottom;/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n\t\t * valid value for an orthographic camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */this.near=near;/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link OrthographicCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */this.far=far;this.updateProjectionMatrix();}copy(source,recursive){super.copy(source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;}/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t * @see {@link PerspectiveCamera#setViewOffset}\n\t */setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}/**\n\t * Removes the view offset from the projection matrix.\n\t */clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */updateProjectionMatrix(){const dx=(this.right-this.left)/(2*this.zoom);const dy=(this.top-this.bottom)/(2*this.zoom);const cx=(this.right+this.left)/2;const cy=(this.top+this.bottom)/2;let left=cx-dx;let right=cx+dx;let top=cy+dy;let bottom=cy-dy;if(this.view!==null&&this.view.enabled){const scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom;const scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX;right=left+scaleW*this.view.width;top-=scaleH*this.view.offsetY;bottom=top-scaleH*this.view.height;}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(meta){const data=super.toJSON(meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}}/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */class DirectionalLightShadow extends LightShadow{/**\n\t * Constructs a new directional light shadow.\n\t */constructor(){super(new OrthographicCamera(-5,5,5,-5,0.5,500));/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDirectionalLightShadow=true;}}/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */class DirectionalLight extends Light{/**\n\t * Constructs a new directional light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */constructor(color,intensity){super(color,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isDirectionalLight=true;this.type='DirectionalLight';this.position.copy(Object3D.DEFAULT_UP);this.updateMatrix();/**\n\t\t * The directional light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */this.target=new Object3D();/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {DirectionalLightShadow}\n\t\t */this.shadow=new DirectionalLightShadow();}dispose(){this.shadow.dispose();}copy(source){super.copy(source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}}/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */class AmbientLight extends Light{/**\n\t * Constructs a new ambient light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */constructor(color,intensity){super(color,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isAmbientLight=true;this.type='AmbientLight';}}/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */class RectAreaLight extends Light{/**\n\t * Constructs a new area light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t * @param {number} [width=10] - The width of the light.\n\t * @param {number} [height=10] - The height of the light.\n\t */constructor(color,intensity,width=10,height=10){super(color,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isRectAreaLight=true;this.type='RectAreaLight';/**\n\t\t * The width of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */this.width=width;/**\n\t\t * The height of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */this.height=height;}/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */get power(){// compute the light's luminous power (in lumens) from its intensity (in nits)\nreturn this.intensity*this.width*this.height*Math.PI;}set power(power){// set the light's intensity (in nits) from the desired luminous power (in lumens)\nthis.intensity=power/(this.width*this.height*Math.PI);}copy(source){super.copy(source);this.width=source.width;this.height=source.height;return this;}toJSON(meta){const data=super.toJSON(meta);data.object.width=this.width;data.object.height=this.height;return data;}}/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */class SphericalHarmonics3{/**\n\t * Constructs a new spherical harmonics.\n\t */constructor(){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSphericalHarmonics3=true;/**\n\t\t * An array holding the (9) SH coefficients.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */this.coefficients=[];for(let i=0;i<9;i++){this.coefficients.push(new Vector3());}}/**\n\t * Sets the given SH coefficients to this instance by copying\n\t * the values.\n\t *\n\t * @param {Array<Vector3>} coefficients - The SH coefficients.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */set(coefficients){for(let i=0;i<9;i++){this.coefficients[i].copy(coefficients[i]);}return this;}/**\n\t * Sets all SH coefficients to `0`.\n\t *\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */zero(){for(let i=0;i<9;i++){this.coefficients[i].set(0,0,0);}return this;}/**\n\t * Returns the radiance in the direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The radiance.\n\t */getAt(normal,target){// normal is assumed to be unit length\nconst x=normal.x,y=normal.y,z=normal.z;const coeff=this.coefficients;// band 0\ntarget.copy(coeff[0]).multiplyScalar(0.282095);// band 1\ntarget.addScaledVector(coeff[1],0.488603*y);target.addScaledVector(coeff[2],0.488603*z);target.addScaledVector(coeff[3],0.488603*x);// band 2\ntarget.addScaledVector(coeff[4],1.092548*(x*y));target.addScaledVector(coeff[5],1.092548*(y*z));target.addScaledVector(coeff[6],0.315392*(3.0*z*z-1.0));target.addScaledVector(coeff[7],1.092548*(x*z));target.addScaledVector(coeff[8],0.546274*(x*x-y*y));return target;}/**\n\t * Returns the irradiance (radiance convolved with cosine lobe) in the\n\t * direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The irradiance.\n\t */getIrradianceAt(normal,target){// normal is assumed to be unit length\nconst x=normal.x,y=normal.y,z=normal.z;const coeff=this.coefficients;// band 0\ntarget.copy(coeff[0]).multiplyScalar(0.886227);// π * 0.282095\n// band 1\ntarget.addScaledVector(coeff[1],2.0*0.511664*y);// ( 2 * π / 3 ) * 0.488603\ntarget.addScaledVector(coeff[2],2.0*0.511664*z);target.addScaledVector(coeff[3],2.0*0.511664*x);// band 2\ntarget.addScaledVector(coeff[4],2.0*0.429043*x*y);// ( π / 4 ) * 1.092548\ntarget.addScaledVector(coeff[5],2.0*0.429043*y*z);target.addScaledVector(coeff[6],0.743125*z*z-0.247708);// ( π / 4 ) * 0.315392 * 3\ntarget.addScaledVector(coeff[7],2.0*0.429043*x*z);target.addScaledVector(coeff[8],0.429043*(x*x-y*y));// ( π / 4 ) * 0.546274\nreturn target;}/**\n\t * Adds the given SH to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */add(sh){for(let i=0;i<9;i++){this.coefficients[i].add(sh.coefficients[i]);}return this;}/**\n\t * A convenience method for performing {@link SphericalHarmonics3#add} and\n\t * {@link SphericalHarmonics3#scale} at once.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */addScaledSH(sh,s){for(let i=0;i<9;i++){this.coefficients[i].addScaledVector(sh.coefficients[i],s);}return this;}/**\n\t * Scales this SH by the given scale factor.\n\t *\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */scale(s){for(let i=0;i<9;i++){this.coefficients[i].multiplyScalar(s);}return this;}/**\n\t * Linear interpolates between the given SH and this instance by the given\n\t * alpha factor.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n\t * @param {number} alpha - The alpha factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */lerp(sh,alpha){for(let i=0;i<9;i++){this.coefficients[i].lerp(sh.coefficients[i],alpha);}return this;}/**\n\t * Returns `true` if this spherical harmonics is equal with the given one.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n\t * @return {boolean} Whether this spherical harmonics is equal with the given one.\n\t */equals(sh){for(let i=0;i<9;i++){if(!this.coefficients[i].equals(sh.coefficients[i])){return false;}}return true;}/**\n\t * Copies the values of the given spherical harmonics to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */copy(sh){return this.set(sh.coefficients);}/**\n\t * Returns a new spherical harmonics with copied values from this instance.\n\t *\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Sets the SH coefficients of this instance from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the SH coefficients.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */fromArray(array,offset=0){const coefficients=this.coefficients;for(let i=0;i<9;i++){coefficients[i].fromArray(array,offset+i*3);}return this;}/**\n\t * Returns an array with the SH coefficients, or copies them into the provided\n\t * array. The coefficients are represented as numbers.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {Array<number>} An array with flat SH coefficients.\n\t */toArray(array=[],offset=0){const coefficients=this.coefficients;for(let i=0;i<9;i++){coefficients[i].toArray(array,offset+i*3);}return array;}/**\n\t * Computes the SH basis for the given normal vector.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Array<number>} shBasis - The target array holding the SH basis.\n\t */static getBasisAt(normal,shBasis){// normal is assumed to be unit length\nconst x=normal.x,y=normal.y,z=normal.z;// band 0\nshBasis[0]=0.282095;// band 1\nshBasis[1]=0.488603*y;shBasis[2]=0.488603*z;shBasis[3]=0.488603*x;// band 2\nshBasis[4]=1.092548*x*y;shBasis[5]=1.092548*y*z;shBasis[6]=0.315392*(3*z*z-1);shBasis[7]=1.092548*x*z;shBasis[8]=0.546274*(x*x-y*y);}}/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */class LightProbe extends Light{/**\n\t * Constructs a new light probe.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */constructor(sh=new SphericalHarmonics3(),intensity=1){super(undefined,intensity);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isLightProbe=true;/**\n\t\t * A light probe uses spherical harmonics to encode lighting information.\n\t\t *\n\t\t * @type {SphericalHarmonics3}\n\t\t */this.sh=sh;}copy(source){super.copy(source);this.sh.copy(source.sh);return this;}/**\n\t * Deserializes the light prove from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized light probe.\n\t * @return {LightProbe} A reference to this light probe.\n\t */fromJSON(json){this.intensity=json.intensity;// TODO: Move this bit to Light.fromJSON();\nthis.sh.fromArray(json.sh);return this;}toJSON(meta){const data=super.toJSON(meta);data.object.sh=this.sh.toArray();return data;}}/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */class MaterialLoader extends Loader{/**\n\t * Constructs a new material loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);/**\n\t\t * A dictionary holding textures used by the material.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */this.textures={};}/**\n\t * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}/**\n\t * Parses the given JSON object and returns a material.\n\t *\n\t * @param {Object} json - The serialized material.\n\t * @return {Material} The parsed material.\n\t */parse(json){const textures=this.textures;function getTexture(name){if(textures[name]===undefined){console.warn('THREE.MaterialLoader: Undefined texture',name);}return textures[name];}const material=this.createMaterialFromType(json.type);if(json.uuid!==undefined)material.uuid=json.uuid;if(json.name!==undefined)material.name=json.name;if(json.color!==undefined&&material.color!==undefined)material.color.setHex(json.color);if(json.roughness!==undefined)material.roughness=json.roughness;if(json.metalness!==undefined)material.metalness=json.metalness;if(json.sheen!==undefined)material.sheen=json.sheen;if(json.sheenColor!==undefined)material.sheenColor=new Color().setHex(json.sheenColor);if(json.sheenRoughness!==undefined)material.sheenRoughness=json.sheenRoughness;if(json.emissive!==undefined&&material.emissive!==undefined)material.emissive.setHex(json.emissive);if(json.specular!==undefined&&material.specular!==undefined)material.specular.setHex(json.specular);if(json.specularIntensity!==undefined)material.specularIntensity=json.specularIntensity;if(json.specularColor!==undefined&&material.specularColor!==undefined)material.specularColor.setHex(json.specularColor);if(json.shininess!==undefined)material.shininess=json.shininess;if(json.clearcoat!==undefined)material.clearcoat=json.clearcoat;if(json.clearcoatRoughness!==undefined)material.clearcoatRoughness=json.clearcoatRoughness;if(json.dispersion!==undefined)material.dispersion=json.dispersion;if(json.iridescence!==undefined)material.iridescence=json.iridescence;if(json.iridescenceIOR!==undefined)material.iridescenceIOR=json.iridescenceIOR;if(json.iridescenceThicknessRange!==undefined)material.iridescenceThicknessRange=json.iridescenceThicknessRange;if(json.transmission!==undefined)material.transmission=json.transmission;if(json.thickness!==undefined)material.thickness=json.thickness;if(json.attenuationDistance!==undefined)material.attenuationDistance=json.attenuationDistance;if(json.attenuationColor!==undefined&&material.attenuationColor!==undefined)material.attenuationColor.setHex(json.attenuationColor);if(json.anisotropy!==undefined)material.anisotropy=json.anisotropy;if(json.anisotropyRotation!==undefined)material.anisotropyRotation=json.anisotropyRotation;if(json.fog!==undefined)material.fog=json.fog;if(json.flatShading!==undefined)material.flatShading=json.flatShading;if(json.blending!==undefined)material.blending=json.blending;if(json.combine!==undefined)material.combine=json.combine;if(json.side!==undefined)material.side=json.side;if(json.shadowSide!==undefined)material.shadowSide=json.shadowSide;if(json.opacity!==undefined)material.opacity=json.opacity;if(json.transparent!==undefined)material.transparent=json.transparent;if(json.alphaTest!==undefined)material.alphaTest=json.alphaTest;if(json.alphaHash!==undefined)material.alphaHash=json.alphaHash;if(json.depthFunc!==undefined)material.depthFunc=json.depthFunc;if(json.depthTest!==undefined)material.depthTest=json.depthTest;if(json.depthWrite!==undefined)material.depthWrite=json.depthWrite;if(json.colorWrite!==undefined)material.colorWrite=json.colorWrite;if(json.blendSrc!==undefined)material.blendSrc=json.blendSrc;if(json.blendDst!==undefined)material.blendDst=json.blendDst;if(json.blendEquation!==undefined)material.blendEquation=json.blendEquation;if(json.blendSrcAlpha!==undefined)material.blendSrcAlpha=json.blendSrcAlpha;if(json.blendDstAlpha!==undefined)material.blendDstAlpha=json.blendDstAlpha;if(json.blendEquationAlpha!==undefined)material.blendEquationAlpha=json.blendEquationAlpha;if(json.blendColor!==undefined&&material.blendColor!==undefined)material.blendColor.setHex(json.blendColor);if(json.blendAlpha!==undefined)material.blendAlpha=json.blendAlpha;if(json.stencilWriteMask!==undefined)material.stencilWriteMask=json.stencilWriteMask;if(json.stencilFunc!==undefined)material.stencilFunc=json.stencilFunc;if(json.stencilRef!==undefined)material.stencilRef=json.stencilRef;if(json.stencilFuncMask!==undefined)material.stencilFuncMask=json.stencilFuncMask;if(json.stencilFail!==undefined)material.stencilFail=json.stencilFail;if(json.stencilZFail!==undefined)material.stencilZFail=json.stencilZFail;if(json.stencilZPass!==undefined)material.stencilZPass=json.stencilZPass;if(json.stencilWrite!==undefined)material.stencilWrite=json.stencilWrite;if(json.wireframe!==undefined)material.wireframe=json.wireframe;if(json.wireframeLinewidth!==undefined)material.wireframeLinewidth=json.wireframeLinewidth;if(json.wireframeLinecap!==undefined)material.wireframeLinecap=json.wireframeLinecap;if(json.wireframeLinejoin!==undefined)material.wireframeLinejoin=json.wireframeLinejoin;if(json.rotation!==undefined)material.rotation=json.rotation;if(json.linewidth!==undefined)material.linewidth=json.linewidth;if(json.dashSize!==undefined)material.dashSize=json.dashSize;if(json.gapSize!==undefined)material.gapSize=json.gapSize;if(json.scale!==undefined)material.scale=json.scale;if(json.polygonOffset!==undefined)material.polygonOffset=json.polygonOffset;if(json.polygonOffsetFactor!==undefined)material.polygonOffsetFactor=json.polygonOffsetFactor;if(json.polygonOffsetUnits!==undefined)material.polygonOffsetUnits=json.polygonOffsetUnits;if(json.dithering!==undefined)material.dithering=json.dithering;if(json.alphaToCoverage!==undefined)material.alphaToCoverage=json.alphaToCoverage;if(json.premultipliedAlpha!==undefined)material.premultipliedAlpha=json.premultipliedAlpha;if(json.forceSinglePass!==undefined)material.forceSinglePass=json.forceSinglePass;if(json.visible!==undefined)material.visible=json.visible;if(json.toneMapped!==undefined)material.toneMapped=json.toneMapped;if(json.userData!==undefined)material.userData=json.userData;if(json.vertexColors!==undefined){if(typeof json.vertexColors==='number'){material.vertexColors=json.vertexColors>0?true:false;}else{material.vertexColors=json.vertexColors;}}// Shader Material\nif(json.uniforms!==undefined){for(const name in json.uniforms){const uniform=json.uniforms[name];material.uniforms[name]={};switch(uniform.type){case't':material.uniforms[name].value=getTexture(uniform.value);break;case'c':material.uniforms[name].value=new Color().setHex(uniform.value);break;case'v2':material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case'v3':material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case'v4':material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case'm3':material.uniforms[name].value=new Matrix3().fromArray(uniform.value);break;case'm4':material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value;}}}if(json.defines!==undefined)material.defines=json.defines;if(json.vertexShader!==undefined)material.vertexShader=json.vertexShader;if(json.fragmentShader!==undefined)material.fragmentShader=json.fragmentShader;if(json.glslVersion!==undefined)material.glslVersion=json.glslVersion;if(json.extensions!==undefined){for(const key in json.extensions){material.extensions[key]=json.extensions[key];}}if(json.lights!==undefined)material.lights=json.lights;if(json.clipping!==undefined)material.clipping=json.clipping;// for PointsMaterial\nif(json.size!==undefined)material.size=json.size;if(json.sizeAttenuation!==undefined)material.sizeAttenuation=json.sizeAttenuation;// maps\nif(json.map!==undefined)material.map=getTexture(json.map);if(json.matcap!==undefined)material.matcap=getTexture(json.matcap);if(json.alphaMap!==undefined)material.alphaMap=getTexture(json.alphaMap);if(json.bumpMap!==undefined)material.bumpMap=getTexture(json.bumpMap);if(json.bumpScale!==undefined)material.bumpScale=json.bumpScale;if(json.normalMap!==undefined)material.normalMap=getTexture(json.normalMap);if(json.normalMapType!==undefined)material.normalMapType=json.normalMapType;if(json.normalScale!==undefined){let normalScale=json.normalScale;if(Array.isArray(normalScale)===false){// Blender exporter used to export a scalar. See #7459\nnormalScale=[normalScale,normalScale];}material.normalScale=new Vector2().fromArray(normalScale);}if(json.displacementMap!==undefined)material.displacementMap=getTexture(json.displacementMap);if(json.displacementScale!==undefined)material.displacementScale=json.displacementScale;if(json.displacementBias!==undefined)material.displacementBias=json.displacementBias;if(json.roughnessMap!==undefined)material.roughnessMap=getTexture(json.roughnessMap);if(json.metalnessMap!==undefined)material.metalnessMap=getTexture(json.metalnessMap);if(json.emissiveMap!==undefined)material.emissiveMap=getTexture(json.emissiveMap);if(json.emissiveIntensity!==undefined)material.emissiveIntensity=json.emissiveIntensity;if(json.specularMap!==undefined)material.specularMap=getTexture(json.specularMap);if(json.specularIntensityMap!==undefined)material.specularIntensityMap=getTexture(json.specularIntensityMap);if(json.specularColorMap!==undefined)material.specularColorMap=getTexture(json.specularColorMap);if(json.envMap!==undefined)material.envMap=getTexture(json.envMap);if(json.envMapRotation!==undefined)material.envMapRotation.fromArray(json.envMapRotation);if(json.envMapIntensity!==undefined)material.envMapIntensity=json.envMapIntensity;if(json.reflectivity!==undefined)material.reflectivity=json.reflectivity;if(json.refractionRatio!==undefined)material.refractionRatio=json.refractionRatio;if(json.lightMap!==undefined)material.lightMap=getTexture(json.lightMap);if(json.lightMapIntensity!==undefined)material.lightMapIntensity=json.lightMapIntensity;if(json.aoMap!==undefined)material.aoMap=getTexture(json.aoMap);if(json.aoMapIntensity!==undefined)material.aoMapIntensity=json.aoMapIntensity;if(json.gradientMap!==undefined)material.gradientMap=getTexture(json.gradientMap);if(json.clearcoatMap!==undefined)material.clearcoatMap=getTexture(json.clearcoatMap);if(json.clearcoatRoughnessMap!==undefined)material.clearcoatRoughnessMap=getTexture(json.clearcoatRoughnessMap);if(json.clearcoatNormalMap!==undefined)material.clearcoatNormalMap=getTexture(json.clearcoatNormalMap);if(json.clearcoatNormalScale!==undefined)material.clearcoatNormalScale=new Vector2().fromArray(json.clearcoatNormalScale);if(json.iridescenceMap!==undefined)material.iridescenceMap=getTexture(json.iridescenceMap);if(json.iridescenceThicknessMap!==undefined)material.iridescenceThicknessMap=getTexture(json.iridescenceThicknessMap);if(json.transmissionMap!==undefined)material.transmissionMap=getTexture(json.transmissionMap);if(json.thicknessMap!==undefined)material.thicknessMap=getTexture(json.thicknessMap);if(json.anisotropyMap!==undefined)material.anisotropyMap=getTexture(json.anisotropyMap);if(json.sheenColorMap!==undefined)material.sheenColorMap=getTexture(json.sheenColorMap);if(json.sheenRoughnessMap!==undefined)material.sheenRoughnessMap=getTexture(json.sheenRoughnessMap);return material;}/**\n\t * Textures are not embedded in the material JSON so they have\n\t * to be injected before the loading process starts.\n\t *\n\t * @param {Object} value - A dictionary holding textures for material properties.\n\t * @return {MaterialLoader} A reference to this material loader.\n\t */setTextures(value){this.textures=value;return this;}/**\n\t * Creates a material for the given type.\n\t *\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */createMaterialFromType(type){return MaterialLoader.createMaterialFromType(type);}/**\n\t * Creates a material for the given type.\n\t *\n\t * @static\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */static createMaterialFromType(type){const materialLib={ShadowMaterial,SpriteMaterial,RawShaderMaterial,ShaderMaterial,PointsMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshPhongMaterial,MeshToonMaterial,MeshNormalMaterial,MeshLambertMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshBasicMaterial,MeshMatcapMaterial,LineDashedMaterial,LineBasicMaterial,Material};return new materialLib[type]();}}/**\n * A class with loader utility functions.\n */class LoaderUtils{/**\n\t * Extracts the base URL from the given URL.\n\t *\n\t * @param {string} url -The URL to extract the base URL from.\n\t * @return {string} The extracted base URL.\n\t */static extractUrlBase(url){const index=url.lastIndexOf('/');if(index===-1)return'./';return url.slice(0,index+1);}/**\n\t * Resolves relative URLs against the given path. Absolute paths, data urls,\n\t * and blob URLs will be returned as is. Invalid URLs will return an empty\n\t * string.\n\t *\n\t * @param {string} url -The URL to resolve.\n\t * @param {string} path - The base path for relative URLs to be resolved against.\n\t * @return {string} The resolved URL.\n\t */static resolveURL(url,path){// Invalid URL\nif(typeof url!=='string'||url==='')return'';// Host Relative URL\nif(/^https?:\\/\\//i.test(path)&&/^\\//.test(url)){path=path.replace(/(^https?:\\/\\/[^\\/]+).*/i,'$1');}// Absolute URL http://,https://,//\nif(/^(https?:)?\\/\\//i.test(url))return url;// Data URI\nif(/^data:.*,.*$/i.test(url))return url;// Blob URL\nif(/^blob:.*$/i.test(url))return url;// Relative URL\nreturn path+url;}}/**\n * An instanced version of a geometry.\n */class InstancedBufferGeometry extends BufferGeometry{/**\n\t * Constructs a new instanced buffer geometry.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInstancedBufferGeometry=true;this.type='InstancedBufferGeometry';/**\n\t\t * The instance count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */this.instanceCount=Infinity;}copy(source){super.copy(source);this.instanceCount=source.instanceCount;return this;}toJSON(){const data=super.toJSON();data.instanceCount=this.instanceCount;data.isInstancedBufferGeometry=true;return data;}}/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.BufferGeometryLoader();\n * const geometry = await loader.loadAsync( 'models/json/pressure.json' );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xF5F5F5 } );\n * const object = new THREE.Mesh( geometry, material );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */class BufferGeometryLoader extends Loader{/**\n\t * Constructs a new geometry loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(JSON.parse(text)));}catch(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}},onProgress,onError);}/**\n\t * Parses the given JSON object and returns a geometry.\n\t *\n\t * @param {Object} json - The serialized geometry.\n\t * @return {BufferGeometry} The parsed geometry.\n\t */parse(json){const interleavedBufferMap={};const arrayBufferMap={};function getInterleavedBuffer(json,uuid){if(interleavedBufferMap[uuid]!==undefined)return interleavedBufferMap[uuid];const interleavedBuffers=json.interleavedBuffers;const interleavedBuffer=interleavedBuffers[uuid];const buffer=getArrayBuffer(json,interleavedBuffer.buffer);const array=getTypedArray(interleavedBuffer.type,buffer);const ib=new InterleavedBuffer(array,interleavedBuffer.stride);ib.uuid=interleavedBuffer.uuid;interleavedBufferMap[uuid]=ib;return ib;}function getArrayBuffer(json,uuid){if(arrayBufferMap[uuid]!==undefined)return arrayBufferMap[uuid];const arrayBuffers=json.arrayBuffers;const arrayBuffer=arrayBuffers[uuid];const ab=new Uint32Array(arrayBuffer).buffer;arrayBufferMap[uuid]=ab;return ab;}const geometry=json.isInstancedBufferGeometry?new InstancedBufferGeometry():new BufferGeometry();const index=json.data.index;if(index!==undefined){const typedArray=getTypedArray(index.type,index.array);geometry.setIndex(new BufferAttribute(typedArray,1));}const attributes=json.data.attributes;for(const key in attributes){const attribute=attributes[key];let bufferAttribute;if(attribute.isInterleavedBufferAttribute){const interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized);}else{const typedArray=getTypedArray(attribute.type,attribute.array);const bufferAttributeConstr=attribute.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;bufferAttribute=new bufferAttributeConstr(typedArray,attribute.itemSize,attribute.normalized);}if(attribute.name!==undefined)bufferAttribute.name=attribute.name;if(attribute.usage!==undefined)bufferAttribute.setUsage(attribute.usage);geometry.setAttribute(key,bufferAttribute);}const morphAttributes=json.data.morphAttributes;if(morphAttributes){for(const key in morphAttributes){const attributeArray=morphAttributes[key];const array=[];for(let i=0,il=attributeArray.length;i<il;i++){const attribute=attributeArray[i];let bufferAttribute;if(attribute.isInterleavedBufferAttribute){const interleavedBuffer=getInterleavedBuffer(json.data,attribute.data);bufferAttribute=new InterleavedBufferAttribute(interleavedBuffer,attribute.itemSize,attribute.offset,attribute.normalized);}else{const typedArray=getTypedArray(attribute.type,attribute.array);bufferAttribute=new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized);}if(attribute.name!==undefined)bufferAttribute.name=attribute.name;array.push(bufferAttribute);}geometry.morphAttributes[key]=array;}}const morphTargetsRelative=json.data.morphTargetsRelative;if(morphTargetsRelative){geometry.morphTargetsRelative=true;}const groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==undefined){for(let i=0,n=groups.length;i!==n;++i){const group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex);}}const boundingSphere=json.data.boundingSphere;if(boundingSphere!==undefined){const center=new Vector3();if(boundingSphere.center!==undefined){center.fromArray(boundingSphere.center);}geometry.boundingSphere=new Sphere(center,boundingSphere.radius);}if(json.name)geometry.name=json.name;if(json.userData)geometry.userData=json.userData;return geometry;}}/**\n * A loader for loading a JSON resource in the [JSON Object/Scene format]{@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4}.\n * The files are internally loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.ObjectLoader();\n * const obj = await loader.loadAsync( 'models/json/example.json' );\n * scene.add( obj );\n *\n * // Alternatively, to parse a previously loaded JSON structure\n * const object = await loader.parseAsync( a_json_object );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */class ObjectLoader extends Loader{/**\n\t * Constructs a new object loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const path=this.path===''?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){let json=null;try{json=JSON.parse(text);}catch(error){if(onError!==undefined)onError(error);console.error('THREE:ObjectLoader: Can\\'t parse '+url+'.',error.message);return;}const metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){if(onError!==undefined)onError(new Error('THREE.ObjectLoader: Can\\'t load '+url));console.error('THREE.ObjectLoader: Can\\'t load '+url);return;}scope.parse(json,onLoad);},onProgress,onError);}/**\n\t * Async version of {@link ObjectLoader#load}.\n\t *\n\t * @async\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.\n\t */async loadAsync(url,onProgress){const scope=this;const path=this.path===''?LoaderUtils.extractUrlBase(url):this.path;this.resourcePath=this.resourcePath||path;const loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);const text=await loader.loadAsync(url,onProgress);const json=JSON.parse(text);const metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){throw new Error('THREE.ObjectLoader: Can\\'t load '+url);}return await scope.parseAsync(json);}/**\n\t * Parses the given JSON. This is used internally by {@link ObjectLoader#load}\n\t * but can also be used directly to parse a previously loaded JSON structure.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.\n\t * @return {Object3D} The parsed 3D object.\n\t */parse(json,onLoad){const animations=this.parseAnimations(json.animations);const shapes=this.parseShapes(json.shapes);const geometries=this.parseGeometries(json.geometries,shapes);const images=this.parseImages(json.images,function(){if(onLoad!==undefined)onLoad(object);});const textures=this.parseTextures(json.textures,images);const materials=this.parseMaterials(json.materials,textures);const object=this.parseObject(json.object,geometries,materials,textures,animations);const skeletons=this.parseSkeletons(json.skeletons,object);this.bindSkeletons(object,skeletons);this.bindLightTargets(object);//\nif(onLoad!==undefined){let hasImages=false;for(const uuid in images){if(images[uuid].data instanceof HTMLImageElement){hasImages=true;break;}}if(hasImages===false)onLoad(object);}return object;}/**\n\t * Async version of {@link ObjectLoader#parse}.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.\n\t */async parseAsync(json){const animations=this.parseAnimations(json.animations);const shapes=this.parseShapes(json.shapes);const geometries=this.parseGeometries(json.geometries,shapes);const images=await this.parseImagesAsync(json.images);const textures=this.parseTextures(json.textures,images);const materials=this.parseMaterials(json.materials,textures);const object=this.parseObject(json.object,geometries,materials,textures,animations);const skeletons=this.parseSkeletons(json.skeletons,object);this.bindSkeletons(object,skeletons);this.bindLightTargets(object);return object;}// internals\nparseShapes(json){const shapes={};if(json!==undefined){for(let i=0,l=json.length;i<l;i++){const shape=new Shape().fromJSON(json[i]);shapes[shape.uuid]=shape;}}return shapes;}parseSkeletons(json,object){const skeletons={};const bones={};// generate bone lookup table\nobject.traverse(function(child){if(child.isBone)bones[child.uuid]=child;});// create skeletons\nif(json!==undefined){for(let i=0,l=json.length;i<l;i++){const skeleton=new Skeleton().fromJSON(json[i],bones);skeletons[skeleton.uuid]=skeleton;}}return skeletons;}parseGeometries(json,shapes){const geometries={};if(json!==undefined){const bufferGeometryLoader=new BufferGeometryLoader();for(let i=0,l=json.length;i<l;i++){let geometry;const data=json[i];switch(data.type){case'BufferGeometry':case'InstancedBufferGeometry':geometry=bufferGeometryLoader.parse(data);break;default:if(data.type in Geometries){geometry=Geometries[data.type].fromJSON(data,shapes);}else{console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);}}geometry.uuid=data.uuid;if(data.name!==undefined)geometry.name=data.name;if(data.userData!==undefined)geometry.userData=data.userData;geometries[data.uuid]=geometry;}}return geometries;}parseMaterials(json,textures){const cache={};// MultiMaterial\nconst materials={};if(json!==undefined){const loader=new MaterialLoader();loader.setTextures(textures);for(let i=0,l=json.length;i<l;i++){const data=json[i];if(cache[data.uuid]===undefined){cache[data.uuid]=loader.parse(data);}materials[data.uuid]=cache[data.uuid];}}return materials;}parseAnimations(json){const animations={};if(json!==undefined){for(let i=0;i<json.length;i++){const data=json[i];const clip=AnimationClip.parse(data);animations[clip.uuid]=clip;}}return animations;}parseImages(json,onLoad){const scope=this;const images={};let loader;function loadImage(url){scope.manager.itemStart(url);return loader.load(url,function(){scope.manager.itemEnd(url);},undefined,function(){scope.manager.itemError(url);scope.manager.itemEnd(url);});}function deserializeImage(image){if(typeof image==='string'){const url=image;const path=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url)?url:scope.resourcePath+url;return loadImage(path);}else{if(image.data){return{data:getTypedArray(image.type,image.data),width:image.width,height:image.height};}else{return null;}}}if(json!==undefined&&json.length>0){const manager=new LoadingManager(onLoad);loader=new ImageLoader(manager);loader.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){const image=json[i];const url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture\nconst imageArray=[];for(let j=0,jl=url.length;j<jl;j++){const currentUrl=url[j];const deserializedImage=deserializeImage(currentUrl);if(deserializedImage!==null){if(deserializedImage instanceof HTMLImageElement){imageArray.push(deserializedImage);}else{// special case: handle array of data textures for cube textures\nimageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height));}}}images[image.uuid]=new Source(imageArray);}else{// load single image\nconst deserializedImage=deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage);}}}return images;}async parseImagesAsync(json){const scope=this;const images={};let loader;async function deserializeImage(image){if(typeof image==='string'){const url=image;const path=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url)?url:scope.resourcePath+url;return await loader.loadAsync(path);}else{if(image.data){return{data:getTypedArray(image.type,image.data),width:image.width,height:image.height};}else{return null;}}}if(json!==undefined&&json.length>0){loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);for(let i=0,il=json.length;i<il;i++){const image=json[i];const url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture\nconst imageArray=[];for(let j=0,jl=url.length;j<jl;j++){const currentUrl=url[j];const deserializedImage=await deserializeImage(currentUrl);if(deserializedImage!==null){if(deserializedImage instanceof HTMLImageElement){imageArray.push(deserializedImage);}else{// special case: handle array of data textures for cube textures\nimageArray.push(new DataTexture(deserializedImage.data,deserializedImage.width,deserializedImage.height));}}}images[image.uuid]=new Source(imageArray);}else{// load single image\nconst deserializedImage=await deserializeImage(image.url);images[image.uuid]=new Source(deserializedImage);}}}return images;}parseTextures(json,images){function parseConstant(value,type){if(typeof value==='number')return value;console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',value);return type[value];}const textures={};if(json!==undefined){for(let i=0,l=json.length;i<l;i++){const data=json[i];if(data.image===undefined){console.warn('THREE.ObjectLoader: No \"image\" specified for',data.uuid);}if(images[data.image]===undefined){console.warn('THREE.ObjectLoader: Undefined image',data.image);}const source=images[data.image];const image=source.data;let texture;if(Array.isArray(image)){texture=new CubeTexture();if(image.length===6)texture.needsUpdate=true;}else{if(image&&image.data){texture=new DataTexture();}else{texture=new Texture();}if(image)texture.needsUpdate=true;// textures can have undefined image data\n}texture.source=source;texture.uuid=data.uuid;if(data.name!==undefined)texture.name=data.name;if(data.mapping!==undefined)texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING);if(data.channel!==undefined)texture.channel=data.channel;if(data.offset!==undefined)texture.offset.fromArray(data.offset);if(data.repeat!==undefined)texture.repeat.fromArray(data.repeat);if(data.center!==undefined)texture.center.fromArray(data.center);if(data.rotation!==undefined)texture.rotation=data.rotation;if(data.wrap!==undefined){texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING);texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING);}if(data.format!==undefined)texture.format=data.format;if(data.internalFormat!==undefined)texture.internalFormat=data.internalFormat;if(data.type!==undefined)texture.type=data.type;if(data.colorSpace!==undefined)texture.colorSpace=data.colorSpace;if(data.minFilter!==undefined)texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER);if(data.magFilter!==undefined)texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER);if(data.anisotropy!==undefined)texture.anisotropy=data.anisotropy;if(data.flipY!==undefined)texture.flipY=data.flipY;if(data.generateMipmaps!==undefined)texture.generateMipmaps=data.generateMipmaps;if(data.premultiplyAlpha!==undefined)texture.premultiplyAlpha=data.premultiplyAlpha;if(data.unpackAlignment!==undefined)texture.unpackAlignment=data.unpackAlignment;if(data.compareFunction!==undefined)texture.compareFunction=data.compareFunction;if(data.userData!==undefined)texture.userData=data.userData;textures[data.uuid]=texture;}}return textures;}parseObject(data,geometries,materials,textures,animations){let object;function getGeometry(name){if(geometries[name]===undefined){console.warn('THREE.ObjectLoader: Undefined geometry',name);}return geometries[name];}function getMaterial(name){if(name===undefined)return undefined;if(Array.isArray(name)){const array=[];for(let i=0,l=name.length;i<l;i++){const uuid=name[i];if(materials[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined material',uuid);}array.push(materials[uuid]);}return array;}if(materials[name]===undefined){console.warn('THREE.ObjectLoader: Undefined material',name);}return materials[name];}function getTexture(uuid){if(textures[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined texture',uuid);}return textures[uuid];}let geometry,material;switch(data.type){case'Scene':object=new Scene();if(data.background!==undefined){if(Number.isInteger(data.background)){object.background=new Color(data.background);}else{object.background=getTexture(data.background);}}if(data.environment!==undefined){object.environment=getTexture(data.environment);}if(data.fog!==undefined){if(data.fog.type==='Fog'){object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far);}else if(data.fog.type==='FogExp2'){object.fog=new FogExp2(data.fog.color,data.fog.density);}if(data.fog.name!==''){object.fog.name=data.fog.name;}}if(data.backgroundBlurriness!==undefined)object.backgroundBlurriness=data.backgroundBlurriness;if(data.backgroundIntensity!==undefined)object.backgroundIntensity=data.backgroundIntensity;if(data.backgroundRotation!==undefined)object.backgroundRotation.fromArray(data.backgroundRotation);if(data.environmentIntensity!==undefined)object.environmentIntensity=data.environmentIntensity;if(data.environmentRotation!==undefined)object.environmentRotation.fromArray(data.environmentRotation);break;case'PerspectiveCamera':object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far);if(data.focus!==undefined)object.focus=data.focus;if(data.zoom!==undefined)object.zoom=data.zoom;if(data.filmGauge!==undefined)object.filmGauge=data.filmGauge;if(data.filmOffset!==undefined)object.filmOffset=data.filmOffset;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'OrthographicCamera':object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);if(data.zoom!==undefined)object.zoom=data.zoom;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'AmbientLight':object=new AmbientLight(data.color,data.intensity);break;case'DirectionalLight':object=new DirectionalLight(data.color,data.intensity);object.target=data.target||'';break;case'PointLight':object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case'RectAreaLight':object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case'SpotLight':object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);object.target=data.target||'';break;case'HemisphereLight':object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case'LightProbe':object=new LightProbe().fromJSON(data);break;case'SkinnedMesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);object=new SkinnedMesh(geometry,material);if(data.bindMode!==undefined)object.bindMode=data.bindMode;if(data.bindMatrix!==undefined)object.bindMatrix.fromArray(data.bindMatrix);if(data.skeleton!==undefined)object.skeleton=data.skeleton;break;case'Mesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);object=new Mesh(geometry,material);break;case'InstancedMesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);const count=data.count;const instanceMatrix=data.instanceMatrix;const instanceColor=data.instanceColor;object=new InstancedMesh(geometry,material,count);object.instanceMatrix=new InstancedBufferAttribute(new Float32Array(instanceMatrix.array),16);if(instanceColor!==undefined)object.instanceColor=new InstancedBufferAttribute(new Float32Array(instanceColor.array),instanceColor.itemSize);break;case'BatchedMesh':geometry=getGeometry(data.geometry);material=getMaterial(data.material);object=new BatchedMesh(data.maxInstanceCount,data.maxVertexCount,data.maxIndexCount,material);object.geometry=geometry;object.perObjectFrustumCulled=data.perObjectFrustumCulled;object.sortObjects=data.sortObjects;object._drawRanges=data.drawRanges;object._reservedRanges=data.reservedRanges;object._geometryInfo=data.geometryInfo.map(info=>{let box=null;let sphere=null;if(info.boundingBox!==undefined){box=new Box3();box.min.fromArray(info.boundingBox.min);box.max.fromArray(info.boundingBox.max);}if(info.boundingSphere!==undefined){sphere=new Sphere();sphere.radius=info.boundingSphere.radius;sphere.center.fromArray(info.boundingSphere.center);}return{...info,boundingBox:box,boundingSphere:sphere};});object._instanceInfo=data.instanceInfo;object._availableInstanceIds=data._availableInstanceIds;object._availableGeometryIds=data._availableGeometryIds;object._nextIndexStart=data.nextIndexStart;object._nextVertexStart=data.nextVertexStart;object._geometryCount=data.geometryCount;object._maxInstanceCount=data.maxInstanceCount;object._maxVertexCount=data.maxVertexCount;object._maxIndexCount=data.maxIndexCount;object._geometryInitialized=data.geometryInitialized;object._matricesTexture=getTexture(data.matricesTexture.uuid);object._indirectTexture=getTexture(data.indirectTexture.uuid);if(data.colorsTexture!==undefined){object._colorsTexture=getTexture(data.colorsTexture.uuid);}if(data.boundingSphere!==undefined){object.boundingSphere=new Sphere();object.boundingSphere.center.fromArray(data.boundingSphere.center);object.boundingSphere.radius=data.boundingSphere.radius;}if(data.boundingBox!==undefined){object.boundingBox=new Box3();object.boundingBox.min.fromArray(data.boundingBox.min);object.boundingBox.max.fromArray(data.boundingBox.max);}break;case'LOD':object=new LOD();break;case'Line':object=new Line(getGeometry(data.geometry),getMaterial(data.material));break;case'LineLoop':object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case'LineSegments':object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case'PointCloud':case'Points':object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case'Sprite':object=new Sprite(getMaterial(data.material));break;case'Group':object=new Group();break;case'Bone':object=new Bone();break;default:object=new Object3D();}object.uuid=data.uuid;if(data.name!==undefined)object.name=data.name;if(data.matrix!==undefined){object.matrix.fromArray(data.matrix);if(data.matrixAutoUpdate!==undefined)object.matrixAutoUpdate=data.matrixAutoUpdate;if(object.matrixAutoUpdate)object.matrix.decompose(object.position,object.quaternion,object.scale);}else{if(data.position!==undefined)object.position.fromArray(data.position);if(data.rotation!==undefined)object.rotation.fromArray(data.rotation);if(data.quaternion!==undefined)object.quaternion.fromArray(data.quaternion);if(data.scale!==undefined)object.scale.fromArray(data.scale);}if(data.up!==undefined)object.up.fromArray(data.up);if(data.castShadow!==undefined)object.castShadow=data.castShadow;if(data.receiveShadow!==undefined)object.receiveShadow=data.receiveShadow;if(data.shadow){if(data.shadow.intensity!==undefined)object.shadow.intensity=data.shadow.intensity;if(data.shadow.bias!==undefined)object.shadow.bias=data.shadow.bias;if(data.shadow.normalBias!==undefined)object.shadow.normalBias=data.shadow.normalBias;if(data.shadow.radius!==undefined)object.shadow.radius=data.shadow.radius;if(data.shadow.mapSize!==undefined)object.shadow.mapSize.fromArray(data.shadow.mapSize);if(data.shadow.camera!==undefined)object.shadow.camera=this.parseObject(data.shadow.camera);}if(data.visible!==undefined)object.visible=data.visible;if(data.frustumCulled!==undefined)object.frustumCulled=data.frustumCulled;if(data.renderOrder!==undefined)object.renderOrder=data.renderOrder;if(data.userData!==undefined)object.userData=data.userData;if(data.layers!==undefined)object.layers.mask=data.layers;if(data.children!==undefined){const children=data.children;for(let i=0;i<children.length;i++){object.add(this.parseObject(children[i],geometries,materials,textures,animations));}}if(data.animations!==undefined){const objectAnimations=data.animations;for(let i=0;i<objectAnimations.length;i++){const uuid=objectAnimations[i];object.animations.push(animations[uuid]);}}if(data.type==='LOD'){if(data.autoUpdate!==undefined)object.autoUpdate=data.autoUpdate;const levels=data.levels;for(let l=0;l<levels.length;l++){const level=levels[l];const child=object.getObjectByProperty('uuid',level.object);if(child!==undefined){object.addLevel(child,level.distance,level.hysteresis);}}}return object;}bindSkeletons(object,skeletons){if(Object.keys(skeletons).length===0)return;object.traverse(function(child){if(child.isSkinnedMesh===true&&child.skeleton!==undefined){const skeleton=skeletons[child.skeleton];if(skeleton===undefined){console.warn('THREE.ObjectLoader: No skeleton found with UUID:',child.skeleton);}else{child.bind(skeleton,child.bindMatrix);}}});}bindLightTargets(object){object.traverse(function(child){if(child.isDirectionalLight||child.isSpotLight){const uuid=child.target;const target=object.getObjectByProperty('uuid',uuid);if(target!==undefined){child.target=target;}else{child.target=new Object3D();}}});}}const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader does not avoid multiple concurrent requests to the same URL.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */class ImageBitmapLoader extends Loader{/**\n\t * Constructs a new image bitmap loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isImageBitmapLoader=true;if(typeof createImageBitmap==='undefined'){console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');}if(typeof fetch==='undefined'){console.warn('THREE.ImageBitmapLoader: fetch() not supported.');}/**\n\t\t * Represents the loader options.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {premultiplyAlpha:'none'}\n\t\t */this.options={premultiplyAlpha:'none'};}/**\n\t * Sets the given loader options. The structure of the object must match the `options` parameter of\n\t * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n\t *\n\t * @param {Object} options - The loader options to set.\n\t * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n\t */setOptions(options){this.options=options;return this;}/**\n\t * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {ImageBitmap|undefined} The image bitmap.\n\t */load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);const scope=this;const cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);// If cached is a promise, wait for it to resolve\nif(cached.then){cached.then(imageBitmap=>{if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);}).catch(e=>{if(onError)onError(e);});return;}// If cached is not a promise (i.e., it's already an imageBitmap)\nsetTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}const fetchOptions={};fetchOptions.credentials=this.crossOrigin==='anonymous'?'same-origin':'include';fetchOptions.headers=this.requestHeader;const promise=fetch(url,fetchOptions).then(function(res){return res.blob();}).then(function(blob){return createImageBitmap(blob,Object.assign(scope.options,{colorSpaceConversion:'none'}));}).then(function(imageBitmap){Cache.add(url,imageBitmap);if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);return imageBitmap;}).catch(function(e){if(onError)onError(e);Cache.remove(url);scope.manager.itemError(url);scope.manager.itemEnd(url);});Cache.add(url,promise);scope.manager.itemStart(url);}}let _context;/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */class AudioContext{/**\n\t * Returns the global native audio context.\n\t *\n\t * @return {AudioContext} The native audio context.\n\t */static getContext(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)();}return _context;}/**\n\t * Allows to set the global native audio context from outside.\n\t *\n\t * @param {AudioContext} value - The native context to set.\n\t */static setContext(value){_context=value;}}/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */class AudioLoader extends Loader{/**\n\t * Constructs a new audio loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */constructor(manager){super(manager);}/**\n\t * Starts loading from the given URL and passes the loaded audio buffer\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */load(url,onLoad,onProgress,onError){const scope=this;const loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.setPath(this.path);loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(buffer){try{// Create a copy of the buffer. The `decodeAudioData` method\n// detaches the buffer when complete, preventing reuse.\nconst bufferCopy=buffer.slice(0);const context=AudioContext.getContext();context.decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer);}).catch(handleError);}catch(e){handleError(e);}},onProgress,onError);function handleError(e){if(onError){onError(e);}else{console.error(e);}scope.manager.itemError(url);}}}const _eyeRight=/*@__PURE__*/new Matrix4();const _eyeLeft=/*@__PURE__*/new Matrix4();const _projectionMatrix=/*@__PURE__*/new Matrix4();/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */class StereoCamera{/**\n\t * Constructs a new stereo camera.\n\t */constructor(){/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.type='StereoCamera';/**\n\t\t * The aspect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.aspect=1;/**\n\t\t * The eye separation which represents the distance\n\t\t * between the left and right camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.064\n\t\t */this.eyeSep=0.064;/**\n\t\t * The camera representing the left eye. This is added to layer `1` so objects to be\n\t\t * rendered by the left camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */this.cameraL=new PerspectiveCamera();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;/**\n\t\t * The camera representing the right eye. This is added to layer `2` so objects to be\n\t\t * rendered by the right camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */this.cameraR=new PerspectiveCamera();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null};}/**\n\t * Updates the stereo camera based on the given perspective camera.\n\t *\n\t * @param {PerspectiveCamera} camera - The perspective camera.\n\t */update(camera){const cache=this._cache;const needsUpdate=cache.focus!==camera.focus||cache.fov!==camera.fov||cache.aspect!==camera.aspect*this.aspect||cache.near!==camera.near||cache.far!==camera.far||cache.zoom!==camera.zoom||cache.eyeSep!==this.eyeSep;if(needsUpdate){cache.focus=camera.focus;cache.fov=camera.fov;cache.aspect=camera.aspect*this.aspect;cache.near=camera.near;cache.far=camera.far;cache.zoom=camera.zoom;cache.eyeSep=this.eyeSep;// Off-axis stereoscopic effect based on\n// http://paulbourke.net/stereographics/stereorender/\n_projectionMatrix.copy(camera.projectionMatrix);const eyeSepHalf=cache.eyeSep/2;const eyeSepOnProjection=eyeSepHalf*cache.near/cache.focus;const ymax=cache.near*Math.tan(DEG2RAD*cache.fov*0.5)/cache.zoom;let xmin,xmax;// translate xOffset\n_eyeLeft.elements[12]=-eyeSepHalf;_eyeRight.elements[12]=eyeSepHalf;// for left eye\nxmin=-ymax*cache.aspect+eyeSepOnProjection;xmax=ymax*cache.aspect+eyeSepOnProjection;_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(_projectionMatrix);// for right eye\nxmin=-ymax*cache.aspect-eyeSepOnProjection;xmax=ymax*cache.aspect-eyeSepOnProjection;_projectionMatrix.elements[0]=2*cache.near/(xmax-xmin);_projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(_projectionMatrix);}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);}}/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */class ArrayCamera extends PerspectiveCamera{/**\n\t * Constructs a new array camera.\n\t *\n\t * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n\t */constructor(array=[]){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isArrayCamera=true;/**\n\t\t * Whether this camera is used with multiview rendering or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */this.isMultiViewCamera=false;/**\n\t\t * An array of perspective sub cameras.\n\t\t *\n\t\t * @type {Array<PerspectiveCamera>}\n\t\t */this.cameras=array;}}/**\n * Class for keeping track of time.\n */class Clock{/**\n\t * Constructs a new clock.\n\t *\n\t * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n\t * `getDelta()` is called for the first time.\n\t */constructor(autoStart=true){/**\n\t\t * If set to `true`, the clock starts automatically when `getDelta()` is called\n\t\t * for the first time.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.autoStart=autoStart;/**\n\t\t * Holds the time at which the clock's `start()` method was last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.startTime=0;/**\n\t\t * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n\t\t * `getDelta()` methods were last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.oldTime=0;/**\n\t\t * Keeps track of the total time that the clock has been running.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.elapsedTime=0;/**\n\t\t * Whether the clock is running or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.running=false;}/**\n\t * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n\t * called by the class.\n\t */start(){this.startTime=now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true;}/**\n\t * Stops the clock.\n\t */stop(){this.getElapsedTime();this.running=false;this.autoStart=false;}/**\n\t * Returns the elapsed time in seconds.\n\t *\n\t * @return {number} The elapsed time.\n\t */getElapsedTime(){this.getDelta();return this.elapsedTime;}/**\n\t * Returns the delta time in seconds.\n\t *\n\t * @return {number} The delta time.\n\t */getDelta(){let diff=0;if(this.autoStart&&!this.running){this.start();return 0;}if(this.running){const newTime=now();diff=(newTime-this.oldTime)/1000;this.oldTime=newTime;this.elapsedTime+=diff;}return diff;}}function now(){return performance.now();}const _position$1=/*@__PURE__*/new Vector3();const _quaternion$1=/*@__PURE__*/new Quaternion();const _scale$1=/*@__PURE__*/new Vector3();const _orientation$1=/*@__PURE__*/new Vector3();/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */class AudioListener extends Object3D{/**\n\t * Constructs a new audio listener.\n\t */constructor(){super();this.type='AudioListener';/**\n\t\t * The native audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */this.context=AudioContext.getContext();/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */this.gain=this.context.createGain();this.gain.connect(this.context.destination);/**\n\t\t * An optional filter.\n\t\t *\n\t\t * Defined via {@link AudioListener#setFilter}.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @default null\n\t\t * @readonly\n\t\t */this.filter=null;/**\n\t\t * Time delta values required for `linearRampToValueAtTime()` usage.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */this.timeDelta=0;// private\nthis._clock=new Clock();}/**\n\t * Returns the listener's input node.\n\t *\n\t * This method is used by other audio nodes to connect to this listener.\n\t *\n\t * @return {GainNode} The input node.\n\t */getInput(){return this.gain;}/**\n\t * Removes the current filter from this listener.\n\t *\n\t * @return {AudioListener} A reference to this listener.\n\t */removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null;}return this;}/**\n\t * Returns the current set filter.\n\t *\n\t * @return {?AudioNode} The filter.\n\t */getFilter(){return this.filter;}/**\n\t * Sets the given filter to this listener.\n\t *\n\t * @param {AudioNode} value - The filter to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */setFilter(value){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);}else{this.gain.disconnect(this.context.destination);}this.filter=value;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this;}/**\n\t * Returns the applications master volume.\n\t *\n\t * @return {number} The master volume.\n\t */getMasterVolume(){return this.gain.gain.value;}/**\n\t * Sets the applications master volume. This volume setting affects\n\t * all audio nodes in the scene.\n\t *\n\t * @param {number} value - The master volume to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */setMasterVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}updateMatrixWorld(force){super.updateMatrixWorld(force);const listener=this.context.listener;const up=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$1,_quaternion$1,_scale$1);_orientation$1.set(0,0,-1).applyQuaternion(_quaternion$1);if(listener.positionX){// code path for Chrome (see #14393)\nconst endTime=this.context.currentTime+this.timeDelta;listener.positionX.linearRampToValueAtTime(_position$1.x,endTime);listener.positionY.linearRampToValueAtTime(_position$1.y,endTime);listener.positionZ.linearRampToValueAtTime(_position$1.z,endTime);listener.forwardX.linearRampToValueAtTime(_orientation$1.x,endTime);listener.forwardY.linearRampToValueAtTime(_orientation$1.y,endTime);listener.forwardZ.linearRampToValueAtTime(_orientation$1.z,endTime);listener.upX.linearRampToValueAtTime(up.x,endTime);listener.upY.linearRampToValueAtTime(up.y,endTime);listener.upZ.linearRampToValueAtTime(up.z,endTime);}else{listener.setPosition(_position$1.x,_position$1.y,_position$1.z);listener.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z,up.x,up.y,up.z);}}}/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */class Audio extends Object3D{/**\n\t * Constructs a new audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */constructor(listener){super();this.type='Audio';/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AudioListener}\n\t\t * @readonly\n\t\t */this.listener=listener;/**\n\t\t * The audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */this.context=listener.context;/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */this.gain=this.context.createGain();this.gain.connect(listener.getInput());/**\n\t\t * Whether to start playback automatically or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.autoplay=false;/**\n\t\t * A reference to an audio buffer.\n\t\t *\n\t\t * Defined via {@link Audio#setBuffer}.\n\t\t *\n\t\t * @type {?AudioBuffer}\n\t\t * @default null\n\t\t * @readonly\n\t\t */this.buffer=null;/**\n\t\t * Modify pitch, measured in cents. +/- 100 is a semitone.\n\t\t * +/- 1200 is an octave.\n\t\t *\n\t\t * Defined via {@link Audio#setDetune}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */this.detune=0;/**\n\t\t * Whether the audio should loop or not.\n\t\t *\n\t\t * Defined via {@link Audio#setLoop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */this.loop=false;/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * start, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.loopStart=0;/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * stop, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.loopEnd=0;/**\n\t\t * An offset to the time within the audio buffer the playback\n\t\t * should begin, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.offset=0;/**\n\t\t * Overrides the default duration of the audio.\n\t\t *\n\t\t * @type {undefined|number}\n\t\t * @default undefined\n\t\t */this.duration=undefined;/**\n\t\t * The playback speed.\n\t\t *\n\t\t * Defined via {@link Audio#setPlaybackRate}.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 1\n\t\t */this.playbackRate=1;/**\n\t\t * Indicates whether the audio is playing or not.\n\t\t *\n\t\t * This flag will be automatically set when using {@link Audio#play},\n\t\t * {@link Audio#pause}, {@link Audio#stop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */this.isPlaying=false;/**\n\t\t * Indicates whether the audio playback can be controlled\n\t\t * with method like {@link Audio#play} or {@link Audio#pause}.\n\t\t *\n\t\t * This flag will be automatically set when audio sources are\n\t\t * defined.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.hasPlaybackControl=true;/**\n\t\t * Holds a reference to the current audio source.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @readonly\n\t\t * @default null\n\t\t */this.source=null;/**\n\t\t * Defines the source type.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n\t\t * @readonly\n\t\t * @default 'empty'\n\t\t */this.sourceType='empty';this._startedAt=0;this._progress=0;this._connected=false;/**\n\t\t * Can be used to apply a variety of low-order filters to create\n\t\t * more complex sound effects e.g. via `BiquadFilterNode`.\n\t\t *\n\t\t * The property is automatically set by {@link Audio#setFilters}.\n\t\t *\n\t\t * @type {Array<AudioNode>}\n\t\t * @readonly\n\t\t */this.filters=[];}/**\n\t * Returns the output audio node.\n\t *\n\t * @return {GainNode} The output node.\n\t */getOutput(){return this.gain;}/**\n\t * Sets the given audio node as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n\t * @return {Audio} A reference to this instance.\n\t */setNodeSource(audioNode){this.hasPlaybackControl=false;this.sourceType='audioNode';this.source=audioNode;this.connect();return this;}/**\n\t * Sets the given media element as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {HTMLMediaElement} mediaElement - The media element.\n\t * @return {Audio} A reference to this instance.\n\t */setMediaElementSource(mediaElement){this.hasPlaybackControl=false;this.sourceType='mediaNode';this.source=this.context.createMediaElementSource(mediaElement);this.connect();return this;}/**\n\t * Sets the given media stream as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {MediaStream} mediaStream - The media stream.\n\t * @return {Audio} A reference to this instance.\n\t */setMediaStreamSource(mediaStream){this.hasPlaybackControl=false;this.sourceType='mediaStreamNode';this.source=this.context.createMediaStreamSource(mediaStream);this.connect();return this;}/**\n\t * Sets the given audio buffer as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n\t *\n\t * @param {AudioBuffer} audioBuffer - The audio buffer.\n\t * @return {Audio} A reference to this instance.\n\t */setBuffer(audioBuffer){this.buffer=audioBuffer;this.sourceType='buffer';if(this.autoplay)this.play();return this;}/**\n\t * Starts the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */play(delay=0){if(this.isPlaying===true){console.warn('THREE.Audio: Audio is already playing.');return;}if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._startedAt=this.context.currentTime+delay;const source=this.context.createBufferSource();source.buffer=this.buffer;source.loop=this.loop;source.loopStart=this.loopStart;source.loopEnd=this.loopEnd;source.onended=this.onEnded.bind(this);source.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=source;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect();}/**\n\t * Pauses the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */pause(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}if(this.isPlaying===true){// update current progress\nthis._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){// ensure _progress does not exceed duration with looped audios\nthis._progress=this._progress%(this.duration||this.buffer.duration);}this.source.stop();this.source.onended=null;this.isPlaying=false;}return this;}/**\n\t * Stops the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */stop(delay=0){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this._progress=0;if(this.source!==null){this.source.stop(this.context.currentTime+delay);this.source.onended=null;}this.isPlaying=false;return this;}/**\n\t * Connects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio} A reference to this instance.\n\t */connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++){this.filters[i-1].connect(this.filters[i]);}this.filters[this.filters.length-1].connect(this.getOutput());}else{this.source.connect(this.getOutput());}this._connected=true;return this;}/**\n\t * Disconnects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */disconnect(){if(this._connected===false){return;}if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let i=1,l=this.filters.length;i<l;i++){this.filters[i-1].disconnect(this.filters[i]);}this.filters[this.filters.length-1].disconnect(this.getOutput());}else{this.source.disconnect(this.getOutput());}this._connected=false;return this;}/**\n\t * Returns the current set filters.\n\t *\n\t * @return {Array<AudioNode>} The list of filters.\n\t */getFilters(){return this.filters;}/**\n\t * Sets an array of filters and connects them with the audio source.\n\t *\n\t * @param {Array<AudioNode>} [value] - A list of filters.\n\t * @return {Audio} A reference to this instance.\n\t */setFilters(value){if(!value)value=[];if(this._connected===true){this.disconnect();this.filters=value.slice();this.connect();}else{this.filters=value.slice();}return this;}/**\n\t * Defines the detuning of oscillation in cents.\n\t *\n\t * @param {number} value - The detuning of oscillation in cents.\n\t * @return {Audio} A reference to this instance.\n\t */setDetune(value){this.detune=value;if(this.isPlaying===true&&this.source.detune!==undefined){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01);}return this;}/**\n\t * Returns the detuning of oscillation in cents.\n\t *\n\t * @return {number} The detuning of oscillation in cents.\n\t */getDetune(){return this.detune;}/**\n\t * Returns the first filter in the list of filters.\n\t *\n\t * @return {AudioNode|undefined} The first filter in the list of filters.\n\t */getFilter(){return this.getFilters()[0];}/**\n\t * Applies a single filter node to the audio.\n\t *\n\t * @param {AudioNode} [filter] - The filter to set.\n\t * @return {Audio} A reference to this instance.\n\t */setFilter(filter){return this.setFilters(filter?[filter]:[]);}/**\n\t * Sets the playback rate.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [value] - The playback rate to set.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */setPlaybackRate(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.playbackRate=value;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,0.01);}return this;}/**\n\t * Returns the current playback rate.\n\n\t * @return {number} The playback rate.\n\t */getPlaybackRate(){return this.playbackRate;}/**\n\t * Automatically called when playback finished.\n\t */onEnded(){this.isPlaying=false;this._progress=0;}/**\n\t * Returns the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {boolean} Whether the audio should loop or not.\n\t */getLoop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return false;}return this.loop;}/**\n\t * Sets the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {boolean} value - Whether the audio should loop or not.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */setLoop(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.loop=value;if(this.isPlaying===true){this.source.loop=this.loop;}return this;}/**\n\t * Sets the loop start value which defines where in the audio buffer the replay should\n\t * start, in seconds.\n\t *\n\t * @param {number} value - The loop start value.\n\t * @return {Audio} A reference to this instance.\n\t */setLoopStart(value){this.loopStart=value;return this;}/**\n\t * Sets the loop end value which defines where in the audio buffer the replay should\n\t * stop, in seconds.\n\t *\n\t * @param {number} value - The loop end value.\n\t * @return {Audio} A reference to this instance.\n\t */setLoopEnd(value){this.loopEnd=value;return this;}/**\n\t * Returns the volume.\n\t *\n\t * @return {number} The volume.\n\t */getVolume(){return this.gain.gain.value;}/**\n\t * Sets the volume.\n\t *\n\t * @param {number} value - The volume to set.\n\t * @return {Audio} A reference to this instance.\n\t */setVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}copy(source,recursive){super.copy(source,recursive);if(source.sourceType!=='buffer'){console.warn('THREE.Audio: Audio source type cannot be copied.');return this;}this.autoplay=source.autoplay;this.buffer=source.buffer;this.detune=source.detune;this.loop=source.loop;this.loopStart=source.loopStart;this.loopEnd=source.loopEnd;this.offset=source.offset;this.duration=source.duration;this.playbackRate=source.playbackRate;this.hasPlaybackControl=source.hasPlaybackControl;this.sourceType=source.sourceType;this.filters=source.filters.slice();return this;}clone(recursive){return new this.constructor(this.listener).copy(this,recursive);}}const _position=/*@__PURE__*/new Vector3();const _quaternion=/*@__PURE__*/new Quaternion();const _scale=/*@__PURE__*/new Vector3();const _orientation=/*@__PURE__*/new Vector3();/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */class PositionalAudio extends Audio{/**\n\t * Constructs a positional audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */constructor(listener){super(listener);/**\n\t\t * The panner node represents the location, direction, and behavior of an audio\n\t\t * source in 3D space.\n\t\t *\n\t\t * @type {PannerNode}\n\t\t * @readonly\n\t\t */this.panner=this.context.createPanner();this.panner.panningModel='HRTF';this.panner.connect(this.gain);}connect(){super.connect();this.panner.connect(this.gain);return this;}disconnect(){super.disconnect();this.panner.disconnect(this.gain);return this;}getOutput(){return this.panner;}/**\n\t * Returns the current reference distance.\n\t *\n\t * @return {number} The reference distance.\n\t */getRefDistance(){return this.panner.refDistance;}/**\n\t * Defines the reference distance for reducing volume as the audio source moves\n\t * further from the listener – i.e. the distance at which the volume reduction\n\t * starts taking effect.\n\t *\n\t * @param {number} value - The reference distance to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */setRefDistance(value){this.panner.refDistance=value;return this;}/**\n\t * Returns the current rolloff factor.\n\t *\n\t * @return {number} The rolloff factor.\n\t */getRolloffFactor(){return this.panner.rolloffFactor;}/**\n\t * Defines how quickly the volume is reduced as the source moves away from the listener.\n\t *\n\t * @param {number} value - The rolloff factor.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */setRolloffFactor(value){this.panner.rolloffFactor=value;return this;}/**\n\t * Returns the current distance model.\n\t *\n\t * @return {('linear'|'inverse'|'exponential')} The distance model.\n\t */getDistanceModel(){return this.panner.distanceModel;}/**\n\t * Defines which algorithm to use to reduce the volume of the audio source\n\t * as it moves away from the listener.\n\t *\n\t * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n\t * for more details.\n\t *\n\t * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */setDistanceModel(value){this.panner.distanceModel=value;return this;}/**\n\t * Returns the current max distance.\n\t *\n\t * @return {number} The max distance.\n\t */getMaxDistance(){return this.panner.maxDistance;}/**\n\t * Defines the maximum distance between the audio source and the listener,\n\t * after which the volume is not reduced any further.\n\t *\n\t * This value is used only by the `linear` distance model.\n\t *\n\t * @param {number} value - The max distance.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */setMaxDistance(value){this.panner.maxDistance=value;return this;}/**\n\t * Sets the directional cone in which the audio can be listened.\n\t *\n\t * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n\t * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n\t * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */setDirectionalCone(coneInnerAngle,coneOuterAngle,coneOuterGain){this.panner.coneInnerAngle=coneInnerAngle;this.panner.coneOuterAngle=coneOuterAngle;this.panner.coneOuterGain=coneOuterGain;return this;}updateMatrixWorld(force){super.updateMatrixWorld(force);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position,_quaternion,_scale);_orientation.set(0,0,1).applyQuaternion(_quaternion);const panner=this.panner;if(panner.positionX){// code path for Chrome and Firefox (see #14393)\nconst endTime=this.context.currentTime+this.listener.timeDelta;panner.positionX.linearRampToValueAtTime(_position.x,endTime);panner.positionY.linearRampToValueAtTime(_position.y,endTime);panner.positionZ.linearRampToValueAtTime(_position.z,endTime);panner.orientationX.linearRampToValueAtTime(_orientation.x,endTime);panner.orientationY.linearRampToValueAtTime(_orientation.y,endTime);panner.orientationZ.linearRampToValueAtTime(_orientation.z,endTime);}else{panner.setPosition(_position.x,_position.y,_position.z);panner.setOrientation(_orientation.x,_orientation.y,_orientation.z);}}}/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */class AudioAnalyser{/**\n\t * Constructs a new audio analyzer.\n\t *\n\t * @param {Audio} audio - The audio to analyze.\n\t * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n\t */constructor(audio,fftSize=2048){/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AnalyserNode}\n\t\t */this.analyser=audio.context.createAnalyser();this.analyser.fftSize=fftSize;/**\n\t\t * Holds the analyzed data.\n\t\t *\n\t\t * @type {Uint8Array}\n\t\t */this.data=new Uint8Array(this.analyser.frequencyBinCount);audio.getOutput().connect(this.analyser);}/**\n\t * Returns an array with frequency data of the audio.\n\t *\n\t * Each item in the array represents the decibel value for a specific frequency.\n\t * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n\t * For example, for 48000 sample rate, the last item of the array will represent\n\t * the decibel value for 24000 Hz.\n\t *\n\t * @return {Uint8Array} The frequency data.\n\t */getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data;}/**\n\t * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n\t *\n\t * @return {number} The average frequency.\n\t */getAverageFrequency(){let value=0;const data=this.getFrequencyData();for(let i=0;i<data.length;i++){value+=data[i];}return value/data.length;}}/**\n * Buffered scene graph property that allows weighted accumulation; used internally.\n */class PropertyMixer{/**\n\t * Constructs a new property mixer.\n\t *\n\t * @param {PropertyBinding} binding - The property binding.\n\t * @param {string} typeName - The keyframe track type name.\n\t * @param {number} valueSize - The keyframe track value size.\n\t */constructor(binding,typeName,valueSize){/**\n\t\t * The property binding.\n\t\t *\n\t\t * @type {PropertyBinding}\n\t\t */this.binding=binding;/**\n\t\t * The keyframe track value size.\n\t\t *\n\t\t * @type {number}\n\t\t */this.valueSize=valueSize;let mixFunction,mixFunctionAdditive,setIdentity;// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n//\n// interpolators can use .buffer as their .result\n// the data then goes to 'incoming'\n//\n// 'accu0' and 'accu1' are used frame-interleaved for\n// the cumulative result and are compared to detect\n// changes\n//\n// 'orig' stores the original state of the property\n//\n// 'add' is used for additive cumulative results\n//\n// 'work' is optional and is only present for quaternion types. It is used\n// to store intermediate quaternion multiplication results\nswitch(typeName){case'quaternion':mixFunction=this._slerp;mixFunctionAdditive=this._slerpAdditive;setIdentity=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(valueSize*6);this._workIndex=5;break;case'string':case'bool':mixFunction=this._select;// Use the regular mix function and for additive on these types,\n// additive is not relevant for non-numeric types\nmixFunctionAdditive=this._select;setIdentity=this._setAdditiveIdentityOther;this.buffer=new Array(valueSize*5);break;default:mixFunction=this._lerp;mixFunctionAdditive=this._lerpAdditive;setIdentity=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(valueSize*5);}this._mixBufferRegion=mixFunction;this._mixBufferRegionAdditive=mixFunctionAdditive;this._setIdentity=setIdentity;this._origIndex=3;this._addIndex=4;/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.cumulativeWeight=0;/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.cumulativeWeightAdditive=0;/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.useCount=0;/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.referenceCount=0;}/**\n\t * Accumulates data in the `incoming` region into `accu<i>`.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t * @param {number} weight - The weight.\n\t */accumulate(accuIndex,weight){// note: happily accumulating nothing when weight = 0, the caller knows\n// the weight and shouldn't have made the call in the first place\nconst buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride;let currentWeight=this.cumulativeWeight;if(currentWeight===0){// accuN := incoming * weight\nfor(let i=0;i!==stride;++i){buffer[offset+i]=buffer[i];}currentWeight=weight;}else{// accuN := accuN + incoming * weight\ncurrentWeight+=weight;const mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride);}this.cumulativeWeight=currentWeight;}/**\n\t * Accumulates data in the `incoming` region into `add`.\n\t *\n\t * @param {number} weight - The weight.\n\t */accumulateAdditive(weight){const buffer=this.buffer,stride=this.valueSize,offset=stride*this._addIndex;if(this.cumulativeWeightAdditive===0){// add = identity\nthis._setIdentity();}// add := add + incoming * weight\nthis._mixBufferRegionAdditive(buffer,offset,0,weight,stride);this.cumulativeWeightAdditive+=weight;}/**\n\t * Applies the state of `accu<i>` to the binding when accus differ.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t */apply(accuIndex){const stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,weightAdditive=this.cumulativeWeightAdditive,binding=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(weight<1){// accuN := accuN + original * ( 1 - cumulativeWeight )\nconst originalValueOffset=stride*this._origIndex;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride);}if(weightAdditive>0){// accuN := accuN + additive accuN\nthis._mixBufferRegionAdditive(buffer,offset,this._addIndex*stride,1,stride);}for(let i=stride,e=stride+stride;i!==e;++i){if(buffer[i]!==buffer[i+stride]){// value has changed -> update scene graph\nbinding.setValue(buffer,offset);break;}}}/**\n\t * Remembers the state of the bound property and copy it to both accus.\n\t */saveOriginalState(){const binding=this.binding;const buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*this._origIndex;binding.getValue(buffer,originalValueOffset);// accu[0..1] := orig -- initially detect changes against the original\nfor(let i=stride,e=originalValueOffset;i!==e;++i){buffer[i]=buffer[originalValueOffset+i%stride];}// Add to identity for additive\nthis._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;}/**\n\t * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.\n\t */restoreOriginalState(){const originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset);}// internals\n_setAdditiveIdentityNumeric(){const startIndex=this._addIndex*this.valueSize;const endIndex=startIndex+this.valueSize;for(let i=startIndex;i<endIndex;i++){this.buffer[i]=0;}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1;}_setAdditiveIdentityOther(){const startIndex=this._origIndex*this.valueSize;const targetIndex=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++){this.buffer[targetIndex+i]=this.buffer[startIndex+i];}}// mix functions\n_select(buffer,dstOffset,srcOffset,t,stride){if(t>=0.5){for(let i=0;i!==stride;++i){buffer[dstOffset+i]=buffer[srcOffset+i];}}}_slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t);}_slerpAdditive(buffer,dstOffset,srcOffset,t,stride){const workOffset=this._workIndex*stride;// Store result in intermediate buffer offset\nQuaternion.multiplyQuaternionsFlat(buffer,workOffset,buffer,dstOffset,buffer,srcOffset);// Slerp to the intermediate result\nQuaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,workOffset,t);}_lerp(buffer,dstOffset,srcOffset,t,stride){const s=1-t;for(let i=0;i!==stride;++i){const j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t;}}_lerpAdditive(buffer,dstOffset,srcOffset,t,stride){for(let i=0;i!==stride;++i){const j=dstOffset+i;buffer[j]=buffer[j]+buffer[srcOffset+i]*t;}}}// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE='\\\\[\\\\]\\\\.:\\\\/';const _reservedRe=new RegExp('['+_RESERVED_CHARS_RE+']','g');// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar='[^'+_RESERVED_CHARS_RE+']';const _wordCharOrDot='[^'+_RESERVED_CHARS_RE.replace('\\\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe=/*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace('WC',_wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe=/*@__PURE__*/ /(WCOD+)?/.source.replace('WCOD',_wordCharOrDot);// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe=/*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC',_wordChar);// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe=/*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC',_wordChar);const _trackRe=new RegExp(''+'^'+_directoryRe+_nodeRe+_objectRe+_propertyRe+'$');const _supportedObjectNames=['material','materials','bones','map'];class Composite{constructor(targetGroup,path,optionalParsedPath){const parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,parsedPath);}getValue(array,offset){this.bind();// bind all binding\nconst firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];// and only call .getValue on the first\nif(binding!==undefined)binding.getValue(array,offset);}setValue(array,offset){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].setValue(array,offset);}}bind(){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].bind();}}unbind(){const bindings=this._bindings;for(let i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].unbind();}}}// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\n/**\n * This holds a reference to a real property in the scene graph; used internally.\n */class PropertyBinding{/**\n\t * Constructs a new property binding.\n\t *\n\t * @param {Object} rootNode - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t */constructor(rootNode,path,parsedPath){/**\n\t\t * The object path to the animated property.\n\t\t *\n\t\t * @type {string}\n\t\t */this.path=path;/**\n\t\t * An object holding information about the path.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path);/**\n\t\t * The object owns the animated property.\n\t\t *\n\t\t * @type {?Object}\n\t\t */this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName);/**\n\t\t * The root node.\n\t\t *\n\t\t * @type {Object3D|Skeleton}\n\t\t */this.rootNode=rootNode;// initial state of these methods that calls 'bind'\nthis.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}/**\n\t * Factory method for creating a property binding from the given parameters.\n\t *\n\t * @static\n\t * @param {Object} root - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t * @return {PropertyBinding|Composite} The created property binding or composite.\n\t */static create(root,path,parsedPath){if(!(root&&root.isAnimationObjectGroup)){return new PropertyBinding(root,path,parsedPath);}else{return new PropertyBinding.Composite(root,path,parsedPath);}}/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name - Node name to be sanitized.\n\t * @return {string} The sanitized node name.\n\t */static sanitizeNodeName(name){return name.replace(/\\s/g,'_').replace(_reservedRe,'');}/**\n\t * Parses the given track name (an object path to an animated property) and\n\t * returns an object with information about the path. Matches strings in the following forms:\n\t *\n\t * - nodeName.property\n\t * - nodeName.property[accessor]\n\t * - nodeName.material.property[accessor]\n\t * - uuid.property[accessor]\n\t * - uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t * - parentName/nodeName.property\n\t * - parentName/parentName/nodeName.property[index]\n\t * - .bone[Armature.DEF_cog].position\n\t * - scene:helium_balloon_model:helium_balloon_model.position\n\t *\n\t * @static\n\t * @param {string} trackName - The track name to parse.\n\t * @return {Object} The parsed track name as an object.\n\t */static parseTrackName(trackName){const matches=_trackRe.exec(trackName);if(matches===null){throw new Error('PropertyBinding: Cannot parse trackName: '+trackName);}const results={// directoryName: matches[ 1 ], // (tschw) currently unused\nnodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],// required\npropertyIndex:matches[6]};const lastDot=results.nodeName&&results.nodeName.lastIndexOf('.');if(lastDot!==undefined&&lastDot!==-1){const objectName=results.nodeName.substring(lastDot+1);// Object names must be checked against an allowlist. Otherwise, there\n// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n// 'bar' could be the objectName, or part of a nodeName (which can\n// include '.' characters).\nif(_supportedObjectNames.indexOf(objectName)!==-1){results.nodeName=results.nodeName.substring(0,lastDot);results.objectName=objectName;}}if(results.propertyName===null||results.propertyName.length===0){throw new Error('PropertyBinding: can not parse propertyName from trackName: '+trackName);}return results;}/**\n\t * Searches for a node in the hierarchy of the given root object by the given\n\t * node name.\n\t *\n\t * @static\n\t * @param {Object} root - The root object.\n\t * @param {string|number} nodeName - The name of the node.\n\t * @return {?Object} The found node. Returns `null` if no object was found.\n\t */static findNode(root,nodeName){if(nodeName===undefined||nodeName===''||nodeName==='.'||nodeName===-1||nodeName===root.name||nodeName===root.uuid){return root;}// search into skeleton bones.\nif(root.skeleton){const bone=root.skeleton.getBoneByName(nodeName);if(bone!==undefined){return bone;}}// search into node subtree.\nif(root.children){const searchNodeSubtree=function(children){for(let i=0;i<children.length;i++){const childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName){return childNode;}const result=searchNodeSubtree(childNode.children);if(result)return result;}return null;};const subTreeNode=searchNodeSubtree(root.children);if(subTreeNode){return subTreeNode;}}return null;}// these are used to \"bind\" a nonexistent property\n_getValue_unavailable(){}_setValue_unavailable(){}// Getters\n_getValue_direct(buffer,offset){buffer[offset]=this.targetObject[this.propertyName];}_getValue_array(buffer,offset){const source=this.resolvedProperty;for(let i=0,n=source.length;i!==n;++i){buffer[offset++]=source[i];}}_getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex];}_getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset);}// Direct\n_setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];}_setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.needsUpdate=true;}_setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}// EntireArray\n_setValue_array(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}}_setValue_array_setNeedsUpdate(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.needsUpdate=true;}_setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){const dest=this.resolvedProperty;for(let i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.matrixWorldNeedsUpdate=true;}// ArrayElement\n_setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];}_setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=true;}_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}// HasToFromArray\n_setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);}_setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.needsUpdate=true;}_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=true;}_getValue_unbound(targetArray,offset){this.bind();this.getValue(targetArray,offset);}_setValue_unbound(sourceArray,offset){this.bind();this.setValue(sourceArray,offset);}/**\n\t * Creates a getter / setter pair for the property tracked by this binding.\n\t */bind(){let targetObject=this.node;const parsedPath=this.parsedPath;const objectName=parsedPath.objectName;const propertyName=parsedPath.propertyName;let propertyIndex=parsedPath.propertyIndex;if(!targetObject){targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName);this.node=targetObject;}// set fail state so we can just 'return' on error\nthis.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;// ensure there is a value node\nif(!targetObject){console.warn('THREE.PropertyBinding: No target node found for track: '+this.path+'.');return;}if(objectName){let objectIndex=parsedPath.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....\nswitch(objectName){case'materials':if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.materials){console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',this);return;}targetObject=targetObject.material.materials;break;case'bones':if(!targetObject.skeleton){console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',this);return;}// potential future optimization: skip this if propertyIndex is already an integer\n// and convert the integer string to a true integer.\ntargetObject=targetObject.skeleton.bones;// support resolving morphTarget names into indices.\nfor(let i=0;i<targetObject.length;i++){if(targetObject[i].name===objectIndex){objectIndex=i;break;}}break;case'map':if('map'in targetObject){targetObject=targetObject.map;break;}if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.map){console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.',this);return;}targetObject=targetObject.material.map;break;default:if(targetObject[objectName]===undefined){console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.',this);return;}targetObject=targetObject[objectName];}if(objectIndex!==undefined){if(targetObject[objectIndex]===undefined){console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',this,targetObject);return;}targetObject=targetObject[objectIndex];}}// resolve property\nconst nodeProperty=targetObject[propertyName];if(nodeProperty===undefined){const nodeName=parsedPath.nodeName;console.error('THREE.PropertyBinding: Trying to update property for track: '+nodeName+'.'+propertyName+' but it wasn\\'t found.',targetObject);return;}// determine versioning scheme\nlet versioning=this.Versioning.None;this.targetObject=targetObject;if(targetObject.isMaterial===true){versioning=this.Versioning.NeedsUpdate;}else if(targetObject.isObject3D===true){versioning=this.Versioning.MatrixWorldNeedsUpdate;}// determine how the property gets bound\nlet bindingType=this.BindingType.Direct;if(propertyIndex!==undefined){// access a sub element of the property array (only primitives are supported right now)\nif(propertyName==='morphTargetInfluences'){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n// support resolving morphTarget names into indices.\nif(!targetObject.geometry){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',this);return;}if(!targetObject.geometry.morphAttributes){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',this);return;}if(targetObject.morphTargetDictionary[propertyIndex]!==undefined){propertyIndex=targetObject.morphTargetDictionary[propertyIndex];}}bindingType=this.BindingType.ArrayElement;this.resolvedProperty=nodeProperty;this.propertyIndex=propertyIndex;}else if(nodeProperty.fromArray!==undefined&&nodeProperty.toArray!==undefined){// must use copy for Object3D.Euler/Quaternion\nbindingType=this.BindingType.HasFromToArray;this.resolvedProperty=nodeProperty;}else if(Array.isArray(nodeProperty)){bindingType=this.BindingType.EntireArray;this.resolvedProperty=nodeProperty;}else{this.propertyName=propertyName;}// select getter / setter\nthis.getValue=this.GetterByBindingType[bindingType];this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning];}/**\n\t * Unbinds the property.\n\t */unbind(){this.node=null;// back to the prototype version of getValue / setValue\n// note: avoiding to mutate the shape of 'this' via 'delete'\nthis.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}}PropertyBinding.Composite=Composite;PropertyBinding.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};PropertyBinding.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};PropertyBinding.prototype.GetterByBindingType=[PropertyBinding.prototype._getValue_direct,PropertyBinding.prototype._getValue_array,PropertyBinding.prototype._getValue_arrayElement,PropertyBinding.prototype._getValue_toArray];PropertyBinding.prototype.SetterByBindingTypeAndVersioning=[[// Direct\nPropertyBinding.prototype._setValue_direct,PropertyBinding.prototype._setValue_direct_setNeedsUpdate,PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[// EntireArray\nPropertyBinding.prototype._setValue_array,PropertyBinding.prototype._setValue_array_setNeedsUpdate,PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate],[// ArrayElement\nPropertyBinding.prototype._setValue_arrayElement,PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[// HasToFromArray\nPropertyBinding.prototype._setValue_fromArray,PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];/**\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * - Add objects you would otherwise pass as 'root' to the\n * constructor or the .clipAction method of AnimationMixer.\n * - Instead pass this object as 'root'.\n * - You can also add and remove objects later when the mixer is running.\n *\n * Note:\n *\n * - Objects of this class appear as one object to the mixer,\n * so cache control of the individual objects must be done on the group.\n *\n * Limitation:\n *\n * - The animated properties must be compatible among the all objects in the group.\n * - A single property can either be controlled through a target group or directly, but not both.\n */class AnimationObjectGroup{/**\n\t * Constructs a new animation group.\n\t *\n\t * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.\n\t */constructor(){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isAnimationObjectGroup=true;/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */this.uuid=generateUUID();// cached objects followed by the active ones\nthis._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;// threshold\n// note: read by PropertyBinding.Composite\nconst indices={};this._indicesByUUID=indices;// for bookkeeping\nfor(let i=0,n=arguments.length;i!==n;++i){indices[arguments[i].uuid]=i;}this._paths=[];// inside: string\nthis._parsedPaths=[];// inside: { we don't care, here }\nthis._bindings=[];// inside: Array< PropertyBinding >\nthis._bindingsIndicesByPath={};// inside: indices in these arrays\nconst scope=this;this.stats={objects:{get total(){return scope._objects.length;},get inUse(){return this.total-scope.nCachedObjects_;}},get bindingsPerObject(){return scope._bindings.length;}};}/**\n\t * Adds an arbitrary number of objects to this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to add.\n\t */add(){const objects=this._objects,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length;let knownObject=undefined,nObjects=objects.length,nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid;let index=indicesByUUID[uuid];if(index===undefined){// unknown object -> add it to the ACTIVE region\nindex=nObjects++;indicesByUUID[uuid]=index;objects.push(object);// accounting is done, now do the same for all bindings\nfor(let j=0,m=nBindings;j!==m;++j){bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]));}}else if(index<nCachedObjects){knownObject=objects[index];// move existing object to the ACTIVE region\nconst firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;// accounting is done, now do the same for all bindings\nfor(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex];let binding=bindingsForPath[index];bindingsForPath[index]=lastCached;if(binding===undefined){// since we do not bother to create new bindings\n// for objects that are cached, the binding may\n// or may not exist\nbinding=new PropertyBinding(object,paths[j],parsedPaths[j]);}bindingsForPath[firstActiveIndex]=binding;}}else if(objects[index]!==knownObject){console.error('THREE.AnimationObjectGroup: Different objects with the same UUID '+'detected. Clean the caches or recreate your infrastructure when reloading scenes.');}// else the object is already where we want it to be\n}// for arguments\nthis.nCachedObjects_=nCachedObjects;}/**\n\t * Removes an arbitrary number of objects to this animation group\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to remove.\n\t */remove(){const objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;let nCachedObjects=this.nCachedObjects_;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined&&index>=nCachedObjects){// move existing object into the CACHED region\nconst lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;// accounting is done, now do the same for all bindings\nfor(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive;bindingsForPath[lastCachedIndex]=binding;}}}// for arguments\nthis.nCachedObjects_=nCachedObjects;}/**\n\t * Deallocates all memory resources for the passed 3D objects of this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to uncache.\n\t */uncache(){const objects=this._objects,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;let nCachedObjects=this.nCachedObjects_,nObjects=objects.length;for(let i=0,n=arguments.length;i!==n;++i){const object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined){delete indicesByUUID[uuid];if(index<nCachedObjects){// object is cached, shrink the CACHED region\nconst firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];// last cached object takes this object's place\nindicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;// last object goes to the activated slot and pop\nindicesByUUID[lastObject.uuid]=firstActiveIndex;objects[firstActiveIndex]=lastObject;objects.pop();// accounting is done, now do the same for all bindings\nfor(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached;bindingsForPath[firstActiveIndex]=last;bindingsForPath.pop();}}else{// object is active, just swap with the last and pop\nconst lastIndex=--nObjects,lastObject=objects[lastIndex];if(lastIndex>0){indicesByUUID[lastObject.uuid]=index;}objects[index]=lastObject;objects.pop();// accounting is done, now do the same for all bindings\nfor(let j=0,m=nBindings;j!==m;++j){const bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex];bindingsForPath.pop();}}// cached or active\n}// if object is known\n}// for arguments\nthis.nCachedObjects_=nCachedObjects;}// Internal interface used by befriended PropertyBinding.Composite:\nsubscribe_(path,parsedPath){// returns an array of bindings for the given path that is changed\n// according to the contained objects in the group\nconst indicesByPath=this._bindingsIndicesByPath;let index=indicesByPath[path];const bindings=this._bindings;if(index!==undefined)return bindings[index];const paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);for(let i=nCachedObjects,n=objects.length;i!==n;++i){const object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath);}return bindingsForPath;}unsubscribe_(path){// tells the group to forget about a property path and no longer\n// update the array previously obtained with 'subscribe_'\nconst indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==undefined){const paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop();}}}/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */class AnimationAction{/**\n\t * Constructs a new animation action.\n\t *\n\t * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n\t * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n\t * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t */constructor(mixer,clip,localRoot=null,blendMode=clip.blendMode){this._mixer=mixer;this._clip=clip;this._localRoot=localRoot;/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */this.blendMode=blendMode;const tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks);const interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let i=0;i!==nTracks;++i){const interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant;interpolant.settings=interpolantSettings;}this._interpolantSettings=interpolantSettings;this._interpolants=interpolants;// bound by the mixer\n// inside: PropertyMixer (managed by the mixer)\nthis._propertyBindings=new Array(nTracks);this._cacheIndex=null;// for the memory manager\nthis._byClipCacheIndex=null;// for the memory manager\nthis._timeScaleInterpolant=null;this._weightInterpolant=null;/**\n\t\t * The loop mode, set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n\t\t * @default LoopRepeat\n\t\t */this.loop=LoopRepeat;this._loopCount=-1;// global mixer time when the action is to be started\n// it's set back to 'null' upon start of the action\nthis._startTime=null;/**\n\t\t * The local time of this action (in seconds, starting with `0`).\n\t\t *\n\t\t * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n\t\t * loop state).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */this.time=0;/**\n\t\t * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n\t\t * animation to pause. Negative values cause the animation to play backwards.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.timeScale=1;this._effectiveTimeScale=1;/**\n\t\t * The degree of influence of this action (in the interval `[0, 1]`). Values\n\t\t * between `0` (no impact) and `1` (full impact) can be used to blend between\n\t\t * several actions.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.weight=1;this._effectiveWeight=1;/**\n\t\t * The number of repetitions of the performed clip over the course of this action.\n\t\t * Can be set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * Setting this number has no effect if {@link AnimationAction#loop} is set to\n\t\t * `THREE:LoopOnce`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */this.repetitions=Infinity;/**\n\t\t * If set to `true`, the playback of the action is paused.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.paused=false;/**\n\t\t * If set to `false`, the action is disabled so it has no impact.\n\t\t *\n\t\t * When the action is re-enabled, the animation continues from its current\n\t\t * time (setting `enabled` to `false` doesn't reset the action).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.enabled=true;/**\n\t\t * If set to true the animation will automatically be paused on its last frame.\n\t\t *\n\t\t * If set to false, {@link AnimationAction#enabled} will automatically be switched\n\t\t * to `false` when the last loop of the action has finished, so that this action has\n\t\t * no further impact.\n\t\t *\n\t\t * Note: This member has no impact if the action is interrupted (it\n\t\t * has only an effect if its last loop has really finished).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */this.clampWhenFinished=false;/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.zeroSlopeAtStart=true;/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.zeroSlopeAtEnd=true;}/**\n\t * Starts the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */play(){this._mixer._activateAction(this);return this;}/**\n\t * Stops the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */stop(){this._mixer._deactivateAction(this);return this.reset();}/**\n\t * Resets the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */reset(){this.paused=false;this.enabled=true;this.time=0;// restart clip\nthis._loopCount=-1;// forget previous loops\nthis._startTime=null;// forget scheduling\nreturn this.stopFading().stopWarping();}/**\n\t * Returns `true` if the animation is running.\n\t *\n\t * @return {boolean} Whether the animation is running or not.\n\t */isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this);}/**\n\t * Returns `true` when {@link AnimationAction#play} has been called.\n\t *\n\t * @return {boolean} Whether the animation is scheduled or not.\n\t */isScheduled(){return this._mixer._isActiveAction(this);}/**\n\t * Defines the time when the animation should start.\n\t *\n\t * @param {number} time - The start time in seconds.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */startAt(time){this._startTime=time;return this;}/**\n\t * Configures the loop settings for this action.\n\t *\n\t * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n\t * @param {number} repetitions - The number of repetitions.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */setLoop(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this;}/**\n\t * Sets the effective weight of this action.\n\t *\n\t * An action has no effect and thus an effective weight of zero when the\n\t * action is disabled.\n\t *\n\t * @param {number} weight - The weight to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */setEffectiveWeight(weight){this.weight=weight;// note: same logic as when updated at runtime\nthis._effectiveWeight=this.enabled?weight:0;return this.stopFading();}/**\n\t * Returns the effective weight of this action.\n\t *\n\t * @return {number} The effective weight.\n\t */getEffectiveWeight(){return this._effectiveWeight;}/**\n\t * Fades the animation in by increasing its weight gradually from `0` to `1`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */fadeIn(duration){return this._scheduleFading(duration,0,1);}/**\n\t * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */fadeOut(duration){return this._scheduleFading(duration,1,0);}/**\n\t * Causes this action to fade in and the given action to fade out,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */crossFadeFrom(fadeOutAction,duration,warp=false){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp===true){const fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1.0,startEndRatio,duration);this.warp(endStartRatio,1.0,duration);}return this;}/**\n\t * Causes this action to fade out and the given action to fade in,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeInAction - The animation action to fade in.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */crossFadeTo(fadeInAction,duration,warp=false){return fadeInAction.crossFadeFrom(this,duration,warp);}/**\n\t * Stops any fading which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */stopFading(){const weightInterpolant=this._weightInterpolant;if(weightInterpolant!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(weightInterpolant);}return this;}/**\n\t * Sets the effective time scale of this action.\n\t *\n\t * An action has no effect and thus an effective time scale of zero when the\n\t * action is paused.\n\t *\n\t * @param {number} timeScale - The time scale to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */setEffectiveTimeScale(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping();}/**\n\t * Returns the effective time scale of this action.\n\t *\n\t * @return {number} The effective time scale.\n\t */getEffectiveTimeScale(){return this._effectiveTimeScale;}/**\n\t * Sets the duration for a single loop of this action.\n\t *\n\t * @param {number} duration - The duration to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */setDuration(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping();}/**\n\t * Synchronizes this action with the passed other action.\n\t *\n\t * @param {AnimationAction} action - The action to sync with.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */syncWith(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping();}/**\n\t * Decelerates this animation's speed to `0` within the passed time interval.\n\t *\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */halt(duration){return this.warp(this._effectiveTimeScale,0,duration);}/**\n\t * Changes the playback speed, within the passed time interval, by modifying\n\t * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n\t * `endTimeScale`.\n\t *\n\t * @param {number} startTimeScale - The start time scale.\n\t * @param {number} endTimeScale - The end time scale.\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */warp(startTimeScale,endTimeScale,duration){const mixer=this._mixer,now=mixer.time,timeScale=this.timeScale;let interpolant=this._timeScaleInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._timeScaleInterpolant=interpolant;}const times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;times[1]=now+duration;values[0]=startTimeScale/timeScale;values[1]=endTimeScale/timeScale;return this;}/**\n\t * Stops any scheduled warping which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */stopWarping(){const timeScaleInterpolant=this._timeScaleInterpolant;if(timeScaleInterpolant!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(timeScaleInterpolant);}return this;}/**\n\t * Returns the animation mixer of this animation action.\n\t *\n\t * @return {AnimationMixer} The animation mixer.\n\t */getMixer(){return this._mixer;}/**\n\t * Returns the animation clip of this animation action.\n\t *\n\t * @return {AnimationClip} The animation clip.\n\t */getClip(){return this._clip;}/**\n\t * Returns the root object of this animation action.\n\t *\n\t * @return {Object3D} The root object.\n\t */getRoot(){return this._localRoot||this._mixer._root;}// Interna\n_update(time,deltaTime,timeDirection,accuIndex){// called by the mixer\nif(!this.enabled){// call ._updateWeight() to update ._effectiveWeight\nthis._updateWeight(time);return;}const startTime=this._startTime;if(startTime!==null){// check for scheduled start of action\nconst timeRunning=(time-startTime)*timeDirection;if(timeRunning<0||timeDirection===0){deltaTime=0;}else{this._startTime=null;// unschedule\ndeltaTime=timeDirection*timeRunning;}}// apply time scale and advance time\ndeltaTime*=this._updateTimeScale(time);const clipTime=this._updateTime(deltaTime);// note: _updateTime may disable the action resulting in\n// an effective weight of 0\nconst weight=this._updateWeight(time);if(weight>0){const interpolants=this._interpolants;const propertyMixers=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulateAdditive(weight);}break;case NormalAnimationBlendMode:default:for(let j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulate(accuIndex,weight);}}}}_updateWeight(time){let weight=0;if(this.enabled){weight=this.weight;const interpolant=this._weightInterpolant;if(interpolant!==null){const interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopFading();if(interpolantValue===0){// faded out, disable\nthis.enabled=false;}}}}this._effectiveWeight=weight;return weight;}_updateTimeScale(time){let timeScale=0;if(!this.paused){timeScale=this.timeScale;const interpolant=this._timeScaleInterpolant;if(interpolant!==null){const interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopWarping();if(timeScale===0){// motion has halted, pause\nthis.paused=true;}else{// warp done - apply final time scale\nthis.timeScale=timeScale;}}}}this._effectiveTimeScale=timeScale;return timeScale;}_updateTime(deltaTime){const duration=this._clip.duration;const loop=this.loop;let time=this.time+deltaTime;let loopCount=this._loopCount;const pingPong=loop===LoopPingPong;if(deltaTime===0){if(loopCount===-1)return time;return pingPong&&(loopCount&1)===1?duration-time:time;}if(loop===LoopOnce){if(loopCount===-1){// just started\nthis._loopCount=0;this._setEndings(true,true,false);}handle_stop:{if(time>=duration){time=duration;}else if(time<0){time=0;}else{this.time=time;break handle_stop;}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime<0?-1:1});}}else{// repetitive Repeat or PingPong\nif(loopCount===-1){// just started\nif(deltaTime>=0){loopCount=0;this._setEndings(true,this.repetitions===0,pingPong);}else{// when looping in reverse direction, the initial\n// transition through zero counts as a repetition,\n// so leave loopCount at -1\nthis._setEndings(this.repetitions===0,true,pingPong);}}if(time>=duration||time<0){// wrap around\nconst loopDelta=Math.floor(time/duration);// signed\ntime-=duration*loopDelta;loopCount+=Math.abs(loopDelta);const pending=this.repetitions-loopCount;if(pending<=0){// have to stop (switch state, clamp time, fire event)\nif(this.clampWhenFinished)this.paused=true;else this.enabled=false;time=deltaTime>0?duration:0;this.time=time;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime>0?1:-1});}else{// keep running\nif(pending===1){// entering the last round\nconst atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong);}else{this._setEndings(false,false,pingPong);}this._loopCount=loopCount;this.time=time;this._mixer.dispatchEvent({type:'loop',action:this,loopDelta:loopDelta});}}else{this.time=time;}if(pingPong&&(loopCount&1)===1){// invert time for the \"pong round\"\nreturn duration-time;}}return time;}_setEndings(atStart,atEnd,pingPong){const settings=this._interpolantSettings;if(pingPong){settings.endingStart=ZeroSlopeEnding;settings.endingEnd=ZeroSlopeEnding;}else{// assuming for LoopOnce atStart == atEnd == true\nif(atStart){settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingStart=WrapAroundEnding;}if(atEnd){settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingEnd=WrapAroundEnding;}}}_scheduleFading(duration,weightNow,weightThen){const mixer=this._mixer,now=mixer.time;let interpolant=this._weightInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._weightInterpolant=interpolant;}const times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;values[0]=weightNow;times[1]=now+duration;values[1]=weightThen;return this;}}const _controlInterpolantsResultBuffer=new Float32Array(1);/**\n * `AnimationMixer` is a player for animations on a particular object in\n * the scene. When multiple objects in the scene are animated independently,\n * one `AnimationMixer` may be used for each object.\n */class AnimationMixer extends EventDispatcher{/**\n\t * Constructs a new animation mixer.\n\t *\n\t * @param {Object3D} root - The object whose animations shall be played by this mixer.\n\t */constructor(root){super();this._root=root;this._initMemoryManager();this._accuIndex=0;/**\n\t\t * The global mixer time (in seconds; starting with `0` on the mixer's creation).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.time=0;/**\n\t\t * A scaling factor for the global time.\n\t\t *\n\t\t * Note: Setting this member to `0` and later back to `1` is a\n\t\t * possibility to pause/unpause all actions that are controlled by this\n\t\t * mixer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.timeScale=1.0;}_bindAction(action,prototypeAction){const root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName;let bindingsByName=bindingsByRoot[rootUuid];if(bindingsByName===undefined){bindingsByName={};bindingsByRoot[rootUuid]=bindingsByName;}for(let i=0;i!==nTracks;++i){const track=tracks[i],trackName=track.name;let binding=bindingsByName[trackName];if(binding!==undefined){++binding.referenceCount;bindings[i]=binding;}else{binding=bindings[i];if(binding!==undefined){// existing binding, make sure the cache knows\nif(binding._cacheIndex===null){++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);}continue;}const path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);bindings[i]=binding;}interpolants[i].resultBuffer=binding.buffer;}}_activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){// this action has been forgotten by the cache, but the user\n// appears to be still using it -> rebind\nconst rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid);}const bindings=action._propertyBindings;// increment reference counts / sort out state\nfor(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(binding.useCount++===0){this._lendBinding(binding);binding.saveOriginalState();}}this._lendAction(action);}}_deactivateAction(action){if(this._isActiveAction(action)){const bindings=action._propertyBindings;// decrement reference counts / sort out state\nfor(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(--binding.useCount===0){binding.restoreOriginalState();this._takeBackBinding(binding);}}this._takeBackAction(action);}}// Memory manager\n_initMemoryManager(){this._actions=[];// 'nActiveActions' followed by inactive ones\nthis._nActiveActions=0;this._actionsByClip={};// inside:\n// {\n// \tknownActions: Array< AnimationAction > - used as prototypes\n// \tactionByRoot: AnimationAction - lookup\n// }\nthis._bindings=[];// 'nActiveBindings' followed by inactive ones\nthis._nActiveBindings=0;this._bindingsByRootAndName={};// inside: Map< name, PropertyMixer >\nthis._controlInterpolants=[];// same game as above\nthis._nActiveControlInterpolants=0;const scope=this;this.stats={actions:{get total(){return scope._actions.length;},get inUse(){return scope._nActiveActions;}},bindings:{get total(){return scope._bindings.length;},get inUse(){return scope._nActiveBindings;}},controlInterpolants:{get total(){return scope._controlInterpolants.length;},get inUse(){return scope._nActiveControlInterpolants;}}};}// Memory management for AnimationAction objects\n_isActiveAction(action){const index=action._cacheIndex;return index!==null&&index<this._nActiveActions;}_addInactiveAction(action,clipUuid,rootUuid){const actions=this._actions,actionsByClip=this._actionsByClip;let actionsForClip=actionsByClip[clipUuid];if(actionsForClip===undefined){actionsForClip={knownActions:[action],actionByRoot:{}};action._byClipCacheIndex=0;actionsByClip[clipUuid]=actionsForClip;}else{const knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length;knownActions.push(action);}action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action;}_removeInactiveAction(action){const actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;const clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();action._byClipCacheIndex=null;const actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid];if(knownActionsForClip.length===0){delete actionsByClip[clipUuid];}this._removeInactiveBindingsForAction(action);}_removeInactiveBindingsForAction(action){const bindings=action._propertyBindings;for(let i=0,n=bindings.length;i!==n;++i){const binding=bindings[i];if(--binding.referenceCount===0){this._removeInactiveBinding(binding);}}}_lendAction(action){// [ active actions |  inactive actions  ]\n// [  active actions >| inactive actions ]\n//                 s        a\n//                  <-swap->\n//                 a        s\nconst actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction;}_takeBackAction(action){// [  active actions  | inactive actions ]\n// [ active actions |< inactive actions  ]\n//        a        s\n//         <-swap->\n//        s        a\nconst actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=prevIndex;actions[prevIndex]=lastActiveAction;}// Memory management for PropertyMixer objects\n_addInactiveBinding(binding,rootUuid,trackName){const bindingsByRoot=this._bindingsByRootAndName,bindings=this._bindings;let bindingByName=bindingsByRoot[rootUuid];if(bindingByName===undefined){bindingByName={};bindingsByRoot[rootUuid]=bindingByName;}bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding);}_removeInactiveBinding(binding){const bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex;bindings[cacheIndex]=lastInactiveBinding;bindings.pop();delete bindingByName[trackName];if(Object.keys(bindingByName).length===0){delete bindingsByRoot[rootUuid];}}_lendBinding(binding){const bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding;}_takeBackBinding(binding){const bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=lastActiveBinding;}// Memory management of Interpolants for weight and time scale\n_lendControlInterpolant(){const interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++;let interpolant=interpolants[lastActiveIndex];if(interpolant===undefined){interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,_controlInterpolantsResultBuffer);interpolant.__cacheIndex=lastActiveIndex;interpolants[lastActiveIndex]=interpolant;}return interpolant;}_takeBackControlInterpolant(interpolant){const interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant;}/**\n\t * Returns an instance of {@link AnimationAction} for the passed clip.\n\t *\n\t * If an action fitting the clip and root parameters doesn't yet exist, it\n\t * will be created by this method. Calling this method several times with the\n\t * same clip and root parameters always returns the same action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t * @return {?AnimationAction} The animation action.\n\t */clipAction(clip,optionalRoot,blendMode){const root=optionalRoot||this._root,rootUuid=root.uuid;let clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip;const clipUuid=clipObject!==null?clipObject.uuid:clip;const actionsForClip=this._actionsByClip[clipUuid];let prototypeAction=null;if(blendMode===undefined){if(clipObject!==null){blendMode=clipObject.blendMode;}else{blendMode=NormalAnimationBlendMode;}}if(actionsForClip!==undefined){const existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==undefined&&existingAction.blendMode===blendMode){return existingAction;}// we know the clip, so we don't have to parse all\n// the bindings again but can just copy\nprototypeAction=actionsForClip.knownActions[0];// also, take the clip from the prototype action\nif(clipObject===null)clipObject=prototypeAction._clip;}// clip must be known when specified via string\nif(clipObject===null)return null;// allocate all resources required to run it\nconst newAction=new AnimationAction(this,clipObject,optionalRoot,blendMode);this._bindAction(newAction,prototypeAction);// and make the action known to the memory manager\nthis._addInactiveAction(newAction,clipUuid,rootUuid);return newAction;}/**\n\t * Returns an existing animation action for the passed clip.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @return {?AnimationAction} The animation action. Returns `null` if no action was found.\n\t */existingAction(clip,optionalRoot){const root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];if(actionsForClip!==undefined){return actionsForClip.actionByRoot[rootUuid]||null;}return null;}/**\n\t * Deactivates all previously scheduled actions on this mixer.\n\t *\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */stopAllAction(){const actions=this._actions,nActions=this._nActiveActions;for(let i=nActions-1;i>=0;--i){actions[i].stop();}return this;}/**\n\t * Advances the global mixer time and updates the animation.\n\t *\n\t * This is usually done in the render loop by passing the delta\n\t * time from {@link Clock} or {@link Timer}.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */update(deltaTime){deltaTime*=this.timeScale;const actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;// run active actions\nfor(let i=0;i!==nActions;++i){const action=actions[i];action._update(time,deltaTime,timeDirection,accuIndex);}// update scene graph\nconst bindings=this._bindings,nBindings=this._nActiveBindings;for(let i=0;i!==nBindings;++i){bindings[i].apply(accuIndex);}return this;}/**\n\t * Sets the global mixer to a specific time and updates the animation accordingly.\n\t *\n\t * This is useful when you need to jump to an exact time in an animation. The\n\t * input parameter will be scaled by {@link AnimationMixer#timeScale}\n\t *\n\t * @param {number} time - The time to set in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */setTime(time){this.time=0;// Zero out time attribute for AnimationMixer object;\nfor(let i=0;i<this._actions.length;i++){this._actions[i].time=0;// Zero out time attribute for all associated AnimationAction objects.\n}return this.update(time);// Update used to set exact time. Returns \"this\" AnimationMixer object.\n}/**\n\t * Returns this mixer's root object.\n\t *\n\t * @return {Object3D} The mixer's root object.\n\t */getRoot(){return this._root;}/**\n\t * Deallocates all memory resources for a clip. Before using this method make\n\t * sure to call {@link AnimationAction#stop} for all related actions.\n\t *\n\t * @param {AnimationClip} clip - The clip to uncache.\n\t */uncacheClip(clip){const actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==undefined){// note: just calling _removeInactiveAction would mess up the\n// iteration state and also require updating the state we can\n// just throw away\nconst actionsToRemove=actionsForClip.knownActions;for(let i=0,n=actionsToRemove.length;i!==n;++i){const action=actionsToRemove[i];this._deactivateAction(action);const cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action);}delete actionsByClip[clipUuid];}}/**\n\t * Deallocates all memory resources for a root object. Before using this\n\t * method make sure to call {@link AnimationAction#stop} for all related\n\t * actions or alternatively {@link AnimationMixer#stopAllAction} when the\n\t * mixer operates on a single root.\n\t *\n\t * @param {Object3D} root - The root object to uncache.\n\t */uncacheRoot(root){const rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(const clipUuid in actionsByClip){const actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];if(action!==undefined){this._deactivateAction(action);this._removeInactiveAction(action);}}const bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==undefined){for(const trackName in bindingByName){const binding=bindingByName[trackName];binding.restoreOriginalState();this._removeInactiveBinding(binding);}}}/**\n\t * Deallocates all memory resources for an action. The action is identified by the\n\t * given clip and an optional root object. Before using this method make\n\t * sure to call {@link AnimationAction#stop} to deactivate the action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t */uncacheAction(clip,optionalRoot){const action=this.existingAction(clip,optionalRoot);if(action!==null){this._deactivateAction(action);this._removeInactiveAction(action);}}}/**\n * Represents a 3D render target.\n *\n * @augments RenderTarget\n */class RenderTarget3D extends RenderTarget{/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,depth=1,options={}){super(width,height,options);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isRenderTarget3D=true;this.depth=depth;/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */this.texture=new Data3DTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}/**\n * Represents an array render target.\n *\n * @augments RenderTarget\n */class RenderTargetArray extends RenderTarget{/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */constructor(width=1,height=1,depth=1,options={}){super(width,height,options);this.isRenderTargetArray=true;this.depth=depth;/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */this.texture=new DataArrayTexture(null,width,height,depth);this.texture.isRenderTargetTexture=true;}}/**\n * Represents a uniform which is a global shader variable. They are passed to shader programs.\n *\n * When declaring a uniform of a {@link ShaderMaterial}, it is declared by value or by object.\n * ```js\n * uniforms: {\n * \ttime: { value: 1.0 },\n * \tresolution: new Uniform( new Vector2() )\n * };\n * ```\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n */class Uniform{/**\n\t * Constructs a new uniform.\n\t *\n\t * @param {any} value - The uniform value.\n\t */constructor(value){/**\n\t\t * The uniform value.\n\t\t *\n\t\t * @type {any}\n\t\t */this.value=value;}/**\n\t * Returns a new uniform with copied values from this instance.\n\t * If the value has a `clone()` method, the value is cloned as well.\n\t *\n\t * @return {Uniform} A clone of this instance.\n\t */clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone());}}let _id=0;/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */class UniformsGroup extends EventDispatcher{/**\n\t * Constructs a new uniforms group.\n\t */constructor(){super();/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isUniformsGroup=true;/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name UniformsGroup#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */Object.defineProperty(this,'id',{value:_id++});/**\n\t\t * The name of the uniforms group.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The buffer usage.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */this.usage=StaticDrawUsage;/**\n\t\t * An array holding the uniforms.\n\t\t *\n\t\t * @type {Array<Uniform>}\n\t\t */this.uniforms=[];}/**\n\t * Adds the given uniform to this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to add.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */add(uniform){this.uniforms.push(uniform);return this;}/**\n\t * Removes the given uniform from this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to remove.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */remove(uniform){const index=this.uniforms.indexOf(uniform);if(index!==-1)this.uniforms.splice(index,1);return this;}/**\n\t * Sets the name of this uniforms group.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */setName(name){this.name=name;return this;}/**\n\t * Sets the usage of this uniforms group.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */setUsage(value){this.usage=value;return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */dispose(){this.dispatchEvent({type:'dispose'});}/**\n\t * Copies the values of the given uniforms group to this instance.\n\t *\n\t * @param {UniformsGroup} source - The uniforms group to copy.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */copy(source){this.name=source.name;this.usage=source.usage;const uniformsSource=source.uniforms;this.uniforms.length=0;for(let i=0,l=uniformsSource.length;i<l;i++){const uniforms=Array.isArray(uniformsSource[i])?uniformsSource[i]:[uniformsSource[i]];for(let j=0;j<uniforms.length;j++){this.uniforms.push(uniforms[j].clone());}}return this;}/**\n\t * Returns a new uniforms group with copied values from this instance.\n\t *\n\t * @return {UniformsGroup} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}/**\n * An instanced version of an interleaved buffer.\n *\n * @augments InterleavedBuffer\n */class InstancedInterleavedBuffer extends InterleavedBuffer{/**\n\t * Constructs a new instanced interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\n\t */constructor(array,stride,meshPerAttribute=1){super(array,stride);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isInstancedInterleavedBuffer=true;/**\n\t\t * Defines how often a value of this buffer attribute should be repeated,\n\t\t * see {@link InstancedBufferAttribute#meshPerAttribute}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.meshPerAttribute=meshPerAttribute;}copy(source){super.copy(source);this.meshPerAttribute=source.meshPerAttribute;return this;}clone(data){const ib=super.clone(data);ib.meshPerAttribute=this.meshPerAttribute;return ib;}toJSON(data){const json=super.toJSON(data);json.isInstancedInterleavedBuffer=true;json.meshPerAttribute=this.meshPerAttribute;return json;}}/**\n * An alternative version of a buffer attribute with more control over the VBO.\n *\n * The renderer does not construct a VBO for this kind of attribute. Instead, it uses\n * whatever VBO is passed in constructor and can later be altered via the `buffer` property.\n *\n * The most common use case for this class is when some kind of GPGPU calculation interferes\n * or even produces the VBOs in question.\n *\n * Notice that this class can only be used with {@link WebGLRenderer}.\n */class GLBufferAttribute{/**\n\t * Constructs a new GL buffer attribute.\n\t *\n\t * @param {WebGLBuffer} buffer - The native WebGL buffer.\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} itemSize - The item size.\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @param {number} count - The expected number of vertices in VBO.\n\t */constructor(buffer,type,itemSize,elementSize,count){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isGLBufferAttribute=true;/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */this.name='';/**\n\t\t * The native WebGL buffer.\n\t\t *\n\t\t * @type {WebGLBuffer}\n\t\t */this.buffer=buffer;/**\n\t\t * The native data type.\n\t\t *\n\t\t * @type {number}\n\t\t */this.type=type;/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */this.itemSize=itemSize;/**\n\t\t * The corresponding size (in bytes) for the given `type` parameter.\n\t\t *\n\t\t * @type {number}\n\t\t */this.elementSize=elementSize;/**\n\t\t * The expected number of vertices in VBO.\n\t\t *\n\t\t * @type {number}\n\t\t */this.count=count;/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */this.version=0;}/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */set needsUpdate(value){if(value===true)this.version++;}/**\n\t * Sets the given native WebGL buffer.\n\t *\n\t * @param {WebGLBuffer} buffer - The buffer to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setBuffer(buffer){this.buffer=buffer;return this;}/**\n\t * Sets the given native data type and element size.\n\t *\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setType(type,elementSize){this.type=type;this.elementSize=elementSize;return this;}/**\n\t * Sets the item size.\n\t *\n\t * @param {number} itemSize - The item size.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setItemSize(itemSize){this.itemSize=itemSize;return this;}/**\n\t * Sets the count (the expected number of vertices in VBO).\n\t *\n\t * @param {number} count - The count.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */setCount(count){this.count=count;return this;}}const _matrix=/*@__PURE__*/new Matrix4();/**\n * This class is designed to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3d space the mouse is over)\n * amongst other things.\n */class Raycaster{/**\n\t * Constructs a new raycaster.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.\n\t * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.\n\t */constructor(origin,direction,near=0,far=Infinity){/**\n\t\t * The ray used for raycasting.\n\t\t *\n\t\t * @type {Ray}\n\t\t */this.ray=new Ray(origin,direction);/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.near=near;/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */this.far=far;/**\n\t\t * The camera to use when raycasting against view-dependent objects such as\n\t\t * billboarded objects like sprites. This field can be set manually or\n\t\t * is set when calling `setFromCamera()`.\n\t\t *\n\t\t * @type {?Camera}\n\t\t * @default null\n\t\t */this.camera=null;/**\n\t\t * Allows to selectively ignore 3D objects when performing intersection tests.\n\t\t * The following code example ensures that only 3D objects on layer `1` will be\n\t\t * honored by raycaster.\n\t\t * ```js\n\t\t * raycaster.layers.set( 1 );\n\t\t * object.layers.enable( 1 );\n\t\t * ```\n\t\t *\n\t\t * @type {Layers}\n\t\t */this.layers=new Layers();/**\n\t\t * A parameter object that configures the raycasting. It has the structure:\n\t\t *\n\t\t * ```\n\t\t * {\n\t\t * \tMesh: {},\n\t\t * \tLine: { threshold: 1 },\n\t\t * \tLOD: {},\n\t\t * \tPoints: { threshold: 1 },\n\t\t * \tSprite: {}\n\t\t * }\n\t\t * ```\n\t\t * Where `threshold` is the precision of the raycaster when intersecting objects, in world units.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};}/**\n\t * Updates the ray with a new origin and direction by copying the values from the arguments.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t */set(origin,direction){// direction is assumed to be normalized (for accurate distance calculations)\nthis.ray.set(origin,direction);}/**\n\t * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).\n\t * X and Y components should be between `-1` and `1`.\n\t * @param {Camera} camera - The camera from which the ray should originate.\n\t */setFromCamera(coords,camera){if(camera.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(camera.matrixWorld);this.ray.direction.set(coords.x,coords.y,0.5).unproject(camera).sub(this.ray.origin).normalize();this.camera=camera;}else if(camera.isOrthographicCamera){this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera);// set origin in plane of camera\nthis.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld);this.camera=camera;}else{console.error('THREE.Raycaster: Unsupported camera type: '+camera.type);}}/**\n\t * Uses the given WebXR controller to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {WebXRController} controller - The controller to copy the position and direction from.\n\t * @return {Raycaster} A reference to this raycaster.\n\t */setFromXRController(controller){_matrix.identity().extractRotation(controller.matrixWorld);this.ray.origin.setFromMatrixPosition(controller.matrixWorld);this.ray.direction.set(0,0,-1).applyMatrix4(_matrix);return this;}/**\n\t * The intersection point of a raycaster intersection test.\n\t * @typedef {Object} Raycaster~Intersection\n\t * @property {number} distance - The distance from the ray's origin to the intersection point.\n\t * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the\n\t * intersection to the nearest point on the ray. For other objects it will be `undefined`.\n\t * @property {Vector3} point - The intersection point, in world coordinates.\n\t * @property {Object} face - The face that has been intersected.\n\t * @property {number} faceIndex - The face index.\n\t * @property {Object3D} object - The 3D object that has been intersected.\n\t * @property {Vector2} uv - U,V coordinates at point of intersection.\n\t * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.\n\t * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.\n\t * @property {number} instanceId - The index number of the instance where the ray\n\t * intersects the {@link InstancedMesh}.\n\t */ /**\n\t * Checks all intersection between the ray and the object with or without the\n\t * descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when\n\t * evaluating whether the ray intersects the object or not. This allows meshes to respond\n\t * differently to ray casting than lines or points.\n\t *\n\t * Note that for meshes, faces must be pointed towards the origin of the ray in order\n\t * to be detected; intersections of the ray passing through the back of a face will not\n\t * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}\n\t * to `THREE.DoubleSide`.\n\t *\n\t * @param {Object3D} object - The 3D object to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */intersectObject(object,recursive=true,intersects=[]){intersect(object,this,intersects,recursive);intersects.sort(ascSort);return intersects;}/**\n\t * Checks all intersection between the ray and the objects with or without\n\t * the descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */intersectObjects(objects,recursive=true,intersects=[]){for(let i=0,l=objects.length;i<l;i++){intersect(objects[i],this,intersects,recursive);}intersects.sort(ascSort);return intersects;}}function ascSort(a,b){return a.distance-b.distance;}function intersect(object,raycaster,intersects,recursive){let propagate=true;if(object.layers.test(raycaster.layers)){const result=object.raycast(raycaster,intersects);if(result===false)propagate=false;}if(propagate===true&&recursive===true){const children=object.children;for(let i=0,l=children.length;i<l;i++){intersect(children[i],raycaster,intersects,true);}}}/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */class Spherical{/**\n\t * Constructs a new spherical.\n\t *\n\t * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n\t * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n\t */constructor(radius=1,phi=0,theta=0){/**\n\t\t * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.radius=radius;/**\n\t\t * The polar angle in radians from the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.phi=phi;/**\n\t\t * The equator/azimuthal angle in radians around the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.theta=theta;}/**\n\t * Sets the spherical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The polar angle.\n\t * @param {number} theta - The azimuthal angle.\n\t * @return {Spherical} A reference to this spherical.\n\t */set(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this;}/**\n\t * Copies the values of the given spherical to this instance.\n\t *\n\t * @param {Spherical} other - The spherical to copy.\n\t * @return {Spherical} A reference to this spherical.\n\t */copy(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this;}/**\n\t * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n\t * `0.000001`.\n\t *\n\t * @return {Spherical} A reference to this spherical.\n\t */makeSafe(){const EPS=0.000001;this.phi=clamp(this.phi,EPS,Math.PI-EPS);return this;}/**\n\t * Sets the spherical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Spherical} A reference to this spherical.\n\t */setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);}/**\n\t * Sets the spherical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Spherical} A reference to this spherical.\n\t */setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+y*y+z*z);if(this.radius===0){this.theta=0;this.phi=0;}else{this.theta=Math.atan2(x,z);this.phi=Math.acos(clamp(y/this.radius,-1,1));}return this;}/**\n\t * Returns a new spherical with copied values from this instance.\n\t *\n\t * @return {Spherical} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */class Cylindrical{/**\n\t * Constructs a new cylindrical.\n\t *\n\t * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n\t * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t * @param {number} [y=0] - The height above the x-z plane.\n\t */constructor(radius=1,theta=0,y=0){/**\n\t\t * The distance from the origin to a point in the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.radius=radius;/**\n\t\t * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.theta=theta;/**\n\t\t * The height above the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */this.y=y;}/**\n\t * Sets the cylindrical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle.\n\t * @param {number} y - The height value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */set(radius,theta,y){this.radius=radius;this.theta=theta;this.y=y;return this;}/**\n\t * Copies the values of the given cylindrical to this instance.\n\t *\n\t * @param {Cylindrical} other - The cylindrical to copy.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */copy(other){this.radius=other.radius;this.theta=other.theta;this.y=other.y;return this;}/**\n\t * Sets the cylindrical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);}/**\n\t * Sets the cylindrical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+z*z);this.theta=Math.atan2(x,z);this.y=y;return this;}/**\n\t * Returns a new cylindrical with copied values from this instance.\n\t *\n\t * @return {Cylindrical} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */class Matrix2{/**\n\t * Constructs a new 2x2 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t */constructor(n11,n12,n21,n22){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */Matrix2.prototype.isMatrix2=true;/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */this.elements=[1,0,0,1];if(n11!==undefined){this.set(n11,n12,n21,n22);}}/**\n\t * Sets this matrix to the 2x2 identity matrix.\n\t *\n\t * @return {Matrix2} A reference to this matrix.\n\t */identity(){this.set(1,0,0,1);return this;}/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix2} A reference to this matrix.\n\t */fromArray(array,offset=0){for(let i=0;i<4;i++){this.elements[i]=array[i+offset];}return this;}/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} n11 - 1-1 matrix element.\n\t * @param {number} n12 - 1-2 matrix element.\n\t * @param {number} n21 - 2-1 matrix element.\n\t * @param {number} n22 - 2-2 matrix element.\n\t * @return {Matrix2} A reference to this matrix.\n\t */set(n11,n12,n21,n22){const te=this.elements;te[0]=n11;te[2]=n12;te[1]=n21;te[3]=n22;return this;}}const _vector$4=/*@__PURE__*/new Vector2();/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */class Box2{/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */constructor(min=new Vector2(+Infinity,+Infinity),max=new Vector2(-Infinity,-Infinity)){/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isBox2=true;/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.min=min;/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */this.max=max;}/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector2} min - The lower boundary of the box.\n\t * @param {Vector2} max - The upper boundary of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */set(min,max){this.min.copy(min);this.max.copy(max);return this;}/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n\t * @return {Box2} A reference to this bounding box.\n\t */setFromPoints(points){this.makeEmpty();for(let i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;}/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector2} center - The center of the box.\n\t * @param {Vector2} size - The x and y dimensions of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */setFromCenterAndSize(center,size){const halfSize=_vector$4.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box2} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box2} box - The box to copy.\n\t * @return {Box2} A reference to this bounding box.\n\t */copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}/**\n\t * Makes this box empty which means in encloses a zero space in 2D.\n\t *\n\t * @return {Box2} A reference to this bounding box.\n\t */makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this;}/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\nreturn this.max.x<this.min.x||this.max.y<this.min.y;}/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The center point.\n\t */getCenter(target){return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The size.\n\t */getSize(target){return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min);}/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector2} point - The point that should be included by the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */expandByPoint(point){this.min.min(point);this.max.max(point);return this;}/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions.\n\t *\n\t * @param {Vector2} vector - The vector that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector2} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */containsPoint(point){return point.x>=this.min.x&&point.x<=this.max.x&&point.y>=this.min.y&&point.y<=this.max.y;}/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y;}/**\n\t * Returns a point as a proportion of this box's width and height.\n\t *\n\t * @param {Vector2} point - A point in 2D space.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} A point as a proportion of this box's width and height.\n\t */getParameter(point,target){// This can potentially have a divide by zero if the box\n// has a size dimension of 0.\nreturn target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y));}/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */intersectsBox(box){// using 4 splitting planes to rule out intersections\nreturn box.max.x>=this.min.x&&box.min.x<=this.max.x&&box.max.y>=this.min.y&&box.min.y<=this.max.y;}/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector2} point - The point to clamp.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The clamped point.\n\t */clampPoint(point,target){return target.copy(point).clamp(this.min,this.max);}/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector2} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */distanceToPoint(point){return this.clampPoint(point,_vector$4).distanceTo(point);}/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box2} box - The bounding box to intersect with.\n\t * @return {Box2} A reference to this bounding box.\n\t */intersect(box){this.min.max(box.min);this.max.min(box.max);if(this.isEmpty())this.makeEmpty();return this;}/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box2} box - The bounding box that will be unioned with this instance.\n\t * @return {Box2} A reference to this bounding box.\n\t */union(box){this.min.min(box.min);this.max.max(box.max);return this;}/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 2D space.\n\t *\n\t * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */translate(offset){this.min.add(offset);this.max.add(offset);return this;}/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box2} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}const _startP=/*@__PURE__*/new Vector3();const _startEnd=/*@__PURE__*/new Vector3();/**\n * An analytical line segment in 3D space represented by a start and end point.\n */class Line3{/**\n\t * Constructs a new line segment.\n\t *\n\t * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n\t * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n\t */constructor(start=new Vector3(),end=new Vector3()){/**\n\t\t * Start of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.start=start;/**\n\t\t * End of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */this.end=end;}/**\n\t * Sets the start and end values by copying the given vectors.\n\t *\n\t * @param {Vector3} start - The start point.\n\t * @param {Vector3} end - The end point.\n\t * @return {Line3} A reference to this line segment.\n\t */set(start,end){this.start.copy(start);this.end.copy(end);return this;}/**\n\t * Copies the values of the given line segment to this instance.\n\t *\n\t * @param {Line3} line - The line segment to copy.\n\t * @return {Line3} A reference to this line segment.\n\t */copy(line){this.start.copy(line.start);this.end.copy(line.end);return this;}/**\n\t * Returns the center of the line segment.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */getCenter(target){return target.addVectors(this.start,this.end).multiplyScalar(0.5);}/**\n\t * Returns the delta vector of the line segment's start and end point.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */delta(target){return target.subVectors(this.end,this.start);}/**\n\t * Returns the squared Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The squared Euclidean distance.\n\t */distanceSq(){return this.start.distanceToSquared(this.end);}/**\n\t * Returns the Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The Euclidean distance.\n\t */distance(){return this.start.distanceTo(this.end);}/**\n\t * Returns a vector at a certain position along the line segment.\n\t *\n\t * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */at(t,target){return this.delta(target).multiplyScalar(t).add(this.start);}/**\n\t * Returns a point parameter based on the closest point as projected on the line segment.\n\t *\n\t * @param {Vector3} point - The point for which to return a point parameter.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @return {number} The point parameter.\n\t */closestPointToPointParameter(point,clampToLine){_startP.subVectors(point,this.start);_startEnd.subVectors(this.end,this.start);const startEnd2=_startEnd.dot(_startEnd);const startEnd_startP=_startEnd.dot(_startP);let t=startEnd_startP/startEnd2;if(clampToLine){t=clamp(t,0,1);}return t;}/**\n\t * Returns the closets point on the line for a given point.\n\t *\n\t * @param {Vector3} point - The point to compute the closest point on the line for.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @param {Vector3} target -  The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the line.\n\t */closestPointToPoint(point,clampToLine,target){const t=this.closestPointToPointParameter(point,clampToLine);return this.delta(target).multiplyScalar(t).add(this.start);}/**\n\t * Applies a 4x4 transformation matrix to this line segment.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Line3} A reference to this line segment.\n\t */applyMatrix4(matrix){this.start.applyMatrix4(matrix);this.end.applyMatrix4(matrix);return this;}/**\n\t * Returns `true` if this line segment is equal with the given one.\n\t *\n\t * @param {Line3} line - The line segment to test for equality.\n\t * @return {boolean} Whether this line segment is equal with the given one.\n\t */equals(line){return line.start.equals(this.start)&&line.end.equals(this.end);}/**\n\t * Returns a new line segment with copied values from this instance.\n\t *\n\t * @return {Line3} A clone of this instance.\n\t */clone(){return new this.constructor().copy(this);}}const _vector$3=/*@__PURE__*/new Vector3();/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */class SpotLightHelper extends Object3D{/**\n\t * Constructs a new spot light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */constructor(light,color){super();/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {SpotLight}\n\t\t */this.light=light;this.matrixAutoUpdate=false;/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */this.color=color;this.type='SpotLightHelper';const geometry=new BufferGeometry();const positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let i=0,j=1,l=32;i<l;i++,j++){const p1=i/l*Math.PI*2;const p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1);}geometry.setAttribute('position',new Float32BufferAttribute(positions,3));const material=new LineBasicMaterial({fog:false,toneMapped:false});this.cone=new LineSegments(geometry,material);this.add(this.cone);this.update();}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.cone.geometry.dispose();this.cone.material.dispose();}/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);// update the local matrix based on the parent and light target transforms\nif(this.parent){this.parent.updateWorldMatrix(true);this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld);}else{this.matrix.copy(this.light.matrixWorld);}this.matrixWorld.copy(this.light.matrixWorld);const coneLength=this.light.distance?this.light.distance:1000;const coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength);_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$3);if(this.color!==undefined){this.cone.material.color.set(this.color);}else{this.cone.material.color.copy(this.light.color);}}}const _vector$2=/*@__PURE__*/new Vector3();const _boneMatrix=/*@__PURE__*/new Matrix4();const _matrixWorldInv=/*@__PURE__*/new Matrix4();/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */class SkeletonHelper extends LineSegments{/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n\t * can be used if it represents a hierarchy of bones (see {@link Bone}).\n\t */constructor(object){const bones=getBoneList(object);const geometry=new BufferGeometry();const vertices=[];const colors=[];const color1=new Color(0,0,1);const color2=new Color(0,1,0);for(let i=0;i<bones.length;i++){const bone=bones[i];if(bone.parent&&bone.parent.isBone){vertices.push(0,0,0);vertices.push(0,0,0);colors.push(color1.r,color1.g,color1.b);colors.push(color2.r,color2.g,color2.b);}}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(geometry,material);/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */this.isSkeletonHelper=true;this.type='SkeletonHelper';/**\n\t\t * The object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */this.root=object;/**\n\t\t * he list of bones that the helper visualizes.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */this.bones=bones;this.matrix=object.matrixWorld;this.matrixAutoUpdate=false;}updateMatrixWorld(force){const bones=this.bones;const geometry=this.geometry;const position=geometry.getAttribute('position');_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let i=0,j=0;i<bones.length;i++){const bone=bones[i];if(bone.parent&&bone.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);position.setXYZ(j,_vector$2.x,_vector$2.y,_vector$2.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,bone.parent.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);position.setXYZ(j+1,_vector$2.x,_vector$2.y,_vector$2.z);j+=2;}}geometry.getAttribute('position').needsUpdate=true;super.updateMatrixWorld(force);}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}function getBoneList(object){const boneList=[];if(object.isBone===true){boneList.push(object);}for(let i=0;i<object.children.length;i++){boneList.push(...getBoneList(object.children[i]));}return boneList;}/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */class PointLightHelper extends Mesh{/**\n\t * Constructs a new point light helper.\n\t *\n\t * @param {PointLight} light - The light to be visualized.\n\t * @param {number} [sphereSize=1] - The size of the sphere helper.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */constructor(light,sphereSize,color){const geometry=new SphereGeometry(sphereSize,4,2);const material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});super(geometry,material);/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */this.light=light;/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */this.color=color;this.type='PointLightHelper';this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update();/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}/**\n\t * Updates the helper to match the position of the\n\t * light being visualized.\n\t */update(){this.light.updateWorldMatrix(true,false);if(this.color!==undefined){this.material.color.set(this.color);}else{this.material.color.copy(this.light.color);}/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/}}const _vector$1=/*@__PURE__*/new Vector3();const _color1=/*@__PURE__*/new Color();const _color2=/*@__PURE__*/new Color();/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */class HemisphereLightHelper extends Object3D{/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The size of the mesh used to visualize the light.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */constructor(light,size,color){super();/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */this.light=light;this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */this.color=color;this.type='HemisphereLightHelper';const geometry=new OctahedronGeometry(size);geometry.rotateY(Math.PI*0.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const position=geometry.getAttribute('position');const colors=new Float32Array(position.count*3);geometry.setAttribute('color',new BufferAttribute(colors,3));this.add(new Mesh(geometry,this.material));this.update();}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose();}/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */update(){const mesh=this.children[0];if(this.color!==undefined){this.material.color.set(this.color);}else{const colors=mesh.geometry.getAttribute('color');_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let i=0,l=colors.count;i<l;i++){const color=i<l/2?_color1:_color2;colors.setXYZ(i,color.r,color.g,color.b);}colors.needsUpdate=true;}this.light.updateWorldMatrix(true,false);mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());}}/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */class GridHelper extends LineSegments{/**\n\t * Constructs a new grid helper.\n\t *\n\t * @param {number} [size=10] - The size of the grid.\n\t * @param {number} [divisions=10] - The number of divisions across the grid.\n\t * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n\t * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n\t */constructor(size=10,divisions=10,color1=0x444444,color2=0x888888){color1=new Color(color1);color2=new Color(color2);const center=divisions/2;const step=size/divisions;const halfSize=size/2;const vertices=[],colors=[];for(let i=0,j=0,k=-halfSize;i<=divisions;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k);vertices.push(k,0,-halfSize,k,0,halfSize);const color=i===center?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;}const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='GridHelper';}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */class PolarGridHelper extends LineSegments{/**\n\t * Constructs a new polar grid helper.\n\t *\n\t * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n\t * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n\t * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n\t * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n\t * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n\t * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n\t */constructor(radius=10,sectors=16,rings=8,divisions=64,color1=0x444444,color2=0x888888){color1=new Color(color1);color2=new Color(color2);const vertices=[];const colors=[];// create the sectors\nif(sectors>1){for(let i=0;i<sectors;i++){const v=i/sectors*(Math.PI*2);const x=Math.sin(v)*radius;const z=Math.cos(v)*radius;vertices.push(0,0,0);vertices.push(x,0,z);const color=i&1?color1:color2;colors.push(color.r,color.g,color.b);colors.push(color.r,color.g,color.b);}}// create the rings\nfor(let i=0;i<rings;i++){const color=i&1?color1:color2;const r=radius-radius/rings*i;for(let j=0;j<divisions;j++){// first vertex\nlet v=j/divisions*(Math.PI*2);let x=Math.sin(v)*r;let z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);// second vertex\nv=(j+1)/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);}}const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='PolarGridHelper';}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}const _v1=/*@__PURE__*/new Vector3();const _v2=/*@__PURE__*/new Vector3();const _v3=/*@__PURE__*/new Vector3();/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */class DirectionalLightHelper extends Object3D{/**\n\t * Constructs a new directional light helper.\n\t *\n\t * @param {DirectionalLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The dimensions of the plane.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */constructor(light,size,color){super();/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {DirectionalLight}\n\t\t */this.light=light;this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */this.color=color;this.type='DirectionalLightHelper';if(size===undefined)size=1;let geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));const material=new LineBasicMaterial({fog:false,toneMapped:false});/**\n\t\t * Contains the line showing the location of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */this.lightPlane=new Line(geometry,material);this.add(this.lightPlane);geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,0,1],3));/**\n\t\t * Represents the target line of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */this.targetLine=new Line(geometry,material);this.add(this.targetLine);this.update();}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();}/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);_v1.setFromMatrixPosition(this.light.matrixWorld);_v2.setFromMatrixPosition(this.light.target.matrixWorld);_v3.subVectors(_v2,_v1);this.lightPlane.lookAt(_v2);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color);}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color);}this.targetLine.lookAt(_v2);this.targetLine.scale.z=_v3.length();}}const _vector=/*@__PURE__*/new Vector3();const _camera=/*@__PURE__*/new Camera();/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */class CameraHelper extends LineSegments{/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Camera} camera - The camera to visualize.\n\t */constructor(camera){const geometry=new BufferGeometry();const material=new LineBasicMaterial({color:0xffffff,vertexColors:true,toneMapped:false});const vertices=[];const colors=[];const pointMap={};// near\naddLine('n1','n2');addLine('n2','n4');addLine('n4','n3');addLine('n3','n1');// far\naddLine('f1','f2');addLine('f2','f4');addLine('f4','f3');addLine('f3','f1');// sides\naddLine('n1','f1');addLine('n2','f2');addLine('n3','f3');addLine('n4','f4');// cone\naddLine('p','n1');addLine('p','n2');addLine('p','n3');addLine('p','n4');// up\naddLine('u1','u2');addLine('u2','u3');addLine('u3','u1');// target\naddLine('c','t');addLine('p','c');// cross\naddLine('cn1','cn2');addLine('cn3','cn4');addLine('cf1','cf2');addLine('cf3','cf4');function addLine(a,b){addPoint(a);addPoint(b);}function addPoint(id){vertices.push(0,0,0);colors.push(0,0,0);if(pointMap[id]===undefined){pointMap[id]=[];}pointMap[id].push(vertices.length/3-1);}geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));super(geometry,material);this.type='CameraHelper';/**\n\t\t * The camera being visualized.\n\t\t *\n\t\t * @type {Camera}\n\t\t */this.camera=camera;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=camera.matrixWorld;this.matrixAutoUpdate=false;/**\n\t\t * This contains the points used to visualize the camera.\n\t\t *\n\t\t * @type {Object<string,Array<number>>}\n\t\t */this.pointMap=pointMap;this.update();// colors\nconst colorFrustum=new Color(0xffaa00);const colorCone=new Color(0xff0000);const colorUp=new Color(0x00aaff);const colorTarget=new Color(0xffffff);const colorCross=new Color(0x333333);this.setColors(colorFrustum,colorCone,colorUp,colorTarget,colorCross);}/**\n\t * Defines the colors of the helper.\n\t *\n\t * @param {Color} frustum - The frustum line color.\n\t * @param {Color} cone - The cone line color.\n\t * @param {Color} up - The up line color.\n\t * @param {Color} target - The target line color.\n\t * @param {Color} cross - The cross line color.\n\t */setColors(frustum,cone,up,target,cross){const geometry=this.geometry;const colorAttribute=geometry.getAttribute('color');// near\ncolorAttribute.setXYZ(0,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(1,frustum.r,frustum.g,frustum.b);// n1, n2\ncolorAttribute.setXYZ(2,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(3,frustum.r,frustum.g,frustum.b);// n2, n4\ncolorAttribute.setXYZ(4,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(5,frustum.r,frustum.g,frustum.b);// n4, n3\ncolorAttribute.setXYZ(6,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(7,frustum.r,frustum.g,frustum.b);// n3, n1\n// far\ncolorAttribute.setXYZ(8,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(9,frustum.r,frustum.g,frustum.b);// f1, f2\ncolorAttribute.setXYZ(10,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(11,frustum.r,frustum.g,frustum.b);// f2, f4\ncolorAttribute.setXYZ(12,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(13,frustum.r,frustum.g,frustum.b);// f4, f3\ncolorAttribute.setXYZ(14,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(15,frustum.r,frustum.g,frustum.b);// f3, f1\n// sides\ncolorAttribute.setXYZ(16,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(17,frustum.r,frustum.g,frustum.b);// n1, f1\ncolorAttribute.setXYZ(18,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(19,frustum.r,frustum.g,frustum.b);// n2, f2\ncolorAttribute.setXYZ(20,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(21,frustum.r,frustum.g,frustum.b);// n3, f3\ncolorAttribute.setXYZ(22,frustum.r,frustum.g,frustum.b);colorAttribute.setXYZ(23,frustum.r,frustum.g,frustum.b);// n4, f4\n// cone\ncolorAttribute.setXYZ(24,cone.r,cone.g,cone.b);colorAttribute.setXYZ(25,cone.r,cone.g,cone.b);// p, n1\ncolorAttribute.setXYZ(26,cone.r,cone.g,cone.b);colorAttribute.setXYZ(27,cone.r,cone.g,cone.b);// p, n2\ncolorAttribute.setXYZ(28,cone.r,cone.g,cone.b);colorAttribute.setXYZ(29,cone.r,cone.g,cone.b);// p, n3\ncolorAttribute.setXYZ(30,cone.r,cone.g,cone.b);colorAttribute.setXYZ(31,cone.r,cone.g,cone.b);// p, n4\n// up\ncolorAttribute.setXYZ(32,up.r,up.g,up.b);colorAttribute.setXYZ(33,up.r,up.g,up.b);// u1, u2\ncolorAttribute.setXYZ(34,up.r,up.g,up.b);colorAttribute.setXYZ(35,up.r,up.g,up.b);// u2, u3\ncolorAttribute.setXYZ(36,up.r,up.g,up.b);colorAttribute.setXYZ(37,up.r,up.g,up.b);// u3, u1\n// target\ncolorAttribute.setXYZ(38,target.r,target.g,target.b);colorAttribute.setXYZ(39,target.r,target.g,target.b);// c, t\ncolorAttribute.setXYZ(40,cross.r,cross.g,cross.b);colorAttribute.setXYZ(41,cross.r,cross.g,cross.b);// p, c\n// cross\ncolorAttribute.setXYZ(42,cross.r,cross.g,cross.b);colorAttribute.setXYZ(43,cross.r,cross.g,cross.b);// cn1, cn2\ncolorAttribute.setXYZ(44,cross.r,cross.g,cross.b);colorAttribute.setXYZ(45,cross.r,cross.g,cross.b);// cn3, cn4\ncolorAttribute.setXYZ(46,cross.r,cross.g,cross.b);colorAttribute.setXYZ(47,cross.r,cross.g,cross.b);// cf1, cf2\ncolorAttribute.setXYZ(48,cross.r,cross.g,cross.b);colorAttribute.setXYZ(49,cross.r,cross.g,cross.b);// cf3, cf4\ncolorAttribute.needsUpdate=true;}/**\n\t * Updates the helper based on the projection matrix of the camera.\n\t */update(){const geometry=this.geometry;const pointMap=this.pointMap;const w=1,h=1;// we need just camera projection matrix inverse\n// world matrix must be identity\n_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);// Adjust z values based on coordinate system\nconst nearZ=this.camera.coordinateSystem===WebGLCoordinateSystem?-1:0;// center / target\nsetPoint('c',pointMap,geometry,_camera,0,0,nearZ);setPoint('t',pointMap,geometry,_camera,0,0,1);// near\nsetPoint('n1',pointMap,geometry,_camera,-1,-1,nearZ);setPoint('n2',pointMap,geometry,_camera,w,-1,nearZ);setPoint('n3',pointMap,geometry,_camera,-1,h,nearZ);setPoint('n4',pointMap,geometry,_camera,w,h,nearZ);// far\nsetPoint('f1',pointMap,geometry,_camera,-1,-1,1);setPoint('f2',pointMap,geometry,_camera,w,-1,1);setPoint('f3',pointMap,geometry,_camera,-1,h,1);setPoint('f4',pointMap,geometry,_camera,w,h,1);// up\nsetPoint('u1',pointMap,geometry,_camera,w*0.7,h*1.1,nearZ);setPoint('u2',pointMap,geometry,_camera,-1*0.7,h*1.1,nearZ);setPoint('u3',pointMap,geometry,_camera,0,h*2,nearZ);// cross\nsetPoint('cf1',pointMap,geometry,_camera,-1,0,1);setPoint('cf2',pointMap,geometry,_camera,w,0,1);setPoint('cf3',pointMap,geometry,_camera,0,-1,1);setPoint('cf4',pointMap,geometry,_camera,0,h,1);setPoint('cn1',pointMap,geometry,_camera,-1,0,nearZ);setPoint('cn2',pointMap,geometry,_camera,w,0,nearZ);setPoint('cn3',pointMap,geometry,_camera,0,-1,nearZ);setPoint('cn4',pointMap,geometry,_camera,0,h,nearZ);geometry.getAttribute('position').needsUpdate=true;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}function setPoint(point,pointMap,geometry,camera,x,y,z){_vector.set(x,y,z).unproject(camera);const points=pointMap[point];if(points!==undefined){const position=geometry.getAttribute('position');for(let i=0,l=points.length;i<l;i++){position.setXYZ(points[i],_vector.x,_vector.y,_vector.z);}}}const _box=/*@__PURE__*/new Box3();/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */class BoxHelper extends LineSegments{/**\n\t * Constructs a new box helper.\n\t *\n\t * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */constructor(object,color=0xffff00){const indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const positions=new Float32Array(8*3);const geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new BufferAttribute(positions,3));super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));/**\n\t\t * The 3D object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */this.object=object;this.type='BoxHelper';this.matrixAutoUpdate=false;this.update();}/**\n\t * Updates the helper's geometry to match the dimensions of the object,\n\t * including any children.\n\t */update(){if(this.object!==undefined){_box.setFromObject(this.object);}if(_box.isEmpty())return;const min=_box.min;const max=_box.max;/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/const position=this.geometry.attributes.position;const array=position.array;array[0]=max.x;array[1]=max.y;array[2]=max.z;array[3]=min.x;array[4]=max.y;array[5]=max.z;array[6]=min.x;array[7]=min.y;array[8]=max.z;array[9]=max.x;array[10]=min.y;array[11]=max.z;array[12]=max.x;array[13]=max.y;array[14]=min.z;array[15]=min.x;array[16]=max.y;array[17]=min.z;array[18]=min.x;array[19]=min.y;array[20]=min.z;array[21]=max.x;array[22]=min.y;array[23]=min.z;position.needsUpdate=true;this.geometry.computeBoundingSphere();}/**\n\t * Updates the wireframe box for the passed object.\n\t *\n\t * @param {Object3D} object - The 3D object to create the helper for.\n\t * @return {BoxHelper} A reference to this instance.\n\t */setFromObject(object){this.object=object;this.update();return this;}copy(source,recursive){super.copy(source,recursive);this.object=source.object;return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */class Box3Helper extends LineSegments{/**\n\t * Constructs a new box3 helper.\n\t *\n\t * @param {Box3} box - The box to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */constructor(box,color=0xffff00){const indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const positions=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.setAttribute('position',new Float32BufferAttribute(positions,3));super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));/**\n\t\t * The box being visualized.\n\t\t *\n\t\t * @type {Box3}\n\t\t */this.box=box;this.type='Box3Helper';this.geometry.computeBoundingSphere();}updateMatrixWorld(force){const box=this.box;if(box.isEmpty())return;box.getCenter(this.position);box.getSize(this.scale);this.scale.multiplyScalar(0.5);super.updateMatrixWorld(force);}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */class PlaneHelper extends Line{/**\n\t * Constructs a new plane helper.\n\t *\n\t * @param {Plane} plane - The plane to be visualized.\n\t * @param {number} [size=1] - The side length of plane helper.\n\t * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n\t */constructor(plane,size=1,hex=0xffff00){const color=hex;const positions=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0];const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(positions,3));geometry.computeBoundingSphere();super(geometry,new LineBasicMaterial({color:color,toneMapped:false}));this.type='PlaneHelper';/**\n\t\t * The plane being visualized.\n\t\t *\n\t\t * @type {Plane}\n\t\t */this.plane=plane;/**\n\t\t * The side length of plane helper.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */this.size=size;const positions2=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0];const geometry2=new BufferGeometry();geometry2.setAttribute('position',new Float32BufferAttribute(positions2,3));geometry2.computeBoundingSphere();this.add(new Mesh(geometry2,new MeshBasicMaterial({color:color,opacity:0.2,transparent:true,depthWrite:false,toneMapped:false})));}updateMatrixWorld(force){this.position.set(0,0,0);this.scale.set(0.5*this.size,0.5*this.size,1);this.lookAt(this.plane.normal);this.translateZ(-this.plane.constant);super.updateMatrixWorld(force);}/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */dispose(){this.geometry.dispose();this.material.dispose();this.children[0].geometry.dispose();this.children[0].material.dispose();}}const _axis=/*@__PURE__*/new Vector3();let _lineGeometry,_coneGeometry;/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */class ArrowHelper extends Object3D{/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n\t * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n\t * @param {number} [length=1] - Length of the arrow in world units.\n\t * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */constructor(dir=new Vector3(0,0,1),origin=new Vector3(0,0,0),length=1,color=0xffff00,headLength=length*0.2,headWidth=headLength*0.2){super();this.type='ArrowHelper';if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry();_lineGeometry.setAttribute('position',new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new ConeGeometry(0.5,1,5,1);_coneGeometry.translate(0,-0.5,0);}this.position.copy(origin);/**\n\t\t * The line part of the arrow helper.\n\t\t *\n\t\t * @type {Line}\n\t\t */this.line=new Line(_lineGeometry,new LineBasicMaterial({color:color,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);/**\n\t\t * The cone part of the arrow helper.\n\t\t *\n\t\t * @type {Mesh}\n\t\t */this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:color,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(dir);this.setLength(length,headLength,headWidth);}/**\n\t * Sets the direction of the helper.\n\t *\n\t * @param {Vector3} dir - The normalized direction vector.\n\t */setDirection(dir){// dir is assumed to be normalized\nif(dir.y>0.99999){this.quaternion.set(0,0,0,1);}else if(dir.y<-0.99999){this.quaternion.set(1,0,0,0);}else{_axis.set(dir.z,0,-dir.x).normalize();const radians=Math.acos(dir.y);this.quaternion.setFromAxisAngle(_axis,radians);}}/**\n\t * Sets the length of the helper.\n\t *\n\t * @param {number} length - Length of the arrow in world units.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */setLength(length,headLength=length*0.2,headWidth=headLength*0.2){this.line.scale.set(1,Math.max(0.0001,length-headLength),1);// see #17458\nthis.line.updateMatrix();this.cone.scale.set(headWidth,headLength,headWidth);this.cone.position.y=length;this.cone.updateMatrix();}/**\n\t * Sets the color of the helper.\n\t *\n\t * @param {number|Color|string} color - The color to set.\n\t */setColor(color){this.line.material.color.set(color);this.cone.material.color.set(color);}copy(source){super.copy(source,false);this.line.copy(source.line);this.cone.copy(source.cone);return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.line.geometry.dispose();this.line.material.dispose();this.cone.geometry.dispose();this.cone.material.dispose();}}/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */class AxesHelper extends LineSegments{/**\n\t * Constructs a new axes helper.\n\t *\n\t * @param {number} [size=1] - Size of the lines representing the axes.\n\t */constructor(size=1){const vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size];const colors=[1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1];const geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));const material=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(geometry,material);this.type='AxesHelper';}/**\n\t * Defines the colors of the axes helper.\n\t *\n\t * @param {number|Color|string} xAxisColor - The color for the x axis.\n\t * @param {number|Color|string} yAxisColor - The color for the y axis.\n\t * @param {number|Color|string} zAxisColor - The color for the z axis.\n\t * @return {AxesHelper} A reference to this axes helper.\n\t */setColors(xAxisColor,yAxisColor,zAxisColor){const color=new Color();const array=this.geometry.attributes.color.array;color.set(xAxisColor);color.toArray(array,0);color.toArray(array,3);color.set(yAxisColor);color.toArray(array,6);color.toArray(array,9);color.set(zAxisColor);color.toArray(array,12);color.toArray(array,15);this.geometry.attributes.color.needsUpdate=true;return this;}/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */dispose(){this.geometry.dispose();this.material.dispose();}}/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */class ShapePath{/**\n\t * Constructs a new shape path.\n\t */constructor(){this.type='ShapePath';/**\n\t\t * The color of the shape.\n\t\t *\n\t\t * @type {Color}\n\t\t */this.color=new Color();/**\n\t\t * The paths that have been generated for this shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @default null\n\t\t */this.subPaths=[];/**\n\t\t * The current path that is being generated.\n\t\t *\n\t\t * @type {?Path}\n\t\t * @default null\n\t\t */this.currentPath=null;}/**\n\t * Creates a new path and moves it current point to the given one.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {ShapePath} A reference to this shape path.\n\t */moveTo(x,y){this.currentPath=new Path();this.subPaths.push(this.currentPath);this.currentPath.moveTo(x,y);return this;}/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */lineTo(x,y){this.currentPath.lineTo(x,y);return this;}/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */quadraticCurveTo(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY);return this;}/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY);return this;}/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {ShapePath} A reference to this shape path.\n\t */splineThru(pts){this.currentPath.splineThru(pts);return this;}/**\n\t * Converts the paths into an array of shapes.\n\t *\n\t * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n\t * If this flag is set to `true`, then those are flipped.\n\t * @return {Array<Shape>} An array of shapes.\n\t */toShapes(isCCW){function toShapesNoHoles(inSubpaths){const shapes=[];for(let i=0,l=inSubpaths.length;i<l;i++){const tmpPath=inSubpaths[i];const tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);}return shapes;}function isPointInsidePolygon(inPt,inPolygon){const polyLen=inPolygon.length;// inPt on polygon contour => immediate success    or\n// toggling of inside/outside at every single! intersection point of an edge\n//  with the horizontal line through inPt, left of inPt\n//  not counting lowerY endpoints of edges and whole edges on that line\nlet inside=false;for(let p=polyLen-1,q=0;q<polyLen;p=q++){let edgeLowPt=inPolygon[p];let edgeHighPt=inPolygon[q];let edgeDx=edgeHighPt.x-edgeLowPt.x;let edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){// not parallel\nif(edgeDy<0){edgeLowPt=inPolygon[q];edgeDx=-edgeDx;edgeHighPt=inPolygon[p];edgeDy=-edgeDy;}if(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return true;// inPt is on contour ?\n// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n}else{const perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return true;// inPt is on contour ?\nif(perpEdge<0)continue;inside=!inside;// true intersection left of inPt\n}}else{// parallel or collinear\nif(inPt.y!==edgeLowPt.y)continue;// parallel\n// edge lies on the same horizontal line as inPt\nif(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return true;// inPt: Point on contour !\n// continue;\n}}return inside;}const isClockWise=ShapeUtils.isClockWise;const subPaths=this.subPaths;if(subPaths.length===0)return[];let solid,tmpPath,tmpShape;const shapes=[];if(subPaths.length===1){tmpPath=subPaths[0];tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);return shapes;}let holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;// console.log(\"Holes first\", holesFirst);\nconst betterShapeHoles=[];const newShapes=[];let newShapeHoles=[];let mainIdx=0;let tmpPoints;newShapes[mainIdx]=undefined;newShapeHoles[mainIdx]=[];for(let i=0,l=subPaths.length;i<l;i++){tmpPath=subPaths[i];tmpPoints=tmpPath.getPoints();solid=isClockWise(tmpPoints);solid=isCCW?!solid:solid;if(solid){if(!holesFirst&&newShapes[mainIdx])mainIdx++;newShapes[mainIdx]={s:new Shape(),p:tmpPoints};newShapes[mainIdx].s.curves=tmpPath.curves;if(holesFirst)mainIdx++;newShapeHoles[mainIdx]=[];//console.log('cw', i);\n}else{newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});//console.log('ccw', i);\n}}// only Holes? -> probably all Shapes with wrong orientation\nif(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){let ambiguous=false;let toChange=0;for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){betterShapeHoles[sIdx]=[];}for(let sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){const sho=newShapeHoles[sIdx];for(let hIdx=0;hIdx<sho.length;hIdx++){const ho=sho[hIdx];let hole_unassigned=true;for(let s2Idx=0;s2Idx<newShapes.length;s2Idx++){if(isPointInsidePolygon(ho.p,newShapes[s2Idx].p)){if(sIdx!==s2Idx)toChange++;if(hole_unassigned){hole_unassigned=false;betterShapeHoles[s2Idx].push(ho);}else{ambiguous=true;}}}if(hole_unassigned){betterShapeHoles[sIdx].push(ho);}}}if(toChange>0&&ambiguous===false){newShapeHoles=betterShapeHoles;}}let tmpHoles;for(let i=0,il=newShapes.length;i<il;i++){tmpShape=newShapes[i].s;shapes.push(tmpShape);tmpHoles=newShapeHoles[i];for(let j=0,jl=tmpHoles.length;j<jl;j++){tmpShape.holes.push(tmpHoles[j].h);}}//console.log(\"shape\", shapes);\nreturn shapes;}}/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */class Controls extends EventDispatcher{/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */constructor(object,domElement=null){super();/**\n\t\t * The object that is managed by the controls.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */this.object=object;/**\n\t\t * The HTML element used for event listeners.\n\t\t *\n\t\t * @type {?HTMLDOMElement}\n\t\t * @default null\n\t\t */this.domElement=domElement;/**\n\t\t * Whether the controls responds to user input or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */this.enabled=true;/**\n\t\t * The internal state of the controls.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */this.state=-1;/**\n\t\t * This object defines the keyboard input of the controls.\n\t\t *\n\t\t * @type {Object}\n\t\t */this.keys={};/**\n\t\t * This object defines what type of actions are assigned to the available mouse buttons.\n\t\t * It depends on the control implementation what kind of mouse buttons and actions are supported.\n\t\t *\n\t\t * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n\t\t */this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null};/**\n\t\t * This object defines what type of actions are assigned to what kind of touch interaction.\n\t\t * It depends on the control implementation what kind of touch interaction and actions are supported.\n\t\t *\n\t\t * @type {{ONE: ?number, TWO: ?number}}\n\t\t */this.touches={ONE:null,TWO:null};}/**\n\t * Connects the controls to the DOM. This method has so called \"side effects\" since\n\t * it adds the module's event listeners to the DOM.\n\t *\n\t * @param {HTMLDOMElement} element - The DOM element to connect to.\n\t */connect(element){if(element===undefined){console.warn('THREE.Controls: connect() now requires an element.');// @deprecated, the warning can be removed with r185\nreturn;}if(this.domElement!==null)this.disconnect();this.domElement=element;}/**\n\t * Disconnects the controls from the DOM.\n\t */disconnect(){}/**\n\t * Call this method if you no longer want use to the controls. It frees all internal\n\t * resources and removes all event listeners.\n\t */dispose(){}/**\n\t * Controls should implement this method if they have to update their internal state\n\t * per simulation step.\n\t *\n\t * @param {number} [delta] - The time delta in seconds.\n\t */update(/* delta */){}}/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */function contain(texture,aspect){const imageAspect=texture.image&&texture.image.width?texture.image.width/texture.image.height:1;if(imageAspect>aspect){texture.repeat.x=1;texture.repeat.y=imageAspect/aspect;texture.offset.x=0;texture.offset.y=(1-texture.repeat.y)/2;}else{texture.repeat.x=aspect/imageAspect;texture.repeat.y=1;texture.offset.x=(1-texture.repeat.x)/2;texture.offset.y=0;}return texture;}/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */function cover(texture,aspect){const imageAspect=texture.image&&texture.image.width?texture.image.width/texture.image.height:1;if(imageAspect>aspect){texture.repeat.x=aspect/imageAspect;texture.repeat.y=1;texture.offset.x=(1-texture.repeat.x)/2;texture.offset.y=0;}else{texture.repeat.x=1;texture.repeat.y=imageAspect/aspect;texture.offset.x=0;texture.offset.y=(1-texture.repeat.y)/2;}return texture;}/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */function fill(texture){texture.repeat.x=1;texture.repeat.y=1;texture.offset.x=0;texture.offset.y=0;return texture;}/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */function getByteLength(width,height,format,type){const typeByteLength=getTextureTypeByteLength(type);switch(format){// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\ncase AlphaFormat:return width*height;case RedFormat:return width*height/typeByteLength.components*typeByteLength.byteLength;case RedIntegerFormat:return width*height/typeByteLength.components*typeByteLength.byteLength;case RGFormat:return width*height*2/typeByteLength.components*typeByteLength.byteLength;case RGIntegerFormat:return width*height*2/typeByteLength.components*typeByteLength.byteLength;case RGBFormat:return width*height*3/typeByteLength.components*typeByteLength.byteLength;case RGBAFormat:return width*height*4/typeByteLength.components*typeByteLength.byteLength;case RGBAIntegerFormat:return width*height*4/typeByteLength.components*typeByteLength.byteLength;// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\ncase RGB_S3TC_DXT1_Format:case RGBA_S3TC_DXT1_Format:return Math.floor((width+3)/4)*Math.floor((height+3)/4)*8;case RGBA_S3TC_DXT3_Format:case RGBA_S3TC_DXT5_Format:return Math.floor((width+3)/4)*Math.floor((height+3)/4)*16;// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\ncase RGB_PVRTC_2BPPV1_Format:case RGBA_PVRTC_2BPPV1_Format:return Math.max(width,16)*Math.max(height,8)/4;case RGB_PVRTC_4BPPV1_Format:case RGBA_PVRTC_4BPPV1_Format:return Math.max(width,8)*Math.max(height,8)/2;// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\ncase RGB_ETC1_Format:case RGB_ETC2_Format:return Math.floor((width+3)/4)*Math.floor((height+3)/4)*8;case RGBA_ETC2_EAC_Format:return Math.floor((width+3)/4)*Math.floor((height+3)/4)*16;// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\ncase RGBA_ASTC_4x4_Format:return Math.floor((width+3)/4)*Math.floor((height+3)/4)*16;case RGBA_ASTC_5x4_Format:return Math.floor((width+4)/5)*Math.floor((height+3)/4)*16;case RGBA_ASTC_5x5_Format:return Math.floor((width+4)/5)*Math.floor((height+4)/5)*16;case RGBA_ASTC_6x5_Format:return Math.floor((width+5)/6)*Math.floor((height+4)/5)*16;case RGBA_ASTC_6x6_Format:return Math.floor((width+5)/6)*Math.floor((height+5)/6)*16;case RGBA_ASTC_8x5_Format:return Math.floor((width+7)/8)*Math.floor((height+4)/5)*16;case RGBA_ASTC_8x6_Format:return Math.floor((width+7)/8)*Math.floor((height+5)/6)*16;case RGBA_ASTC_8x8_Format:return Math.floor((width+7)/8)*Math.floor((height+7)/8)*16;case RGBA_ASTC_10x5_Format:return Math.floor((width+9)/10)*Math.floor((height+4)/5)*16;case RGBA_ASTC_10x6_Format:return Math.floor((width+9)/10)*Math.floor((height+5)/6)*16;case RGBA_ASTC_10x8_Format:return Math.floor((width+9)/10)*Math.floor((height+7)/8)*16;case RGBA_ASTC_10x10_Format:return Math.floor((width+9)/10)*Math.floor((height+9)/10)*16;case RGBA_ASTC_12x10_Format:return Math.floor((width+11)/12)*Math.floor((height+9)/10)*16;case RGBA_ASTC_12x12_Format:return Math.floor((width+11)/12)*Math.floor((height+11)/12)*16;// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\ncase RGBA_BPTC_Format:case RGB_BPTC_SIGNED_Format:case RGB_BPTC_UNSIGNED_Format:return Math.ceil(width/4)*Math.ceil(height/4)*16;// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\ncase RED_RGTC1_Format:case SIGNED_RED_RGTC1_Format:return Math.ceil(width/4)*Math.ceil(height/4)*8;case RED_GREEN_RGTC2_Format:case SIGNED_RED_GREEN_RGTC2_Format:return Math.ceil(width/4)*Math.ceil(height/4)*16;}throw new Error(`Unable to determine texture byte length for ${format} format.`);}function getTextureTypeByteLength(type){switch(type){case UnsignedByteType:case ByteType:return{byteLength:1,components:1};case UnsignedShortType:case ShortType:case HalfFloatType:return{byteLength:2,components:1};case UnsignedShort4444Type:case UnsignedShort5551Type:return{byteLength:2,components:4};case UnsignedIntType:case IntType:case FloatType:return{byteLength:4,components:1};case UnsignedInt5999Type:return{byteLength:4,components:3};}throw new Error(`Unknown texture type ${type}.`);}/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */class TextureUtils{/**\n\t * Scales the texture as large as possible within its surface without cropping\n\t * or stretching the texture. The method preserves the original aspect ratio of\n\t * the texture. Akin to CSS `object-fit: contain`\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */static contain(texture,aspect){return contain(texture,aspect);}/**\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\n\t * no empty space. The method preserves the original aspect ratio of the texture.\n\t * Akin to CSS `object-fit: cover`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */static cover(texture,aspect){return cover(texture,aspect);}/**\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Texture} The updated texture.\n\t */static fill(texture){return fill(texture);}/**\n\t * Determines how many bytes must be used to represent the texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} format - The texture's format.\n\t * @param {number} type - The texture's type.\n\t * @return {number} The byte length.\n\t */static getByteLength(width,height,format,type){return getByteLength(width,height,format,type);}}if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register',{detail:{revision:REVISION}}));}if(typeof window!=='undefined'){if(window.__THREE__){console.warn('WARNING: Multiple instances of Three.js being imported.');}else{window.__THREE__=REVISION;}}export{ACESFilmicToneMapping,AddEquation,AddOperation,AdditiveAnimationBlendMode,AdditiveBlending,AgXToneMapping,AlphaFormat,AlwaysCompare,AlwaysDepth,AlwaysStencilFunc,AmbientLight,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BackSide,BasicDepthPacking,BasicShadowMap,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxGeometry,BoxHelper,BufferAttribute,BufferGeometry,BufferGeometryLoader,ByteType,Cache,Camera,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CineonToneMapping,CircleGeometry,ClampToEdgeWrapping,Clock,Color,ColorKeyframeTrack,ColorManagement,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeCamera,CubeReflectionMapping,CubeRefractionMapping,CubeTexture,CubeTextureLoader,CubeUVReflectionMapping,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceBack,CullFaceFront,CullFaceFrontBack,CullFaceNone,Curve,CurvePath,CustomBlending,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataArrayTexture,DataTexture,DataTextureLoader,DataUtils,DecrementStencilOp,DecrementWrapStencilOp,DefaultLoadingManager,DepthArrayTexture,DepthFormat,DepthStencilFormat,DepthTexture,DetachedBindMode,DirectionalLight,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DoubleSide,DstAlphaFactor,DstColorFactor,DynamicCopyUsage,DynamicDrawUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,EqualCompare,EqualDepth,EqualStencilFunc,EquirectangularReflectionMapping,EquirectangularRefractionMapping,Euler,EventDispatcher,ExtrudeGeometry,FileLoader,Float16BufferAttribute,Float32BufferAttribute,FloatType,Fog,FogExp2,FramebufferTexture,FrontSide,Frustum,FrustumArray,GLBufferAttribute,GLSL1,GLSL3,GreaterCompare,GreaterDepth,GreaterEqualCompare,GreaterEqualDepth,GreaterEqualStencilFunc,GreaterStencilFunc,GridHelper,Group,HalfFloatType,HemisphereLight,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,IncrementStencilOp,IncrementWrapStencilOp,InstancedBufferAttribute,InstancedBufferGeometry,InstancedInterleavedBuffer,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,IntType,InterleavedBuffer,InterleavedBufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,InterpolationSamplingMode,InterpolationSamplingType,InvertStencilOp,KeepStencilOp,KeyframeTrack,LOD,LatheGeometry,Layers,LessCompare,LessDepth,LessEqualCompare,LessEqualDepth,LessEqualStencilFunc,LessStencilFunc,Light,LightProbe,Line,Line3,LineBasicMaterial,LineCurve,LineCurve3,LineDashedMaterial,LineLoop,LineSegments,LinearFilter,LinearInterpolant,LinearMipMapLinearFilter,LinearMipMapNearestFilter,LinearMipmapLinearFilter,LinearMipmapNearestFilter,LinearSRGBColorSpace,LinearToneMapping,LinearTransfer,Loader,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,Material,MaterialLoader,MathUtils,Matrix2,Matrix3,Matrix4,MaxEquation,Mesh,MeshBasicMaterial,MeshDepthMaterial,MeshDistanceMaterial,MeshLambertMaterial,MeshMatcapMaterial,MeshNormalMaterial,MeshPhongMaterial,MeshPhysicalMaterial,MeshStandardMaterial,MeshToonMaterial,MinEquation,MirroredRepeatWrapping,MixOperation,MultiplyBlending,MultiplyOperation,NearestFilter,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NearestMipmapLinearFilter,NearestMipmapNearestFilter,NeutralToneMapping,NeverCompare,NeverDepth,NeverStencilFunc,NoBlending,NoColorSpace,NoToneMapping,NormalAnimationBlendMode,NormalBlending,NotEqualCompare,NotEqualDepth,NotEqualStencilFunc,NumberKeyframeTrack,Object3D,ObjectLoader,ObjectSpaceNormalMap,OctahedronGeometry,OneFactor,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,OneMinusDstAlphaFactor,OneMinusDstColorFactor,OneMinusSrcAlphaFactor,OneMinusSrcColorFactor,OrthographicCamera,PCFShadowMap,PCFSoftShadowMap,Path,PerspectiveCamera,Plane,PlaneGeometry,PlaneHelper,PointLight,PointLightHelper,Points,PointsMaterial,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RAD2DEG,RED_GREEN_RGTC2_Format,RED_RGTC1_Format,REVISION,RGBADepthPacking,RGBAFormat,RGBAIntegerFormat,RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_BPTC_Format,RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGBDepthPacking,RGBFormat,RGBIntegerFormat,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGB_ETC1_Format,RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format,RGDepthPacking,RGFormat,RGIntegerFormat,RawShaderMaterial,Ray,Raycaster,RectAreaLight,RedFormat,RedIntegerFormat,ReinhardToneMapping,RenderTarget,RenderTarget3D,RenderTargetArray,RepeatWrapping,ReplaceStencilOp,ReverseSubtractEquation,RingGeometry,SIGNED_RED_GREEN_RGTC2_Format,SIGNED_RED_RGTC1_Format,SRGBColorSpace,SRGBTransfer,Scene,ShaderMaterial,ShadowMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,ShortType,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,SphereGeometry,Spherical,SphericalHarmonics3,SplineCurve,SpotLight,SpotLightHelper,Sprite,SpriteMaterial,SrcAlphaFactor,SrcAlphaSaturateFactor,SrcColorFactor,StaticCopyUsage,StaticDrawUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,SubtractEquation,SubtractiveBlending,TOUCH,TangentSpaceNormalMap,TetrahedronGeometry,Texture,TextureLoader,TextureUtils,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,UVMapping,Uint16BufferAttribute,Uint32BufferAttribute,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,UniformsUtils,UnsignedByteType,UnsignedInt248Type,UnsignedInt5999Type,UnsignedIntType,UnsignedShort4444Type,UnsignedShort5551Type,UnsignedShortType,VSMShadowMap,Vector2,Vector3,Vector4,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLCoordinateSystem,WebGLCubeRenderTarget,WebGLRenderTarget,WebGPUCoordinateSystem,WebXRController,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroFactor,ZeroSlopeEnding,ZeroStencilOp,arrayNeedsUint32,cloneUniforms,createCanvasElement,createElementNS,getByteLength,getUnlitUniformColorSpace,mergeUniforms,probeAsync,toNormalizedProjectionMatrix,toReversedProjectionMatrix,warnOnce};","map":{"version":3,"names":["REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","ConstantColorFactor","OneMinusConstantColorFactor","ConstantAlphaFactor","OneMinusConstantAlphaFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","AgXToneMapping","NeutralToneMapping","AttachedBindMode","DetachedBindMode","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedInt248Type","UnsignedInt5999Type","AlphaFormat","RGBFormat","RGBAFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","RGB_BPTC_SIGNED_Format","RGB_BPTC_UNSIGNED_Format","RED_RGTC1_Format","SIGNED_RED_RGTC1_Format","RED_GREEN_RGTC2_Format","SIGNED_RED_GREEN_RGTC2_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","BasicDepthPacking","RGBADepthPacking","RGBDepthPacking","RGDepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","NoColorSpace","SRGBColorSpace","LinearSRGBColorSpace","LinearTransfer","SRGBTransfer","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","NeverCompare","LessCompare","EqualCompare","LessEqualCompare","GreaterCompare","NotEqualCompare","GreaterEqualCompare","AlwaysCompare","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","WebGLCoordinateSystem","WebGPUCoordinateSystem","TimestampQuery","COMPUTE","RENDER","InterpolationSamplingType","PERSPECTIVE","LINEAR","FLAT","InterpolationSamplingMode","NORMAL","CENTROID","SAMPLE","FLAT_FIRST","FLAT_EITHER","EventDispatcher","addEventListener","type","listener","_listeners","undefined","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","event","target","array","slice","i","l","length","call","_lut","_seed","DEG2RAD","Math","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toLowerCase","clamp","value","min","max","euclideanModulo","n","m","mapLinear","x","a1","a2","b1","b2","inverseLerp","y","lerp","t","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","seededRandom","s","imul","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","denormalize","constructor","Float32Array","Uint32Array","Uint16Array","Uint8Array","Int32Array","Int16Array","Int8Array","Error","normalize","round","MathUtils","Vector2","prototype","isVector2","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","clone","copy","v","add","addScalar","addVectors","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","trunc","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","angleTo","denominator","theta","acos","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Symbol","iterator","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","isMatrix3","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","_m3","makeScale","rotate","makeRotation","translate","makeTranslation","matrix","arrayNeedsUint32","TYPED_ARRAYS","Uint8ClampedArray","Float64Array","getTypedArray","buffer","createElementNS","name","document","createCanvasElement","canvas","style","display","_cache","warnOnce","message","probeAsync","gl","sync","interval","Promise","resolve","reject","probe","clientWaitSync","SYNC_FLUSH_COMMANDS_BIT","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","toNormalizedProjectionMatrix","projectionMatrix","toReversedProjectionMatrix","isPerspectiveMatrix","LINEAR_REC709_TO_XYZ","XYZ_TO_LINEAR_REC709","createColorManagement","ColorManagement","enabled","workingColorSpace","spaces","convert","color","sourceColorSpace","targetColorSpace","transfer","SRGBToLinear","primaries","toXYZ","fromXYZ","LinearToSRGB","fromWorkingColorSpace","toWorkingColorSpace","getPrimaries","colorSpace","getTransfer","getLuminanceCoefficients","luminanceCoefficients","define","colorSpaces","Object","assign","_getMatrix","targetMatrix","_getDrawingBufferColorSpace","outputColorSpaceConfig","drawingBufferColorSpace","_getUnpackColorSpace","workingColorSpaceConfig","unpackColorSpace","REC709_PRIMARIES","REC709_LUMINANCE_COEFFICIENTS","D65","whitePoint","_canvas","ImageUtils","getDataURL","image","test","src","HTMLCanvasElement","context","getContext","ImageData","putImageData","drawImage","toDataURL","sRGBToLinear","HTMLImageElement","ImageBitmap","imageData","getImageData","data","_sourceId","Source","isSource","defineProperty","dataReady","version","needsUpdate","toJSON","meta","isRootObject","images","output","url","Array","isArray","isDataTexture","serializeImage","from","_textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","DEFAULT_ANISOTROPY","isTexture","source","mipmaps","channel","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","onUpdate","renderTarget","isRenderTargetTexture","isTextureArray","pmremVersion","updateMatrix","JSON","parse","stringify","textures","metadata","generator","wrap","keys","dispose","transformUv","uv","needsPMREMUpdate","Vector4","z","w","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","setFromMatrixPosition","getZ","getW","RenderTarget","options","isRenderTarget","depth","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","resolveDepthBuffer","resolveStencilBuffer","depthTexture","samples","count","multiview","texture","_depthTexture","current","setSize","il","WebGLRenderTarget","isWebGLRenderTarget","DataArrayTexture","isDataArrayTexture","wrapR","layerUpdates","Set","addLayerUpdate","layerIndex","clearLayerUpdates","clear","WebGLArrayRenderTarget","isWebGLArrayRenderTarget","Data3DTexture","isData3DTexture","WebGL3DRenderTarget","isWebGL3DRenderTarget","Quaternion","isQuaternion","_x","_y","_z","_w","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","rotateTowards","step","slerp","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","slerpQuaternions","qa","theta1","theta2","r1","r2","_onChange","callback","Vector3","isVector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","vx","vy","vz","qx","qy","qz","qw","tz","project","camera","matrixWorldInverse","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixScale","setFromMatrixColumn","sz","setFromColor","randomDirection","u","Box3","Infinity","isBox3","setFromArray","makeEmpty","expandByPoint","_vector$b","setFromBufferAttribute","setFromPoints","points","setFromCenterAndSize","size","halfSize","setFromObject","object","precise","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","positionAttribute","getAttribute","isInstancedMesh","isMesh","getVertexPosition","boundingBox","computeBoundingBox","_box$4","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$4","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","_testAxis","v0","extents","j","p0","p1","p2","_box$3","_v1$6","_v2$3","Sphere","isSphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","delta","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","isNaN","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","isMatrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeShear","yx","zx","zy","position","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","coordinateSystem","makeOrthographic","p","zInv","_matrix$2","_quaternion$3","Euler","DEFAULT_ORDER","isEuler","asin","setFromQuaternion","setFromVector3","reorder","newOrder","Layers","mask","layer","enable","enableAll","toggle","disable","disableAll","layers","isEnabled","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","_childaddedEvent","child","_childremovedEvent","Object3D","isObject3D","parent","DEFAULT_UP","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DEFAULT_MATRIX_AUTO_UPDATE","matrixWorldAutoUpdate","DEFAULT_MATRIX_WORLD_AUTO_UPDATE","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","customDepthMaterial","customDistanceMaterial","onBeforeShadow","onAfterShadow","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","arguments","error","removeFromParent","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","getObjectsByProperty","result","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","nodes","instanceMatrix","instanceColor","isBatchedMesh","perObjectFrustumCulled","sortObjects","drawRanges","_drawRanges","reservedRanges","_reservedRanges","geometryInfo","_geometryInfo","map","info","boundingSphere","instanceInfo","_instanceInfo","availableInstanceIds","_availableInstanceIds","availableGeometryIds","_availableGeometryIds","nextIndexStart","_nextIndexStart","nextVertexStart","_nextVertexStart","geometryCount","_geometryCount","maxInstanceCount","_maxInstanceCount","maxVertexCount","_maxVertexCount","maxIndexCount","_maxIndexCount","geometryInitialized","_geometryInitialized","matricesTexture","_matricesTexture","indirectTexture","_indirectTexture","_colorsTexture","colorsTexture","serialize","library","element","isScene","background","isColor","environment","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","_v0$1","_v1$3","_v2$2","_v3$2","_vab","_vac","_vbc","_vap","_vbp","_vcp","_v40","_v41","_v42","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getInterpolation","p3","v3","getInterpolatedAttribute","attr","i1","i2","i3","barycoord","isFrontFacing","setFromPointsAndIndices","i0","setFromAttributeAndIndices","getArea","getMidpoint","getPlane","setFromCoplanarPoints","d4","vc","d5","d6","vb","va","_colorKeywords","_hslA","_hslB","hue2rgb","Color","setHex","setStyle","setRGB","hex","setHSL","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","_color","getHexString","toString","getHSL","hue","saturation","lightness","getRGB","getStyle","toFixed","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","NAMES","_materialId","Material","isMaterial","blending","side","vertexColors","opacity","transparent","alphaHash","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendColor","blendAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","forceSinglePass","allowOverride","toneMapped","_alphaTest","alphaTest","onBeforeCompile","customProgramCacheKey","setValues","newValue","currentValue","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","dispersion","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","anisotropyRotation","anisotropyMap","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapRotation","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","srcPlanes","dstPlanes","MeshBasicMaterial","isMeshBasicMaterial","_tables","_generateTables","ArrayBuffer","floatView","uint32View","baseTable","shiftTable","mantissaTable","exponentTable","offsetTable","toHalfFloat","val","fromHalfFloat","DataUtils","_vector$9","_vector2$1","_id$2","BufferAttribute","itemSize","normalized","TypeError","isBufferAttribute","usage","updateRanges","gpuType","onUploadCallback","setUsage","addUpdateRange","start","clearUpdateRanges","copyAt","index1","index2","copyArray","setXY","setXYZ","component","setXYZW","onUpload","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","_id$1","_m1","_obj","_offset","_box$2","_boxMorphTargets","_vector$8","BufferGeometry","isBufferGeometry","indirect","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","setIndirect","getIndirect","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","jl","computeTangents","normalAttribute","uvAttribute","tangentAttribute","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","computeVertexNormals","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","normals","toNonIndexed","convertBufferAttribute","indices","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","morphArray","hasMorphAttributes","attributeArray","_inverseMatrix$3","_ray$3","_sphere$6","_sphereHitAt","_vA$1","_vB$1","_vC$1","_tempA","_morphA","_intersectionPoint","_intersectionPointWorld","Mesh","morphTargetDictionary","morphTargetInfluences","updateMorphTargets","ml","String","morphPosition","morphInfluences","influence","raycaster","intersects","_computeIntersections","rayLocalSpace","intersection","uv1","groupMaterial","end","checkGeometryIntersection","faceIndex","face","checkIntersection$1","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","uvs","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","fromJSON","cloneUniforms","property","mergeUniforms","uniforms","merged","cloneUniformsGroups","getUnlitUniformColorSpace","renderer","currentRenderTarget","getRenderTarget","outputColorSpace","isXRRenderTarget","UniformsUtils","merge","default_vertex","default_fragment","ShaderMaterial","isShaderMaterial","defines","uniformsGroups","vertexShader","fragmentShader","lights","clipping","extensions","clipCullDistance","multiDraw","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","Camera","_v3$1","_minTarget","_maxTarget","PerspectiveCamera","fov","aspect","isPerspectiveCamera","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","getViewBounds","minTarget","maxTarget","getViewSize","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","activeMipmapLevel","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCoordinateSystem","cameras","concat","scene","currentActiveCubeFace","getActiveCubeFace","currentActiveMipmapLevel","getActiveMipmapLevel","currentXrEnabled","xr","setRenderTarget","render","CubeTexture","isCubeTexture","WebGLCubeRenderTarget","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","connect","inputSource","hand","inputjoint","_getHandJoint","disconnect","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","session","visibilityState","jointPose","getJointPose","joint","transform","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","getPose","targetRaySpace","jointName","FogExp2","density","isFogExp2","Fog","isFog","Scene","backgroundBlurriness","backgroundIntensity","backgroundRotation","environmentIntensity","environmentRotation","overrideMaterial","__THREE_DEVTOOLS__","CustomEvent","detail","InterleavedBuffer","isInterleavedBuffer","interleavedBuffer","arrayBuffers","_uuid","ib","_vector$7","InterleavedBufferAttribute","interleavedBuffers","SpriteMaterial","isSpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","isSprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","isLOD","_currentLevel","levels","autoUpdate","level","addLevel","hysteresis","removeLevel","removedElements","getCurrentLevel","getObjectForDistance","levelDistance","_basePosition","_skinIndex","_skinWeight","_vector3","_matrix4","_vertex","_sphere$5","_inverseMatrix$2","_ray$2","SkinnedMesh","bindMatrixInverse","applyBoneTransform","bind","calculateInverses","pose","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","bones","boneInverses","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","boneTexture","init","inverse","bone","computeBoneTexture","getBoneByName","json","boneInverse","InstancedBufferAttribute","meshPerAttribute","isInstancedBufferAttribute","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_box3","_identity","_mesh$1","_sphere$4","InstancedMesh","morphTexture","setMatrixAt","getMatrixAt","getColorAt","getMorphAt","objectInfluences","dataIndex","raycastTimes","instanceId","setColorAt","fill","setMorphAt","morphInfluencesSum","morphBaseInfluence","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_sphere$3","_vector$6","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","_projScreenMatrix$2","_frustum$1","FrustumArray","cameraArray","isArrayCamera","ascIdSort","sortOpaque","sortTransparent","MultiDrawRenderList","pool","list","item","reset","_matrix$1","_whiteColor","_frustum","_frustumArray","_box$1","_sphere$2","_vector$5","_forward","_temp","_renderList","_mesh","_batchIntersects","copyAttributeData","targetOffset","vertexCount","copyArrayContents","BatchedMesh","customSort","_visibilityChanged","_multiDrawCounts","_multiDrawStarts","_multiDrawCount","_multiDrawInstances","_initMatricesTexture","_initIndirectTexture","instanceCount","unusedVertexCount","unusedIndexCount","matricesArray","indirectArray","_initColorsTexture","colorsArray","_initializeGeometry","reference","attributeName","srcAttribute","dstArray","dstAttribute","indexArray","_validateGeometry","batchGeometry","Boolean","validateInstanceId","active","validateGeometryId","geometryId","geometryInfoList","setCustomSort","func","geometryIndex","getBoundingBoxAt","getBoundingSphereAt","addInstance","atCapacity","drawId","sort","shift","addGeometry","reservedVertexCount","reservedIndexCount","vertexStart","indexStart","indexCount","hasIndex","setGeometryAt","dstIndex","srcIndex","deleteGeometry","deleteInstance","optimize","elementDelta","copyWithin","iv","setVisibleAt","getVisibleAt","setGeometryIdAt","getGeometryIdAt","getGeometryRangeAt","setInstanceCount","pop","multiDrawCounts","multiDrawStarts","setGeometrySize","validRanges","filter","requiredVertexLength","requiredIndexLength","oldGeometry","batchId","bytesPerElement","BYTES_PER_ELEMENT","multiDrawCount","culled","shadowCamera","depthMaterial","LineBasicMaterial","isLineBasicMaterial","linecap","linejoin","_vStart","_vEnd","_inverseMatrix$1","_ray$1","_sphere$1","_intersectPointOnRay","_intersectPointOnSegment","Line","computeLineDistances","lineDistances","params","localThreshold","localThresholdSq","isLineSegments","checkIntersection","isLineLoop","thresholdSq","distSq","_start","_end","LineSegments","LineLoop","PointsMaterial","isPointsMaterial","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","isVideoTexture","updateVideo","requestVideoFrameCallback","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoFrameTexture","isVideoFrameTexture","setFrame","FramebufferTexture","isFramebufferTexture","CompressedTexture","isCompressedTexture","CompressedArrayTexture","isCompressedArrayTexture","CompressedCubeTexture","isCompressedCubeTexture","CanvasTexture","isCanvasTexture","DepthTexture","isDepthTexture","compareFunction","DepthArrayTexture","isDepthArrayTexture","CapsuleGeometry","capSegments","radialSegments","halfHeight","capArcLength","cylinderPartLength","totalArcLength","numVerticalSegments","verticesPerRow","vertex","currentArcLength","profileY","profileRadius","normalYComponent","segmentProgress","uOffset","sinTheta","cosTheta","prevIndexRow","i4","CircleGeometry","segments","thetaStart","thetaLength","segment","CylinderGeometry","radiusTop","radiusBottom","openEnded","generateTorso","generateCap","slope","indexRow","centerIndexStart","centerIndexEnd","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","k","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","details","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","hash","reverseHash","index0","Curve","arcLengthDivisions","cacheArcLengths","getPoint","getPointAt","optionalTarget","getUtoTmapping","getPoints","divisions","getSpacedPoints","getLength","lengths","getLengths","last","sum","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","computeFrenetFrames","closed","tangents","binormals","vec","mat","MAX_VALUE","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","isEllipseCurve","twoPi","deltaAngle","samePoints","ArcCurve","aRadius","isArcCurve","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","px","py","pz","CatmullRomCurve3","curveType","isCatmullRomCurve3","intPoint","CatmullRom","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","freeze","__proto__","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","lineType","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","resolution","pts","Path","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","arc","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","holes","getPointsHoles","holesPts","extractPoints","hole","earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","invSize","eliminateHoles","maxX","maxY","earcutLinked","clockwise","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangleExceptFirst","minZ","zOrder","maxZ","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareXYSlope","eliminateHole","aSlope","bSlope","bridge","findHoleBridge","bridgeReverse","hx","hy","mx","my","tanMin","pointInTriangle","sectorContainsSector","sortLinked","numMerges","inSize","tail","pSize","qSize","leftmost","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","createNode","an","bp","Earcut","triangulate","ShapeUtils","contour","isClockWise","triangulateShape","faces","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","verticesArray","uvArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","extrudePts","extrudeByPath","splineTube","binormal","position2","shapePoints","reverse","hl","ahole","mergeOverlappingPoints","THRESHOLD","THRESHOLD_SQ","prevPos","currentIndex","currentPos","scalingFactorSqrt","thresholdSqScaled","numHoles","scalePt2","pt","vlen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","contractedContourVertices","expandedHoleVertices","bs","vert","oneHoleVertices","flen","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","initNormals","inverseSegments","curNormal","prevNormal","base","OctahedronGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","grid","verticesRow","TetrahedronGeometry","TorusGeometry","tube","tubularSegments","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","path","frames","P","generateBufferData","generateSegment","generateIndices","WireframeGeometry","edges","o","ol","isUniqueEdge","hash1","hash2","has","Geometries","ShadowMaterial","isShadowMaterial","RawShaderMaterial","isRawShaderMaterial","MeshStandardMaterial","isMeshStandardMaterial","MeshPhysicalMaterial","isMeshPhysicalMaterial","ior","get","sheenColorMap","sheenRoughnessMap","_anisotropy","_clearcoat","_dispersion","_iridescence","_sheen","_transmission","MeshPhongMaterial","isMeshPhongMaterial","MeshToonMaterial","isMeshToonMaterial","MeshNormalMaterial","isMeshNormalMaterial","MeshLambertMaterial","isMeshLambertMaterial","MeshDepthMaterial","isMeshDepthMaterial","depthPacking","MeshDistanceMaterial","isMeshDistanceMaterial","MeshMatcapMaterial","isMeshMatcapMaterial","LineDashedMaterial","isLineDashedMaterial","convertArray","isTypedArray","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","time","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetValueSize","lastIndex","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","AnimationUtils","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","copySampleValue_","t1global","mid","intervalChanged_","interpolate_","getSettings_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","timeScale","trim","startTime","endTime","nKeys","to","validate","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","morphTargets","animationToMorphTargets","pattern","morphTarget","parts","match","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","getTrackTypeForValueTypeName","typeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","DEFAULT_MATERIAL_NAME","loading","HttpError","response","FileLoader","mimeType","responseType","cached","req","Request","headers","Headers","credentials","fetch","then","status","ReadableStream","body","getReader","callbacks","reader","contentLength","total","lengthComputable","loaded","stream","controller","readData","read","done","close","byteLength","ProgressEvent","enqueue","Response","statusText","arrayBuffer","blob","text","parser","DOMParser","parseFromString","re","label","decoder","TextDecoder","decode","catch","err","finally","setResponseType","setMimeType","AnimationLoader","CompressedTextureLoader","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","removeEventListeners","onImageError","CubeTextureLoader","urls","DataTextureLoader","texData","TextureLoader","Light","intensity","groundColor","decay","penumbra","shadow","HemisphereLight","skyColor","isHemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","bias","normalBias","blurSamples","mapSize","mapType","mapPass","_frameExtents","_viewportCount","_viewports","getViewportCount","getFrustum","updateMatrices","light","shadowMatrix","getViewport","viewportIndex","getFrameExtents","SpotLightShadow","isSpotLightShadow","SpotLight","isSpotLight","power","_projScreenMatrix","_lightPositionWorld","_lookTarget","PointLightShadow","isPointLightShadow","_cubeDirections","_cubeUps","PointLight","isPointLight","OrthographicCamera","isOrthographicCamera","scaleW","scaleH","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","isDirectionalLight","AmbientLight","isAmbientLight","RectAreaLight","isRectAreaLight","SphericalHarmonics3","isSphericalHarmonics3","coefficients","zero","getAt","coeff","getIrradianceAt","sh","addScaledSH","getBasisAt","shBasis","LightProbe","isLightProbe","MaterialLoader","getTexture","createMaterialFromType","setTextures","materialLib","LoaderUtils","extractUrlBase","lastIndexOf","replace","InstancedBufferGeometry","isInstancedBufferGeometry","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","bufferAttributeConstr","drawcalls","offsets","ObjectLoader","parseAsync","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","bindLightTargets","hasImages","parseImagesAsync","bufferGeometryLoader","loadImage","deserializeImage","imageArray","currentUrl","deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","isInteger","objectAnimations","ImageBitmapLoader","isImageBitmapLoader","createImageBitmap","setOptions","imageBitmap","fetchOptions","promise","res","colorSpaceConversion","_context","AudioContext","window","webkitAudioContext","setContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","handleError","_eyeRight","_eyeLeft","_projectionMatrix","StereoCamera","eyeSep","cameraL","cameraR","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","ArrayCamera","isMultiViewCamera","Clock","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","AudioListener","gain","createGain","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","PositionalAudio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","apply","weightAdditive","originalValueOffset","setValue","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","RegExp","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","substring","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","targetObject","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","AnimationObjectGroup","_objects","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","objects","inUse","bindingsPerObject","indicesByUUID","paths","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_controlInterpolantsResultBuffer","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","RenderTarget3D","isRenderTarget3D","RenderTargetArray","isRenderTargetArray","Uniform","_id","UniformsGroup","isUniformsGroup","setName","uniformsSource","InstancedInterleavedBuffer","isInstancedInterleavedBuffer","GLBufferAttribute","elementSize","setType","setItemSize","setCount","_matrix","Raycaster","setFromCamera","coords","setFromXRController","intersectObject","ascSort","intersectObjects","propagate","Spherical","other","makeSafe","EPS","setFromCartesianCoords","Cylindrical","Matrix2","isMatrix2","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$3","SpotLightHelper","positions","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","colors","isSkeletonHelper","boneList","PointLightHelper","sphereSize","_vector$1","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","sectors","rings","_v1","_v2","_v3","DirectionalLightHelper","lightPlane","targetLine","_vector","_camera","CameraHelper","pointMap","addLine","addPoint","colorFrustum","colorCone","colorUp","colorTarget","colorCross","setColors","colorAttribute","nearZ","setPoint","_box","BoxHelper","Box3Helper","PlaneHelper","positions2","_axis","_lineGeometry","_coneGeometry","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","xAxisColor","yAxisColor","zAxisColor","ShapePath","subPaths","currentPath","toShapes","isCCW","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","tmpHoles","Controls","domElement","state","mouseButtons","touches","ONE","TWO","contain","imageAspect","cover","getByteLength","typeByteLength","getTextureTypeByteLength","TextureUtils","revision","__THREE__"],"sources":["D:/自习室预约系统/Springboot期末大作业/RoomAppoint.elementui/node_modules/three/build/three.core.js"],"sourcesContent":["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '176';\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsMouse}\n * @constant\n */\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\n/**\n * Represents touch interaction types in context of controls.\n *\n * @type {ConstantsTouch}\n * @constant\n */\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\n/**\n * Disables face culling.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceNone = 0;\n\n/**\n * Culls back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceBack = 1;\n\n/**\n * Culls front faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFront = 2;\n\n/**\n * Culls both front and back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFrontBack = 3;\n\n/**\n * Gives unfiltered shadow maps - fastest, but lowest quality.\n *\n * @type {number}\n * @constant\n */\nconst BasicShadowMap = 0;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\n *\n * @type {number}\n * @constant\n */\nconst PCFShadowMap = 1;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\n * better soft shadows especially when using low-resolution shadow maps.\n *\n * @type {number}\n * @constant\n */\nconst PCFSoftShadowMap = 2;\n\n/**\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\n * When using VSMShadowMap all shadow receivers will also cast shadows.\n *\n * @type {number}\n * @constant\n */\nconst VSMShadowMap = 3;\n\n/**\n * Only front faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst FrontSide = 0;\n\n/**\n * Only back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst BackSide = 1;\n\n/**\n * Both front and back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst DoubleSide = 2;\n\n/**\n * No blending is performed which effectively disables\n * alpha transparency.\n *\n * @type {number}\n * @constant\n */\nconst NoBlending = 0;\n\n/**\n * The default blending.\n *\n * @type {number}\n * @constant\n */\nconst NormalBlending = 1;\n\n/**\n * Represents additive blending.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveBlending = 2;\n\n/**\n * Represents subtractive blending.\n *\n * @type {number}\n * @constant\n */\nconst SubtractiveBlending = 3;\n\n/**\n * Represents multiply blending.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyBlending = 4;\n\n/**\n * Represents custom blending.\n *\n * @type {number}\n * @constant\n */\nconst CustomBlending = 5;\n\n/**\n * A `source + destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst AddEquation = 100;\n\n/**\n * A `source - destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst SubtractEquation = 101;\n\n/**\n * A `destination - source` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst ReverseSubtractEquation = 102;\n\n/**\n * A blend equation that uses the minimum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MinEquation = 103;\n\n/**\n * A blend equation that uses the maximum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MaxEquation = 104;\n\n/**\n * Multiplies all colors by `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroFactor = 200;\n\n/**\n * Multiplies all colors by `1`.\n *\n * @type {number}\n * @constant\n */\nconst OneFactor = 201;\n\n/**\n * Multiplies all colors by the source colors.\n *\n * @type {number}\n * @constant\n */\nconst SrcColorFactor = 202;\n\n/**\n * Multiplies all colors by `1` minus each source color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcColorFactor = 203;\n\n/**\n * Multiplies all colors by the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaFactor = 204;\n\n/**\n * Multiplies all colors by 1 minus the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcAlphaFactor = 205;\n\n/**\n * Multiplies all colors by the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst DstAlphaFactor = 206;\n\n/**\n * Multiplies all colors by `1` minus the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstAlphaFactor = 207;\n\n/**\n * Multiplies all colors by the destination color.\n *\n * @type {number}\n * @constant\n */\nconst DstColorFactor = 208;\n\n/**\n * Multiplies all colors by `1` minus each destination color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstColorFactor = 209;\n\n/**\n * Multiplies the RGB colors by the smaller of either the source alpha\n * value or the value of `1` minus the destination alpha value. The alpha\n * value is multiplied by `1`.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaSaturateFactor = 210;\n\n/**\n * Multiplies all colors by a constant color.\n *\n * @type {number}\n * @constant\n */\nconst ConstantColorFactor = 211;\n\n/**\n * Multiplies all colors by `1` minus a constant color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantColorFactor = 212;\n\n/**\n * Multiplies all colors by a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst ConstantAlphaFactor = 213;\n\n/**\n * Multiplies all colors by 1 minus a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantAlphaFactor = 214;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverDepth = 0;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysDepth = 1;\n\n/**\n * Pass if the incoming value is less than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessDepth = 2;\n\n/**\n * Pass if the incoming value is less than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualDepth = 3;\n\n/**\n * Pass if the incoming value equals the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst EqualDepth = 4;\n\n/**\n * Pass if the incoming value is greater than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualDepth = 5;\n\n/**\n * Pass if the incoming value is greater than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterDepth = 6;\n\n/**\n * Pass if the incoming value is not equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualDepth = 7;\n\n/**\n * Multiplies the environment map color with the surface color.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyOperation = 0;\n\n/**\n * Uses reflectivity to blend between the two colors.\n *\n * @type {number}\n * @constant\n */\nconst MixOperation = 1;\n\n/**\n * Adds the two colors.\n *\n * @type {number}\n * @constant\n */\nconst AddOperation = 2;\n\n/**\n * No tone mapping is applied.\n *\n * @type {number}\n * @constant\n */\nconst NoToneMapping = 0;\n\n/**\n * Linear tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearToneMapping = 1;\n\n/**\n * Reinhard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ReinhardToneMapping = 2;\n\n/**\n * Cineon tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst CineonToneMapping = 3;\n\n/**\n * ACES Filmic tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ACESFilmicToneMapping = 4;\n\n/**\n * Custom tone mapping.\n *\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\n *\n * @type {number}\n * @constant\n */\nconst CustomToneMapping = 5;\n\n/**\n * AgX tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst AgXToneMapping = 6;\n\n/**\n * Neutral tone mapping.\n *\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst NeutralToneMapping = 7;\n\n/**\n * The skinned mesh shares the same world space as the skeleton.\n *\n * @type {string}\n * @constant\n */\nconst AttachedBindMode = 'attached';\n\n/**\n * The skinned mesh does not share the same world space as the skeleton.\n * This is useful when a skeleton is shared across multiple skinned meshes.\n *\n * @type {string}\n * @constant\n */\nconst DetachedBindMode = 'detached';\n\n/**\n * Maps textures using the geometry's UV coordinates.\n *\n * @type {number}\n * @constant\n */\nconst UVMapping = 300;\n\n/**\n * Reflection mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeReflectionMapping = 301;\n\n/**\n * Refraction mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeRefractionMapping = 302;\n\n/**\n * Reflection mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularReflectionMapping = 303;\n\n/**\n * Refraction mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularRefractionMapping = 304;\n\n/**\n * Reflection mapping for PMREM textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeUVReflectionMapping = 306;\n\n/**\n * The texture will simply repeat to infinity.\n *\n * @type {number}\n * @constant\n */\nconst RepeatWrapping = 1000;\n\n/**\n * The last pixel of the texture stretches to the edge of the mesh.\n *\n * @type {number}\n * @constant\n */\nconst ClampToEdgeWrapping = 1001;\n\n/**\n * The texture will repeats to infinity, mirroring on each repeat.\n *\n * @type {number}\n * @constant\n */\nconst MirroredRepeatWrapping = 1002;\n\n/**\n * Returns the value of the texture element that is nearest (in Manhattan distance)\n * to the specified texture coordinates.\n *\n * @type {number}\n * @constant\n */\nconst NearestFilter = 1003;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\n * to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005; // legacy\n\n/**\n * Returns the weighted average of the four texture elements that are closest to the specified\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearFilter = 1006;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\n * center of the pixel) to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\n * is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008; // legacy\n\n/**\n * An unsigned byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedByteType = 1009;\n\n/**\n * A byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ByteType = 1010;\n\n/**\n * A short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ShortType = 1011;\n\n/**\n * An unsigned short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShortType = 1012;\n\n/**\n * An int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst IntType = 1013;\n\n/**\n * An unsigned int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedIntType = 1014;\n\n/**\n * A float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst FloatType = 1015;\n\n/**\n * A half float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst HalfFloatType = 1016;\n\n/**\n * An unsigned short 4_4_4_4 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort4444Type = 1017;\n\n/**\n * An unsigned short 5_5_5_1 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort5551Type = 1018;\n\n/**\n * An unsigned int 24_8 data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt248Type = 1020;\n\n/**\n * An unsigned int 5_9_9_9 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt5999Type = 35902;\n\n/**\n * Discards the red, green and blue components and reads just the alpha component.\n *\n * @type {number}\n * @constant\n */\nconst AlphaFormat = 1021;\n\n/**\n * Discards the alpha component and reads the red, green and blue component.\n *\n * @type {number}\n * @constant\n */\nconst RGBFormat = 1022;\n\n/**\n * Reads the red, green, blue and alpha components.\n *\n * @type {number}\n * @constant\n */\nconst RGBAFormat = 1023;\n\n/**\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n *\n * @type {number}\n * @constant\n */\nconst DepthFormat = 1026;\n\n/**\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\n *\n * @type {number}\n * @constant\n */\nconst DepthStencilFormat = 1027;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component.\n *\n * @type {number}\n * @constant\n */\nconst RedFormat = 1028;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RedIntegerFormat = 1029;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components.\n *\n * @type {number}\n * @constant\n */\nconst RGFormat = 1030;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGIntegerFormat = 1031;\n\n/**\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBIntegerFormat = 1032;\n\n/**\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBAIntegerFormat = 1033;\n\n/**\n * A DXT1-compressed image in an RGB image format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_S3TC_DXT1_Format = 33776;\n\n/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT1_Format = 33777;\n\n/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT3_Format = 33778;\n\n/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\n * compression in how the alpha compression is done.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT5_Format = 33779;\n\n/**\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_4BPPV1_Format = 35840;\n\n/**\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_2BPPV1_Format = 35841;\n\n/**\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\n/**\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\n/**\n * ETC1 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC1_Format = 36196;\n\n/**\n * ETC2 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC2_Format = 37492;\n\n/**\n * ETC2 RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ETC2_EAC_Format = 37496;\n\n/**\n * ASTC RGBA 4x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_4x4_Format = 37808;\n\n/**\n * ASTC RGBA 5x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x4_Format = 37809;\n\n/**\n * ASTC RGBA 5x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x5_Format = 37810;\n\n/**\n * ASTC RGBA 6x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x5_Format = 37811;\n\n/**\n * ASTC RGBA 6x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x6_Format = 37812;\n\n/**\n * ASTC RGBA 8x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x5_Format = 37813;\n\n/**\n * ASTC RGBA 8x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x6_Format = 37814;\n\n/**\n * ASTC RGBA 8x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x8_Format = 37815;\n\n/**\n * ASTC RGBA 10x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x5_Format = 37816;\n\n/**\n * ASTC RGBA 10x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x6_Format = 37817;\n\n/**\n * ASTC RGBA 10x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x8_Format = 37818;\n\n/**\n * ASTC RGBA 10x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x10_Format = 37819;\n\n/**\n * ASTC RGBA 12x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x10_Format = 37820;\n\n/**\n * ASTC RGBA 12x12 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x12_Format = 37821;\n\n/**\n * BPTC RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_BPTC_Format = 36492;\n\n/**\n * BPTC Signed RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_SIGNED_Format = 36494;\n\n/**\n * BPTC Unsigned RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_UNSIGNED_Format = 36495;\n\n/**\n * RGTC1 Red format.\n *\n * @type {number}\n * @constant\n */\nconst RED_RGTC1_Format = 36283;\n\n/**\n * RGTC1 Signed Red format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_RGTC1_Format = 36284;\n\n/**\n * RGTC2 Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst RED_GREEN_RGTC2_Format = 36285;\n\n/**\n * RGTC2 Signed Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\n\n/**\n * Animations are played once.\n *\n * @type {number}\n * @constant\n */\nconst LoopOnce = 2200;\n\n/**\n * Animations are played with a chosen number of repetitions, each time jumping from\n * the end of the clip directly to its beginning.\n *\n * @type {number}\n * @constant\n */\nconst LoopRepeat = 2201;\n\n/**\n * Animations are played with a chosen number of repetitions, alternately playing forward\n * and backward.\n *\n * @type {number}\n * @constant\n */\nconst LoopPingPong = 2202;\n\n/**\n * Discrete interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateDiscrete = 2300;\n\n/**\n * Linear interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateLinear = 2301;\n\n/**\n * Smooth interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateSmooth = 2302;\n\n/**\n * Zero curvature ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroCurvatureEnding = 2400;\n\n/**\n * Zero slope ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroSlopeEnding = 2401;\n\n/**\n * Wrap around ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst WrapAroundEnding = 2402;\n\n/**\n * Default animation blend mode.\n *\n * @type {number}\n * @constant\n */\nconst NormalAnimationBlendMode = 2500;\n\n/**\n * Additive animation blend mode. Can be used to layer motions on top of\n * each other to build complex performances from smaller re-usable assets.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveAnimationBlendMode = 2501;\n\n/**\n * For every three vertices draw a single triangle.\n *\n * @type {number}\n * @constant\n */\nconst TrianglesDrawMode = 0;\n\n/**\n * For each vertex draw a triangle from the last three vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleStripDrawMode = 1;\n\n/**\n * For each vertex draw a triangle from the first vertex and the last two vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleFanDrawMode = 2;\n\n/**\n * Basic depth packing.\n *\n * @type {number}\n * @constant\n */\nconst BasicDepthPacking = 3200;\n\n/**\n * A depth value is packed into 32 bit RGBA.\n *\n * @type {number}\n * @constant\n */\nconst RGBADepthPacking = 3201;\n\n/**\n * A depth value is packed into 24 bit RGB.\n *\n * @type {number}\n * @constant\n */\nconst RGBDepthPacking = 3202;\n\n/**\n * A depth value is packed into 16 bit RG.\n *\n * @type {number}\n * @constant\n */\nconst RGDepthPacking = 3203;\n\n/**\n * Normal information is relative to the underlying surface.\n *\n * @type {number}\n * @constant\n */\nconst TangentSpaceNormalMap = 0;\n\n/**\n * Normal information is relative to the object orientation.\n *\n * @type {number}\n * @constant\n */\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n\n/**\n * No color space.\n *\n * @type {string}\n * @constant\n */\nconst NoColorSpace = '';\n\n/**\n * sRGB color space.\n *\n * @type {string}\n * @constant\n */\nconst SRGBColorSpace = 'srgb';\n\n/**\n * sRGB-linear color space.\n *\n * @type {string}\n * @constant\n */\nconst LinearSRGBColorSpace = 'srgb-linear';\n\n/**\n * Linear transfer function.\n *\n * @type {string}\n * @constant\n */\nconst LinearTransfer = 'linear';\n\n/**\n * sRGB transfer function.\n *\n * @type {string}\n * @constant\n */\nconst SRGBTransfer = 'srgb';\n\n/**\n * Sets the stencil buffer value to `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroStencilOp = 0;\n\n/**\n * Keeps the current value.\n *\n * @type {number}\n * @constant\n */\nconst KeepStencilOp = 7680;\n\n/**\n * Sets the stencil buffer value to the specified reference value.\n *\n * @type {number}\n * @constant\n */\nconst ReplaceStencilOp = 7681;\n\n/**\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementStencilOp = 7682;\n\n/**\n * Decrements the current stencil buffer value. Clamps to `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementStencilOp = 7683;\n\n/**\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\n * the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementWrapStencilOp = 34055;\n\n/**\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\n * unsigned value when decrementing a stencil buffer value of `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementWrapStencilOp = 34056;\n\n/**\n * Inverts the current stencil buffer value bitwise.\n *\n * @type {number}\n * @constant\n */\nconst InvertStencilOp = 5386;\n\n/**\n * Will never return true.\n *\n * @type {number}\n * @constant\n */\nconst NeverStencilFunc = 512;\n\n/**\n * Will return true if the stencil reference value is less than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessStencilFunc = 513;\n\n/**\n * Will return true if the stencil reference value is equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst EqualStencilFunc = 514;\n\n/**\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualStencilFunc = 515;\n\n/**\n * Will return true if the stencil reference value is greater than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterStencilFunc = 516;\n\n/**\n * Will return true if the stencil reference value is not equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualStencilFunc = 517;\n\n/**\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualStencilFunc = 518;\n\n/**\n * Will always return true.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysStencilFunc = 519;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverCompare = 512;\n\n/**\n * Pass if the incoming value is less than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessCompare = 513;\n\n/**\n * Pass if the incoming value equals the texture value.\n *\n * @type {number}\n * @constant\n */\nconst EqualCompare = 514;\n\n/**\n * Pass if the incoming value is less than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualCompare = 515;\n\n/**\n * Pass if the incoming value is greater than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterCompare = 516;\n\n/**\n * Pass if the incoming value is not equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualCompare = 517;\n\n/**\n * Pass if the incoming value is greater than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualCompare = 518;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysCompare = 519;\n\n/**\n * The contents are intended to be specified once by the application, and used many\n * times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticDrawUsage = 35044;\n\n/**\n * The contents are intended to be respecified repeatedly by the application, and\n * used many times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicDrawUsage = 35048;\n\n/**\n * The contents are intended to be specified once by the application, and used at most\n * a few times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamDrawUsage = 35040;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst StaticReadUsage = 35045;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst DynamicReadUsage = 35049;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\n * a few times by the application\n *\n * @type {number}\n * @constant\n */\nconst StreamReadUsage = 35041;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\n * the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticCopyUsage = 35046;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicCopyUsage = 35050;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamCopyUsage = 35042;\n\n/**\n * GLSL 1 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL1 = '100';\n\n/**\n * GLSL 3 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL3 = '300 es';\n\n/**\n * WebGL coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGLCoordinateSystem = 2000;\n\n/**\n * WebGPU coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * Represents the different timestamp query types.\n *\n * @type {ConstantsTimestampQuery}\n * @constant\n */\nconst TimestampQuery = {\n\tCOMPUTE: 'compute',\n\tRENDER: 'render'\n};\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsInterpolationSamplingType}\n * @constant\n */\nconst InterpolationSamplingType = {\n\tPERSPECTIVE: 'perspective',\n\tLINEAR: 'linear',\n\tFLAT: 'flat'\n};\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @type {ConstantsInterpolationSamplingMode}\n * @constant\n */\nconst InterpolationSamplingMode = {\n\tNORMAL: 'normal',\n\tCENTROID: 'centroid',\n\tSAMPLE: 'sample',\n\tFLAT_FIRST: 'flat first',\n\tFLAT_EITHER: 'flat either'\n};\n\n/**\n * This type represents mouse buttons and interaction types in context of controls.\n *\n * @typedef {Object} ConstantsMouse\n * @property {number} MIDDLE - The left mouse button.\n * @property {number} LEFT - The middle mouse button.\n * @property {number} RIGHT - The right mouse button.\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} DOLLY - A dolly interaction.\n * @property {number} PAN - A pan interaction.\n **/\n\n/**\n * This type represents touch interaction types in context of controls.\n *\n * @typedef {Object} ConstantsTouch\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} PAN - A pan interaction.\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\n **/\n\n/**\n * This type represents the different timestamp query types.\n *\n * @typedef {Object} ConstantsTimestampQuery\n * @property {string} COMPUTE - A `compute` timestamp query.\n * @property {string} RENDER - A `render` timestamp query.\n **/\n\n/**\n * Represents the different interpolation sampling types.\n *\n * @typedef {Object} ConstantsInterpolationSamplingType\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\n * @property {string} LINEAR - Linear interpolation.\n * @property {string} FLAT - Flat interpolation.\n */\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @typedef {Object} ConstantsInterpolationSamplingMode\n * @property {string} NORMAL - Normal sampling mode.\n * @property {string} CENTROID - Centroid sampling mode.\n * @property {string} SAMPLE - Sample-specific sampling mode.\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\n */\n\n/**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */\nclass EventDispatcher {\n\n\t/**\n\t * Adds the given event listener to the given event type.\n\t *\n\t * @param {string} type - The type of event to listen to.\n\t * @param {Function} listener - The function that gets called when the event is fired.\n\t */\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === -1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given event listener has been added to the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to check.\n\t * @return {boolean} Whether the given event listener has been added to the given event type.\n\t */\n\thasEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return false;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== -1;\n\n\t}\n\n\t/**\n\t * Removes the given event listener from the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to remove.\n\t */\n\tremoveEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Dispatches an event object.\n\t *\n\t * @param {Object} event - The event that gets fired.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo( n, m ) {\n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp( x, y, value ) {\n\n\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong( x, length = 1 ) {\n\n\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, -1 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, -1 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, -1 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\t/**\n\t * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n\t * (universally unique identifier).\n\t *\n\t * @static\n\t * @method\n\t * @return {string} The UUID.\n\t */\n\tgenerateUUID: generateUUID,\n\t/**\n\t * Clamps the given value between min and max.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to clamp.\n\t * @param {number} min - The min value.\n\t * @param {number} max - The max value.\n\t * @return {number} The clamped value.\n\t */\n\tclamp: clamp,\n\t/**\n\t * Computes the Euclidean modulo of the given parameters that\n\t * is `( ( n % m ) + m ) % m`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} n - The first parameter.\n\t * @param {number} m - The second parameter.\n\t * @return {number} The Euclidean modulo.\n\t */\n\teuclideanModulo: euclideanModulo,\n\t/**\n\t * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n\t * for the given value.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to be mapped.\n\t * @param {number} a1 - Minimum value for range A.\n\t * @param {number} a2 - Maximum value for range A.\n\t * @param {number} b1 - Minimum value for range B.\n\t * @param {number} b2 - Maximum value for range B.\n\t * @return {number} The mapped value.\n\t */\n\tmapLinear: mapLinear,\n\t/**\n\t * Returns the percentage in the closed interval `[0, 1]` of the given value\n\t * between the start and end point.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} value - A value between start and end.\n\t * @return {number} The interpolation factor.\n\t */\n\tinverseLerp: inverseLerp,\n\t/**\n\t * Returns a value linearly interpolated from two known points based on the given interval -\n\t * `t = 0` will return `x` and `t = 1` will return `y`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {number} The interpolated value.\n\t */\n\tlerp: lerp,\n\t/**\n\t * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n\t * time to maintain frame rate independent movement. For details, see\n\t * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The current point.\n\t * @param {number} y - The target point.\n\t * @param {number} lambda - A higher lambda value will make the movement more sudden,\n\t * and a lower value will make the movement more gradual.\n\t * @param {number} dt - Delta time in seconds.\n\t * @return {number} The interpolated value.\n\t */\n\tdamp: damp,\n\t/**\n\t * Returns a value that alternates between `0` and the given `length` parameter.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to pingpong.\n\t * @param {number} [length=1] - The positive value the function will pingpong to.\n\t * @return {number} The alternated value.\n\t */\n\tpingpong: pingpong,\n\t/**\n\t * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n\t * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n\t * the `min` and `max`.\n\t *\n\t * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmoothstep: smoothstep,\n\t/**\n\t * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n\t * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmootherstep: smootherstep,\n\t/**\n\t * Returns a random integer from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random integer.\n\t */\n\trandInt: randInt,\n\t/**\n\t * Returns a random float from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random float.\n\t */\n\trandFloat: randFloat,\n\t/**\n\t * Returns a random integer from `<-range/2, range/2>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} range - Defines the value range.\n\t * @return {number} A random float.\n\t */\n\trandFloatSpread: randFloatSpread,\n\t/**\n\t * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} [s] - The integer seed.\n\t * @return {number} A random float.\n\t */\n\tseededRandom: seededRandom,\n\t/**\n\t * Converts degrees to radians.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} degrees - A value in degrees.\n\t * @return {number} The converted value in radians.\n\t */\n\tdegToRad: degToRad,\n\t/**\n\t * Converts radians to degrees.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} radians - A value in radians.\n\t * @return {number} The converted value in degrees.\n\t */\n\tradToDeg: radToDeg,\n\t/**\n\t * Returns `true` if the given number is a power of two.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to check.\n\t * @return {boolean} Whether the given number is a power of two or not.\n\t */\n\tisPowerOfTwo: isPowerOfTwo,\n\t/**\n\t * Returns the smallest power of two that is greater than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The smallest power of two that is greater than or equal to the given number.\n\t */\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\t/**\n\t * Returns the largest power of two that is less than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The largest power of two that is less than or equal to the given number.\n\t */\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\t/**\n\t * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n\t * defined by the given angles and order.\n\t *\n\t * Rotations are applied to the axes in the order specified by order:\n\t * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n\t *\n\t * @static\n\t * @method\n\t * @param {Quaternion} q - The quaternion to set.\n\t * @param {number} a - The rotation applied to the first axis, in radians.\n\t * @param {number} b - The rotation applied to the second axis, in radians.\n\t * @param {number} c - The rotation applied to the third axis, in radians.\n\t * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n\t */\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\t/**\n\t * Normalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The float value in the range `[0,1]` to normalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The normalize value.\n\t */\n\tnormalize: normalize,\n\t/**\n\t * Denormalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to denormalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The denormalize (float) value in the range `[0,1]`.\n\t */\n\tdenormalize: denormalize\n};\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n\n\t/**\n\t * Constructs a new 2D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t */\n\tconstructor( x = 0, y = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector2.prototype.isVector2 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#x}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#y}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @param {number} value - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to copy.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector2} v - The vector to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector2} v - The vector to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\n\t * the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the given vector's x or y\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is less than the given vector's x or y\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the max vector's x or y\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x or y value is less than the min vector's x or y value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector2} min - The minimum x and y values.\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x or y values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the cross product with.\n\t * @return {number} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\n\t *\n\t * @return {number} The angle in radians.\n\t */\n\tangle() {\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector2} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector2} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector2} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector2} v1 - The first vector.\n\t * @param {Vector2} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector2} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]` and y\n\t * value to be `array[ offset + 1 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this vector around the given center by the given angle.\n\t *\n\t * @param {Vector2} center - The point around which to rotate.\n\t * @param {number} angle - The angle to rotate, in radians.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\n/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix3 {\n\n\t/**\n\t * Constructs a new 3x3 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 3x3 identity matrix.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix3} m - The matrix to copy.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 3x3 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix3} a - The first matrix.\n\t * @param {Matrix3} b - The second matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the normal matrix which is the inverse transpose of the upper\n\t * left 3x3 portion of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\t/**\n\t * Transposes this matrix into the supplied array, and returns itself unchanged.\n\t *\n\t * @param {Array<number>} r - An array to store the transposed matrix elements.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the UV transform matrix from offset, repeat, rotation, and center.\n\t *\n\t * @param {number} tx - Offset x.\n\t * @param {number} ty - Offset y.\n\t * @param {number} sx - Repeat x.\n\t * @param {number} sy - Repeat y.\n\t * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n\t * @param {number} cx - Center x of rotation.\n\t * @param {number} cy - Center y of rotation\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this matrix with the given scalar values.\n\t *\n\t * @param {number} sx - The amount to scale in the X axis.\n\t * @param {number} sy - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this matrix by the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates this matrix by the given scalar values.\n\t *\n\t * @param {number} tx - The amount to translate in the X axis.\n\t * @param {number} ty - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\t/**\n\t * Sets this matrix as a 2D translation transform.\n\t *\n\t * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y ) {\n\n\t\tif ( x.isVector2 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x.x,\n\t\t\t\t0, 1, x.y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x,\n\t\t\t\t0, 1, y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D rotational transformation.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D scale transform.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix3} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nconst _cache = {};\n\nfunction warnOnce( message ) {\n\n\tif ( message in _cache ) return;\n\n\t_cache[ message ] = true;\n\n\tconsole.warn( message );\n\n}\n\nfunction probeAsync( gl, sync, interval ) {\n\n\treturn new Promise( function ( resolve, reject ) {\n\n\t\tfunction probe() {\n\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\n\n\t\t\t\tcase gl.WAIT_FAILED:\n\t\t\t\t\treject();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\n\t\t\t\t\tsetTimeout( probe, interval );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t}\n\n\t\tsetTimeout( probe, interval );\n\n\t} );\n\n}\n\nfunction toNormalizedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\n\t// Convert [-1, 1] to [0, 1] projection matrix\n\tm[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];\n\tm[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];\n\tm[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];\n\tm[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];\n\n}\n\nfunction toReversedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\tconst isPerspectiveMatrix = m[ 11 ] === -1;\n\n\t// Reverse [0, 1] projection matrix\n\tif ( isPerspectiveMatrix ) {\n\n\t\tm[ 10 ] = - m[ 10 ] - 1;\n\t\tm[ 14 ] = - m[ 14 ];\n\n\t} else {\n\n\t\tm[ 10 ] = - m[ 10 ];\n\t\tm[ 14 ] = - m[ 14 ] + 1;\n\n\t}\n\n}\n\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(\n\t0.4123908, 0.3575843, 0.1804808,\n\t0.2126390, 0.7151687, 0.0721923,\n\t0.0193308, 0.1191948, 0.9505322\n);\n\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(\n\t3.2409699, -1.5373832, -0.4986108,\n\t-0.9692436, 1.8759675, 0.0415551,\n\t0.0556301, -0.203977, 1.0569715\n);\n\nfunction createColorManagement() {\n\n\tconst ColorManagement = {\n\n\t\tenabled: true,\n\n\t\tworkingColorSpace: LinearSRGBColorSpace,\n\n\t\t/**\n\t\t * Implementations of supported color spaces.\n\t\t *\n\t\t * Required:\n\t\t *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n\t\t *\t- whitePoint: reference white [ x y ]\n\t\t *\t- transfer: transfer function (pre-defined)\n\t\t *\t- toXYZ: Matrix3 RGB to XYZ transform\n\t\t *\t- fromXYZ: Matrix3 XYZ to RGB transform\n\t\t *\t- luminanceCoefficients: RGB luminance coefficients\n\t\t *\n\t\t * Optional:\n\t\t *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n\t\t *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n\t\t *\n\t\t * Reference:\n\t\t * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n\t\t */\n\t\tspaces: {},\n\n\t\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\t\treturn color;\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = SRGBToLinear( color.r );\n\t\t\t\tcolor.g = SRGBToLinear( color.g );\n\t\t\t\tcolor.b = SRGBToLinear( color.b );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {\n\n\t\t\t\tcolor.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );\n\t\t\t\tcolor.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = LinearToSRGB( color.r );\n\t\t\t\tcolor.g = LinearToSRGB( color.g );\n\t\t\t\tcolor.b = LinearToSRGB( color.b );\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t},\n\n\t\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t\t},\n\n\t\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t\t},\n\n\t\tgetPrimaries: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].primaries;\n\n\t\t},\n\n\t\tgetTransfer: function ( colorSpace ) {\n\n\t\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\n\n\t\t\treturn this.spaces[ colorSpace ].transfer;\n\n\t\t},\n\n\t\tgetLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );\n\n\t\t},\n\n\t\tdefine: function ( colorSpaces ) {\n\n\t\t\tObject.assign( this.spaces, colorSpaces );\n\n\t\t},\n\n\t\t// Internal APIs\n\n\t\t_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {\n\n\t\t\treturn targetMatrix\n\t\t\t\t.copy( this.spaces[ sourceColorSpace ].toXYZ )\n\t\t\t\t.multiply( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t},\n\n\t\t_getDrawingBufferColorSpace: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;\n\n\t\t},\n\n\t\t_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;\n\n\t\t}\n\n\t};\n\n\t/******************************************************************************\n\t * sRGB definitions\n\t */\n\n\tconst REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];\n\tconst REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];\n\tconst D65 = [ 0.3127, 0.3290 ];\n\n\tColorManagement.define( {\n\n\t\t[ LinearSRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: LinearTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\tworkingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t\t[ SRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: SRGBTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t} );\n\n\treturn ColorManagement;\n\n}\n\nconst ColorManagement = /*@__PURE__*/ createColorManagement();\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nlet _canvas;\n\n/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */\nclass ImageUtils {\n\n\t/**\n\t * Returns a data URI containing a representation of the given image.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n\t * @param {string} [type='image/png'] - Indicates the image format.\n\t * @return {string} The data URI.\n\t */\n\tstatic getDataURL( image, type = 'image/png' ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\treturn canvas.toDataURL( type );\n\n\t}\n\n\t/**\n\t * Converts the given sRGB image data to linear color space.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n\t * @return {HTMLCanvasElement|Object} The converted image.\n\t */\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nlet _sourceId = 0;\n\n/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */\nclass Source {\n\n\t/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {any} [data=null] - The data definition of a texture.\n\t */\n\tconstructor( data = null ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSource = true;\n\n\t\t/**\n\t\t * The ID of the source.\n\t\t *\n\t\t * @name Source#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\n\n\t\t/**\n\t\t * The UUID of the source.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The data definition of a texture.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.data = data;\n\n\t\t/**\n\t\t * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n\t\t * provides more control on how texture data should be processed. When `dataReady` is set\n\t\t * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n\t\t * the data into the GPU memory.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.dataReady = true;\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * When the property is set to `true`, the engine allocates the memory\n\t * for the texture (if necessary) and triggers the actual texture upload\n\t * to the GPU next time the source is used.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Serializes the source into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized source.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet _textureId = 0;\n\n/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */\nclass Texture extends EventDispatcher {\n\n\t/**\n\t * Constructs a new texture.\n\t *\n\t * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTexture = true;\n\n\t\t/**\n\t\t * The ID of the texture.\n\t\t *\n\t\t * @name Texture#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The data definition of a texture. A reference to the data source can be\n\t\t * shared across textures. This is often useful in context of spritesheets\n\t\t * where multiple textures render the same data but with different texture\n\t\t * transformations.\n\t\t *\n\t\t * @type {Source}\n\t\t */\n\t\tthis.source = new Source( image );\n\n\t\t/**\n\t\t * An array holding user-defined mipmaps.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mipmaps = [];\n\n\t\t/**\n\t\t * How the texture is applied to the object. The value `UVMapping`\n\t\t * is the default, where texture or uv coordinates are used to apply the map.\n\t\t *\n\t\t * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n\t\t * @default UVMapping\n\t\t*/\n\t\tthis.mapping = mapping;\n\n\t\t/**\n\t\t * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n\t\t * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.channel = 0;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *U* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapS = wrapS;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *V* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapT = wrapT;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearFilter\n\t\t */\n\t\tthis.magFilter = magFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearMipmapLinearFilter\n\t\t */\n\t\tthis.minFilter = minFilter;\n\n\t\t/**\n\t\t * The number of samples taken along the axis through the pixel that has the\n\t\t * highest density of texels. By default, this value is `1`. A higher value\n\t\t * gives a less blurry result than a basic mipmap, at the cost of more\n\t\t * texture samples being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.anisotropy = anisotropy;\n\n\t\t/**\n\t\t * The format of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default RGBAFormat\n\t\t */\n\t\tthis.format = format;\n\n\t\t/**\n\t\t * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n\t\t * defines how the texture data is going to be stored on the GPU.\n\t\t *\n\t\t * This property allows to overwrite the default format.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.internalFormat = null;\n\n\t\t/**\n\t\t * The data type of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * How much a single repetition of the texture is offset from the beginning,\n\t\t * in each direction U and V. Typical range is `0.0` to `1.0`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.offset = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How many times the texture is repeated across the surface, in each\n\t\t * direction U and V. If repeat is set greater than `1` in either direction,\n\t\t * the corresponding wrap parameter should also be set to `RepeatWrapping`\n\t\t * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n\t\t * to the center of the texture. Default is `(0, 0)`, the lower left.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.center = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How much the texture is rotated around the center point, in radians.\n\t\t * Positive values are counter-clockwise.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * Whether to update the texture's uv-transformation {@link Texture#matrix}\n\t\t * from the properties {@link Texture#offset}, {@link Texture#repeat},\n\t\t * {@link Texture#rotation}, and {@link Texture#center}.\n\t\t *\n\t\t * Set this to `false` if you are specifying the uv-transform matrix directly.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = true;\n\n\t\t/**\n\t\t * The uv-transformation matrix of the texture.\n\t\t *\n\t\t * @type {Matrix3}\n\t\t */\n\t\tthis.matrix = new Matrix3();\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Set this to `false` if you are creating mipmaps manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.generateMipmaps = true;\n\n\t\t/**\n\t\t * If set to `true`, the alpha channel, if present, is multiplied into the\n\t\t * color channels when the texture is uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure premultiply alpha on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultiplyAlpha = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure the flip on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.flipY = true;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n\t\t * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t/**\n\t\t * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default NoColorSpace\n\t\t */\n\t\tthis.colorSpace = colorSpace;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the texture. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * A callback function, called when the texture is updated (e.g., when\n\t\t * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.onUpdate = null;\n\n\t\t/**\n\t\t * An optional back reference to the textures render target.\n\t\t *\n\t\t * @type {?(RenderTarget|WebGLRenderTarget)}\n\t\t * @default null\n\t\t */\n\t\tthis.renderTarget = null;\n\n\t\t/**\n\t\t * Indicates whether a texture belongs to a render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isRenderTargetTexture = false;\n\n\t\t/**\n\t\t * Indicates if a texture should be handled like a texture array.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isTextureArray = false;\n\n\t\t/**\n\t\t * Indicates whether this texture should be processed by `PMREMGenerator` or not\n\t\t * (only relevant for render target textures).\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.pmremVersion = 0;\n\n\t}\n\n\t/**\n\t * The image object holding the texture data.\n\t *\n\t * @type {?Object}\n\t */\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\t/**\n\t * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n\t * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\t/**\n\t * Returns a new texture with copied values from this instance.\n\t *\n\t * @return {Texture} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given texture to this instance.\n\t *\n\t * @param {Texture} source - The texture to copy.\n\t * @return {Texture} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\t\tthis.channel = source.channel;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.colorSpace = source.colorSpace;\n\n\t\tthis.renderTarget = source.renderTarget;\n\t\tthis.isRenderTargetTexture = source.isRenderTargetTexture;\n\t\tthis.isTextureArray = source.isTextureArray;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the texture into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized texture.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\t\t\tchannel: this.channel,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tcolorSpace: this.colorSpace,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the texture has been disposed of.\n\t\t *\n\t\t * @event Texture#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Transforms the given uv vector with the textures uv transformation matrix.\n\t *\n\t * @param {Vector2} uv - The uv vector.\n\t * @return {Vector2} The transformed uv vector.\n\t */\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the texture\n\t * must be updated in the next render. This triggers a texture upload\n\t * to the GPU and ensures correct texture parameter configuration.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the PMREM\n\t * must be regenerated.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsPMREMUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.pmremVersion ++;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */\nTexture.DEFAULT_IMAGE = null;\n\n/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */\nTexture.DEFAULT_MAPPING = UVMapping;\n\n/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */\nTexture.DEFAULT_ANISOTROPY = 1;\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n\n\t/**\n\t * Constructs a new 4D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t * @param {number} [w=1] - The w value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector4.prototype.isVector4 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t\t/**\n\t\t * The w value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.w = w;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#z}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#w}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @param {number} w - The value of the w component.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's w component to the given value\n\t *\n\t * @param {number} w - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @param {number} value - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector to copy.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector4} v - The vector to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector4} v - The vector to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector4} v - The vector to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\t\tthis.w /= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the quaternion's axis and w to the angle.\n\t *\n\t * @param {Quaternion} q - The Quaternion to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the axis of rotation and w to the angle.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\t\tthis.w = e[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector4} min - The minimum x, y and z values.\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\t\tthis.w = clamp( this.w, min.w, max.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y, z or w values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\t\tthis.w = clamp( this.w, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\t\tthis.w = Math.trunc( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector4} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector4} v1 - The first vector.\n\t * @param {Vector4} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector4} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/**\n * A render target is a buffer where the video card draws pixels for a scene\n * that is being rendered in the background. It is used in different effects,\n * such as applying postprocessing to a rendered image before displaying it\n * on the screen.\n *\n * @augments EventDispatcher\n */\nclass RenderTarget extends EventDispatcher {\n\n\t/**\n\t * Render target options.\n\t *\n\t * @typedef {Object} RenderTarget~Options\n\t * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\n\t * @property {number} [magFilter=LinearFilter] - The mag filter.\n\t * @property {number} [minFilter=LinearFilter] - The min filter.\n\t * @property {number} [format=RGBAFormat] - The texture format.\n\t * @property {number} [type=UnsignedByteType] - The texture type.\n\t * @property {?string} [internalFormat=null] - The texture's internal format.\n\t * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [anisotropy=1] - The texture's anisotropy value.\n\t * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\n\t * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\n\t * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\n\t * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\n\t * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\n\t * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\n\t * @property {number} [samples=0] - The MSAA samples count.\n\t * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\n\t * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\n\t */\n\n\t/**\n\t * Constructs a new render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderTarget = true;\n\n\t\t/**\n\t\t * The width of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * The depth of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.depth = options.depth ? options.depth : 1;\n\n\t\t/**\n\t\t * A rectangular area inside the render target's viewport. Fragments that are\n\t\t * outside the area will be discarded.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\n\t\t/**\n\t\t * Indicates whether the scissor test should be enabled when rendering into\n\t\t * this render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.scissorTest = false;\n\n\t\t/**\n\t\t * A rectangular area representing the render target's viewport.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: this.depth };\n\n\t\toptions = Object.assign( {\n\t\t\tgenerateMipmaps: false,\n\t\t\tinternalFormat: null,\n\t\t\tminFilter: LinearFilter,\n\t\t\tdepthBuffer: true,\n\t\t\tstencilBuffer: false,\n\t\t\tresolveDepthBuffer: true,\n\t\t\tresolveStencilBuffer: true,\n\t\t\tdepthTexture: null,\n\t\t\tsamples: 0,\n\t\t\tcount: 1,\n\t\t\tmultiview: false\n\t\t}, options );\n\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\ttexture.flipY = false;\n\t\ttexture.generateMipmaps = options.generateMipmaps;\n\t\ttexture.internalFormat = options.internalFormat;\n\n\t\t/**\n\t\t * An array of textures. Each color attachment is represented as a separate texture.\n\t\t * Has at least a single entry for the default color attachment.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.textures = [];\n\n\t\tconst count = options.count;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.textures[ i ] = texture.clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t}\n\n\t\t/**\n\t\t * Whether to allocate a depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthBuffer = options.depthBuffer;\n\n\t\t/**\n\t\t * Whether to allocate a stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilBuffer = options.stencilBuffer;\n\n\t\t/**\n\t\t * Whether to resolve the depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\n\n\t\t/**\n\t\t * Whether to resolve the stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\n\n\t\tthis._depthTexture = null;\n\t\tthis.depthTexture = options.depthTexture;\n\n\t\t/**\n\t\t * The number of MSAA samples.\n\t\t *\n\t\t * A value of `0` disables MSAA.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.samples = options.samples;\n\n\t\t/**\n\t\t * Whether to this target is used in multiview rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.multiview = options.multiview;\n\n\t}\n\n\t/**\n\t * The texture representing the default color attachment.\n\t *\n\t * @type {Texture}\n\t */\n\tget texture() {\n\n\t\treturn this.textures[ 0 ];\n\n\t}\n\n\tset texture( value ) {\n\n\t\tthis.textures[ 0 ] = value;\n\n\t}\n\n\tset depthTexture( current ) {\n\n\t\tif ( this._depthTexture !== null ) this._depthTexture.renderTarget = null;\n\t\tif ( current !== null ) current.renderTarget = this;\n\n\t\tthis._depthTexture = current;\n\n\t}\n\n\t/**\n\t * Instead of saving the depth in a renderbuffer, a texture\n\t * can be used instead which is useful for further processing\n\t * e.g. in context of post-processing.\n\t *\n\t * @type {?DepthTexture}\n\t * @default null\n\t */\n\tget depthTexture() {\n\n\t\treturn this._depthTexture;\n\n\t}\n\n\t/**\n\t * Sets the size of this render target.\n\t *\n\t * @param {number} width - The width.\n\t * @param {number} height - The height.\n\t * @param {number} [depth=1] - The depth.\n\t */\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\n\n\t\t\t\tthis.textures[ i ].image.width = width;\n\t\t\t\tthis.textures[ i ].image.height = height;\n\t\t\t\tthis.textures[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\t/**\n\t * Returns a new render target with copied values from this instance.\n\t *\n\t * @return {RenderTarget} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the settings of the given render target. This is a structural copy so\n\t * no resources are shared between render targets after the copy. That includes\n\t * all MRT textures and the depth texture.\n\t *\n\t * @param {RenderTarget} source - The render target to copy.\n\t * @return {RenderTarget} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.textures.length = 0;\n\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\n\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t\t// ensure image object is not shared, see #20328\n\n\t\t\tconst image = Object.assign( {}, source.textures[ i ].image );\n\t\t\tthis.textures[ i ].source = new Source( image );\n\n\t\t}\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires RenderTarget#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\n/**\n * A render target used in context of {@link WebGLRenderer}.\n *\n * @augments RenderTarget\n */\nclass WebGLRenderTarget extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLRenderTarget = true;\n\n\t}\n\n}\n\n/**\n * Creates an array of textures directly from raw buffer data.\n *\n * @augments Texture\n */\nclass DataArrayTexture extends Texture {\n\n\t/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDataArrayTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { data, width, height, depth };\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire data texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * An array render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new array render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Creates a three-dimensional texture from raw data, with parameters to\n * divide it into width, height, and depth.\n *\n * @augments Texture\n */\nclass Data3DTexture extends Texture {\n\n\t/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in Data3DTexture directly.\n\t\t//\n\t\t//\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isData3DTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { data, width, height, depth };\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\n/**\n * A 3D render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n\n\t/**\n\t * Constructs a new quaternion.\n\t *\n\t * @param {number} [x=0] - The x value of this quaternion.\n\t * @param {number} [y=0] - The y value of this quaternion.\n\t * @param {number} [z=0] - The z value of this quaternion.\n\t * @param {number} [w=1] - The w value of this quaternion.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\t/**\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\n\t * quaternion data are managed  in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\n\t * @see {@link Quaternion#slerp}\n\t */\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : -1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\t/**\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n\t * in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @return {Array<number>} The destination array.\n\t * @see {@link Quaternion#multiplyQuaternions}.\n\t */\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\t/**\n\t * The x value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The y value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The z value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The w value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the quaternion components.\n\t *\n\t * @param {number} x - The x value of this quaternion.\n\t * @param {number} y - The y value of this quaternion.\n\t * @param {number} z - The z value of this quaternion.\n\t * @param {number} w - The w value of this quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new quaternion with copied values from this instance.\n\t *\n\t * @return {Quaternion} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given quaternion to this instance.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to copy.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the rotation specified by the given\n\t * Euler angles.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromEuler( euler, update = true ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given axis and angle.\n\t *\n\t * @param {Vector3} axis - The normalized axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the rotation required to rotate the direction vector\n\t * `vFrom` to the direction vector `vTo`.\n\t *\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Returns the angle between this quaternion and the given one in radians.\n\t *\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), -1, 1 ) ) );\n\n\t}\n\n\t/**\n\t * Rotates this quaternion by a given angular step to the given quaternion.\n\t * The method ensures that the final quaternion will not overshoot `q`.\n\t *\n\t * @param {Quaternion} q - The target quaternion.\n\t * @param {number} step - The angular step in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the identity quaternion; that is, to the\n\t * quaternion that represents \"no rotation\".\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\t/**\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\n\t * quaternion is assumed to have unit length.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tinvert() {\n\n\t\treturn this.conjugate();\n\n\t}\n\n\t/**\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\n\t * quaternion represents the same rotation in the opposite direction about\n\t * the rotational axis.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tconjugate() {\n\n\t\tthis._x *= -1;\n\t\tthis._y *= -1;\n\t\tthis._z *= -1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of this quaternion and the given one.\n\t *\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\t/**\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\n\t * {@link Quaternion#length}.\n\t *\n\t * @return {number} The squared Euclidean length.\n\t */\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\t/**\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector.\n\t *\n\t * @return {number} The Euclidean length.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\t/**\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\n\t * the same rotation as this one, but has a length equal to `1`.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\t/**\n\t * Multiplies the given quaternions and stores the result in this instance.\n\t *\n\t * @param {Quaternion} a - The first quaternion.\n\t * @param {Quaternion} b - The second quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between quaternions.\n\t *\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between the given quaternions\n\t * and stores the result in this quaternion.\n\t *\n\t * @param {Quaternion} qa - The source quaternion.\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\t/**\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trandom() {\n\n\t\t// Ken Shoemake\n\t\t// Uniform random rotations\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n\t\tconst theta1 = 2 * Math.PI * Math.random();\n\t\tconst theta2 = 2 * Math.PI * Math.random();\n\n\t\tconst x0 = Math.random();\n\t\tconst r1 = Math.sqrt( 1 - x0 );\n\t\tconst r2 = Math.sqrt( x0 );\n\n\t\treturn this.set(\n\t\t\tr1 * Math.sin( theta1 ),\n\t\t\tr1 * Math.cos( theta1 ),\n\t\t\tr2 * Math.sin( theta2 ),\n\t\t\tr2 * Math.cos( theta2 ),\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if this quaternion is equal with the given one.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\n\t * @return {boolean} Whether this quaternion is equal with the given one.\n\t */\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\t/**\n\t * Sets this quaternion's components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the quaternion component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this quaternion to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The quaternion components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this quaternion from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n\t *\n\t * @return {Array<number>} The serialized quaternion.\n\t */\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n\n\t/**\n\t * Constructs a new 3D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector3.prototype.isVector3 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @param {number} value - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to copy.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector3} v - The vector to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Euler rotation to this vector.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\t/**\n\t * Applies a rotation specified by an axis and an angle to this vector.\n\t *\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector by the given normal matrix and normalizes\n\t * the result.\n\t *\n\t * @param {Matrix3} m - The normal matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n\t * divides by perspective.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Quaternion to this vector.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t// quaternion q is assumed to have unit length\n\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// t = 2 * cross( q.xyz, v );\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\n\n\t\t// v + q.w * t + cross( q.xyz, t );\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector from world space into the camera's normalized\n\t * device coordinate (NDC) space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\t/**\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\n\t * space into world space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\t/**\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n\t * subset of the given 4x4 matrix and then normalizes the result.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector3} v - The vector to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector3} min - The minimum x, y and z values.\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y or z values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector3} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector3} v1 - The first vector.\n\t * @param {Vector3} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the cross product with.\n\t * @return {Vector3} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vectors and stores the result\n\t * in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector onto the given one.\n\t *\n\t * @param {Vector3} v - The vector to project to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\t/**\n\t * Projects this vector onto a plane by subtracting this\n\t * vector projected onto the plane's normal from this vector.\n\t *\n\t * @param {Vector3} planeNormal - The plane normal.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\t/**\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\n\t *\n\t * @param {Vector3} normal - The (normalized) normal vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\treflect( normal ) {\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector3} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector3} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {Spherical} s - The spherical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The phi angle in radians.\n\t * @param {number} theta - The theta angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {Cylindrical} c - The cylindrical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle in radians.\n\t * @param {number} y - The y value.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the scale elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given Euler angles.\n\t *\n\t * @param {Euler} e - The Euler angles to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the RGB components of the\n\t * given color.\n\t *\n\t * @param {Color} c - The color to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector3} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n\t * and z value to be `array[ offset + 2 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this vector to a uniformly random point on a unit sphere.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandomDirection() {\n\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst theta = Math.random() * Math.PI * 2;\n\t\tconst u = Math.random() * 2 - 1;\n\t\tconst c = Math.sqrt( 1 - u * u );\n\n\t\tthis.x = c * Math.cos( theta );\n\t\tthis.y = u;\n\t\tthis.z = c * Math.sin( theta );\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */\nclass Box3 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox3 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector3} min - The lower boundary of the box.\n\t * @param {Vector3} max - The upper boundary of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<number>} array - An array holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector3} center - The center of the box.\n\t * @param {Vector3} size - The x, y and z dimensions of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the world-axis-aligned bounding box for the given 3D object\n\t * (including its children), accounting for the object's, and children's,\n\t * world transforms. The function may result in a larger box than strictly necessary.\n\t *\n\t * @param {Object3D} object - The 3D object to compute the bounding box for.\n\t * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n\t * world-axis-aligned bounding box at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box3} box - The box to copy.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector3} point - The point that should be included by the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions. The depth of this box will be\n\t * expanded by the z component of the vector in both directions.\n\t *\n\t * @param {Vector3} vector - The vector that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given 3D object and\n\t * its children, accounting for the object's, and children's, world\n\t * transforms. The function may result in a larger box than strictly\n\t * necessary (unless the precise parameter is set to true).\n\t *\n\t * @param {Object3D} object - The 3D object that should expand the bounding box.\n\t * @param {boolean} precise - If set to `true`, the method expands the bounding box\n\t * as little as necessary at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector$b );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector$b.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector$b.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box$4.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width, height and depth.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A point as a proportion of this box's width, height and depth.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with this bounding box.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given plane intersects with this bounding box.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether the given plane intersects with this bounding box.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given triangle intersects with this bounding box.\n\t *\n\t * @param {Triangle} triangle - The triangle to test.\n\t * @return {boolean} Whether the given triangle intersects with this bounding box.\n\t */\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector3} point - The point to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$b ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Returns a bounding sphere that encloses this bounding box.\n\t *\n\t * @param {Sphere} target - The target sphere that is used to store the method's result.\n\t * @return {Sphere} The bounding sphere that encloses this bounding box.\n\t */\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box3} box - The bounding box to intersect with.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box3} box - The bounding box that will be unioned with this instance.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this bounding box by the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 3D space.\n\t *\n\t * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box3} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$4 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$3 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */\nclass Sphere {\n\n\t/**\n\t * Constructs a new sphere.\n\t *\n\t * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n\t * @param {number} [radius=-1] - The radius of the sphere.\n\t */\n\tconstructor( center = new Vector3(), radius = -1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphere = true;\n\n\t\t/**\n\t\t * The center of the sphere\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.center = center;\n\n\t\t/**\n\t\t * The radius of the sphere.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.radius = radius;\n\n\t}\n\n\t/**\n\t * Sets the sphere's components by copying the given values.\n\t *\n\t * @param {Vector3} center - The center.\n\t * @param {number} radius - The radius.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the minimum bounding sphere for list of points.\n\t * If the optional center point is given, it is used as the sphere's\n\t * center. Otherwise, the center of the axis-aligned bounding box\n\t * encompassing the points is calculated.\n\t *\n\t * @param {Array<Vector3>} points - A list of points in 3D space.\n\t * @param {Vector3} [optionalCenter] - The center of the sphere.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$3.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given sphere to this instance.\n\t *\n\t * @param {Sphere} sphere - The sphere to copy.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the sphere is empty (the radius set to a negative number).\n\t *\n\t * Spheres with a radius of `0` contain only their center point and are not\n\t * considered to be empty.\n\t *\n\t * @return {boolean} Whether this sphere is empty or not.\n\t */\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\t/**\n\t * Makes this sphere empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = -1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere contains the given point inclusive of\n\t * the surface of the sphere.\n\t *\n\t * @param {Vector3} point - The point to check.\n\t * @return {boolean} Whether this sphere contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\t/**\n\t * Returns the closest distance from the boundary of the sphere to the\n\t * given point. If the sphere contains the point, the distance will\n\t * be negative.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The distance to the point.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test.\n\t * @return {boolean} Whether this sphere intersects with the given one or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to test.\n\t * @return {boolean} Whether this sphere intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether this sphere intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\t/**\n\t * Clamps a point within the sphere. If the point is outside the sphere, it\n\t * will clamp it to the closest point on the edge of the sphere. Points\n\t * already inside the sphere will not be affected.\n\t *\n\t * @param {Vector3} point - The plane to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a bounding box that encloses this sphere.\n\t *\n\t * @param {Box3} target - The target box that is used to store the method's result.\n\t * @return {Box3} The bounding box that encloses this sphere.\n\t */\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Transforms this sphere with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the sphere's center by the given offset.\n\t *\n\t * @param {Vector3} offset - The offset.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this sphere to include the given point.\n\t *\n\t * @param {Vector3} point - The point to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this sphere to enclose both the original sphere and the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere is equal with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test for equality.\n\t * @return {boolean} Whether this bounding sphere is equal with the given one.\n\t */\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\t/**\n\t * Returns a new sphere with copied values from this instance.\n\t *\n\t * @return {Sphere} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */\nclass Ray {\n\n\t/**\n\t * Constructs a new ray.\n\t *\n\t * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n\t * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n\t */\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, -1 ) ) {\n\n\t\t/**\n\t\t * The origin of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.origin = origin;\n\n\t\t/**\n\t\t * The (normalized) direction of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.direction = direction;\n\n\t}\n\n\t/**\n\t * Sets the ray's components by copying the given values.\n\t *\n\t * @param {Vector3} origin - The origin.\n\t * @param {Vector3} direction - The direction.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given ray to this instance.\n\t *\n\t * @param {Ray} ray - The ray to copy.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector that is located at a given distance along this ray.\n\t *\n\t * @param {number} t - The distance along the ray to retrieve a position for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A position on the ray.\n\t */\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\t/**\n\t * Adjusts the direction of the ray to point at the given vector in world space.\n\t *\n\t * @param {Vector3} v - The target position.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Shift the origin of this ray along its direction by the given distance.\n\t *\n\t * @param {number} t - The distance along the ray to interpolate.\n\t * @return {Ray} A reference to this ray.\n\t */\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the point along this ray that is closest to the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on this ray.\n\t */\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\t/**\n\t * Returns the distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the squared distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\t/**\n\t * Returns the squared distance between this ray and the given line segment.\n\t *\n\t * @param {Vector3} v0 - The start point of the line segment.\n\t * @param {Vector3} v1 - The end point of the line segment.\n\t * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n\t * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given sphere, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @return {boolean} Whether this ray intersects with the given sphere or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n\t * does not intersect with the plane.\n\t *\n\t * @param {Plane} plane - The plane to compute the distance to.\n\t * @return {?number} Whether this ray intersects with the given sphere or not.\n\t */\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given plane, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @return {boolean} Whether this ray intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given bounding box, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this ray intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given triangle, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Vector3} a - The first vertex of the triangle.\n\t * @param {Vector3} b - The second vertex of the triangle.\n\t * @param {Vector3} c - The third vertex of the triangle.\n\t * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = -1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\t/**\n\t * Transforms this ray with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The transformation matrix.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray is equal with the given one.\n\t *\n\t * @param {Ray} ray - The ray to test for equality.\n\t * @return {boolean} Whether this ray is equal with the given one.\n\t */\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\t/**\n\t * Returns a new ray with copied values from this instance.\n\t *\n\t * @return {Ray} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n\n\t/**\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 4x4 identity matrix.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix4} m - The matrix to copy.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the translation component of the given matrix\n\t * into this matrix's translation component.\n\t *\n\t * @param {Matrix4} m - The matrix to copy the translation component.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given basis vectors to this matrix.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the rotation component of the given matrix\n\t * into this matrix's rotation component.\n\t *\n\t * Note: This method does not support reflection matrices.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractRotation( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n\t * the rotation specified by the given Euler angles. The rest of\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n\t * for a complete list.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component of this matrix to the rotation specified by\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n\t * The rest of the matrix is set to the identity.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\t/**\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\n\t * `target`, and oriented by the up-direction.\n\t *\n\t * @param {Vector3} eye - The eye vector.\n\t * @param {Vector3} target - The target vector.\n\t * @param {Vector3} up - The up vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 4x4 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix4} a - The first matrix.\n\t * @param {Matrix4} b - The second matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the position component for this matrix from the given vector,\n\t * without affecting the rest of the matrix.\n\t *\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n\t * @param {number} y - The y component of the vector.\n\t * @param {number} z - The z component of the vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the columns of this matrix by the given vector.\n\t *\n\t * @param {Vector3} v - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the maximum scale value of the three axes.\n\t *\n\t * @return {number} The maximum scale.\n\t */\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\t/**\n\t * Sets this matrix as a translation transform from the given vector.\n\t *\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @param {number} z - The amount to translate in the z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the X axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Y axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Z axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the given axis by\n\t * the given angle.\n\t *\n\t * This is a somewhat controversial but mathematically sound alternative to\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n\t *\n\t * @param {Vector3} axis - The normalized rotation axis.\n\t * @param {number} angle - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a scale transformation.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @param {number} z - The amount to scale in the Z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a shear transformation.\n\t *\n\t * @param {number} xy - The amount to shear X by Y.\n\t * @param {number} xz - The amount to shear X by Z.\n\t * @param {number} yx - The amount to shear Y by X.\n\t * @param {number} yz - The amount to shear Y by Z.\n\t * @param {number} zx - The amount to shear Z by X.\n\t * @param {number} zy - The amount to shear Z by Y.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the transformation composed of the given position,\n\t * rotation (Quaternion) and scale.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Decomposes this matrix into its position, rotation and scale components\n\t * and provides the result in the given objects.\n\t *\n\t * Note: Not all matrices are decomposable in this way. For example, if an\n\t * object has a non-uniformly scaled parent, then the object's world matrix\n\t * may not be decomposable, and this method may not be appropriate.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a perspective projection matrix. This is used internally by\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\td = ( -2 * far * near ) / ( far - near );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tc = - far / ( far - near );\n\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = -1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a orthographic projection matrix. This is used internally by\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\n\t\tlet z, zInv;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tz = ( far + near ) * p;\n\t\t\tzInv = -2 * p;\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tz = near * p;\n\t\t\tzInv = -1 * p;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix4} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$2 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n\n\t/**\n\t * Constructs a new euler instance.\n\t *\n\t * @param {number} [x=0] - The angle of the x axis in radians.\n\t * @param {number} [y=0] - The angle of the y axis in radians.\n\t * @param {number} [z=0] - The angle of the z axis in radians.\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\t/**\n\t * The angle of the x axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the y axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the z axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * A string representing the order that the rotations are applied.\n\t *\n\t * @type {string}\n\t * @default 'XYZ'\n\t */\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the Euler components.\n\t *\n\t * @param {number} x - The angle of the x axis in radians.\n\t * @param {number} y - The angle of the y axis in radians.\n\t * @param {number} z - The angle of the z axis in radians.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new Euler instance with copied values from this instance.\n\t *\n\t * @return {Euler} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\t/**\n\t * Copies the values of the given Euler instance to this instance.\n\t *\n\t * @param {Euler} euler - The Euler instance to copy.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a normalized quaternion.\n\t *\n\t * @param {Quaternion} q - A normalized Quaternion.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$2.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$2, order, update );\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from the given vector.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\t/**\n\t * Resets the euler angle with a new order by creating a quaternion from this\n\t * euler angle and then setting this euler angle with the quaternion and the\n\t * new order.\n\t *\n\t * Warning: This discards revolution information.\n\t *\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\treorder( newOrder ) {\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\t/**\n\t * Returns `true` if this Euler instance is equal with the given one.\n\t *\n\t * @param {Euler} euler - The Euler instance to test for equality.\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\n\t */\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\t/**\n\t * Sets this Euler instance's components to values from the given array. The first three\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\n\t * defines the Euler order.\n\t *\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number,number,number,string>} The Euler components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\n/**\n * A layers object assigns an 3D object to 1 or more of 32\n * layers numbered `0` to `31` - internally the layers are stored as a\n * bit mask], and by default all 3D objects are a member of layer `0`.\n *\n * This can be used to control visibility - an object must share a layer with\n * a camera to be visible when that camera's view is\n * rendered.\n *\n * All classes that inherit from {@link Object3D} have an `layers` property which\n * is an instance of this class.\n */\nclass Layers {\n\n\t/**\n\t * Constructs a new layers instance, with membership\n\t * initially set to layer `0`.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A bit mask storing which of the 32 layers this layers object is currently\n\t\t * a member of.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\t/**\n\t * Sets membership to the given layer, and remove membership all other layers.\n\t *\n\t * @param {number} layer - The layer to set.\n\t */\n\tset( layer ) {\n\n\t\tthis.mask = ( 1 << layer | 0 ) >>> 0;\n\n\t}\n\n\t/**\n\t * Adds membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */\n\tenable( layer ) {\n\n\t\tthis.mask |= 1 << layer | 0;\n\n\t}\n\n\t/**\n\t * Adds membership to all layers.\n\t */\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\t/**\n\t * Toggles the membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to toggle.\n\t */\n\ttoggle( layer ) {\n\n\t\tthis.mask ^= 1 << layer | 0;\n\n\t}\n\n\t/**\n\t * Removes membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */\n\tdisable( layer ) {\n\n\t\tthis.mask &= ~ ( 1 << layer | 0 );\n\n\t}\n\n\t/**\n\t * Removes the membership from all layers.\n\t */\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\t/**\n\t * Returns `true` if this and the given layers object have at least one\n\t * layer in common.\n\t *\n\t * @param {Layers} layers - The layers to test.\n\t * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\n\t */\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given layer is enabled.\n\t *\n\t * @param {number} layer - The layer to test.\n\t * @return {boolean } Whether the given layer is enabled or not.\n\t */\n\tisEnabled( layer ) {\n\n\t\treturn ( this.mask & ( 1 << layer | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = { type: 'added' };\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = { type: 'removed' };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = { type: 'childadded', child: null };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = { type: 'childremoved', child: null };\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n\n\t/**\n\t * Constructs a new 3D object.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isObject3D = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name Object3D#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Object3D';\n\n\t\t/**\n\t\t * A reference to the parent object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * An array holding the child 3D objects of this instance.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * Defines the `up` direction of the 3D object which influences\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * Represents the object's local position.\n\t\t\t *\n\t\t\t * @name Object3D#position\n\t\t\t * @type {Vector3}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\n\t\t\t *\n\t\t\t * @name Object3D#rotation\n\t\t\t * @type {Euler}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Quaternions.\n\t\t\t *\n\t\t\t * @name Object3D#quaternion\n\t\t\t * @type {Quaternion}\n\t\t\t */\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local scale.\n\t\t\t *\n\t\t\t * @name Object3D#scale\n\t\t\t * @type {Vector3}\n\t\t\t * @default (1,1,1)\n\t\t\t */\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's model-view matrix.\n\t\t\t *\n\t\t\t * @name Object3D#modelViewMatrix\n\t\t\t * @type {Matrix4}\n\t\t\t */\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's normal matrix.\n\t\t\t *\n\t\t\t * @name Object3D#normalMatrix\n\t\t\t * @type {Matrix3}\n\t\t\t */\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in local space.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in world space.\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\n\t\t * rotation and scale every frame.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\n\t\t * matrix and the object's transformation hierarchy.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\t/**\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\n\t\t * to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t/**\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\n\t\t * at least one layer in common with the camera in use. This property can also be\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.castShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.receiveShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.frustumCulled = true;\n\n\t\t/**\n\t\t * This value allows the default rendering order of scene graph objects to be\n\t\t * overridden although opaque and transparent objects remain sorted independently.\n\t\t * When this property is set for an instance of {@link Group},all descendants\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\n\t\t * render order.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderOrder = 0;\n\n\t\t/**\n\t\t * An array holding the animation clips of the 3D object.\n\t\t *\n\t\t * @type {Array<AnimationClip>}\n\t\t */\n\t\tthis.animations = [];\n\n\t\t/**\n\t\t * Custom depth material to be used when rendering to the depth map. Can only be used\n\t\t * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n\t\t * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n\t\t * material for proper shadows.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDepthMaterial = undefined;\n\n\t\t/**\n\t\t * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDistanceMaterial = undefined;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the 3D object. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * Applies the given transformation matrix to the object and updates the object's position,\n\t * rotation and scale.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\t/**\n\t * Applies a rotation represented by given the quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t */\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as Euler angles to the 3D object.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t */\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\n\t *\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n\t * a pure rotation matrix (i.e, unscaled).\n\t */\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The Quaternion\n\t */\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in world space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its X axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Y axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Z axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along the given axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its X-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Y-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Z-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's local space to world space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's word space to local space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\t/**\n\t * Rotates the object to face a point in world space.\n\t *\n\t * This method does not support objects having non-uniformly-scaled parent(s).\n\t *\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n\t * @param {number} [y] - The y coordinate in world space.\n\t * @param {number} [z] - The z coordinate in world space.\n\t */\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n\t * objects may be added. Any current parent on an object passed in here will be\n\t * removed, since an object can have at most one parent.\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to add.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tobject.removeFromParent();\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t_childaddedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t\t_childaddedEvent.child = null;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given 3D object as child from this 3D object.\n\t * An arbitrary number of objects may be removed.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @param {Object3D} object - The 3D object to remove.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== -1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t_childremovedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childremovedEvent );\n\t\t\t_childremovedEvent.child = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes this 3D object from its current parent.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes all child objects.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to attach.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tobject.removeFromParent();\n\t\tobject.parent = this;\n\t\tthis.children.push( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t_childaddedEvent.child = object;\n\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t_childaddedEvent.child = null;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching ID.\n\t *\n\t * @param {number} id - The id.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching name.\n\t *\n\t * @param {string} name - The name.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns all 3D objects with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\n\t * @return {Array<Object3D>} The found 3D objects.\n\t */\n\tgetObjectsByProperty( name, value, result = [] ) {\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the position of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's position in world space.\n\t */\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Returns a Quaternion representing the position of the 3D object in world space.\n\t *\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\n\t * @return {Quaternion} The 3D object's rotation in world space.\n\t */\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the scale of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's scale in world space.\n\t */\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\t/**\n\t * Abstract method to get intersections between a casted ray and this\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n\t * implement this method in order to use raycasting.\n\t *\n\t * @abstract\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\n\t */\n\traycast( /* raycaster, intersects */ ) {}\n\n\t/**\n\t * Executes the callback on this 3D object and all descendants.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n\t * Descendants of invisible 3D objects are not traversed.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in local space by computing it from the current\n\t * position, rotation and scale values.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\n\t *\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n\t * local space. The computation of the local and world matrix can be controlled with the\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// make sure descendants are updated if required\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tchild.updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n\t * update of ancestor and descendant nodes.\n\t *\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n\t */\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// make sure descendants are updated\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the 3D object into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized 3D object.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\tif ( this.isBatchedMesh ) {\n\n\t\t\tobject.type = 'BatchedMesh';\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\t\tobject.sortObjects = this.sortObjects;\n\n\t\t\tobject.drawRanges = this._drawRanges;\n\t\t\tobject.reservedRanges = this._reservedRanges;\n\n\t\t\tobject.geometryInfo = this._geometryInfo.map( info => ( {\n\t\t\t\t...info,\n\t\t\t\tboundingBox: info.boundingBox ? {\n\t\t\t\t\tmin: info.boundingBox.min.toArray(),\n\t\t\t\t\tmax: info.boundingBox.max.toArray()\n\t\t\t\t} : undefined,\n\t\t\t\tboundingSphere: info.boundingSphere ? {\n\t\t\t\t\tradius: info.boundingSphere.radius,\n\t\t\t\t\tcenter: info.boundingSphere.center.toArray()\n\t\t\t\t} : undefined\n\t\t\t} ) );\n\t\t\tobject.instanceInfo = this._instanceInfo.map( info => ( { ...info } ) );\n\n\t\t\tobject.availableInstanceIds = this._availableInstanceIds.slice();\n\t\t\tobject.availableGeometryIds = this._availableGeometryIds.slice();\n\n\t\t\tobject.nextIndexStart = this._nextIndexStart;\n\t\t\tobject.nextVertexStart = this._nextVertexStart;\n\t\t\tobject.geometryCount = this._geometryCount;\n\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\n\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\n\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\n\n\t\t\tobject.indirectTexture = this._indirectTexture.toJSON( meta );\n\n\t\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\t\tobject.colorsTexture = this._colorsTexture.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tobject.boundingSphere = {\n\t\t\t\t\tcenter: this.boundingSphere.center.toArray(),\n\t\t\t\t\tradius: this.boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tobject.boundingBox = {\n\t\t\t\t\tmin: this.boundingBox.min.toArray(),\n\t\t\t\t\tmax: this.boundingBox.max.toArray()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new 3D object with copied values from this instance.\n\t *\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n\t * @return {Object3D} A clone of this instance.\n\t */\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\t/**\n\t * Copies the values of the given 3D object to this instance.\n\t *\n\t * @param {Object3D} source - The 3D object to copy.\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$2 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nconst _v40 = /*@__PURE__*/ new Vector4();\nconst _v41 = /*@__PURE__*/ new Vector4();\nconst _v42 = /*@__PURE__*/ new Vector4();\n\n/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */\nclass Triangle {\n\n\t/**\n\t * Constructs a new triangle.\n\t *\n\t * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n\t * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n\t * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n\t */\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\t/**\n\t\t * The first corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.a = a;\n\n\t\t/**\n\t\t * The second corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.b = b;\n\n\t\t/**\n\t\t * The third corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.c = c;\n\n\t}\n\n\t/**\n\t * Computes the normal vector of a triangle.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\ttarget.set( 0, 0, 0 );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\t// if the triangle is degenerate then we can't contain a point\n\t\tif ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} p1 - The first corner of the triangle.\n\t * @param {Vector3} p2 - The second corner of the triangle.\n\t * @param {Vector3} p3 - The third corner of the triangle.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {\n\n\t\t\ttarget.x = 0;\n\t\t\ttarget.y = 0;\n\t\t\tif ( 'z' in target ) target.z = 0;\n\t\t\tif ( 'w' in target ) target.w = 0;\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3$2.x );\n\t\ttarget.addScaledVector( v2, _v3$2.y );\n\t\ttarget.addScaledVector( v3, _v3$2.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given attribute and indices.\n\t *\n\t * @param {BufferAttribute} attr - The attribute to interpolate.\n\t * @param {number} i1 - Index of first vertex.\n\t * @param {number} i2 - Index of second vertex.\n\t * @param {number} i3 - Index of third vertex.\n\t * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The interpolated attribute value.\n\t */\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\n\n\t\t_v40.setScalar( 0 );\n\t\t_v41.setScalar( 0 );\n\t\t_v42.setScalar( 0 );\n\n\t\t_v40.fromBufferAttribute( attr, i1 );\n\t\t_v41.fromBufferAttribute( attr, i2 );\n\t\t_v42.fromBufferAttribute( attr, i3 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( _v40, barycoord.x );\n\t\ttarget.addScaledVector( _v41, barycoord.y );\n\t\ttarget.addScaledVector( _v42, barycoord.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given values.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given array values.\n\t *\n\t * @param {Array<Vector3>} points - An array with 3D points.\n\t * @param {number} i0 - The array index representing the first corner of the triangle.\n\t * @param {number} i1 - The array index representing the second corner of the triangle.\n\t * @param {number} i2 - The array index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given attribute values.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n\t * @param {number} i0 - The attribute index representing the first corner of the triangle.\n\t * @param {number} i1 - The attribute index representing the second corner of the triangle.\n\t * @param {number} i2 - The attribute index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new triangle with copied values from this instance.\n\t *\n\t * @return {Triangle} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given triangle to this instance.\n\t *\n\t * @param {Triangle} triangle - The triangle to copy.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the area of the triangle.\n\t *\n\t * @return {number} The triangle's area.\n\t */\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\t/**\n\t * Computes the midpoint of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's midpoint.\n\t */\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\t/**\n\t * Computes the normal of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes a plane the triangle lies within.\n\t *\n\t * @param {Plane} target - The target vector that is used to store the method's result.\n\t * @return {Plane} The plane the triangle lies within.\n\t */\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this triangle intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\t/**\n\t * Returns the closest point on the triangle to the given point.\n\t *\n\t * @param {Vector3} p - The point to compute the closest point for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the triangle.\n\t */\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle is equal with the given one.\n\t *\n\t * @param {Triangle} triangle - The triangle to test for equality.\n\t * @return {boolean} Whether this triangle is equal with the given one.\n\t */\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n\n\t/**\n\t * Constructs a new color.\n\t *\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n\t * and that method is used throughout the rest of the documentation.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t */\n\tconstructor( r, g, b ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isColor = true;\n\n\t\t/**\n\t\t * The red component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.r = 1;\n\n\t\t/**\n\t\t * The green component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.g = 1;\n\n\t\t/**\n\t\t * The blue component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\t/**\n\t * Sets the colors's components from the given values.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t * @return {Color} A reference to this color.\n\t */\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the colors's components to the given scalar value.\n\t *\n\t * @param {number} scalar - The scalar value.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a hexadecimal value.\n\t *\n\t * @param {number} hex - The hexadecimal value.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n\t * all 140 color names are supported).\n\t *\n\t * @param {string} style - Color as a CSS-style string.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\n\t * you don't need the other CSS-style formats.\n\t *\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n\t * ```js\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\n\t * ```\n\t *\n\t * @param {string} style - The color name.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new color with copied values from this instance.\n\t *\n\t * @return {Color} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\t/**\n\t * Copies the values of the given color to this instance.\n\t *\n\t * @param {Color} color - The color to copy.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {number} The hexadecimal value.\n\t */\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The hexadecimal value as a string.\n\t */\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( -6 );\n\n\t}\n\n\t/**\n\t * Converts the colors RGB values into the HSL format and stores them into the\n\t * given target object.\n\t *\n\t * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n\t */\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the RGB values of this color and stores them into the given target object.\n\t *\n\t * @param {Color} target - The target color that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} The RGB representation of this color.\n\t */\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The CSS representation of this color.\n\t */\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\t/**\n\t * Adds the given HSL values to this color's values.\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\n\t * and then converts the color back to RGB.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @return {Color} A reference to this color.\n\t */\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given color to the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to add.\n\t * @return {Color} A reference to this color.\n\t */\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given colors and stores the result in this instance.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @return {Color} A reference to this color.\n\t */\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Color} A reference to this color.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to subtract.\n\t * @return {Color} A reference to this color.\n\t */\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\n\t * given color. The alpha argument can be thought of as the ratio between\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given colors and stores the result in this instance.\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n\t * is the first and `1.0` is the second color.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\n\t * from one color to the other, but instead going through all the hues in between\n\t * those two colors. The alpha argument can be thought of as the ratio between\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the color's RGB components from the given 3D vector.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this color with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix.\n\t * @return {Color} A reference to this color.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this color is equal with the given one.\n\t *\n\t * @param {Color} c - The color to test for equality.\n\t * @return {boolean} Whether this bounding color is equal with the given one.\n\t */\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\t/**\n\t * Sets this color's RGB components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the RGB values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the RGB components of this color to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The color components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this color from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the color\n\t * as a hexadecimal value.\n\t *\n\t * @return {number} The hexadecimal value.\n\t */\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\n\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n\n\t/**\n\t * Constructs a new material.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterial = true;\n\n\t\t/**\n\t\t * The ID of the material.\n\t\t *\n\t\t * @name Material#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Material';\n\n\t\t/**\n\t\t * Defines the blending type of the material.\n\t\t *\n\t\t * It must be set to `CustomBlending` if custom blending properties like\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n\t\t * should have any effect.\n\t\t *\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n\t\t * @default NormalBlending\n\t\t */\n\t\tthis.blending = NormalBlending;\n\n\t\t/**\n\t\t * Defines which side of faces will be rendered - front, back or both.\n\t\t *\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\n\t\t * @default FrontSide\n\t\t */\n\t\tthis.side = FrontSide;\n\n\t\t/**\n\t\t * If set to `true`, vertex colors should be used.\n\t\t *\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n\t\t * four (RGBA) component color buffer attribute is used.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.vertexColors = false;\n\n\t\t/**\n\t\t * Defines how transparent the material is.\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n\t\t *\n\t\t * If the {@link Material#transparent} is not set to `true`,\n\t\t * the material will remain fully opaque and this value will only affect its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.opacity = 1;\n\n\t\t/**\n\t\t * Defines whether this material is transparent. This has an effect on\n\t\t * rendering as transparent objects need special treatment and are rendered\n\t\t * after non-transparent objects.\n\t\t *\n\t\t * When set to true, the extent to which the material is transparent is\n\t\t * controlled by {@link Material#opacity}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transparent = false;\n\n\t\t/**\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaHash = false;\n\n\t\t/**\n\t\t * Defines the blending source factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default SrcAlphaFactor\n\t\t */\n\t\tthis.blendSrc = SrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending destination factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending equation.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default AddEquation\n\t\t */\n\t\tthis.blendEquation = AddEquation;\n\n\t\t/**\n\t\t * Defines the blending source alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendSrcAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending destination alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendDstAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending equation of the alpha channel.\n\t\t *\n\t\t * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendEquationAlpha = null;\n\n\t\t/**\n\t\t * Represents the RGB values of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.blendColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Represents the alpha value of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.blendAlpha = 0;\n\n\t\t/**\n\t\t * Defines the depth function.\n\t\t *\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n\t\t * @default LessEqualDepth\n\t\t */\n\t\tthis.depthFunc = LessEqualDepth;\n\n\t\t/**\n\t\t * Whether to have depth test enabled when rendering this material.\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthTest = true;\n\n\t\t/**\n\t\t * Whether rendering this material has any effect on the depth buffer.\n\t\t *\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\n\t\t * order to layer several things together without creating z-index artifacts.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthWrite = true;\n\n\t\t/**\n\t\t * The bit mask to use when writing to the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilWriteMask = 0xff;\n\n\t\t/**\n\t\t * The stencil comparison function to use.\n\t\t *\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n\t\t * @default AlwaysStencilFunc\n\t\t */\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\n\t\t/**\n\t\t * The value to use when performing stencil comparisons or stencil operations.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.stencilRef = 0;\n\n\t\t/**\n\t\t * The bit mask to use when comparing against the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilFuncMask = 0xff;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` but the depth test fails.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` and the depth test passes.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZPass = KeepStencilOp;\n\n\t\t/**\n\t\t * Whether stencil operations are performed against the stencil buffer. In\n\t\t * order to perform writes or comparisons against the stencil buffer this\n\t\t * value must be `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilWrite = false;\n\n\t\t/**\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\n\t\t * space. These planes apply to the objects this material is attached to.\n\t\t * Points in space whose signed distance to the plane is negative are clipped\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n\t\t * be `true`.\n\t\t *\n\t\t * @type {?Array<Plane>}\n\t\t * @default null\n\t\t */\n\t\tthis.clippingPlanes = null;\n\n\t\t/**\n\t\t * Changes the behavior of clipping planes so that only their intersection is\n\t\t * clipped, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipIntersection = false;\n\n\t\t/**\n\t\t * Defines whether to clip shadows according to the clipping planes specified\n\t\t * on this material.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipShadows = false;\n\n\t\t/**\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\n\t\t * is determined as follows:\n\t\t *\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n\t\t *\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\n\t\t * @default null\n\t\t */\n\t\tthis.shadowSide = null;\n\n\t\t/**\n\t\t * Whether to render the material's color.\n\t\t *\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n\t\t * objects that occlude other objects.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.colorWrite = true;\n\n\t\t/**\n\t\t * Override the renderer's default precision for this material.\n\t\t *\n\t\t * @type {?('highp'|'mediump'|'lowp')}\n\t\t * @default null\n\t\t */\n\t\tthis.precision = null;\n\n\t\t/**\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\n\t\t * The offset is added before the depth test is performed and before the value is written\n\t\t * into the depth buffer.\n\t\t *\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n\t\t * rendering solids with highlighted edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.polygonOffset = false;\n\n\t\t/**\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetFactor = 0;\n\n\t\t/**\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\t/**\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dithering = false;\n\n\t\t/**\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaToCoverage = false;\n\n\t\t/**\n\t\t * Whether to premultiply the alpha (transparency) value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultipliedAlpha = false;\n\n\t\t/**\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\n\t\t *\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n\t\t * disable the two pass rendering to avoid performance issues.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.forceSinglePass = false;\n\n\t\t/**\n\t\t * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.allowOverride = true;\n\n\t\t/**\n\t\t * Defines whether 3D objects using this material are visible.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n\t\t *\n\t\t * It is ignored when rendering to a render target or using post processing or when using\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.toneMapped = true;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the Material. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\t/**\n\t * Sets the alpha value to be used when running an alpha test. The material\n\t * will not be rendered if the opacity is lower than this value.\n\t *\n\t * @type {number}\n\t * @readonly\n\t * @default 0\n\t */\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\t/**\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\t/**\n\t * An optional callback that is executed immediately before the shader\n\t * program is compiled. This function is called with the shader source code\n\t * as a parameter. Useful for the modification of built-in materials.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n\t *\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\n\t */\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\t/**\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n\t * shader or recompile the shader for this material as needed.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @return {string} The custom program cache key.\n\t */\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\t/**\n\t * This method can be used to set default values from parameter objects.\n\t * It is a generic implementation so it can be used with different types\n\t * of materials.\n\t *\n\t * @param {Object} [values] - The material values to set.\n\t */\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the material into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized material.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = true;\n\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\n\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\n\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\n\n\t\tif ( this.wireframe === true ) data.wireframe = true;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new material with copied values from this instance.\n\t *\n\t * @return {Material} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given material to this instance.\n\t *\n\t * @param {Material} source - The material to copy.\n\t * @return {Material} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\tthis.blendColor.copy( source.blendColor );\n\t\tthis.blendAlpha = source.blendAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaHash = source.alphaHash;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Material#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the material has been disposed of.\n\t\t *\n\t\t * @event Material#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the material\n\t * needs to be recompiled.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\n/**\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\n *\n * This material is not affected by lights.\n *\n * @augments Material\n */\nclass MeshBasicMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < -27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < -14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= -8388609; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, -65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n\n\t/**\n\t * Returns a half precision floating point value (FP16) from the given single\n\t * precision floating point value (FP32).\n\t *\n\t * @param {number} val - A single precision floating point value.\n\t * @return {number} The FP16 value.\n\t */\n\tstatic toHalfFloat( val ) {\n\n\t\treturn toHalfFloat( val );\n\n\t}\n\n\t/**\n\t * Returns a single precision floating point value (FP32) from the given half\n\t * precision floating point value (FP16).\n\t *\n\t * @param {number} val - A half precision floating point value.\n\t * @return {number} The FP32 value.\n\t */\n\tstatic fromHalfFloat( val ) {\n\n\t\treturn fromHalfFloat( val );\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nlet _id$2 = 0;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */\nclass BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferAttribute = true;\n\n\t\t/**\n\t\t * The ID of the buffer attribute.\n\t\t *\n\t\t * @name BufferAttribute#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id$2 ++ } );\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The array holding the attribute data. It should have `itemSize * numVertices`\n\t\t * elements, where `numVertices` is the number of vertices in the associated geometry.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of values of the array that should be associated with a particular vertex.\n\t\t * For instance, if this attribute is storing a 3-component vector (such as a position,\n\t\t * normal, or color), then the value should be `3`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * Represents the number of items this buffer attribute stores. It is internally computed\n\t\t * by dividing the `array` length by the `itemSize`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\n\t\t/**\n\t\t * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n\t\t * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n\t\t * and `normalized` is `true`, the values `0 -+65535` in the array data will be mapped to\n\t\t * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n\t\t * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.normalized = normalized;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * Configures the bound GPU type for use in shaders.\n\t\t *\n\t\t * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n\t\t * For lower precision float types, use `Float16BufferAttribute`.\n\t\t *\n\t\t * @type {(FloatType|IntType)}\n\t\t * @default FloatType\n\t\t */\n\t\tthis.gpuType = FloatType;\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute\n\t * array data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this buffer attribute.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {BufferAttribute} A reference to this buffer attribute.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given buffer attribute to this instance.\n\t *\n\t * @param {BufferAttribute} source - The buffer attribute to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given buffer attribute to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this buffer attribute.\n\t * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n\t * @param {number} index2 - The source index into the given buffer attribute.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given array data into this buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} array - The array to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 matrix to the given attribute. Works with\n\t * item size `2` and `3`.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this buffer attribute's array.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.itemSize + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.array[ index * this.itemSize + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\t/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\t/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\t/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\t/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the attribute array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when attribute data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * @return {BufferAttribute} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 since `Float16Array` is not\n * natively supported in JavaScript.\n *\n * @augments BufferAttribute\n */\nclass Float16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Float32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\n/**\n * A representation of mesh, line, or point geometry. Includes vertex\n * positions, face indices, normals, colors, UVs, and custom attributes\n * within buffers, reducing the cost of passing all this data to the GPU.\n *\n * ```js\n * const geometry = new THREE.BufferGeometry();\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n * \t-1.0, -1.0,  1.0, // v0\n * \t 1.0, -1.0,  1.0, // v1\n * \t 1.0,  1.0,  1.0, // v2\n *\n * \t 1.0,  1.0,  1.0, // v3\n * \t-1.0,  1.0,  1.0, // v4\n * \t-1.0, -1.0,  1.0  // v5\n * ] );\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n *\n * @augments EventDispatcher\n */\nclass BufferGeometry extends EventDispatcher {\n\n\t/**\n\t * Constructs a new geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferGeometry = true;\n\n\t\t/**\n\t\t * The ID of the geometry.\n\t\t *\n\t\t * @name BufferGeometry#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\t/**\n\t\t * The UUID of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\t/**\n\t\t * Allows for vertices to be re-used across multiple triangles; this is\n\t\t * called using \"indexed triangles\". Each triangle is associated with the\n\t\t * indices of three vertices. This attribute therefore stores the index of\n\t\t * each vertex for each triangular face. If this attribute is not set, the\n\t\t * renderer assumes that each three contiguous positions represent a single triangle.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.index = null;\n\n\t\t/**\n\t\t * A (storage) buffer attribute which was generated with a compute shader and\n\t\t * now defines indirect draw calls.\n\t\t *\n\t\t * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.indirect = null;\n\n\t\t/**\n\t\t * This dictionary has as id the name of the attribute to be set and as value\n\t\t * the buffer attribute to set it to. Rather than accessing this property directly,\n\t\t * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\n\t\t *\n\t\t * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\n\t\t */\n\t\tthis.attributes = {};\n\n\t\t/**\n\t\t * This dictionary holds the morph targets of the geometry.\n\t\t *\n\t\t * Note: Once the geometry has been rendered, the morph attribute data cannot\n\t\t * be changed. You will have to call `dispose()?, and create a new geometry instance.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.morphAttributes = {};\n\n\t\t/**\n\t\t * Used to control the morph target behavior; when set to `true`, the morph\n\t\t * target data is treated as relative offsets, rather than as absolute\n\t\t * positions/normals.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.morphTargetsRelative = false;\n\n\t\t/**\n\t\t * Split the geometry into groups, each of which will be rendered in a\n\t\t * separate draw call. This allows an array of materials to be used with the geometry.\n\t\t *\n\t\t * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\n\t\t *\n\t\t * Every vertex and index must belong to exactly one group — groups must not share vertices or\n\t\t * indices, and must not leave vertices or indices unused.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.groups = [];\n\n\t\t/**\n\t\t * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\n\t\t *\n\t\t * @type {Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\n\t\t *\n\t\t * @type {Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\t/**\n\t\t * Determines the part of the geometry to render. This should not be set directly,\n\t\t * instead use `setDrawRange()`.\n\t\t *\n\t\t * @type {{start:number,count:number}}\n\t\t */\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the geometry.\n\t\t * It should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * Returns the index of this geometry.\n\t *\n\t * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\n\t */\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\t/**\n\t * Sets the given index to this geometry.\n\t *\n\t * @param {Array<number>|BufferAttribute} index - The index to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given indirect attribute to this geometry.\n\t *\n\t * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetIndirect( indirect ) {\n\n\t\tthis.indirect = indirect;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the indirect attribute of this geometry.\n\t *\n\t * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\n\t */\n\tgetIndirect() {\n\n\t\treturn this.indirect;\n\n\t}\n\n\t/**\n\t * Returns the buffer attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\n\t * Returns `undefined` if not attribute has been found.\n\t */\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\t/**\n\t * Sets the given attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes the attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name to delete.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this geometry has an attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {boolean} Whether this geometry has an attribute for the given name or not.\n\t */\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\t/**\n\t * Adds a group to this geometry.\n\t *\n\t * @param {number} start - The first element in this draw call. That is the first\n\t * vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - Specifies how many vertices (or indices) are part of this group.\n\t * @param {number} [materialIndex=0] - The material array index to use.\n\t */\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Clears all groups.\n\t */\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\t/**\n\t * Sets the draw range for this geometry.\n\t *\n\t * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\n\t * For indexed BufferGeometry, `count` is the number of indices to render.\n\t */\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 transformation matrix to the geometry.\n\t *\n\t * @param {Matrix4} matrix - The matrix to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the rotation represented by the Quaternion to the geometry.\n\t *\n\t * @param {Quaternion} q - The Quaternion to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the X axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the Y axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the Z axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#position} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x offset.\n\t * @param {number} y - The y offset.\n\t * @param {number} z - The z offset.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#scale} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x scale.\n\t * @param {number} y - The y scale.\n\t * @param {number} z - The z scale.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry to face a point in 3D space. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {Vector3} vector - The target point.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Center the geometry based on its bounding box.\n\t *\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines a geometry by creating a `position` attribute based on the given array of points. The array\n\t * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\n\t * set to `0`.\n\t *\n\t * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\n\t * data from the array. The length of the array must match the vertex count.\n\t *\n\t * @param {Array<Vector2>|Array<Vector3>} points - The points.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute === undefined ) {\n\n\t\t\tconst position = [];\n\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t} else {\n\n\t\t\tconst l = Math.min( points.length, positionAttribute.count ); // make sure data do not exceed buffer size\n\n\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tpositionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tif ( points.length > positionAttribute.count ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );\n\n\t\t\t}\n\n\t\t\tpositionAttribute.needsUpdate = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the geometry, and updates the `boundingBox` member.\n\t * The bounding box is not computed by the engine; it must be computed by your app.\n\t * You may need to recompute the bounding box if the geometry vertices are modified.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if the geometry vertices are modified.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$2.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calculates and adds a tangent attribute to this geometry.\n\t *\n\t * The computation is only supported for indexed geometries and if position, normal, and uv attributes\n\t * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n\t * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\n\t */\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst positionAttribute = attributes.position;\n\t\tconst normalAttribute = attributes.normal;\n\t\tconst uvAttribute = attributes.uv;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\n\n\t\t}\n\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\n\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: index.count\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindex.getX( j + 0 ),\n\t\t\t\t\tindex.getX( j + 1 ),\n\t\t\t\t\tindex.getX( j + 2 )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? -1 : 1.0;\n\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\n\t * each vertex normal to be the average of the face normals of the faces that share that vertex.\n\t * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\n\t * to be the same as the face normal.\n\t */\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\n\t * correct lighting on the geometry surfaces.\n\t */\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Return a new non-index version of this indexed geometry. If the geometry\n\t * is already non-indexed, the method is a NOOP.\n\t *\n\t * @return {BufferGeometry} The non-indexed version of this indexed geometry.\n\t */\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\t/**\n\t * Serializes the geometry into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized geometry.\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new geometry with copied values from this instance.\n\t *\n\t * @return {BufferGeometry} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given geometry to this instance.\n\t *\n\t * @param {BufferGeometry} source - The geometry to copy.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires BufferGeometry#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();\nconst _ray$3 = /*@__PURE__*/ new Ray();\nconst _sphere$6 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\n/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */\nclass Mesh extends Object3D {\n\n\t/**\n\t * Constructs a new mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\t/**\n\t\t * The mesh geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The mesh material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default MeshBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the local-space position of the vertex at the given index, taking into\n\t * account the current animation state of both morph targets and skinning.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * @return {Vector3} The vertex position in local space.\n\t */\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$6.copy( geometry.boundingSphere );\n\t\t_sphere$6.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray$3.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {\n\n\t\t\tif ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix$3.copy( matrixWorld ).invert();\n\t\t_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$3 );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection$1( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection$1( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( -1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.barycoord = barycoord;\n\n\t}\n\n\treturn intersection;\n\n}\n\n/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */\nclass BoxGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new box geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, -1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, -1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', -1, -1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : -1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {BoxGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n// Uniform Utilities\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\tif ( currentRenderTarget === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\t// https://github.com/mrdoob/three.js/issues/27868\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\treturn currentRenderTarget.texture.colorSpace;\n\n\t}\n\n\treturn ColorManagement.workingColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * A material rendered with custom shaders. A shader is a small program written in GLSL.\n * that runs on the GPU. You may want to use a custom shader if you need to implement an\n * effect not included with any of the built-in materials.\n *\n * There are the following notes to bear in mind when using a `ShaderMaterial`:\n *\n * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.\n * - Built in attributes and uniforms are passed to the shaders along with your code. If\n * you don't want that, use {@link RawShaderMaterial} instead.\n * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`\n * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has\n * to be placed right above the loop. The loop formatting has to correspond to a defined standard.\n *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.\n *   - The loop variable has to be *i*.\n *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly\n * value of *i* for the given iteration and can be used in preprocessor\n * statements.\n *\n * ```js\n * const material = new THREE.ShaderMaterial( {\n * \tuniforms: {\n * \t\ttime: { value: 1.0 },\n * \t\tresolution: { value: new THREE.Vector2() }\n * \t},\n * \tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n * \tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n * } );\n * ```\n *\n * @augments Material\n */\nclass ShaderMaterial extends Material {\n\n\t/**\n\t * Constructs a new shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\t/**\n\t\t * Defines custom constants using `#define` directives within the GLSL code\n\t\t * for both the vertex shader and the fragment shader; each key/value pair\n\t\t * yields another directive.\n\t\t * ```js\n\t\t * defines: {\n\t\t * \tFOO: 15,\n\t\t * \tBAR: true\n\t\t * }\n\t\t * ```\n\t\t * Yields the lines:\n\t\t * ```\n\t\t * #define FOO 15\n\t\t * #define BAR true\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.defines = {};\n\n\t\t/**\n\t\t * An object of the form:\n\t\t * ```js\n\t\t * {\n\t\t * \t\"uniform1\": { value: 1.0 },\n\t\t * \t\"uniform2\": { value: 2 }\n\t\t * }\n\t\t * ```\n\t\t * specifying the uniforms to be passed to the shader code; keys are uniform\n\t\t * names, values are definitions of the form\n\t\t * ```\n\t\t * {\n\t\t * \tvalue: 1.0\n\t\t * }\n\t\t * ```\n\t\t * where `value` is the value of the uniform. Names must match the name of\n\t\t * the uniform, as defined in the GLSL code. Note that uniforms are refreshed\n\t\t * on every frame, so updating the value of the uniform will immediately\n\t\t * update the value available to the GLSL code.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = {};\n\n\t\t/**\n\t\t * An array holding uniforms groups for configuring UBOs.\n\t\t *\n\t\t * @type {Array<UniformsGroup>}\n\t\t */\n\t\tthis.uniformsGroups = [];\n\n\t\t/**\n\t\t * Vertex shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertexShader = default_vertex;\n\n\t\t/**\n\t\t * Fragment shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.fragmentShader = default_fragment;\n\n\t\t/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * WebGL and WebGPU ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.linewidth = 1;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Define whether the material color is affected by global fog settings; `true`\n\t\t * to pass fog uniforms to the shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.fog = false;\n\n\t\t/**\n\t\t * Defines whether this material uses lighting; `true` to pass uniform data\n\t\t * related to lighting to this shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.lights = false;\n\n\t\t/**\n\t\t * Defines whether this material supports clipping; `true` to let the renderer\n\t\t * pass the clippingPlanes uniform.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipping = false;\n\n\t\t/**\n\t\t * Overwritten and set to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.forceSinglePass = true;\n\n\t\t/**\n\t\t * This object allows to enable certain WebGL 2 extensions.\n\t\t *\n\t\t * - clipCullDistance: set to `true` to use vertex shader clipping\n\t\t * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID\n\t\t *\n\t\t * @type {{clipCullDistance:false,multiDraw:false}}\n\t\t */\n\t\tthis.extensions = {\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n\t\t};\n\n\t\t/**\n\t\t * When the rendered geometry doesn't include these attributes but the\n\t\t * material does, these default values will be passed to the shaders. This\n\t\t * avoids errors when buffer data is missing.\n\t\t *\n\t\t * - color: [ 1, 1, 1 ]\n\t\t * - uv: [ 0, 0 ]\n\t\t * - uv1: [ 0, 0 ]\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\t/**\n\t\t * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}\n\t\t * to bind a generic vertex index to an attribute variable.\n\t\t *\n\t\t * @type {string|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.index0AttributeName = undefined;\n\n\t\t/**\n\t\t * Can be used to force a uniform update while changing uniforms in\n\t\t * {@link Object3D#onBeforeRender}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\t/**\n\t\t * Defines the GLSL version of custom shader code.\n\t\t *\n\t\t * @type {?(GLSL1|GLSL3)}\n\t\t * @default null\n\t\t */\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n\n\t/**\n\t * Constructs a new camera.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\t/**\n\t\t * The inverse of the camera's world matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\t/**\n\t\t * The camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The inverse of the camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The coordinate system in which the camera is used.\n\t\t *\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * This method is overwritten since cameras have a different forward vector compared to other\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _v3$1 = /*@__PURE__*/ new Vector3();\nconst _minTarget = /*@__PURE__*/ new Vector2();\nconst _maxTarget = /*@__PURE__*/ new Vector2();\n\n/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass PerspectiveCamera extends Camera {\n\n\t/**\n\t * Constructs a new perspective camera.\n\t *\n\t * @param {number} [fov=50] - The vertical field of view.\n\t * @param {number} [aspect=1] - The aspect ratio.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\t/**\n\t\t * The vertical field of view, from bottom to top of view,\n\t\t * in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 50\n\t\t */\n\t\tthis.fov = fov;\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link PerspectiveCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n\t\t * valid value for a perspective camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link PerspectiveCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\t/**\n\t\t * Object distance used for stereoscopy and depth-of-field effects. This\n\t\t * parameter does not influence the projection matrix unless a\n\t\t * {@link StereoCamera} is being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.focus = 10;\n\n\t\t/**\n\t\t * The aspect ratio, usually the canvas width / canvas height.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = aspect;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * Film size used for the larger axis. Default is `35` (millimeters). This\n\t\t * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n\t\t * is set to a nonzero value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 35\n\t\t */\n\t\tthis.filmGauge = 35;\n\n\t\t/**\n\t\t * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.filmOffset = 0;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n\t * {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The computed focal length.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\t/**\n\t * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n\t *\n\t * @return {number} The effective FOV.\n\t */\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\t/**\n\t * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n\t * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n\t */\n\tgetViewBounds( distance, minTarget, maxTarget ) {\n\n\t\t_v3$1.set( -1, -1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tminTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t\t_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tmaxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t}\n\n\t/**\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n\t * @returns {Vector2} The view size.\n\t */\n\tgetViewSize( distance, target ) {\n\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\n\n\t\treturn target.subVectors( _maxTarget, _minTarget );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *```\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *```\n\t * then for each monitor you would call it like this:\n\t *```js\n\t * const w = 1920;\n\t * const h = 1080;\n\t * const fullWidth = w * 3;\n\t * const fullHeight = h * 2;\n\t *\n\t * // --A--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t * // --B--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t * // --C--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t * // --D--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t * // --E--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t * // --F--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t * ```\n\t *\n\t * Note there is no reason monitors have to be the same size or in a grid.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = -0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = -90; // negative fov is not an error\nconst aspect = 1;\n\n/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */\nclass CubeCamera extends Object3D {\n\n\t/**\n\t * Constructs a new cube camera.\n\t *\n\t * @param {number} near - The camera's near plane.\n\t * @param {number} far - The camera's far plane.\n\t * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n\t */\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\t/**\n\t\t * A reference to the cube render target.\n\t\t *\n\t\t * @type {WebGLCubeRenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\t/**\n\t\t * The current active coordinate system.\n\t\t *\n\t\t * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t * @default null\n\t\t */\n\t\tthis.coordinateSystem = null;\n\n\t\t/**\n\t\t * The current active mipmap level\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.activeMipmapLevel = 0;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\t/**\n\t * Must be called when the coordinate system of the cube camera is changed.\n\t */\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, -1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, -1, 0 );\n\t\t\tcameraPX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, -1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, -1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, -1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, -1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calling this method will render the given scene with the given renderer\n\t * into the cube render target of the camera.\n\t *\n\t * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n\t * @param {Scene} scene - The scene to render.\n\t */\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst { renderTarget, activeMipmapLevel } = this;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\t// mipmaps are generated during the last call of render()\n\t\t// at this point, all sides of the cube render target are defined\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\n/**\n * Creates a cube texture made up of six images.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath( 'textures/cube/pisa/' );\n *\n * const textureCube = loader.load( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\n * ```\n *\n * @augments Texture\n */\nclass CubeTexture extends Texture {\n\n\t/**\n\t * Constructs a new cube texture.\n\t *\n\t * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\n\t * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space value.\n\t */\n\tconstructor( images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTexture = true;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t}\n\n\t/**\n\t * Alias for {@link CubeTexture#image}.\n\t *\n\t * @type {Array<Image>}\n\t */\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\n/**\n * A cube render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new cube render target.\n\t *\n\t * @param {number} [size=1] - The size of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\t/**\n\t * Converts the given equirectangular texture to a cube map.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Texture} texture - The equirectangular texture.\n\t * @return {WebGLCubeRenderTarget} A reference to this cube render target.\n\t */\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Clears this cube render target.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n\t * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n\t */\n\tclear( renderer, color = true, depth = true, stencil = true ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\n/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\n/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */\nclass WebXRController {\n\n\t/**\n\t * Constructs a new XR controller.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A group representing the target ray space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._targetRay = null;\n\n\t\t/**\n\t\t * A group representing the grip space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._grip = null;\n\n\t\t/**\n\t\t * A group representing the hand space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._hand = null;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand space of the XR controller.\n\t *\n\t * @return {Group} A group representing the hand space of the XR controller.\n\t */\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\t/**\n\t * Returns a group representing the target ray space of the XR controller.\n\t *\n\t * @return {Group} A group representing the target ray space of the XR controller.\n\t */\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\t/**\n\t * Returns a group representing the grip space of the XR controller.\n\t *\n\t * @return {Group} A group representing the grip space of the XR controller.\n\t */\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\t/**\n\t * Dispatches the given event to the groups representing\n\t * the different coordinate spaces of the XR controller.\n\t *\n\t * @param {Object} event - The event to dispatch.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects the controller with the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects the controller from the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates the controller with the given input source, XR frame and reference space.\n\t * This updates the transformations of the groups that represent the different\n\t * coordinate systems of the controller.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @param {XRFrame} frame - The XR frame.\n\t * @param {XRReferenceSpace} referenceSpace - The reference space.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand joint for the given input joint.\n\t *\n\t * @private\n\t * @param {Group} hand - The group representing the hand space.\n\t * @param {XRJointSpace} inputjoint - The hand joint data.\n\t * @return {Group} A group representing the hand joint for the given input joint.\n\t */\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\n/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */\nclass FogExp2 {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n\t */\n\tconstructor( color, density = 0.00025 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFogExp2 = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t *  Defines how fast the fog will grow dense.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.00025\n\t\t */\n\t\tthis.density = density;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {FogExp2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [near=1] - The minimum distance to start applying fog.\n\t * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n\t */\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFog = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The minimum distance to start applying fog. Objects that are less than\n\t\t * `near` units from the active camera won't be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The maximum distance at which fog stops being calculated and applied.\n\t\t * Objects that are more than `far` units away from the active camera won't\n\t\t * be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1000\n\t\t */\n\t\tthis.far = far;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {Fog} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\n/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */\nclass Scene extends Object3D {\n\n\t/**\n\t * Constructs a new scene.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\t/**\n\t\t * Defines the background of the scene. Valid inputs are:\n\t\t *\n\t\t * - A color for defining a uniform colored background.\n\t\t * - A texture for defining a (flat) textured background.\n\t\t * - Cube textures or equirectangular textures for defining a skybox.\n\t\t *\n\t\t * @type {?(Color|Texture)}\n\t\t * @default null\n\t\t */\n\t\tthis.background = null;\n\n\t\t/**\n\t\t * Sets the environment map for all physical materials in the scene. However,\n\t\t * it's not possible to overwrite an existing texture assigned to the `envMap`\n\t\t * material property.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.environment = null;\n\n\t\t/**\n\t\t * A fog instance defining the type of fog that affects everything\n\t\t * rendered in the scene.\n\t\t *\n\t\t * @type {?(Fog|FogExp2)}\n\t\t * @default null\n\t\t */\n\t\tthis.fog = null;\n\n\t\t/**\n\t\t * Sets the blurriness of the background. Only influences environment maps\n\t\t * assigned to {@link Scene#background}. Valid input is a float between `0`\n\t\t * and `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.backgroundBlurriness = 0;\n\n\t\t/**\n\t\t * Attenuates the color of the background. Only applies to background textures.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.backgroundIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the background in radians. Only influences environment maps\n\t\t * assigned to {@link Scene#background}.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.backgroundRotation = new Euler();\n\n\t\t/**\n\t\t * Attenuates the color of the environment. Only influences environment maps\n\t\t * assigned to {@link Scene#environment}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.environmentIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians. Only influences physical materials\n\t\t * in the scene when {@link Scene#environment} is used.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.environmentRotation = new Euler();\n\n\t\t/**\n\t\t * Forces everything in the scene to be rendered with the defined material. It is possible\n\t\t * to exclude materials from override by setting {@link Material#allowOverride} to `false`.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\t\tthis.backgroundRotation.copy( source.backgroundRotation );\n\n\t\tthis.environmentIntensity = source.environmentIntensity;\n\t\tthis.environmentRotation.copy( source.environmentRotation );\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\t\tdata.object.backgroundRotation = this.backgroundRotation.toArray();\n\n\t\tif ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;\n\t\tdata.object.environmentRotation = this.environmentRotation.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */\nclass InterleavedBuffer {\n\n\t/**\n\t * Constructs a new interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t */\n\tconstructor( array, stride ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInterleavedBuffer = true;\n\n\t\t/**\n\t\t * A typed array with a shared buffer storing attribute data.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of typed-array elements per vertex.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.stride = stride;\n\n\t\t/**\n\t\t * The total number of elements in the array\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The UUID of the interleaved buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute array\n\t * data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this interleaved buffer.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {InterleavedBuffer} A reference to this interleaved buffer.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given interleaved buffer to this instance.\n\t *\n\t * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given interleaved buffer to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this interleaved buffer.\n\t * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n\t * @param {number} index2 - The source index into the given interleaved buffer.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopyAt( index1, interleavedBuffer, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= interleavedBuffer.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = interleavedBuffer.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the interleaved buffer.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new interleaved buffer with copied values from this instance.\n\t *\n\t * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n\t * @return {InterleavedBuffer} A clone of this instance.\n\t */\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the interleaved buffer into JSON.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized interleaved buffer.\n\t */\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\n/**\n * An alternative version of a buffer attribute with interleaved data. Interleaved\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\n * different offsets into the buffer.\n */\nclass InterleavedBufferAttribute {\n\n\t/**\n\t * Constructs a new interleaved buffer attribute.\n\t *\n\t * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\n\t * @param {number} itemSize - The item size.\n\t * @param {number} offset - The attribute offset into the buffer.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The buffer holding the interleaved data.\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */\n\t\tthis.data = interleavedBuffer;\n\n\t\t/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * The attribute offset into the buffer.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.offset = offset;\n\n\t\t/**\n\t\t * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */\n\t\tthis.normalized = normalized;\n\n\t}\n\n\t/**\n\t * The item count of this buffer attribute.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\t/**\n\t * The array holding the interleaved buffer attribute data.\n\t *\n\t * @type {TypedArray}\n\t */\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\t/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\t/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\t/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\t/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\n\t * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\n\t */\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A material for rendering instances of {@link Sprite}.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );\n *\n * const sprite = new THREE.Sprite( material );\n * sprite.scale.set(200, 200, 1)\n * scene.add( sprite );\n * ```\n *\n * @augments Material\n */\nclass SpriteMaterial extends Material {\n\n\t/**\n\t * Constructs a new sprite material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The rotation of the sprite in radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sizeAttenuation = true;\n\n\t\t/**\n\t\t * Overwritten since sprite materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n\n\t/**\n\t * Constructs a new sprite.\n\t *\n\t * @param {SpriteMaterial} [material] - The sprite material.\n\t */\n\tconstructor( material = new SpriteMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t-0.5, -0.5, 0, 0, 0,\n\t\t\t\t0.5, -0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t-0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\t/**\n\t\t * The sprite geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = _geometry;\n\n\t\t/**\n\t\t * The sprite material.\n\t\t *\n\t\t * @type {SpriteMaterial}\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * The sprite's anchor point, and the point around which the sprite rotates.\n\t\t * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n\t\t * of `(0, 0)` corresponds to the lower left corner of the sprite.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this sprite.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( -0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( -0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n\n\t/**\n\t * Constructs a new LOD.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLOD = true;\n\n\t\t/**\n\t\t * The current LOD index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * This array holds the LOD levels.\n\t\t\t *\n\t\t\t * @name LOD#levels\n\t\t\t * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n\t\t\t */\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Whether the LOD object is updated automatically by the renderer per frame\n\t\t * or not. If set to `false`, you have to call {@link LOD#update} in the\n\t\t * render loop by yourself.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a mesh that will display at a certain distance and greater. Typically\n\t * the further away the distance, the lower the detail on the mesh.\n\t *\n\t * @param {Object3D} object - The 3D object to display at this level.\n\t * @param {number} [distance=0] - The distance at which to display this level of detail.\n\t * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n\t * @return {LOD} A reference to this instance.\n\t */\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes an existing level, based on the distance from the camera.\n\t * Returns `true` when the level has been removed. Otherwise `false`.\n\t *\n\t * @param {number} distance - Distance of the level to remove.\n\t * @return {boolean} Whether the level has been removed or not.\n\t */\n\tremoveLevel( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\n\n\t\t\tif ( levels[ i ].distance === distance ) {\n\n\t\t\t\tconst removedElements = levels.splice( i, 1 );\n\t\t\t\tthis.remove( removedElements[ 0 ].object );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the currently active LOD level index.\n\t *\n\t * @return {number} The current active LOD level index.\n\t */\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\t/**\n\t * Returns a reference to the first 3D object that is greater than\n\t * the given distance.\n\t *\n\t * @param {number} distance - The LOD distance.\n\t * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n\t */\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this LOD.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the LOD by computing which LOD level should be visible according\n\t * to the current distance of the given camera.\n\t *\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t */\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector3 = /*@__PURE__*/ new Vector3();\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\nconst _vertex = /*@__PURE__*/ new Vector3();\n\nconst _sphere$5 = /*@__PURE__*/ new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\n\n/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */\nclass SkinnedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new skinned mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\t/**\n\t\t * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n\t\t * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n\t\t * across multiple skinned meshes.\n\t\t *\n\t\t * @type {(AttachedBindMode|DetachedBindMode)}\n\t\t * @default AttachedBindMode\n\t\t */\n\t\tthis.bindMode = AttachedBindMode;\n\n\t\t/**\n\t\t * The base matrix that is used for the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The base matrix that is used for resetting the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n\t * the current animation state.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n\t * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n\t * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n\t * per frame in order to reflect the current animation state.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$5.copy( this.boundingSphere );\n\t\t_sphere$5.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$5 ) === false ) return;\n\n\t\t// convert ray to local space of skinned mesh\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( this.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$2 );\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tsuper.getVertexPosition( index, target );\n\n\t\tthis.applyBoneTransform( index, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Binds the given skeleton to the skinned mesh.\n\t *\n\t * @param {Skeleton} skeleton - The skeleton to bind.\n\t * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n\t * the skinned mesh's world matrix will be used instead.\n\t */\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\t/**\n\t * This method sets the skinned mesh in the rest pose).\n\t */\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\t/**\n\t * Normalizes the skin weights which are defined as a buffer attribute\n\t * in the skinned mesh's geometry.\n\t */\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === AttachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Applies the bone transform associated with the given index to the given\n\t * vertex position. Returns the updated vector.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * the skinned mesh's world matrix will be used instead.\n\t * @return {Vector3} The updated vertex position.\n\t */\n\tapplyBoneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\n/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */\nclass Bone extends Object3D {\n\n\t/**\n\t * Constructs a new bone.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\n/**\n * Creates a texture directly from raw buffer data.\n *\n * The interpretation of the data depends on type and format: If the type is\n * `UnsignedByteType`, a `Uint8Array` will be useful for addressing the\n * texel data. If the format is `RGBAFormat`, data needs four values for\n * one texel; Red, Green, Blue and Alpha (typically the opacity).\n *\n * @augments Texture\n */\nclass DataTexture extends Texture {\n\n\t/**\n\t * Constructs a new data texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=NearestFilter] - The mag filter value.\n\t * @param {number} [minFilter=NearestFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDataTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number}}\n\t\t */\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */\nclass Skeleton {\n\n\t/**\n\t * Constructs a new skeleton.\n\t *\n\t * @param {Array<Bone>} [bones] - An array of bones.\n\t * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n\t * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n\t */\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * An array of bones defining the skeleton.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones.slice( 0 );\n\n\t\t/**\n\t\t * An array of bone inverse matrices.\n\t\t *\n\t\t * @type {Array<Matrix4>}\n\t\t */\n\t\tthis.boneInverses = boneInverses;\n\n\t\t/**\n\t\t * An array buffer holding the bone data.\n\t\t * Input data for {@link Skeleton#boneTexture}.\n\t\t *\n\t\t * @type {?Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis.boneMatrices = null;\n\n\t\t/**\n\t\t * A texture holding the bone data for use\n\t\t * in the vertex shader.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.boneTexture = null;\n\n\t\tthis.init();\n\n\t}\n\n\t/**\n\t * Initializes the skeleton. This method gets automatically called by the constructor\n\t * but depending on how the skeleton is created it might be necessary to call this method\n\t * manually.\n\t */\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n\t * and fills it with new matrices.\n\t */\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new skeleton with copied values from this instance.\n\t *\n\t * @return {Skeleton} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\t/**\n\t * Computes a data texture for passing bone data to the vertex shader.\n\t *\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the skeleton's bone array and returns the first with a\n\t * matching name.\n\t *\n\t * @param {string} name - The name of the bone.\n\t * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n\t */\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the skeleton by the given JSON and bones.\n\t *\n\t * @param {Object} json - The skeleton as serialized JSON.\n\t * @param {Object<string, Bone>} bones - An array of bones.\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the skeleton into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized skeleton.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * An instanced version of a buffer attribute.\n *\n * @augments BufferAttribute\n */\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new instanced buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\n\t */\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\t/**\n\t\t * Defines how often a value of this buffer attribute should be repeated. A\n\t\t * value of one means that each value of the instanced attribute is used for\n\t\t * a single instance. A value of two means that each value is used for two\n\t\t * consecutive instances (and so on).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _box3 = /*@__PURE__*/ new Box3();\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh$1 = /*@__PURE__*/ new Mesh();\nconst _sphere$4 = /*@__PURE__*/ new Sphere();\n\n/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */\nclass InstancedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new instanced mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t * @param {number} count - The number of instances.\n\t */\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedMesh = true;\n\n\t\t/**\n\t\t * Represents the local transformation of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMatrixAt}.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\t/**\n\t\t * Represents the color of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setColorAt}.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.instanceColor = null;\n\n\t\t/**\n\t\t * Represents the morph target weights of all instances. You have to set its\n\t\t * {@link Texture#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMorphAt}.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.morphTexture = null;\n\n\t\t/**\n\t\t * The number of instances.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingBox.union( _box3 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingSphere.union( _sphere$4 );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.morphTexture !== null ) this.morphTexture = source.morphTexture.clone();\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the color of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t */\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Gets the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t */\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Gets the morph target weights of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object - The target object that is used to store the method's result.\n\t */\n\tgetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tconst len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n\t\tconst dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tobjectInfluences[ i ] = array[ dataIndex + i ];\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh$1.geometry = this.geometry;\n\t\t_mesh$1.material = this.material;\n\n\t\tif ( _mesh$1.material === undefined ) return;\n\n\t\t// test with bounding sphere first\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$4.copy( this.boundingSphere );\n\t\t_sphere$4.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$4 ) === false ) return;\n\n\t\t// now test each instance\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh$1.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh$1.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The instance color.\n\t */\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ).fill( 1 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The local transformation.\n\t */\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n\t * of a single instance.\n\t */\n\tsetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n\t\tif ( this.morphTexture === null ) {\n\n\t\t\tthis.morphTexture = new DataTexture( new Float32Array( len * this.count ), len, this.count, RedFormat, FloatType );\n\n\t\t}\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tlet morphInfluencesSum = 0;\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t}\n\n\t\tconst morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\tconst dataIndex = len * index;\n\n\t\tarray[ dataIndex ] = morphBaseInfluence;\n\n\t\tarray.set( objectInfluences, dataIndex + 1 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\tif ( this.morphTexture !== null ) {\n\n\t\t\tthis.morphTexture.dispose();\n\t\t\tthis.morphTexture = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\n/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */\nclass Plane {\n\n\t/**\n\t * Constructs a new plane.\n\t *\n\t * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n\t * @param {number} [constant=0] - The signed distance from the origin to the plane.\n\t */\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPlane = true;\n\n\t\t/**\n\t\t * A unit length vector defining the normal of the plane.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.normal = normal;\n\n\t\t/**\n\t\t * The signed distance from the origin to the plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.constant = constant;\n\n\t}\n\n\t/**\n\t * Sets the plane components by copying the given values.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {number} constant - The constant.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane components by defining `x`, `y`, `z` as the\n\t * plane normal and `w` as the constant.\n\t *\n\t * @param {number} x - The value for the normal's x component.\n\t * @param {number} y - The value for the normal's y component.\n\t * @param {number} z - The value for the normal's z component.\n\t * @param {number} w - The constant value.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from the given normal and coplanar point (that is a point\n\t * that lies onto the plane).\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Vector3} point - A coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from three coplanar points. The winding order is\n\t * assumed to be counter-clockwise, and determines the direction of\n\t * the plane normal.\n\t *\n\t * @param {Vector3} a - The first coplanar point.\n\t * @param {Vector3} b - The second coplanar point.\n\t * @param {Vector3} c - The third coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given plane to this instance.\n\t *\n\t * @param {Plane} plane - The plane to copy.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Normalizes the plane normal and adjusts the constant accordingly.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Negates both the plane normal and the constant.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnegate() {\n\n\t\tthis.constant *= -1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given point to this plane.\n\t *\n\t * @param {Vector3} point - The point to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given sphere to this plane.\n\t *\n\t * @param {Sphere} sphere - The sphere to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\t/**\n\t * Projects a the given point onto the plane.\n\t *\n\t * @param {Vector3} point - The point to project.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The projected point on the plane.\n\t */\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the intersection point of the passed line and the plane. Returns\n\t * `null` if the line does not intersect. Returns the line's starting point if\n\t * the line is coplanar with the plane.\n\t *\n\t * @param {Line3} line - The line to compute the intersection for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given line segment intersects with (passes through) the plane.\n\t *\n\t * @param {Line3} line - The line to test.\n\t * @return {boolean} Whether the given line segment intersects with the plane or not.\n\t */\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with the plane.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with the plane or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with the plane.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns a coplanar vector to the plane, by calculating the\n\t * projection of the normal at the origin onto the plane.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The coplanar point.\n\t */\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\t/**\n\t * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n\t *\n\t * The optional normal matrix can be pre-computed like so:\n\t * ```js\n\t * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t * ```\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the plane by the distance defined by the given offset vector.\n\t * Note that this only affects the plane constant and will not affect the normal vector.\n\t *\n\t * @param {Vector3} offset - The offset vector.\n\t * @return {Plane} A reference to this plane.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this plane is equal with the given one.\n\t *\n\t * @param {Plane} plane - The plane to test for equality.\n\t * @return {boolean} Whether this plane is equal with the given one.\n\t */\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\t/**\n\t * Returns a new plane with copied values from this instance.\n\t *\n\t * @return {Plane} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\n/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */\nclass Frustum {\n\n\t/**\n\t * Constructs a new frustum.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t */\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\t/**\n\t\t * This array holds the planes that enclose the frustum.\n\t\t *\n\t\t * @type {Array<Plane>}\n\t\t */\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\t/**\n\t * Sets the frustum planes by copying the given planes.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given frustum to this instance.\n\t *\n\t * @param {Frustum} frustum - The frustum to copy.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the frustum planes from the given projection matrix.\n\t *\n\t * @param {Matrix4} m - The projection matrix.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n\t *\n\t * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given sprite is intersecting this frustum.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @return {boolean} Whether the sprite is intersecting this frustum or not.\n\t */\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$3.center.set( 0, 0, 0 );\n\t\t_sphere$3.radius = 0.7071067811865476;\n\t\t_sphere$3.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere is intersecting this frustum.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box is intersecting this frustum.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$6 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within the frustum.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the point lies within this frustum or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns a new frustum with copied values from this instance.\n\t *\n\t * @return {Frustum} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _projScreenMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _frustum$1 = /*@__PURE__*/ new Frustum();\n\n/**\n * FrustumArray is used to determine if an object is visible in at least one camera\n * from an array of cameras. This is particularly useful for multi-view renderers.\n*/\nclass FrustumArray {\n\n\t/**\n\t * Constructs a new frustum array.\n\t *\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The coordinate system to use.\n\t\t *\n\t\t * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n\t\t * @default WebGLCoordinateSystem\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\t/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the 3D object is visible in any camera.\n\t */\n\tintersectsObject( object, cameraArray ) {\n\n\t\tif ( ! cameraArray.isArrayCamera || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsObject( object ) ) {\n\n\t\t\t\treturn true; // Object is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given sprite is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sprite is visible in any camera.\n\t */\n\tintersectsSprite( sprite, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsSprite( sprite ) ) {\n\n\t\t\t\treturn true; // Sprite is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sphere is visible in any camera.\n\t */\n\tintersectsSphere( sphere, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsSphere( sphere ) ) {\n\n\t\t\t\treturn true; // Sphere is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the box is visible in any camera.\n\t */\n\tintersectsBox( box, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsBox( box ) ) {\n\n\t\t\t\treturn true; // Box is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within any frustum\n\t * from the camera array.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the point is visible in any camera.\n\t */\n\tcontainsPoint( point, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.containsPoint( point ) ) {\n\n\t\t\t\treturn true; // Point is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns a new frustum array with copied values from this instance.\n\t *\n\t * @return {FrustumArray} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new FrustumArray();\n\n\t}\n\n}\n\nfunction ascIdSort( a, b ) {\n\n\treturn a - b;\n\n}\n\nfunction sortOpaque( a, b ) {\n\n\treturn a.z - b.z;\n\n}\n\nfunction sortTransparent( a, b ) {\n\n\treturn b.z - a.z;\n\n}\n\nclass MultiDrawRenderList {\n\n\tconstructor() {\n\n\t\tthis.index = 0;\n\t\tthis.pool = [];\n\t\tthis.list = [];\n\n\t}\n\n\tpush( start, count, z, index ) {\n\n\t\tconst pool = this.pool;\n\t\tconst list = this.list;\n\t\tif ( this.index >= pool.length ) {\n\n\t\t\tpool.push( {\n\n\t\t\t\tstart: -1,\n\t\t\t\tcount: -1,\n\t\t\t\tz: -1,\n\t\t\t\tindex: -1,\n\n\t\t\t} );\n\n\t\t}\n\n\t\tconst item = pool[ this.index ];\n\t\tlist.push( item );\n\t\tthis.index ++;\n\n\t\titem.start = start;\n\t\titem.count = count;\n\t\titem.z = z;\n\t\titem.index = index;\n\n\t}\n\n\treset() {\n\n\t\tthis.list.length = 0;\n\t\tthis.index = 0;\n\n\t}\n\n}\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _whiteColor = /*@__PURE__*/ new Color( 1, 1, 1 );\nconst _frustum = /*@__PURE__*/ new Frustum();\nconst _frustumArray = /*@__PURE__*/ new FrustumArray();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _forward = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\nconst _renderList = /*@__PURE__*/ new MultiDrawRenderList();\nconst _mesh = /*@__PURE__*/ new Mesh();\nconst _batchIntersects = [];\n\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData( src, target, targetOffset = 0 ) {\n\n\tconst itemSize = target.itemSize;\n\tif ( src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor ) {\n\n\t\t// use the component getters and setters if the array data cannot\n\t\t// be copied directly\n\t\tconst vertexCount = src.count;\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\ttarget.setComponent( i + targetOffset, c, src.getComponent( i, c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// faster copy approach using typed array set function\n\t\ttarget.array.set( src.array, targetOffset * itemSize );\n\n\t}\n\n\ttarget.needsUpdate = true;\n\n}\n\n// safely copies array contents to a potentially smaller array\nfunction copyArrayContents( src, target ) {\n\n\tif ( src.constructor !== target.constructor ) {\n\n\t\t// if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n\t\tconst len = Math.min( src.length, target.length );\n\t\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\t\ttarget[ i ] = src[ i ];\n\n\t\t}\n\n\t} else {\n\n\t\t// if the arrays use the same data layout we can use a fast block copy\n\t\tconst len = Math.min( src.length, target.length );\n\t\ttarget.set( new src.constructor( src.buffer, 0, len ) );\n\n\t}\n\n}\n\n/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */\nclass BatchedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new batched mesh.\n\t *\n\t * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n\t * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( maxInstanceCount, maxVertexCount, maxIndexCount = maxVertexCount * 2, material ) {\n\n\t\tsuper( new BufferGeometry(), material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBatchedMesh = true;\n\n\t\t/**\n\t\t * When set ot `true`, the individual objects of a batch are frustum culled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.perObjectFrustumCulled = true;\n\n\t\t/**\n\t\t * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n\t\t * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n\t\t * rendered front to back.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortObjects = true;\n\n\t\t/**\n\t\t * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\t/**\n\t\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n\t\t * sort with.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.customSort = null;\n\n\t\t// stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n\t\tthis._instanceInfo = [];\n\t\tthis._geometryInfo = [];\n\n\t\t// instance, geometry ids that have been set as inactive, and are available to be overwritten\n\t\tthis._availableInstanceIds = [];\n\t\tthis._availableGeometryIds = [];\n\n\t\t// used to track where the next point is that geometry should be inserted\n\t\tthis._nextIndexStart = 0;\n\t\tthis._nextVertexStart = 0;\n\t\tthis._geometryCount = 0;\n\n\t\t// flags\n\t\tthis._visibilityChanged = true;\n\t\tthis._geometryInitialized = false;\n\n\t\t// cached user options\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\t// buffers for multi draw\n\t\tthis._multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawCount = 0;\n\t\tthis._multiDrawInstances = null;\n\n\t\t// Local matrix per geometry by using data texture\n\t\tthis._matricesTexture = null;\n\t\tthis._indirectTexture = null;\n\t\tthis._colorsTexture = null;\n\n\t\tthis._initMatricesTexture();\n\t\tthis._initIndirectTexture();\n\n\t}\n\n\t/**\n\t * The maximum number of individual instances that can be stored in the batch.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget maxInstanceCount() {\n\n\t\treturn this._maxInstanceCount;\n\n\t}\n\n\t/**\n\t * The instance count.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget instanceCount() {\n\n\t\treturn this._instanceInfo.length - this._availableInstanceIds.length;\n\n\t}\n\n\t/**\n\t * The number of unused vertices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedVertexCount() {\n\n\t\treturn this._maxVertexCount - this._nextVertexStart;\n\n\t}\n\n\t/**\n\t * The number of unused indices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedIndexCount() {\n\n\t\treturn this._maxIndexCount - this._nextIndexStart;\n\n\t}\n\n\t_initMatricesTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst matricesArray = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tconst matricesTexture = new DataTexture( matricesArray, size, size, RGBAFormat, FloatType );\n\n\t\tthis._matricesTexture = matricesTexture;\n\n\t}\n\n\t_initIndirectTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\tconst indirectArray = new Uint32Array( size * size );\n\t\tconst indirectTexture = new DataTexture( indirectArray, size, size, RedIntegerFormat, UnsignedIntType );\n\n\t\tthis._indirectTexture = indirectTexture;\n\n\t}\n\n\t_initColorsTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\t// 4 floats per RGBA pixel initialized to white\n\t\tconst colorsArray = new Float32Array( size * size * 4 ).fill( 1 );\n\t\tconst colorsTexture = new DataTexture( colorsArray, size, size, RGBAFormat, FloatType );\n\t\tcolorsTexture.colorSpace = ColorManagement.workingColorSpace;\n\n\t\tthis._colorsTexture = colorsTexture;\n\n\t}\n\n\t_initializeGeometry( reference ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst maxVertexCount = this._maxVertexCount;\n\t\tconst maxIndexCount = this._maxIndexCount;\n\t\tif ( this._geometryInitialized === false ) {\n\n\t\t\tfor ( const attributeName in reference.attributes ) {\n\n\t\t\t\tconst srcAttribute = reference.getAttribute( attributeName );\n\t\t\t\tconst { array, itemSize, normalized } = srcAttribute;\n\n\t\t\t\tconst dstArray = new array.constructor( maxVertexCount * itemSize );\n\t\t\t\tconst dstAttribute = new BufferAttribute( dstArray, itemSize, normalized );\n\n\t\t\t\tgeometry.setAttribute( attributeName, dstAttribute );\n\n\t\t\t}\n\n\t\t\tif ( reference.getIndex() !== null ) {\n\n\t\t\t\t// Reserve last u16 index for primitive restart.\n\t\t\t\tconst indexArray = maxVertexCount > 65535\n\t\t\t\t\t? new Uint32Array( maxIndexCount )\n\t\t\t\t\t: new Uint16Array( maxIndexCount );\n\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indexArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tthis._geometryInitialized = true;\n\n\t\t}\n\n\t}\n\n\t// Make sure the geometry is compatible with the existing combined geometry attributes\n\t_validateGeometry( geometry ) {\n\n\t\t// check to ensure the geometries are using consistent attributes and indices\n\t\tconst batchGeometry = this.geometry;\n\t\tif ( Boolean( geometry.getIndex() ) !== Boolean( batchGeometry.getIndex() ) ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: All geometries must consistently have \"index\".' );\n\n\t\t}\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\tif ( ! geometry.hasAttribute( attributeName ) ) {\n\n\t\t\t\tthrow new Error( `THREE.BatchedMesh: Added geometry missing \"${ attributeName }\". All geometries must have consistent attributes.` );\n\n\t\t\t}\n\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tif ( srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized ) {\n\n\t\t\t\tthrow new Error( 'THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the instance defined by the given ID.\n\t *\n\t * @param {number} instanceId - The instance to validate.\n\t */\n\tvalidateInstanceId( instanceId ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tif ( instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[ instanceId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the geometry defined by the given ID.\n\t *\n\t * @param {number} geometryId - The geometry to validate.\n\t */\n\tvalidateGeometryId( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n\t *\n\t * @param {Function} func - The custom sort function.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetCustomSort( func ) {\n\n\t\tthis.customSort = func;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n\t * Bounding boxes aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst boundingBox = this.boundingBox;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingBox.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingBox.union( _box$1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n\t * Bounding spheres aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingSphere.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingSphere.union( _sphere$2 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds a new instance to the batch using the geometry of the given ID and returns\n\t * a new id referring to the new instance to be used by other functions.\n\t *\n\t * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n\t * @return {number} The instance ID.\n\t */\n\taddInstance( geometryId ) {\n\n\t\tconst atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n\t\t// ensure we're not over geometry\n\t\tif ( atCapacity && this._availableInstanceIds.length === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum item count reached.' );\n\n\t\t}\n\n\t\tconst instanceInfo = {\n\t\t\tvisible: true,\n\t\t\tactive: true,\n\t\t\tgeometryIndex: geometryId,\n\t\t};\n\n\t\tlet drawId = null;\n\n\t\t// Prioritize using previously freed instance ids\n\t\tif ( this._availableInstanceIds.length > 0 ) {\n\n\t\t\tthis._availableInstanceIds.sort( ascIdSort );\n\n\t\t\tdrawId = this._availableInstanceIds.shift();\n\t\t\tthis._instanceInfo[ drawId ] = instanceInfo;\n\n\t\t} else {\n\n\t\t\tdrawId = this._instanceInfo.length;\n\t\t\tthis._instanceInfo.push( instanceInfo );\n\n\t\t}\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\t_matrix$1.identity().toArray( matricesTexture.image.data, drawId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\tconst colorsTexture = this._colorsTexture;\n\t\tif ( colorsTexture ) {\n\n\t\t\t_whiteColor.toArray( colorsTexture.image.data, drawId * 4 );\n\t\t\tcolorsTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn drawId;\n\n\t}\n\n\t/**\n\t * Adds the given geometry to the batch and returns the associated\n\t * geometry id referring to it to be used in other functions.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to add.\n\t * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n\t * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n\t * to set a new geometry at this index at a later time that is larger than the original geometry.\n\t * Defaults to the length of the given geometry vertex buffer.\n\t * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n\t * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n\t * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n\t * the length of the given geometry index buffer.\n\t * @return {number} The geometry ID.\n\t */\n\taddGeometry( geometry, reservedVertexCount = -1, reservedIndexCount = -1 ) {\n\n\t\tthis._initializeGeometry( geometry );\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst geometryInfo = {\n\t\t\t// geometry information\n\t\t\tvertexStart: -1,\n\t\t\tvertexCount: -1,\n\t\t\treservedVertexCount: -1,\n\n\t\t\tindexStart: -1,\n\t\t\tindexCount: -1,\n\t\t\treservedIndexCount: -1,\n\n\t\t\t// draw range information\n\t\t\tstart: -1,\n\t\t\tcount: -1,\n\n\t\t\t// state\n\t\t\tboundingBox: null,\n\t\t\tboundingSphere: null,\n\t\t\tactive: true,\n\t\t};\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tgeometryInfo.vertexStart = this._nextVertexStart;\n\t\tgeometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute( 'position' ).count : reservedVertexCount;\n\n\t\tconst index = geometry.getIndex();\n\t\tconst hasIndex = index !== null;\n\t\tif ( hasIndex ) {\n\n\t\t\tgeometryInfo.indexStart = this._nextIndexStart;\n\t\t\tgeometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n\n\t\t}\n\n\t\tif (\n\t\t\tgeometryInfo.indexStart !== -1 &&\n\t\t\tgeometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount ||\n\t\t\tgeometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.' );\n\n\t\t}\n\n\t\t// update id\n\t\tlet geometryId;\n\t\tif ( this._availableGeometryIds.length > 0 ) {\n\n\t\t\tthis._availableGeometryIds.sort( ascIdSort );\n\n\t\t\tgeometryId = this._availableGeometryIds.shift();\n\t\t\tgeometryInfoList[ geometryId ] = geometryInfo;\n\n\n\t\t} else {\n\n\t\t\tgeometryId = this._geometryCount;\n\t\t\tthis._geometryCount ++;\n\t\t\tgeometryInfoList.push( geometryInfo );\n\n\t\t}\n\n\t\t// update the geometry\n\t\tthis.setGeometryAt( geometryId, geometry );\n\n\t\t// increment the next geometry position\n\t\tthis._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n\t * is not enough space reserved for geometry. Calling this will change all instances that are\n\t * rendering that geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.\n\t * @param {BufferGeometry} geometry - The new geometry.\n\t * @return {number} The geometry ID.\n\t */\n\tsetGeometryAt( geometryId, geometry ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum geometry count reached.' );\n\n\t\t}\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst batchGeometry = this.geometry;\n\t\tconst hasIndex = batchGeometry.getIndex() !== null;\n\t\tconst dstIndex = batchGeometry.getIndex();\n\t\tconst srcIndex = geometry.getIndex();\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif (\n\t\t\thasIndex &&\n\t\t\tsrcIndex.count > geometryInfo.reservedIndexCount ||\n\t\t\tgeometry.attributes.position.count > geometryInfo.reservedVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space not large enough for provided geometry.' );\n\n\t\t}\n\n\t\t// copy geometry buffer data over\n\t\tconst vertexStart = geometryInfo.vertexStart;\n\t\tconst reservedVertexCount = geometryInfo.reservedVertexCount;\n\t\tgeometryInfo.vertexCount = geometry.getAttribute( 'position' ).count;\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\t// copy attribute data\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tcopyAttributeData( srcAttribute, dstAttribute, vertexStart );\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tconst itemSize = srcAttribute.itemSize;\n\t\t\tfor ( let i = srcAttribute.count, l = reservedVertexCount; i < l; i ++ ) {\n\n\t\t\t\tconst index = vertexStart + i;\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tdstAttribute.setComponent( index, c, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdstAttribute.needsUpdate = true;\n\t\t\tdstAttribute.addUpdateRange( vertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t}\n\n\t\t// copy index\n\t\tif ( hasIndex ) {\n\n\t\t\tconst indexStart = geometryInfo.indexStart;\n\t\t\tconst reservedIndexCount = geometryInfo.reservedIndexCount;\n\t\t\tgeometryInfo.indexCount = geometry.getIndex().count;\n\n\t\t\t// copy index data over\n\t\t\tfor ( let i = 0; i < srcIndex.count; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart + srcIndex.getX( i ) );\n\n\t\t\t}\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tfor ( let i = srcIndex.count, l = reservedIndexCount; i < l; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart );\n\n\t\t\t}\n\n\t\t\tdstIndex.needsUpdate = true;\n\t\t\tdstIndex.addUpdateRange( indexStart, geometryInfo.reservedIndexCount );\n\n\t\t}\n\n\t\t// update the draw range\n\t\tgeometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\t\tgeometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n\t\t// store the bounding boxes\n\t\tgeometryInfo.boundingBox = null;\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tgeometryInfo.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tgeometryInfo.boundingSphere = null;\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tgeometryInfo.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n\t * this geometry will also be removed as a side effect.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteGeometry( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// delete any instances associated with this geometry\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active && instanceInfo[ i ].geometryIndex === geometryId ) {\n\n\t\t\t\tthis.deleteInstance( i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometryInfoList[ geometryId ].active = false;\n\t\tthis._availableGeometryIds.push( geometryId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes an existing instance from the batch using the given ID.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteInstance( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tthis._instanceInfo[ instanceId ].active = false;\n\t\tthis._availableInstanceIds.push( instanceId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Repacks the sub geometries in [name] to remove any unused space remaining from\n\t * previously deleted geometry, freeing up space to add new geometry.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\toptimize() {\n\n\t\t// track the next indices to copy data to\n\t\tlet nextVertexStart = 0;\n\t\tlet nextIndexStart = 0;\n\n\t\t// Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n\t\t// in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst indices = geometryInfoList\n\t\t\t.map( ( e, i ) => i )\n\t\t\t.sort( ( a, b ) => {\n\n\t\t\t\treturn geometryInfoList[ a ].vertexStart - geometryInfoList[ b ].vertexStart;\n\n\t\t\t} );\n\n\t\tconst geometry = this.geometry;\n\t\tfor ( let i = 0, l = geometryInfoList.length; i < l; i ++ ) {\n\n\t\t\t// if a geometry range is inactive then don't copy anything\n\t\t\tconst index = indices[ i ];\n\t\t\tconst geometryInfo = geometryInfoList[ index ];\n\t\t\tif ( geometryInfo.active === false ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// if a geometry contains an index buffer then shift it, as well\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\tif ( geometryInfo.indexStart !== nextIndexStart ) {\n\n\t\t\t\t\tconst { indexStart, vertexStart, reservedIndexCount } = geometryInfo;\n\t\t\t\t\tconst index = geometry.index;\n\t\t\t\t\tconst array = index.array;\n\n\t\t\t\t\t// shift the index pointers based on how the vertex data will shift\n\t\t\t\t\t// adjusting the index must happen first so the original vertex start value is available\n\t\t\t\t\tconst elementDelta = nextVertexStart - vertexStart;\n\t\t\t\t\tfor ( let j = indexStart; j < indexStart + reservedIndexCount; j ++ ) {\n\n\t\t\t\t\t\tarray[ j ] = array[ j ] + elementDelta;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex.array.copyWithin( nextIndexStart, indexStart, indexStart + reservedIndexCount );\n\t\t\t\t\tindex.addUpdateRange( nextIndexStart, reservedIndexCount );\n\n\t\t\t\t\tgeometryInfo.indexStart = nextIndexStart;\n\n\t\t\t\t}\n\n\t\t\t\tnextIndexStart += geometryInfo.reservedIndexCount;\n\n\t\t\t}\n\n\t\t\t// if a geometry needs to be moved then copy attribute data to overwrite unused space\n\t\t\tif ( geometryInfo.vertexStart !== nextVertexStart ) {\n\n\t\t\t\tconst { vertexStart, reservedVertexCount } = geometryInfo;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tfor ( const key in attributes ) {\n\n\t\t\t\t\tconst attribute = attributes[ key ];\n\t\t\t\t\tconst { array, itemSize } = attribute;\n\t\t\t\t\tarray.copyWithin( nextVertexStart * itemSize, vertexStart * itemSize, ( vertexStart + reservedVertexCount ) * itemSize );\n\t\t\t\t\tattribute.addUpdateRange( nextVertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tgeometryInfo.vertexStart = nextVertexStart;\n\n\t\t\t}\n\n\t\t\tnextVertexStart += geometryInfo.reservedVertexCount;\n\t\t\tgeometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n\t\t\t// step the next geometry points to the shifted position\n\t\t\tthis._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n\t\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the bounding box for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n\t * @param {Box3} target - The target object that is used to store the method's result.\n\t * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingBoxAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding box\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingBox === null ) {\n\n\t\t\tconst box = new Box3();\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\tbox.expandByPoint( _vector$5.fromBufferAttribute( position, iv ) );\n\n\t\t\t}\n\n\t\t\tgeometryInfo.boundingBox = box;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingBox );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the bounding sphere for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n\t * @param {Sphere} target - The target object that is used to store the method's result.\n\t * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingSphereAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding sphere\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingSphere === null ) {\n\n\t\t\tconst sphere = new Sphere();\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 );\n\t\t\t_box$1.getCenter( sphere.center );\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet maxRadiusSq = 0;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\t_vector$5.fromBufferAttribute( position, iv );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, sphere.center.distanceToSquared( _vector$5 ) );\n\n\t\t\t}\n\n\t\t\tsphere.radius = Math.sqrt( maxRadiusSq );\n\t\t\tgeometryInfo.boundingSphere = sphere;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingSphere );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance.\n\t * Negatively scaled matrices are not supported.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the matrix of.\n\t * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst matricesArray = this._matricesTexture.image.data;\n\t\tmatrix.toArray( matricesArray, instanceId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the matrix of.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t * @return {Matrix4} The instance's local transformation matrix.\n\t */\n\tgetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn matrix.fromArray( this._matricesTexture.image.data, instanceId * 16 );\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the color of.\n\t * @param {Color} color - The color to set the instance to.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._colorsTexture === null ) {\n\n\t\t\tthis._initColorsTexture();\n\n\t\t}\n\n\t\tcolor.toArray( this._colorsTexture.image.data, instanceId * 4 );\n\t\tthis._colorsTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the color of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the color of.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t * @return {Color} The instance's color.\n\t */\n\tgetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn color.fromArray( this._colorsTexture.image.data, instanceId * 4 );\n\n\t}\n\n\t/**\n\t * Sets the visibility of the instance.\n\t *\n\t * @param {number} instanceId - The id of the instance to set the visibility of.\n\t * @param {boolean} visible - Whether the instance is visible or not.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetVisibleAt( instanceId, visible ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._instanceInfo[ instanceId ].visible === visible ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis._instanceInfo[ instanceId ].visible = visible;\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the visibility state of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the visibility state of.\n\t * @return {boolean} Whether the instance is visible or not.\n\t */\n\tgetVisibleAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].visible;\n\n\t}\n\n\t/**\n\t * Sets the geometry ID of the instance at the given index.\n\t *\n\t * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n\t * @param {number} geometryId - The geometry ID to be use by the instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetGeometryIdAt( instanceId, geometryId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tthis._instanceInfo[ instanceId ].geometryIndex = geometryId;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the geometry ID of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n\t * @return {number} The instance's geometry ID.\n\t */\n\tgetGeometryIdAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].geometryIndex;\n\n\t}\n\n\t/**\n\t * Get the range representing the subset of triangles related to the attached geometry,\n\t * indicating the starting offset and count, or `null` if invalid.\n\t *\n\t * @param {number} geometryId - The id of the geometry to get the range of.\n\t * @param {Object} [target] - The target object that is used to store the method's result.\n\t * @return {{\n\t * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n\t * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n\t * \tstart:number,count:number\n\t * }} The result object with range data.\n\t */\n\tgetGeometryRangeAt( geometryId, target = {} ) {\n\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\ttarget.vertexStart = geometryInfo.vertexStart;\n\t\ttarget.vertexCount = geometryInfo.vertexCount;\n\t\ttarget.reservedVertexCount = geometryInfo.reservedVertexCount;\n\n\t\ttarget.indexStart = geometryInfo.indexStart;\n\t\ttarget.indexCount = geometryInfo.indexCount;\n\t\ttarget.reservedIndexCount = geometryInfo.reservedIndexCount;\n\n\t\ttarget.start = geometryInfo.start;\n\t\ttarget.count = geometryInfo.count;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Resizes the necessary buffers to support the provided number of instances.\n\t * If the provided arguments shrink the number of instances but there are not enough\n\t * unused Ids at the end of the list then an error is thrown.\n\t *\n\t * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n\t*/\n\tsetInstanceCount( maxInstanceCount ) {\n\n\t\t// shrink the available instances as much as possible\n\t\tconst availableInstanceIds = this._availableInstanceIds;\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tavailableInstanceIds.sort( ascIdSort );\n\t\twhile ( availableInstanceIds[ availableInstanceIds.length - 1 ] === instanceInfo.length ) {\n\n\t\t\tinstanceInfo.pop();\n\t\t\tavailableInstanceIds.pop();\n\n\t\t}\n\n\t\t// throw an error if it can't be shrunk to the desired size\n\t\tif ( maxInstanceCount < instanceInfo.length ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Instance ids outside the range ${ maxInstanceCount } are being used. Cannot shrink instance count.` );\n\n\t\t}\n\n\t\t// copy the multi draw counts\n\t\tconst multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tconst multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tcopyArrayContents( this._multiDrawCounts, multiDrawCounts );\n\t\tcopyArrayContents( this._multiDrawStarts, multiDrawStarts );\n\n\t\tthis._multiDrawCounts = multiDrawCounts;\n\t\tthis._multiDrawStarts = multiDrawStarts;\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\n\t\t// update texture data for instance sampling\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst colorsTexture = this._colorsTexture;\n\n\t\tindirectTexture.dispose();\n\t\tthis._initIndirectTexture();\n\t\tcopyArrayContents( indirectTexture.image.data, this._indirectTexture.image.data );\n\n\t\tmatricesTexture.dispose();\n\t\tthis._initMatricesTexture();\n\t\tcopyArrayContents( matricesTexture.image.data, this._matricesTexture.image.data );\n\n\t\tif ( colorsTexture ) {\n\n\t\t\tcolorsTexture.dispose();\n\t\t\tthis._initColorsTexture();\n\t\t\tcopyArrayContents( colorsTexture.image.data, this._colorsTexture.image.data );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n\t * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n\t * end of the geometry attributes then an error is thrown.\n\t *\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n\t * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n\t*/\n\tsetGeometrySize( maxVertexCount, maxIndexCount ) {\n\n\t\t// Check if we can shrink to the requested vertex attribute size\n\t\tconst validRanges = [ ...this._geometryInfo ].filter( info => info.active );\n\t\tconst requiredVertexLength = Math.max( ...validRanges.map( range => range.vertexStart + range.reservedVertexCount ) );\n\t\tif ( requiredVertexLength > maxVertexCount ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Geometry vertex values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t}\n\n\t\t// Check if we can shrink to the requested index attribute size\n\t\tif ( this.geometry.index ) {\n\n\t\t\tconst requiredIndexLength = Math.max( ...validRanges.map( range => range.indexStart + range.reservedIndexCount ) );\n\t\t\tif ( requiredIndexLength > maxIndexCount ) {\n\n\t\t\t\tthrow new Error( `BatchedMesh: Geometry index values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\t// dispose of the previous geometry\n\t\tconst oldGeometry = this.geometry;\n\t\toldGeometry.dispose();\n\n\t\t// recreate the geometry needed based on the previous variant\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\tif ( this._geometryInitialized ) {\n\n\t\t\tthis._geometryInitialized = false;\n\t\t\tthis.geometry = new BufferGeometry();\n\t\t\tthis._initializeGeometry( oldGeometry );\n\n\t\t}\n\n\t\t// copy data from the previous geometry\n\t\tconst geometry = this.geometry;\n\t\tif ( oldGeometry.index ) {\n\n\t\t\tcopyArrayContents( oldGeometry.index.array, geometry.index.array );\n\n\t\t}\n\n\t\tfor ( const key in oldGeometry.attributes ) {\n\n\t\t\tcopyArrayContents( oldGeometry.attributes[ key ].array, geometry.attributes[ key ].array );\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst batchGeometry = this.geometry;\n\n\t\t// iterate over each geometry\n\t\t_mesh.material = this.material;\n\t\t_mesh.geometry.index = batchGeometry.index;\n\t\t_mesh.geometry.attributes = batchGeometry.attributes;\n\t\tif ( _mesh.geometry.boundingBox === null ) {\n\n\t\t\t_mesh.geometry.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\n\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( ! instanceInfo[ i ].visible || ! instanceInfo[ i ].active ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t_mesh.geometry.setDrawRange( geometryInfo.start, geometryInfo.count );\n\n\t\t\t// get the intersects\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\n\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\n\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\n\n\t\t\t// add batch id to the intersects\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\n\n\t\t\t\tconst intersect = _batchIntersects[ j ];\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersect.batchId = i;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_batchIntersects.length = 0;\n\n\t\t}\n\n\t\t_mesh.material = null;\n\t\t_mesh.geometry.index = null;\n\t\t_mesh.geometry.attributes = {};\n\t\t_mesh.geometry.setDrawRange( 0, Infinity );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.geometry = source.geometry.clone();\n\t\tthis.perObjectFrustumCulled = source.perObjectFrustumCulled;\n\t\tthis.sortObjects = source.sortObjects;\n\t\tthis.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n\t\tthis.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n\n\t\tthis._geometryInfo = source._geometryInfo.map( info => ( {\n\t\t\t...info,\n\n\t\t\tboundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n\t\t\tboundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null,\n\t\t} ) );\n\t\tthis._instanceInfo = source._instanceInfo.map( info => ( { ...info } ) );\n\n\t\tthis._availableInstanceIds = source._availableInstanceIds.slice();\n\t\tthis._availableGeometryIds = source._availableGeometryIds.slice();\n\n\t\tthis._nextIndexStart = source._nextIndexStart;\n\t\tthis._nextVertexStart = source._nextVertexStart;\n\t\tthis._geometryCount = source._geometryCount;\n\n\t\tthis._maxInstanceCount = source._maxInstanceCount;\n\t\tthis._maxVertexCount = source._maxVertexCount;\n\t\tthis._maxIndexCount = source._maxIndexCount;\n\n\t\tthis._geometryInitialized = source._geometryInitialized;\n\t\tthis._multiDrawCounts = source._multiDrawCounts.slice();\n\t\tthis._multiDrawStarts = source._multiDrawStarts.slice();\n\n\t\tthis._indirectTexture = source._indirectTexture.clone();\n\t\tthis._indirectTexture.image.data = this._indirectTexture.image.data.slice();\n\n\t\tthis._matricesTexture = source._matricesTexture.clone();\n\t\tthis._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture = source._colorsTexture.clone();\n\t\t\tthis._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Assuming the geometry is not shared with other meshes\n\t\tthis.geometry.dispose();\n\n\t\tthis._matricesTexture.dispose();\n\t\tthis._matricesTexture = null;\n\n\t\tthis._indirectTexture.dispose();\n\t\tthis._indirectTexture = null;\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture.dispose();\n\t\t\tthis._colorsTexture = null;\n\n\t\t}\n\n\t}\n\n\tonBeforeRender( renderer, scene, camera, geometry, material/*, _group*/ ) {\n\n\t\t// if visibility has not changed and frustum culling and object sorting is not required\n\t\t// then skip iterating over all items\n\t\tif ( ! this._visibilityChanged && ! this.perObjectFrustumCulled && ! this.sortObjects ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// the indexed version of the multi draw function requires specifying the start\n\t\t// offset in bytes.\n\t\tconst index = geometry.getIndex();\n\t\tconst bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst multiDrawStarts = this._multiDrawStarts;\n\t\tconst multiDrawCounts = this._multiDrawCounts;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst indirectArray = indirectTexture.image.data;\n\n\t\tconst frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n\t\t// prepare the frustum in the local frame\n\t\tif ( perObjectFrustumCulled && ! camera.isArrayCamera ) {\n\n\t\t\t_matrix$1\n\t\t\t\t.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse )\n\t\t\t\t.multiply( this.matrixWorld );\n\t\t\t_frustum.setFromProjectionMatrix(\n\t\t\t\t_matrix$1,\n\t\t\t\trenderer.coordinateSystem\n\t\t\t);\n\n\t\t}\n\n\t\tlet multiDrawCount = 0;\n\t\tif ( this.sortObjects ) {\n\n\t\t\t// get the camera position in the local frame\n\t\t\t_matrix$1.copy( this.matrixWorld ).invert();\n\t\t\t_vector$5.setFromMatrixPosition( camera.matrixWorld ).applyMatrix4( _matrix$1 );\n\t\t\t_forward.set( 0, 0, -1 ).transformDirection( camera.matrixWorld ).transformDirection( _matrix$1 );\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\tculled = ! frustum.intersectsSphere( _sphere$2, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\t// get the distance from camera used for sorting\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tconst z = _temp.subVectors( _sphere$2.center, _vector$5 ).dot( _forward );\n\t\t\t\t\t\t_renderList.push( geometryInfo.start, geometryInfo.count, z, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Sort the draw ranges and prep for rendering\n\t\t\tconst list = _renderList.list;\n\t\t\tconst customSort = this.customSort;\n\t\t\tif ( customSort === null ) {\n\n\t\t\t\tlist.sort( material.transparent ? sortTransparent : sortOpaque );\n\n\t\t\t} else {\n\n\t\t\t\tcustomSort.call( this, list, camera );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = list.length; i < l; i ++ ) {\n\n\t\t\t\tconst item = list[ i ];\n\t\t\t\tmultiDrawStarts[ multiDrawCount ] = item.start * bytesPerElement;\n\t\t\t\tmultiDrawCounts[ multiDrawCount ] = item.count;\n\t\t\t\tindirectArray[ multiDrawCount ] = item.index;\n\t\t\t\tmultiDrawCount ++;\n\n\t\t\t}\n\n\t\t\t_renderList.reset();\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\t\t\t\tculled = ! frustum.intersectsSphere( _sphere$2, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tmultiDrawStarts[ multiDrawCount ] = geometryInfo.start * bytesPerElement;\n\t\t\t\t\t\tmultiDrawCounts[ multiDrawCount ] = geometryInfo.count;\n\t\t\t\t\t\tindirectArray[ multiDrawCount ] = i;\n\t\t\t\t\t\tmultiDrawCount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tindirectTexture.needsUpdate = true;\n\t\tthis._multiDrawCount = multiDrawCount;\n\t\tthis._visibilityChanged = false;\n\n\t}\n\n\tonBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial/* , group */ ) {\n\n\t\tthis.onBeforeRender( renderer, null, shadowCamera, geometry, depthMaterial );\n\n\t}\n\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */\nclass LineBasicMaterial extends Material {\n\n\t/**\n\t * Constructs a new line basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * Sets the color of the lines using data from a texture. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n\t\t * ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.linewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of line ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('butt'|'round'|'square')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of line joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vStart = /*@__PURE__*/ new Vector3();\nconst _vEnd = /*@__PURE__*/ new Vector3();\n\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nconst _intersectPointOnRay = /*@__PURE__*/ new Vector3();\nconst _intersectPointOnSegment = /*@__PURE__*/ new Vector3();\n\n/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */\nclass Line extends Object3D {\n\n\t/**\n\t * Constructs a new line.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\t/**\n\t\t * The line geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default LineBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Line} A reference to this line.\n\t */\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_vStart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_vEnd.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _vStart.distanceTo( _vEnd );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst a = index.getX( end - 1 );\n\t\t\t\tconst b = index.getX( start );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, i, i + 1, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, raycaster, ray, thresholdSq, a, b, i ) {\n\n\tconst positionAttribute = object.geometry.attributes.position;\n\n\t_vStart.fromBufferAttribute( positionAttribute, a );\n\t_vEnd.fromBufferAttribute( positionAttribute, b );\n\n\tconst distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );\n\n\tif ( distSq > thresholdSq ) return;\n\n\t_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\treturn {\n\n\t\tdistance: distance,\n\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t// point: raycaster.ray.at( distance ),\n\t\tpoint: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),\n\t\tindex: i,\n\t\tface: null,\n\t\tfaceIndex: null,\n\t\tbarycoord: null,\n\t\tobject: object\n\n\t};\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n\n\t/**\n\t * Constructs a new line segments.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */\nclass LineLoop extends Line {\n\n\t/**\n\t * Constructs a new line loop.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\n/**\n * A material for rendering point primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const vertices = [];\n *\n * for ( let i = 0; i < 10000; i ++ ) {\n * \tconst x = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst y = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst z = THREE.MathUtils.randFloatSpread( 2000 );\n *\n * \tvertices.push( x, y, z );\n * }\n *\n * const geometry = new THREE.BufferGeometry();\n * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n * const material = new THREE.PointsMaterial( { color: 0x888888 } );\n * const points = new THREE.Points( geometry, material );\n * scene.add( points );\n * ```\n *\n * @augments Material\n */\nclass PointsMaterial extends Material {\n\n\t/**\n\t * Constructs a new points material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Defines the size of the points in pixels.\n\t\t *\n\t\t * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = 1;\n\n\t\t/**\n\t\t * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sizeAttenuation = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\n/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */\nclass Points extends Object3D {\n\n\t/**\n\t * Constructs a new point cloud.\n\t *\n\t * @param {BufferGeometry} [geometry] - The points geometry.\n\t * @param {Material|Array<Material>} [material] - The points material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\t/**\n\t\t * The points geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default PointsMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this point cloud.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tfaceIndex: null,\n\t\t\tbarycoord: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * A texture for use with a video.\n *\n * ```js\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById( 'video' );\n * const texture = new THREE.VideoTexture( video );\n * ```\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments Texture\n */\nclass VideoTexture extends Texture {\n\n\t/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( video, mapping, wrapS, wrapT, magFilter = LinearFilter, minFilter = LinearFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVideoTexture = true;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\t/**\n\t * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}\n\t * to `true` every time a new frame is available.\n\t *\n\t * Only relevant if `requestVideoFrameCallback` is not supported in the browser.\n\t */\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used as an alternative way to define video data. Instead of using\n * an instance of `HTMLVideoElement` like with `VideoTexture`, `VideoFrameTexture` expects each frame is\n * defined manually via {@link VideoFrameTexture#setFrame}. A typical use case for this module is when\n * video frames are decoded with the WebCodecs API.\n *\n * ```js\n * const texture = new THREE.VideoFrameTexture();\n * texture.setFrame( frame );\n * ```\n *\n * @augments VideoTexture\n */\nclass VideoFrameTexture extends VideoTexture {\n\n\t/**\n\t * Constructs a new video frame texture.\n\t *\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( {}, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVideoFrameTexture = true;\n\n\t}\n\n\t/**\n\t * This method overwritten with an empty implementation since\n\t * this type of texture is updated via `setFrame()`.\n\t */\n\tupdate() {}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this ); // restoring Texture.clone()\n\n\t}\n\n\t/**\n\t * Sets the current frame of the video. This will automatically update the texture\n\t * so the data can be used for rendering.\n\t *\n\t * @param {VideoFrame} frame - The video frame.\n\t */\n\tsetFrame( frame ) {\n\n\t\tthis.image = frame;\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\n * as a texture for further usage.\n *\n * ```js\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( frameTexture, vector );\n * ```\n *\n * @augments Texture\n */\nclass FramebufferTexture extends Texture {\n\n\t/**\n\t * Constructs a new framebuffer texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t */\n\tconstructor( width, height ) {\n\n\t\tsuper( { width, height } );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFramebufferTexture = true;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Creates a texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments Texture\n */\nclass CompressedTexture extends Texture {\n\n\t/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedTexture = true;\n\n\t\t/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height };\n\n\t\t/**\n\t\t * This array holds for all mipmaps (including the bases mip) the data and dimensions.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mipmaps = mipmaps;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not possible to\n\t\t * flip compressed textures.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not\n\t\t * possible to generate mipmaps for compressed data. Mipmaps\n\t\t * must be embedded in the compressed texture file.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\n/**\n * Creates a texture 2D array based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedArrayTexture extends CompressedTexture {\n\n\t/**\n\t * Constructs a new compressed array texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} depth - The depth of the texture.\n\t * @param {number} [format=RGBAFormat] - The min filter value.\n\t * @param {number} [type=UnsignedByteType] - The min filter value.\n\t */\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedArrayTexture = true;\n\n\t\t/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @name CompressedArrayTexture#image\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image.depth = depth;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire compressed texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedCubeTexture extends CompressedTexture {\n\n\t/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<CompressedTexture>} images - An array of compressed textures.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t */\n\tconstructor( images, format, type ) {\n\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedCubeTexture = true;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.image = images;\n\n\t}\n\n}\n\n/**\n * Creates a texture from a canvas element.\n *\n * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}\n * to `true` immediately since a canvas can directly be used for rendering.\n *\n * @augments Texture\n */\nclass CanvasTexture extends Texture {\n\n\t/**\n\t * Constructs a new texture.\n\t *\n\t * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */\nclass DepthTexture extends Texture {\n\n\t/**\n\t * Constructs a new depth texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [type=UnsignedIntType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {number} [format=DepthFormat] - The texture format.\n\t */\n\tconstructor( width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat ) {\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDepthTexture = true;\n\n\t\t/**\n\t\t * The image property of a depth texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height };\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.source = new Source( Object.assign( {}, source.image ) ); // see #30540\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Creates an array of depth textures.\n *\n * @augments DepthTexture\n */\nclass DepthArrayTexture extends DepthTexture {\n\n\t/**\n\t * Constructs a new depth array texture.\n\t *\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDepthArrayTexture = true;\n\n\t\t/**\n\t\t * The image definition of a depth texture.\n\t\t *\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height, depth: depth };\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */\n\t\tthis.compareFunction = null;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire slice is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a capsule.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CapsuleGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new capsule geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the capsule.\n\t * @param {number} [height=1] - Height of the middle section.\n\t * @param {number} [capSegments=4] - Number of curve segments used to build each cap.\n\t * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.\n\t */\n\tconstructor( radius = 1, height = 1, capSegments = 4, radialSegments = 8, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t};\n\n\t\theight = Math.max( 0, height );\n\t\tcapSegments = Math.max( 1, Math.floor( capSegments ) );\n\t\tradialSegments = Math.max( 3, Math.floor( radialSegments ) );\n\t\theightSegments = Math.max( 1, Math.floor( heightSegments ) );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst halfHeight = height / 2;\n\t\tconst capArcLength = ( Math.PI / 2 ) * radius;\n\t\tconst cylinderPartLength = height;\n\t\tconst totalArcLength = 2 * capArcLength + cylinderPartLength;\n\n\t\tconst numVerticalSegments = capSegments * 2 + heightSegments;\n\t\tconst verticesPerRow = radialSegments + 1;\n\n\t\tconst normal = new Vector3();\n\t\tconst vertex = new Vector3();\n\n\t\t// generate vertices, normals, and uvs\n\n\t\tfor ( let iy = 0; iy <= numVerticalSegments; iy ++ ) {\n\n\t\t\tlet currentArcLength = 0;\n\t\t\tlet profileY = 0;\n\t\t\tlet profileRadius = 0;\n\t\t\tlet normalYComponent = 0;\n\n\t\t\tif ( iy <= capSegments ) {\n\n\t\t\t\t// bottom cap\n\t\t\t\tconst segmentProgress = iy / capSegments;\n\t\t\t\tconst angle = ( segmentProgress * Math.PI ) / 2;\n\t\t\t\tprofileY = - halfHeight - radius * Math.cos( angle );\n\t\t\t\tprofileRadius = radius * Math.sin( angle );\n\t\t\t\tnormalYComponent = - radius * Math.cos( angle );\n\t\t\t\tcurrentArcLength = segmentProgress * capArcLength;\n\n\t\t\t} else if ( iy <= capSegments + heightSegments ) {\n\n\t\t\t\t// middle section\n\t\t\t\tconst segmentProgress = ( iy - capSegments ) / heightSegments;\n\t\t\t\tprofileY = - halfHeight + segmentProgress * height;\n\t\t\t\tprofileRadius = radius;\n\t\t\t\tnormalYComponent = 0;\n\t\t\t\tcurrentArcLength = capArcLength + segmentProgress * cylinderPartLength;\n\n\t\t\t} else {\n\n\t\t\t\t// top cap\n\t\t\t\tconst segmentProgress =\n\t\t\t\t\t( iy - capSegments - heightSegments ) / capSegments;\n\t\t\t\tconst angle = ( segmentProgress * Math.PI ) / 2;\n\t\t\t\tprofileY = halfHeight + radius * Math.sin( angle );\n\t\t\t\tprofileRadius = radius * Math.cos( angle );\n\t\t\t\tnormalYComponent = radius * Math.sin( angle );\n\t\t\t\tcurrentArcLength =\n\t\t\t\t\tcapArcLength + cylinderPartLength + segmentProgress * capArcLength;\n\n\t\t\t}\n\n\t\t\tconst v = Math.max( 0, Math.min( 1, currentArcLength / totalArcLength ) );\n\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / radialSegments;\n\n\t\t\t} else if ( iy === numVerticalSegments ) {\n\n\t\t\t\tuOffset = -0.5 / radialSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= radialSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / radialSegments;\n\t\t\t\tconst theta = u * Math.PI * 2;\n\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - profileRadius * cosTheta;\n\t\t\t\tvertex.y = profileY;\n\t\t\t\tvertex.z = profileRadius * sinTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set(\n\t\t\t\t\t- profileRadius * cosTheta,\n\t\t\t\t\tnormalYComponent,\n\t\t\t\t\tprofileRadius * sinTheta\n\t\t\t\t);\n\t\t\t\tnormal.normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, v );\n\n\t\t\t}\n\n\t\t\tif ( iy > 0 ) {\n\n\t\t\t\tconst prevIndexRow = ( iy - 1 ) * verticesPerRow;\n\t\t\t\tfor ( let ix = 0; ix < radialSegments; ix ++ ) {\n\n\t\t\t\t\tconst i1 = prevIndexRow + ix;\n\t\t\t\t\tconst i2 = prevIndexRow + ix + 1;\n\t\t\t\t\tconst i3 = iy * verticesPerRow + ix;\n\t\t\t\t\tconst i4 = iy * verticesPerRow + ix + 1;\n\n\t\t\t\t\tindices.push( i1, i2, i3 );\n\t\t\t\t\tindices.push( i2, i4, i3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CapsuleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.height, data.capSegments, data.radialSegments, data.heightSegments );\n\n\t}\n\n}\n\n/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */\nclass CircleGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new circle geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the circle.\n\t * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n\t * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n\t * of the circular sector in radians. The default value results in a complete circle.\n\t */\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CircleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CylinderGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new cylinder geometry.\n\t *\n\t * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n\t * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n\t * @param {number} [height=1] - Height of the cylinder.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cylinder.\n\t */\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( radiusTop > 0 || y !== 0 ) {\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( radiusBottom > 0 || y !== heightSegments - 1 ) {\n\n\t\t\t\t\t\tindices.push( b, c, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : -1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CylinderGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n\n\t/**\n\t * Constructs a new cone geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the cone base.\n\t * @param {number} [height=1] - Height of the cone.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cone.\n\t */\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {ConeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */\nclass PolyhedronGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new polyhedron geometry.\n\t *\n\t * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n\t * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n\t * @param {number} [radius=1] - The radius of the shape.\n\t * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n\t */\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PolyhedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new dodecahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the dodecahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t-1, -1, -1,\t-1, -1, 1,\n\t\t\t-1, 1, -1, -1, 1, 1,\n\t\t\t1, -1, -1, 1, -1, 1,\n\t\t\t1, 1, -1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {DodecahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\n/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass EdgesGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new edges geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n\t * between the face normals of the adjoining faces exceeds this value.\n\t */\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */\nclass Curve {\n\n\t/**\n\t * Constructs a new curve.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Curve';\n\n\t\t/**\n\t\t * This value determines the amount of divisions when calculating the\n\t\t * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n\t\t * precision when using methods like {@link Curve#getSpacedPoints}, it is\n\t\t * recommended to increase the value of this property if the curve is very large.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 200\n\t\t */\n\t\tthis.arcLengthDivisions = 200;\n\n\t\t/**\n\t\t * Must be set to `true` if the curve parameters have changed.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\t/**\n\t\t * An internal cache that holds precomputed curve length values.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<number>}\n\t\t * @default null\n\t\t */\n\t\tthis.cacheArcLengths = null;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor.\n\t *\n\t * @abstract\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n\t * of the curve which equidistant samples.\n\t *\n\t * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n\t * the curve shape.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n\t * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n\t * curve.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t/**\n\t * Returns the total arc length of the curve.\n\t *\n\t * @return {number} The length of the curve.\n\t */\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t/**\n\t * Returns an array of cumulative segment lengths of the curve.\n\t *\n\t * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n\t * @return {Array<number>} An array holding the cumulative segment lengths.\n\t */\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\t/**\n\t * Update the cumulative segment distance cache. The method must be called\n\t * every time curve parameters are changed. If an updated curve is part of a\n\t * composed curve like {@link CurvePath}, this method must be called on the\n\t * composed curve, too.\n\t */\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t/**\n\t * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n\t * interpolation factor in the same range that can be ued to sample equidistant points\n\t * from a curve.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {?number} distance - An optional distance on the curve.\n\t * @return {number} The updated interpolation factor.\n\t */\n\tgetUtoTmapping( u, distance = null ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns a unit vector tangent for the given interpolation factor.\n\t * If the derived curve does not implement its tangent derivation,\n\t * two points a small delta apart will be used to find its gradient\n\t * which seems to give a reasonable approximation.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t */\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\t/**\n\t * Same as {@link Curve#getTangent} but with equidistant samples.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t * @see {@link Curve#getPointAt}\n\t */\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n\t * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n\t *\n\t * @param {number} segments - The number of segments.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n\t */\n\tcomputeFrenetFrames( segments, closed = false ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), -1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns a new curve with copied values from this instance.\n\t *\n\t * @return {Curve} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given curve to this instance.\n\t *\n\t * @param {Curve} source - The curve to copy.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the curve into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized curve.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Deserializes the curve from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized curve.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass EllipseCurve extends Curve {\n\n\t/**\n\t * Constructs a new ellipse curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t */\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\t/**\n\t\t * The X center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aX = aX;\n\n\t\t/**\n\t\t * The Y center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aY = aY;\n\n\t\t/**\n\t\t * The radius of the ellipse in the x direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.xRadius = xRadius;\n\n\t\t/**\n\t\t * The radius of the ellipse in the y direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.yRadius = yRadius;\n\n\t\t/**\n\t\t * The start angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aStartAngle = aStartAngle;\n\n\t\t/**\n\t\t * The end angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI*2\n\t\t */\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\t/**\n\t\t * Whether the ellipse is drawn clockwise or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.aClockwise = aClockwise;\n\n\t\t/**\n\t\t * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */\nclass ArcCurve extends EllipseCurve {\n\n\t/**\n\t * Constructs a new arc curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t */\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nfunction CubicPoly() {\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t* cusps and self-intersections in non-uniform catmull rom curves.\n\t* http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t*\n\t* curve.type accepts centripetal(default), chordal and catmullrom\n\t* curve.tension is used for catmullrom which defaults to 0.5\n\t*/\n\n\t/*\n\tBased on an optimized c++ solution in\n\t- http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t- http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Catmull-Rom curve.\n\t *\n\t * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n\t * @param {number} [tension=0.5] - Tension of the curve.\n\t */\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\t/**\n\t\t * An array of 3D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.points = points;\n\n\t\t/**\n\t\t * Whether the curve is closed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.closed = closed;\n\n\t\t/**\n\t\t * The curve type.\n\t\t *\n\t\t * @type {('centripetal'|'chordal'|'catmullrom')}\n\t\t * @default 'centripetal'\n\t\t */\n\t\tthis.curveType = curveType;\n\n\t\t/**\n\t\t * Tension of the curve.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.tension = tension;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\n/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CubicBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The first control point.\n\t * @param {Vector2} [v2] - The second control point.\n\t * @param {Vector2} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */\nclass CubicBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The first control point.\n\t * @param {Vector3} [v2] - The second control point.\n\t * @param {Vector3} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */\nclass LineCurve extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector2} [v1] - The start point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */\nclass LineCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector3} [v1] - The start point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The control point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The control point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n\n\t/**\n\t * Constructs a new 2D spline curve.\n\t *\n\t * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\t/**\n\t\t * An array of 2D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector2>}\n\t\t */\n\t\tthis.points = points;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */\nclass CurvePath extends Curve {\n\n\t/**\n\t * Constructs a new curve path.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\t/**\n\t\t * An array of curves defining the\n\t\t * path.\n\t\t *\n\t\t * @type {Array<Curve>}\n\t\t */\n\t\tthis.curves = [];\n\n\t\t/**\n\t\t * Whether the path should automatically be closed\n\t\t * by a line curve.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoClose = false;\n\n\t}\n\n\t/**\n\t * Adds a curve to this curve path.\n\t *\n\t * @param {Curve} curve - The curve to add.\n\t */\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\t/**\n\t * Adds a line curve to close the path.\n\t *\n\t * @return {CurvePath} A reference to this curve path.\n\t */\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tconst lineType = ( startPoint.isVector2 === true ) ? 'LineCurve' : 'LineCurve3';\n\t\t\tthis.curves.push( new Curves[ lineType ]( endPoint, startPoint ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n\t * for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( t, optionalTarget ) {\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\tgetLength() {\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\t// cacheLengths must be recalculated.\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t/**\n\t * Returns list of cumulative curve lengths of the defined curves.\n\t *\n\t * @return {Array<number>} The curve lengths.\n\t */\n\tgetCurveLengths() {\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */\nclass Path extends CurvePath {\n\n\t/**\n\t * Constructs a new path.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\t/**\n\t\t * The current offset of the path. Any new curve added will start here.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates a path from the given list of points. The points are added\n\t * to the path as instances of {@link LineCurve}.\n\t *\n\t * @param {Array<Vector2>} points - An array of 2D points.\n\t * @return {Path} A reference to this path.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Moves {@link Path#currentPoint} to the given point.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {Path} A reference to this path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {Path} A reference to this path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc.\n\t * @param {number} aY - The y coordinate of the center of the arc.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point\n\t *\n\t * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n\t * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n\n\t/**\n\t * Constructs a new shape.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\t/**\n\t\t * The UUID of the shape.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\t/**\n\t\t * Defines the holes in the shape. Hole definitions must use the\n\t\t * opposite winding order (CW/CCW) than the outer shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @readonly\n\t\t */\n\t\tthis.holes = [];\n\n\t}\n\n\t/**\n\t * Returns an array representing each contour of the holes\n\t * as a list of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n\t */\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t/**\n\t * Returns an object that holds contour data for the shape and its holes as\n\t * arrays of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n\t */\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* eslint-disable */\n// copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\n\nfunction earcut(data, holeIndices, dim = 2) {\n\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    let outerNode = linkedList(data, 0, outerLen, dim, true);\n    const triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    let minX, minY, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = Infinity;\n        minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = dim; i < outerLen; i += dim) {\n            const x = data[i];\n            const y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    let last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    } else {\n        for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    let p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    let stop = ear;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        const prev = ear.prev;\n        const next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    let p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    // z-order range for the current triangle bbox;\n    const minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    let p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n    let p = start;\n    do {\n        const a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i, p.i, b.i);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n    do {\n        let b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                let c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    const queue = [];\n\n    for (let i = 0, len = holeIndices.length; i < len; i++) {\n        const start = holeIndices[i] * dim;\n        const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        const list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareXYSlope);\n\n    // process holes from left to right\n    for (let i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareXYSlope(a, b) {\n    let result = a.x - b.x;\n    // when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n    // the bridge to the outer shell is always the point that they meet at.\n    if (result === 0) {\n        result = a.y - b.y;\n        if (result === 0) {\n            const aSlope = (a.next.y - a.y) / (a.next.x - a.x);\n            const bSlope = (b.next.y - b.y) / (b.next.x - b.x);\n            result = aSlope - bSlope;\n        }\n    }\n    return result;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    const bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    const bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity;\n    let m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    // unless they intersect at a vertex, then choose the vertex\n    if (equals(hole, p)) return p;\n    do {\n        if (equals(hole, p.next)) return p.next;\n        else if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    const stop = m;\n    const mx = m.x;\n    const my = m.y;\n    let tanMin = Infinity;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    let p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    let numMerges;\n    let inSize = 1;\n\n    do {\n        let p = list;\n        let e;\n        list = null;\n        let tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            let q = p;\n            let pSize = 0;\n            for (let i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            let qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    let p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {\n    return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    let p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    let p = a;\n    let inside = false;\n    const px = (a.x + b.x) / 2;\n    const py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    const a2 = createNode(a.i, a.x, a.y),\n        b2 = createNode(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    const p = createNode(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction createNode(i, x, y) {\n    return {\n        i, // vertex index in coordinates array\n        x, y, // vertex coordinates\n        prev: null, // previous and next vertex nodes in a polygon ring\n        next: null,\n        z: 0, // z-order curve value\n        prevZ: null, // previous and next nodes in z-order\n        nextZ: null,\n        steiner: false // indicates whether this is a steiner point\n    };\n}\n\nfunction signedArea(data, start, end, dim) {\n    let sum = 0;\n    for (let i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\nclass Earcut {\n\n\t/**\n\t * Triangulates the given shape definition by returning an array of triangles.\n\t *\n\t * @param {Array<number>} data - An array with 2D points.\n\t * @param {Array<number>} holeIndices - An array with indices defining holes.\n\t * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n\t * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n\t * representing vertex indices.\n\t */\n\tstatic triangulate( data, holeIndices, dim = 2 ) {\n\n\t\treturn earcut( data, holeIndices, dim );\n\n\t}\n\n}\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n\n\t/**\n\t * Calculate area of a ( 2D ) contour polygon.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points.\n\t * @return {number} The area.\n\t */\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given contour uses a clockwise winding order.\n\t *\n\t * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n\t * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n\t */\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\t/**\n\t * Triangulates the given shape definition.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n\t * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n\t * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n\t */\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ExtrudeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new extrude geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {ExtrudeGeometry~Options} [options] - The extrude settings.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( -0.5, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/**Merges index-adjacent points that are within a threshold distance of each other. Array is modified in-place. Threshold distance is empirical, and scaled based on the magnitude of point coordinates.\n\t\t\t * @param {Array<Vector2>} points\n\t\t\t*/\n\t\t\tfunction mergeOverlappingPoints( points ) {\n\n\t\t\t\tconst THRESHOLD = 1e-10;\n\t\t\t\tconst THRESHOLD_SQ = THRESHOLD * THRESHOLD;\n\t\t\t\tlet prevPos = points[ 0 ];\n\t\t\t\tfor ( let i = 1; i <= points.length; i ++ ) {\n\n\t\t\t\t\tconst currentIndex = i % points.length;\n\t\t\t\t\tconst currentPos = points[ currentIndex ];\n\t\t\t\t\tconst dx = currentPos.x - prevPos.x;\n\t\t\t\t\tconst dy = currentPos.y - prevPos.y;\n\t\t\t\t\tconst distSq = dx * dx + dy * dy;\n\n\t\t\t\t\tconst scalingFactorSqrt = Math.max(\n\t\t\t\t\t\tMath.abs( currentPos.x ),\n\t\t\t\t\t\tMath.abs( currentPos.y ),\n\t\t\t\t\t\tMath.abs( prevPos.x ),\n\t\t\t\t\t\tMath.abs( prevPos.y )\n\t\t\t\t\t);\n\t\t\t\t\tconst thresholdSqScaled = THRESHOLD_SQ * scalingFactorSqrt * scalingFactorSqrt;\n\t\t\t\t\tif ( distSq <= thresholdSqScaled ) {\n\n\t\t\t\t\t\tpoints.splice( currentIndex, 1 );\n\t\t\t\t\t\ti --;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tprevPos = currentPos;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmergeOverlappingPoints( vertices );\n\t\t\tholes.forEach( mergeOverlappingPoints );\n\n\t\t\tconst numHoles = holes.length;\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0; h < numHoles; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = numHoles; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\t\t\tlet faces;\n\n\t\t\tif ( bevelSegments === 0 ) {\n\n\t\t\t\tfaces = ShapeUtils.triangulateShape( contour, holes );\n\n\t\t\t} else {\n\n\t\t\t\tconst contractedContourVertices = [];\n\t\t\t\tconst expandedHoleVertices = [];\n\n\t\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t\t// contract shape\n\n\t\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\t\t\t\t\t\tif ( t === 0 ) contractedContourVertices.push( vert );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// expand holes\n\n\t\t\t\t\tfor ( let h = 0, hl = numHoles; h < hl; h ++ ) {\n\n\t\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\t\t\t\t\tconst oneHoleVertices = [];\n\t\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\t\t\t\t\t\t\tif ( t === 0 ) oneHoleVertices.push( vert );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( t === 0 ) expandedHoleVertices.push( oneHoleVertices );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfaces = ShapeUtils.triangulateShape( contractedContourVertices, expandedHoleVertices );\n\n\t\t\t}\n\n\t\t\tconst flen = faces.length;\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ExtrudeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\n/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new icosahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the icosahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t-1, t, 0, \t1, t, 0, \t-1, - t, 0, \t1, - t, 0,\n\t\t\t0, -1, t, \t0, 1, t,\t0, -1, - t, \t0, 1, - t,\n\t\t\tt, 0, -1, \tt, 0, 1, \t- t, 0, -1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {IcosahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */\nclass LatheGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new lathe geometry.\n\t *\n\t * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point\n\t * must be greater than zero.\n\t * @param {number} [segments=12] - The number of circumference segments to generate.\n\t * @param {number} [phiStart=0] - The starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n\t * closed lathe, less than 2PI is a portion.\n\t */\n\tconstructor( points = [ new Vector2( 0, -0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {LatheGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new octahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the octahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t-1, 0, 0,\t0, 1, 0,\n\t\t\t0, -1, 0, \t0, 0, 1,\t0, 0, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {OctahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */\nclass PlaneGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new plane geometry.\n\t *\n\t * @param {number} [width=1] - The width along the X axis.\n\t * @param {number} [height=1] - The height along the Y axis\n\t * @param {number} [widthSegments=1] - The number of segments along the X axis.\n\t * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n\t */\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PlaneGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new ring geometry.\n\t *\n\t * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n\t * @param {number} [outerRadius=1] - The outer radius of the ring.\n\t * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n\t * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n\t * @param {number} [thetaStart=0] - Starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {RingGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new shape geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {number} [curveSegments=12] - Number of segments per shape.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ShapeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */\nclass SphereGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new sphere geometry.\n\t *\n\t * @param {number} [radius=1] - The sphere radius.\n\t * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n\t * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n\t * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n\t * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n\t */\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = -0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {SphereGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new tetrahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the tetrahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t-1, -1, 1, \t-1, 1, -1, \t1, -1, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TetrahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n\t * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n\t * @param {number} [radialSegments=12] - The number of radial segments.\n\t * @param {number} [tubularSegments=48] - The number of tubular segments.\n\t * @param {number} [arc=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusKnotGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus knot geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus knot.\n\t * @param {number} [tube=0.4] - Radius of the tube.\n\t * @param {number} [tubularSegments=64] - The number of tubular segments.\n\t * @param {number} [radialSegments=8] - The number of radial segments.\n\t * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n\t * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n\t */\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusKnotGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\n/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TubeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new tube geometry.\n\t *\n\t * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n\t * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n\t * @param {number} [radius=1] -The radius of the tube.\n\t * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n\t * @param {boolean} [closed=false] - Whether the tube is closed or not.\n\t */\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( -1, -1, 0 ), new Vector3( -1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TubeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\n/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass WireframeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new wireframe geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t */\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\n/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */\nclass ShadowMaterial extends Material {\n\n\t/**\n\t * Constructs a new shadow material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.color = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Overwritten since shadow materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */\nclass RawShaderMaterial extends ShaderMaterial {\n\n\t/**\n\t * Constructs a new raw shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\n/**\n * A standard physically based material, using Metallic-Roughness workflow.\n *\n * Physically based rendering (PBR) has recently become the standard in many\n * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},\n * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and\n * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.\n *\n * This approach differs from older approaches in that instead of using\n * approximations for the way in which light interacts with a surface, a\n * physically correct model is used. The idea is that, instead of tweaking\n * materials to look good under specific lighting, a material can be created\n * that will react 'correctly' under all lighting scenarios.\n *\n * In practice this gives a more accurate and realistic looking result than\n * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of\n * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment\n * shading.\n *\n * Note that for best results you should always specify an environment map when using this material.\n *\n * For a non-technical introduction to the concept of PBR and how to set up a\n * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:\n *\n * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}\n * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}\n *\n * Technical details of the approach used in three.js (and most other PBR systems) can be found is this\n * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}\n * (pdf), by Brent Burley.\n *\n * @augments Material\n */\nclass MeshStandardMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh standard material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * How rough the material appears. `0.0` means a smooth mirror reflection, `1.0`\n\t\t * means fully diffuse. If `roughnessMap` is also provided,\n\t\t * both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.roughness = 1.0;\n\n\t\t/**\n\t\t * How much the material is like a metal. Non-metallic materials such as wood\n\t\t * or stone use `0.0`, metallic use `1.0`, with nothing (usually) in between.\n\t\t * A value between `0.0` and `1.0` could be used for a rusty metal look.\n\t\t * If `metalnessMap` is also provided, both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.metalness = 0.0;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The green channel of this texture is used to alter the roughness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.roughnessMap = null;\n\n\t\t/**\n\t\t * The blue channel of this texture is used to alter the metalness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.metalnessMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map. To ensure a physically correct rendering, environment maps\n\t\t * are internally pre-processed with {@link PMREMGenerator}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * Scales the effect of the environment map by multiplying its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.envMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\t/**\n\t * Constructs a new mesh physical material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\t/**\n\t\t * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n\t\t * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n\t\t * property provides additional rotation to the vectors in the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.anisotropyRotation = 0;\n\n\t\t/**\n\t\t * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n\t\t * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n\t\t * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.anisotropyMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `clearcoat`,\n\t\t * for per-pixel control over a coating's intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatMap = null;\n\n\t\t/**\n\t\t * Roughness of the clear coat layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\t/**\n\t\t * The green channel of this texture is multiplied against\n\t\t * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRoughnessMap = null;\n\n\t\t/**\n\t\t * How much `clearcoatNormalMap` affects the clear coat layer, from\n\t\t * `(0,0)` to `(1,1)`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * Can be used to enable independent normals for the clear coat layer.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNormalMap = null;\n\n\t\t/**\n\t\t * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.5\n\t\t */\n\t\tthis.ior = 1.5;\n\n\t\t/**\n\t\t * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n\t\t * corresponds to an index-of-refraction of `1.5`.\n\t\t *\n\t\t * This models the reflectivity of non-metallic materials. It has no effect\n\t\t * when `metalness` is `1.0`\n\t\t *\n\t\t * @name MeshPhysicalMaterial#reflectivity\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n\t\t * control over iridescence.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceMap = null;\n\n\t\t/**\n\t\t * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n\t\t * Between `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.3\n\t\t */\n\t\tthis.iridescenceIOR = 1.3;\n\n\t\t/**\n\t\t *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n\t\t Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n\t\t *\n\t\t * @type {Array<number,number>}\n\t\t * @default [100,400]\n\t\t */\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t/**\n\t\t * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n\t\t * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n\t\t * - `0.0` in the green channel will result in thickness equal to first element of the array.\n\t\t * - `1.0` in the green channel will result in thickness equal to second element of the array.\n\t\t * - Values in-between will linearly interpolate between the elements of the array.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\t/**\n\t\t * The sheen tint.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.sheenColor = new Color( 0x000000 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n\t\t * over sheen tint.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenColorMap = null;\n\n\t\t/**\n\t\t * Roughness of the sheen layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.sheenRoughness = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n\t\t * over sheen roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenRoughnessMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n\t\t * optical transparency.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.transmissionMap = null;\n\n\t\t/**\n\t\t * The thickness of the volume beneath the surface. The value is given in the\n\t\t * coordinate space of the mesh. If the value is `0` the material is\n\t\t * thin-walled. Otherwise the material is a volume boundary.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.thickness = 0;\n\n\t\t/**\n\t\t * A texture that defines the thickness, stored in the green channel. This will\n\t\t * be multiplied by `thickness`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessMap = null;\n\n\t\t/**\n\t\t * Density of the medium given as the average distance that light travels in\n\t\t * the medium before interacting with a particle. The value is given in world\n\t\t * space units, and must be greater than zero.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.attenuationDistance = Infinity;\n\n\t\t/**\n\t\t * The color that white light turns into due to absorption when reaching the\n\t\t * attenuation distance.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * A float that scales the amount of specular reflection for non-metals only.\n\t\t * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.specularIntensity = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `specularIntensity`,\n\t\t * for per-pixel control over specular intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularIntensityMap = null;\n\n\t\t/**\n\t\t * Tints the specular reflection at normal incidence for non-metals only.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against `specularColor`,\n\t\t * for per-pixel control over specular color.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._dispersion = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * The anisotropy strength.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\t/**\n\t * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n\t * clear coat related properties to enable multilayer materials that have a\n\t * thin translucent layer over the base layer.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\t/**\n\t * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n\t * the surface and the viewer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\t/**\n\t * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n\t * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n\t * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget dispersion() {\n\n\t\treturn this._dispersion;\n\n\t}\n\n\tset dispersion( value ) {\n\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._dispersion = value;\n\n\t}\n\n\t/**\n\t * The intensity of the sheen layer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\t/**\n\t * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n\t *\n\t * Thin, transparent or semitransparent, plastic or glass materials remain\n\t * largely reflective even if they are fully transmissive. The transmission\n\t * property can be used to model these materials.\n\t *\n\t * When transmission is non-zero, `opacity` should be  set to `1`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.dispersion = source.dispersion;\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for shiny surfaces with specular highlights.\n *\n * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}\n * model for calculating reflectance. Unlike the Lambertian model used in the\n * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular\n * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.\n *\n * Performance will generally be greater when using this material over the\n * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of\n * some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshPhongMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh phong material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * Specular color of the material. The default color is set to `0x111111` (very dark grey)\n\t\t *\n\t\t * This defines how shiny the material is and the color of its shine.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.specular = new Color( 0x111111 );\n\n\t\t/**\n\t\t * How shiny the specular highlight is; a higher value gives a sharper highlight.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 30\n\t\t */\n\t\tthis.shininess = 30;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The specular map value affects both how much the specular surface\n\t\t * highlight contributes and how much of the environment map affects the\n\t\t * surface.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material implementing toon shading.\n *\n * @augments Material\n */\nclass MeshToonMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh toon material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * Gradient map for toon shading. It's required to set\n\t\t * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}\n\t\t * when using this type of texture.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.gradientMap = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material that maps the normal vectors to RGB colors.\n *\n * @augments Material\n */\nclass MeshNormalMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh normal material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for non-shiny surfaces, without specular highlights.\n *\n * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}\n * model for calculating reflectance. This can simulate some surfaces (such\n * as untreated wood or stone) well, but cannot simulate shiny surfaces with\n * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment\n * shading.\n *\n * Due to the simplicity of the reflectance and illumination models,\n * performance will be greater when using this material over the\n * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or\n * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshLambertMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh lambert material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for drawing geometry by depth. Depth is based off of the camera\n * near and far plane. White is nearest, black is farthest.\n *\n * @augments Material\n */\nclass MeshDepthMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh depth material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\t/**\n\t\t * Type for depth packing.\n\t\t *\n\t\t * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}\n\t\t * @default BasicDepthPacking\n\t\t */\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material used internally for implementing shadow mapping with\n * point lights.\n *\n * Can also be used to customize the shadow casting of an object by assigning\n * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.\n * The following examples demonstrates this approach in order to ensure\n * transparent parts of objects do no cast shadows.\n *\n * @augments Material\n */\nclass MeshDistanceMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh distance material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the\n * material color and shading.\n *\n * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes\n * baked lighting. It will cast a shadow onto an object that receives shadows\n * (and shadow clipping works), but it will not self-shadow or receive\n * shadows.\n *\n * @augments Material\n */\nclass MeshMatcapMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh matcap material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * The matcap map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.matcap = null;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineDashedMaterial( {\n * \tcolor: 0xffffff,\n * \tscale: 1,\n * \tdashSize: 3,\n * \tgapSize: 1,\n * } );\n * ```\n *\n * @augments LineBasicMaterial\n */\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\t/**\n\t * Constructs a new line dashed material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineDashedMaterial = true;\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\t/**\n\t\t * The scale of the dashed part of a line.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t * The size of the dash. This is both the gap with the stroke.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 3\n\t\t */\n\t\tthis.dashSize = 3;\n\n\t\t/**\n\t\t * The size of the gap.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Converts an array to a specific type.\n *\n * @param {TypedArray|Array} array - The array to convert.\n * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.\n * @return {TypedArray} The converted array.\n */\nfunction convertArray( array, type ) {\n\n\tif ( ! array || array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\n/**\n * Returns `true` if the given object is a typed array.\n *\n * @param {any} object - The object to check.\n * @return {boolean} Whether the given object is a typed array.\n */\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) && ! ( object instanceof DataView );\n\n}\n\n/**\n * Returns an array by which times and values can be sorted.\n *\n * @param {Array<number>} times - The keyframe time values.\n * @return {Array<number>} The array.\n */\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n/**\n * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n *\n * @param {Array<number>} values - The values to sort.\n * @param {number} stride - The stride.\n * @param {Array<number>} order - The sort order.\n * @return {Array<number>} The sorted values.\n */\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * Used for parsing AOS keyframe formats.\n *\n * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n * @param {Array<number>} times - This array will be filled with keyframe times by this function.\n * @param {Array<number>} values - This array will be filled with keyframe values by this function.\n * @param {string} valuePropertyName - The name of the property to use.\n */\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( ...value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\n/**\n * Creates a new clip, containing only the segment of the original clip between the given frames.\n *\n * @param {AnimationClip} sourceClip - The values to sort.\n * @param {string} name - The name of the clip.\n * @param {number} startFrame - The start frame.\n * @param {number} endFrame - The end frame.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The new sub clip.\n */\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( -1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\n/**\n * Converts the keyframes of the given animation clip to an additive format.\n *\n * @param {AnimationClip} targetClip - The clip to make additive.\n * @param {number} [referenceFrame=0] - The reference frame.\n * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The updated clip which is now additive.\n */\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\n/**\n * A class with various methods to assist with animations.\n *\n * @hideconstructor\n */\nclass AnimationUtils {\n\n\t/**\n\t * Converts an array to a specific type\n\t *\n\t * @static\n\t * @param {TypedArray|Array} array - The array to convert.\n\t * @param {TypedArray.constructor} type - The constructor of a type array.\n\t * @return {TypedArray} The converted array\n\t */\n\tstatic convertArray( array, type ) {\n\n\t\treturn convertArray( array, type );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given object is a typed array.\n\t *\n\t * @static\n\t * @param {any} object - The object to check.\n\t * @return {boolean} Whether the given object is a typed array.\n\t */\n\tstatic isTypedArray( object ) {\n\n\t\treturn isTypedArray( object );\n\n\t}\n\n\t/**\n\t * Returns an array by which times and values can be sorted.\n\t *\n\t * @static\n\t * @param {Array<number>} times - The keyframe time values.\n\t * @return {Array<number>} The array.\n\t */\n\tstatic getKeyframeOrder( times ) {\n\n\t\treturn getKeyframeOrder( times );\n\n\t}\n\n\t/**\n\t * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n\t *\n\t * @static\n\t * @param {Array<number>} values - The values to sort.\n\t * @param {number} stride - The stride.\n\t * @param {Array<number>} order - The sort order.\n\t * @return {Array<number>} The sorted values.\n\t */\n\tstatic sortedArray( values, stride, order ) {\n\n\t\treturn sortedArray( values, stride, order );\n\n\t}\n\n\t/**\n\t * Used for parsing AOS keyframe formats.\n\t *\n\t * @static\n\t * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n\t * @param {Array<number>} times - This array will be filled with keyframe times by this method.\n\t * @param {Array<number>} values - This array will be filled with keyframe values by this method.\n\t * @param {string} valuePropertyName - The name of the property to use.\n\t */\n\tstatic flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tflattenJSON( jsonKeys, times, values, valuePropertyName );\n\n\t}\n\n\t/**\n\t * Creates a new clip, containing only the segment of the original clip between the given frames.\n\t *\n\t * @static\n\t * @param {AnimationClip} sourceClip - The values to sort.\n\t * @param {string} name - The name of the clip.\n\t * @param {number} startFrame - The start frame.\n\t * @param {number} endFrame - The end frame.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The new sub clip.\n\t */\n\tstatic subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\t\treturn subclip( sourceClip, name, startFrame, endFrame, fps );\n\n\t}\n\n\t/**\n\t * Converts the keyframes of the given animation clip to an additive format.\n\t *\n\t * @static\n\t * @param {AnimationClip} targetClip - The clip to make additive.\n\t * @param {number} [referenceFrame=0] - The reference frame.\n\t * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The updated clip which is now additive.\n\t */\n\tstatic makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\t\treturn makeClipAdditive( targetClip, referenceFrame, referenceClip, fps );\n\n\t}\n\n}\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */\nclass Interpolant {\n\n\t/**\n\t * Constructs a new interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\t/**\n\t\t * The parameter positions.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.parameterPositions = parameterPositions;\n\n\t\t/**\n\t\t * A cache index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._cachedIndex = 0;\n\n\t\t/**\n\t\t * The result buffer.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor( sampleSize );\n\n\t\t/**\n\t\t * The sample values.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.sampleValues = sampleValues;\n\n\t\t/**\n\t\t * The value size.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.valueSize = sampleSize;\n\n\t\t/**\n\t\t * The interpolation settings.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.settings = null;\n\n\t\t/**\n\t\t * The default settings object.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\t/**\n\t * Evaluate the interpolant at position `t`.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\t/**\n\t * Returns the interpolation settings.\n\t *\n\t * @return {Object} The interpolation settings.\n\t */\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @param {number} index - An index into the sample value buffer.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @abstract\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t * @param {number} t1 - The next interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\t/**\n\t * Optional method that is executed when the interval has changed.\n\t *\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t */\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new cubic interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( -1.5 - 2 * wP ) * pp + ( -0.5 + wP ) * p + 1;\n\t\tconst s1 = ( -1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */\nclass LinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new linear interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new discrete interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\n/**\n * Represents s a timed sequence of keyframes, which are composed of lists of\n * times and related values, and which are used to animate a specific property\n * of an object.\n */\nclass KeyframeTrack {\n\n\t/**\n\t * Constructs a new keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\t/**\n\t\t * The track's name can refer to morph targets or bones or\n\t\t * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}\n\t\t * for the forms of strings that can be parsed for property binding.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The keyframe times.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\n\t\t/**\n\t\t * The keyframe values.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t/**\n\t * Converts the keyframe track to JSON.\n\t *\n\t * @static\n\t * @param {KeyframeTrack} track - The keyframe track to serialize.\n\t * @return {Object} The serialized keyframe track as JSON.\n\t */\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\t/**\n\t * Factory method for creating a new discrete interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {DiscreteInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Factory method for creating a new linear interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {LinearInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Factory method for creating a new smooth interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {CubicInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Defines the interpolation factor method for this keyframe track.\n\t *\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current interpolation type.\n\t *\n\t * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.\n\t */\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the value size.\n\t *\n\t * @return {number} The value size.\n\t */\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t/**\n\t * Moves all keyframes either forward or backward in time.\n\t *\n\t * @param {number} timeOffset - The offset to move the time values.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scale all keyframe times by a factor (useful for frame - seconds conversions).\n\t *\n\t * @param {number} timeScale - The time scale.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes keyframes before and after animation without changing any values within the defined time range.\n\t *\n\t * Note: The method does not shift around keys to the start of the track time, because for interpolated\n\t * keys this will change their values\n\t *\n\t * @param {number} startTime - The start time.\n\t * @param {number} endTime - The end time.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== -1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = times.slice( from, to );\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs minimal validation on the keyframe track. Returns `true` if the values\n\t * are valid.\n\t *\n\t * @return {boolean} Whether the keyframes are valid or not.\n\t */\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t/**\n\t * Optimizes this keyframe track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\toptimize() {\n\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = this.times.slice(),\n\t\t\tvalues = this.values.slice(),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = times.slice( 0, writeIndex );\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new keyframe track with copied values from this instance.\n\t *\n\t * @return {KeyframeTrack} A clone of this instance.\n\t */\n\tclone() {\n\n\t\tconst times = this.times.slice();\n\t\tconst values = this.values.slice();\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default ''\n */\nKeyframeTrack.prototype.ValueTypeName = '';\n\n/**\n * The time buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateLinear\n */\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A track for boolean keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new boolean keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'bool'\n */\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for color keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass ColorKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new color keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'color'\n */\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A track for numeric keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass NumberKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new number keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'number'\n */\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new SLERP interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A track for Quaternion keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new Quaternion keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n\t/**\n\t * Overwritten so the method returns Quaternion based interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {QuaternionLinearInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'quaternion'\n */\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for string keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass StringKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new string keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'string'\n */\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nStringKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for vector keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass VectorKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new vector keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'vector'\n */\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\n/**\n * A reusable set of keyframe tracks which represent an animation.\n */\nclass AnimationClip {\n\n\t/**\n\t * Constructs a new animation clip.\n\t *\n\t * Note: Instead of instantiating an AnimationClip directly with the constructor, you can\n\t * use the static interface of this class for creating clips. In most cases though, animation clips\n\t * will automatically be created by loaders when importing animated 3D assets.\n\t *\n\t * @param {string} [name=''] - The clip's name.\n\t * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,\n\t * the duration will be calculated from the passed keyframes.\n\t * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation\n\t * is blended/combined when two or more animations are simultaneously played.\n\t */\n\tconstructor( name = '', duration = -1, tracks = [], blendMode = NormalAnimationBlendMode ) {\n\n\t\t/**\n\t\t * The clip's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t *  An array of keyframe tracks.\n\t\t *\n\t\t * @type {Array<KeyframeTrack>}\n\t\t */\n\t\tthis.tracks = tracks;\n\n\t\t/**\n\t\t * The clip's duration in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.duration = duration;\n\n\t\t/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */\n\t\tthis.blendMode = blendMode;\n\n\t\t/**\n\t\t * The UUID of the animation clip.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Factory method for creating an animation clip from the given JSON.\n\t *\n\t * @static\n\t * @param {Object} json - The serialized animation clip.\n\t * @return {AnimationClip} The new animation clip.\n\t */\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\t/**\n\t * Serializes the given animation clip into JSON.\n\t *\n\t * @static\n\t * @param {AnimationClip} clip - The animation clip to serialize.\n\t * @return {Object} The JSON object.\n\t */\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\t/**\n\t * Returns a new animation clip from the passed morph targets array of a\n\t * geometry, taking a name and the number of frames per second.\n\t *\n\t * Note: The fps parameter is required, but the animation speed can be\n\t * overridden via {@link AnimationAction#setDuration}.\n\t *\n\t * @static\n\t * @param {string} name - The name of the animation clip.\n\t * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {AnimationClip} The new animation clip.\n\t */\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, -1, tracks );\n\n\t}\n\n\t/**\n\t * Searches for an animation clip by name, taking as its first parameter\n\t * either an array of clips, or a mesh or geometry that contains an\n\t * array named \"animations\" property.\n\t *\n\t * @static\n\t * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.\n\t * @param {string} name - The name to search for.\n\t * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.\n\t */\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Returns an array of new AnimationClips created from the morph target\n\t * sequences of a geometry, trying to sort morph target names into\n\t * animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002...\".\n\t *\n\t * See {@link MD2Loader#parse} as an example for how the method should be used.\n\t *\n\t * @static\n\t * @param {Array<Object>} morphTargets - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {Array<AnimationClip>} An array of new animation clips.\n\t */\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t/**\n\t * Parses the `animation.hierarchy` format and returns a new animation clip.\n\t *\n\t * @static\n\t * @deprecated since r175.\n\t * @param {Object} animation - A serialized animation clip as JSON.\n\t * @param {Array<Bones>} bones - An array of bones.\n\t * @return {?AnimationClip} The new animation clip.\n\t */\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tconsole.warn( 'THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185' );\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || -1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = -1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\t/**\n\t * Sets the duration of this clip to the duration of its longest keyframe track.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Trims all tracks to the clip's duration.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs minimal validation on each track in the clip. Returns `true` if all\n\t * tracks are valid.\n\t *\n\t * @return {boolean} Whether the clip's keyframes are valid or not.\n\t */\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t/**\n\t * Optimizes each track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new animation clip with copied values from this instance.\n\t *\n\t * @return {AnimationClip} A clone of this instance.\n\t */\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\t/**\n\t * Serializes this animation clip into JSON.\n\t *\n\t * @return {Object} The JSON object.\n\t */\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\n/**\n * @class\n * @classdesc A simple caching system, used internally by {@link FileLoader}.\n * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.\n * @hideconstructor\n */\nconst Cache = {\n\n\t/**\n\t * Whether caching is enabled or not.\n\t *\n\t * @static\n\t * @type {boolean}\n\t * @default false\n\t */\n\tenabled: false,\n\n\t/**\n\t * A dictionary that holds cached files.\n\t *\n\t * @static\n\t * @type {Object<string,Object>}\n\t */\n\tfiles: {},\n\n\t/**\n\t * Adds a cache entry with a key to reference the file. If this key already\n\t * holds a file, it is overwritten.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @param {Object} file -  The file to be cached.\n\t */\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\t/**\n\t * Gets the cached value for the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.\n\t */\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\t/**\n\t * Removes the cached file associated with the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t */\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\t/**\n\t * Remove all values from the cache.\n\t *\n\t * @static\n\t */\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * Handles and keeps track of loaded and pending data. A default global\n * instance of this class is created and used by loaders if not supplied\n * manually.\n *\n * In general that should be sufficient, however there are times when it can\n * be useful to have separate loaders - for example if you want to show\n * separate loading bars for objects and textures.\n *\n * ```js\n * const manager = new THREE.LoadingManager();\n * manager.onLoad = () => console.log( 'Loading complete!' );\n *\n * const loader1 = new OBJLoader( manager );\n * const loader2 = new ColladaLoader( manager );\n * ```\n */\nclass LoadingManager {\n\n\t/**\n\t * Constructs a new loading manager.\n\t *\n\t * @param {Function} [onLoad] - Executes when all items have been loaded.\n\t * @param {Function} [onProgress] - Executes when single items have been loaded.\n\t * @param {Function} [onError] - Executes when an error occurs.\n\t */\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\t/**\n\t\t * Executes when an item starts loading.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onStart = undefined;\n\n\t\t/**\n\t\t * Executes when all items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onLoad = onLoad;\n\n\t\t/**\n\t\t * Executes when single items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onProgress = onProgress;\n\n\t\t/**\n\t\t * Executes when an error occurs.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onError = onError;\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * starts loading an item.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t */\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * ended loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the loaded item.\n\t\t */\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * encounters an error when loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the item that produces an error.\n\t\t */\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Given a URL, uses the URL modifier callback (if any) and returns a\n\t\t * resolved URL. If no URL modifier is set, returns the original URL.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t * @return {string} The resolved URL.\n\t\t */\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\t/**\n\t\t * If provided, the callback will be passed each resource URL before a\n\t\t * request is sent. The callback may return the original URL, or a new URL to\n\t\t * override loading behavior. This behavior can be used to load assets from\n\t\t * .ZIP files, drag-and-drop APIs, and Data URIs.\n\t\t *\n\t\t * ```js\n\t\t * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};\n\t\t *\n\t\t * const manager = new THREE.LoadingManager();\n\t\t *\n\t\t * // Initialize loading manager with URL callback.\n\t\t * const objectURLs = [];\n\t\t * manager.setURLModifier( ( url ) => {\n\t\t *\n\t\t * \turl = URL.createObjectURL( blobs[ url ] );\n\t\t * \tobjectURLs.push( url );\n\t\t * \treturn url;\n\t\t *\n\t\t * } );\n\t\t *\n\t\t * // Load as usual, then revoke the blob URLs.\n\t\t * const loader = new GLTFLoader( manager );\n\t\t * loader.load( 'fish.gltf', (gltf) => {\n\t\t *\n\t\t * \tscene.add( gltf.scene );\n\t\t * \tobjectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );\n\t\t *\n\t\t * } );\n\t\t * ```\n\t\t *\n\t\t * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Registers a loader with the given regular expression. Can be used to\n\t\t * define what loader should be used in order to load specific files. A\n\t\t * typical use case is to overwrite the default loader for textures.\n\t\t *\n\t\t * ```js\n\t\t * // add handler for TGA textures\n\t\t * manager.addHandler( /\\.tga$/i, new TGALoader() );\n\t\t * ```\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @param {Loader} loader - A loader that should handle matched cases.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Removes the loader for the given regular expression.\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Can be used to retrieve the registered loader for the given file path.\n\t\t *\n\t\t * @param {string} file - The file path.\n\t\t * @return {?Loader} The registered loader. Returns `null` if no loader was found.\n\t\t */\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\n/**\n * The global default loading manager.\n *\n * @constant\n * @type {LoadingManager}\n */\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\n/**\n * Abstract base class for loaders.\n *\n * @abstract\n */\nclass Loader {\n\n\t/**\n\t * Constructs a new loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\t/**\n\t\t * The loading manager.\n\t\t *\n\t\t * @type {LoadingManager}\n\t\t * @default DefaultLoadingManager\n\t\t */\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t/**\n\t\t * The crossOrigin string to implement CORS for loading the url from a\n\t\t * different domain that allows CORS.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'anonymous'\n\t\t */\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\t/**\n\t\t * Whether the XMLHttpRequest uses credentials.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.withCredentials = false;\n\n\t\t/**\n\t\t * The base path from which the asset will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = '';\n\n\t\t/**\n\t\t * The base path from which additional resources like textures will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.resourcePath = '';\n\n\t\t/**\n\t\t * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t\t * used in HTTP request.\n\t\t *\n\t\t * @type {Object<string, any>}\n\t\t */\n\t\tthis.requestHeader = {};\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for loading assets from the backend.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t */\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\t/**\n\t * A async version of {@link Loader#load}.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @return {Promise} A Promise that resolves when the asset has been loaded.\n\t */\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for parsing the asset into three.js entities.\n\t *\n\t * @param {any} data - The data to parse.\n\t */\n\tparse( /* data */ ) {}\n\n\t/**\n\t * Sets the `crossOrigin` String to implement CORS for loading the URL\n\t * from a different domain that allows CORS.\n\t *\n\t * @param {string} crossOrigin - The `crossOrigin` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n\t * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n\t *\n\t * Note: This setting has no effect if you are loading files locally or from the same domain.\n\t *\n\t * @param {boolean} value - The `withCredentials` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for the asset.\n\t *\n\t * @param {string} path - The base path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for dependent resources like textures.\n\t *\n\t * @param {string} resourcePath - The resource path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given request header.\n\t *\n\t * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t * for configuring the HTTP request.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Callback for onProgress in loaders.\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */\n\n/**\n * Callback for onError in loaders.\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */\n\n/**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\n/**\n * A low level class for loading resources with the Fetch API, used internally by\n * most loaders. It can also be used directly to load any file type that does\n * not have a loader.\n *\n * This loader supports caching. If you want to use it, add `THREE.Cache.enabled = true;`\n * once to your application.\n *\n * ```js\n * const loader = new THREE.FileLoader();\n * const data = await loader.loadAsync( 'example.txt' );\n * ```\n *\n * @augments Loader\n */\nclass FileLoader extends Loader {\n\n\t/**\n\t * Constructs a new file loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The expected mime type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.mimeType = '';\n\n\t\t/**\n\t\t * The expected response type.\n\t\t *\n\t\t * @type {('arraybuffer'|'blob'|'document'|'json'|'')}\n\t\t * @default ''\n\t\t */\n\t\tthis.responseType = '';\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(any)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t * @return {any|undefined} The cached resource if available.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'X-File-Size' ) || response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}, ( e ) => {\n\n\t\t\t\t\t\t\t\t\tcontroller.error( e );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === '' ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\t/**\n\t * Sets the expected response type.\n\t *\n\t * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the expected mime type of the loaded file.\n\t *\n\t * @param {string} value - The mime type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Class for loading animation clips in the JSON format. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.AnimationLoader();\n * const animations = await loader.loadAsync( 'animations/animation.js' );\n * ```\n *\n * @augments Loader\n */\nclass AnimationLoader extends Loader {\n\n\t/**\n\t * Constructs a new animation loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded animations as an array\n\t * holding instances of {@link AnimationClip} to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns an array of animation clips.\n\t *\n\t * @param {Object} json - The serialized animation clips.\n\t * @return {Array<AnimationClip>} The parsed animation clips.\n\t */\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract base class for loading compressed texture formats S3TC, ASTC or ETC.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass CompressedTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new compressed texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded compressed texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CompressedTexture} The compressed texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * A loader for loading images. The class loads images with the HTML `Image` API.\n *\n * ```js\n * const loader = new THREE.ImageLoader();\n * const image = await loader.loadAsync( 'image.png' );\n * ```\n * Please note that `ImageLoader` has dropped support for progress\n * events in `r84`. For an `ImageLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.\n *\n * @augments Loader\n */\nclass ImageLoader extends Loader {\n\n\t/**\n\t * Constructs a new image loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded image\n\t * to the `onLoad()` callback. The method also returns a new `Image` object which can\n\t * directly be used for texture creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Image)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Image} The image.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\n/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */\nclass CubeTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new cube texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded cube texture\n\t * to the `onLoad()` callback. The method also returns a new cube texture object which can\n\t * directly be used for material creation. If you do it this way, the cube texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n\t * cube texture. The urls should be specified in the following order: pos-x,\n\t * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n\t * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CubeTexture} The cube texture.\n\t */\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract base class for loading binary texture formats RGBE, EXR or TGA.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass DataTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new data texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded data texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {DataTexture} The data texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tlet texData;\n\n\t\t\ttry {\n\n\t\t\t\ttexData = scope.parse( buffer );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) {\n\n\t\t\t\t\tonError( error );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */\nclass TextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Texture} The texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */\nclass Light extends Object3D {\n\n\t/**\n\t * Constructs a new light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\t/**\n\t\t * The light's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The light's intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = intensity;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass HemisphereLight extends Light {\n\n\t/**\n\t * Constructs a new hemisphere light.\n\t *\n\t * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n\t * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The light's ground color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different light types.\n *\n * @abstract\n */\nclass LightShadow {\n\n\t/**\n\t * Constructs a new light shadow.\n\t *\n\t * @param {Camera} camera - The light's view of the world.\n\t */\n\tconstructor( camera ) {\n\n\t\t/**\n\t\t * The light's view of the world.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The intensity of the shadow. The default is `1`.\n\t\t * Valid values are in the range `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = 1;\n\n\t\t/**\n\t\t * Shadow map bias, how much to add or subtract from the normalized depth\n\t\t * when deciding whether a surface is in shadow.\n\t\t *\n\t\t * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n\t\t * may help reduce artifacts in shadows.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bias = 0;\n\n\t\t/**\n\t\t * Defines how much the position used to query the shadow map is offset along\n\t\t * the object normal. The default is `0`. Increasing this value can be used to\n\t\t * reduce shadow acne especially in large scenes where light shines onto\n\t\t * geometry at a shallow angle. The cost is that shadows may appear distorted.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.normalBias = 0;\n\n\t\t/**\n\t\t * Setting this to values greater than 1 will blur the edges of the shadow.\n\t\t * High values will cause unwanted banding effects in the shadows - a greater\n\t\t * map size will allow for a higher value to be used here before these effects\n\t\t * become visible.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n\t\t * and it is recommended to increase softness by decreasing the shadow map size instead.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `BasicShadowMap`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = 1;\n\n\t\t/**\n\t\t * The amount of samples to use when blurring a VSM shadow map.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 8\n\t\t */\n\t\tthis.blurSamples = 8;\n\n\t\t/**\n\t\t * Defines the width and height of the shadow map. Higher values give better quality\n\t\t * shadows at the cost of computation time. Values must be powers of two.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (512,512)\n\t\t */\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\t/**\n\t\t * The type of shadow texture. The default is `UnsignedByteType`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.mapType = UnsignedByteType;\n\n\t\t/**\n\t\t * The depth map generated using the internal camera; a location beyond a\n\t\t * pixel's depth is in shadow. Computed internally during rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The distribution map generated using the internal camera; an occlusion is\n\t\t * calculated based on the distribution of depths. Computed internally during\n\t\t * rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.mapPass = null;\n\n\t\t/**\n\t\t * Model to shadow camera space, to compute location and depth in shadow map.\n\t\t * This is computed internally during rendering.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Enables automatic updates of the light's shadow. If you do not require dynamic\n\t\t * lighting / shadows, you may set this to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t\t/**\n\t\t * When set to `true`, shadow maps will be updated in the next `render` call.\n\t\t * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n\t\t * set this property to `true` and then make a render call to update the light's shadow.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\t/**\n\t * Used internally by the renderer to get the number of viewports that need\n\t * to be rendered for this shadow.\n\t *\n\t * @return {number} The viewport count.\n\t */\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\t/**\n\t * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n\t *\n\t * @return {Frustum} The shadow camera frustum.\n\t */\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t */\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\t/**\n\t * Returns a viewport definition for the given viewport index.\n\t *\n\t * @param {number} viewportIndex - The viewport index.\n\t * @return {Vector4} The viewport.\n\t */\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\t/**\n\t * Returns the frame extends.\n\t *\n\t * @return {Vector2} The frame extends.\n\t */\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Copies the values of the given light shadow instance to this instance.\n\t *\n\t * @param {LightShadow} source - The light shadow to copy.\n\t * @return {LightShadow} A reference to this light shadow instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.intensity = source.intensity;\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.needsUpdate = source.needsUpdate;\n\t\tthis.normalBias = source.normalBias;\n\t\tthis.blurSamples = source.blurSamples;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new light shadow instance with copied values from this instance.\n\t *\n\t * @return {LightShadow} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the light shadow into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized light shadow.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass SpotLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new spot light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLightShadow = true;\n\n\t\t/**\n\t\t * Used to focus the shadow camera. The camera's field of view is set as a\n\t\t * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */\nclass SpotLight extends Light {\n\n\t/**\n\t * Constructs a new spot light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The spot light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * Maximum range of the light. `0` means no limit.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI/3\n\t\t */\n\t\tthis.angle = angle;\n\n\t\t/**\n\t\t * Percent of the spotlight cone that is attenuated due to penumbra.\n\t\t * Value range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.penumbra = penumbra;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * A texture used to modulate the color of the light. The spot light\n\t\t * color is mixed with the RGB value of this texture, with a ratio\n\t\t * corresponding to its alpha value. The cookie-like masking effect is\n\t\t * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n\t\t *\n\t\t * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {SpotLightShadow}\n\t\t */\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t *  Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new point light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( -1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, -1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, -1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, -1 )\n\t\t];\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t * @param {number} [viewportIndex=0] - The viewport index.\n\t */\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\n/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass PointLight extends Light {\n\n\t/**\n\t * Constructs a new point light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\t/**\n\t\t * When distance is zero, light will attenuate according to inverse-square\n\t\t * law to infinite distance. When distance is non-zero, light will attenuate\n\t\t * according to inverse-square law until near the distance cutoff, where it\n\t\t * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n\t\t * physically correct.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {PointLightShadow}\n\t\t */\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n\n\t/**\n\t * Constructs a new orthographic camera.\n\t *\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * The left plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.left = left;\n\n\t\t/**\n\t\t * The right plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.right = right;\n\n\t\t/**\n\t\t * The top plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.top = top;\n\n\t\t/**\n\t\t * The bottom plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.bottom = bottom;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n\t\t * valid value for an orthographic camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link OrthographicCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t * @see {@link PerspectiveCamera#setViewOffset}\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass DirectionalLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new directional light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( -5, 5, 5, -5, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n\n\t/**\n\t * Constructs a new directional light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The directional light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {DirectionalLightShadow}\n\t\t */\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass AmbientLight extends Light {\n\n\t/**\n\t * Constructs a new ambient light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n\n\t/**\n\t * Constructs a new area light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t * @param {number} [width=10] - The width of the light.\n\t * @param {number} [height=10] - The height of the light.\n\t */\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\t/**\n\t\t * The width of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.height = height;\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */\nclass SphericalHarmonics3 {\n\n\t/**\n\t * Constructs a new spherical harmonics.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\t/**\n\t\t * An array holding the (9) SH coefficients.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given SH coefficients to this instance by copying\n\t * the values.\n\t *\n\t * @param {Array<Vector3>} coefficients - The SH coefficients.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets all SH coefficients to `0`.\n\t *\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the radiance in the direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The radiance.\n\t */\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the irradiance (radiance convolved with cosine lobe) in the\n\t * direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The irradiance.\n\t */\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Adds the given SH to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * A convenience method for performing {@link SphericalHarmonics3#add} and\n\t * {@link SphericalHarmonics3#scale} at once.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this SH by the given scale factor.\n\t *\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linear interpolates between the given SH and this instance by the given\n\t * alpha factor.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n\t * @param {number} alpha - The alpha factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this spherical harmonics is equal with the given one.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n\t * @return {boolean} Whether this spherical harmonics is equal with the given one.\n\t */\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical harmonics to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\t/**\n\t * Returns a new spherical harmonics with copied values from this instance.\n\t *\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Sets the SH coefficients of this instance from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the SH coefficients.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an array with the SH coefficients, or copies them into the provided\n\t * array. The coefficients are represented as numbers.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {Array<number>} An array with flat SH coefficients.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Computes the SH basis for the given normal vector.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Array<number>} shBasis - The target array holding the SH basis.\n\t */\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n\n\t/**\n\t * Constructs a new light probe.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLightProbe = true;\n\n\t\t/**\n\t\t * A light probe uses spherical harmonics to encode lighting information.\n\t\t *\n\t\t * @type {SphericalHarmonics3}\n\t\t */\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deserializes the light prove from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized light probe.\n\t * @return {LightProbe} A reference to this light probe.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */\nclass MaterialLoader extends Loader {\n\n\t/**\n\t * Constructs a new material loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * A dictionary holding textures used by the material.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.textures = {};\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns a material.\n\t *\n\t * @param {Object} json - The serialized material.\n\t * @return {Material} The parsed material.\n\t */\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = this.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * Textures are not embedded in the material JSON so they have\n\t * to be injected before the loading process starts.\n\t *\n\t * @param {Object} value - A dictionary holding textures for material properties.\n\t * @return {MaterialLoader} A reference to this material loader.\n\t */\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tcreateMaterialFromType( type ) {\n\n\t\treturn MaterialLoader.createMaterialFromType( type );\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @static\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\n/**\n * A class with loader utility functions.\n */\nclass LoaderUtils {\n\n\t/**\n\t * Extracts the base URL from the given URL.\n\t *\n\t * @param {string} url -The URL to extract the base URL from.\n\t * @return {string} The extracted base URL.\n\t */\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === -1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\t/**\n\t * Resolves relative URLs against the given path. Absolute paths, data urls,\n\t * and blob URLs will be returned as is. Invalid URLs will return an empty\n\t * string.\n\t *\n\t * @param {string} url -The URL to resolve.\n\t * @param {string} path - The base path for relative URLs to be resolved against.\n\t * @return {string} The resolved URL.\n\t */\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\n/**\n * An instanced version of a geometry.\n */\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new instanced buffer geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\n\t\t/**\n\t\t * The instance count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.BufferGeometryLoader();\n * const geometry = await loader.loadAsync( 'models/json/pressure.json' );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xF5F5F5 } );\n * const object = new THREE.Mesh( geometry, material );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass BufferGeometryLoader extends Loader {\n\n\t/**\n\t * Constructs a new geometry loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns a geometry.\n\t *\n\t * @param {Object} json - The serialized geometry.\n\t * @return {BufferGeometry} The parsed geometry.\n\t */\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * A loader for loading a JSON resource in the [JSON Object/Scene format]{@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4}.\n * The files are internally loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.ObjectLoader();\n * const obj = await loader.loadAsync( 'models/json/example.json' );\n * scene.add( obj );\n *\n * // Alternatively, to parse a previously loaded JSON structure\n * const object = await loader.parseAsync( a_json_object );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass ObjectLoader extends Loader {\n\n\t/**\n\t * Constructs a new object loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link ObjectLoader#load}.\n\t *\n\t * @async\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.\n\t */\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\t/**\n\t * Parses the given JSON. This is used internally by {@link ObjectLoader#load}\n\t * but can also be used directly to parse a previously loaded JSON structure.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.\n\t * @return {Object3D} The parsed 3D object.\n\t */\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\t/**\n\t * Async version of {@link ObjectLoader#parse}.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.\n\t */\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\treturn object;\n\n\t}\n\n\t// internals\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog.name !== '' ) {\n\n\t\t\t\t\t\tobject.fog.name = data.fog.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\t\t\t\tif ( data.backgroundRotation !== undefined ) object.backgroundRotation.fromArray( data.backgroundRotation );\n\n\t\t\t\tif ( data.environmentIntensity !== undefined ) object.environmentIntensity = data.environmentIntensity;\n\t\t\t\tif ( data.environmentRotation !== undefined ) object.environmentRotation.fromArray( data.environmentRotation );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'BatchedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new BatchedMesh( data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material );\n\t\t\t\tobject.geometry = geometry;\n\t\t\t\tobject.perObjectFrustumCulled = data.perObjectFrustumCulled;\n\t\t\t\tobject.sortObjects = data.sortObjects;\n\n\t\t\t\tobject._drawRanges = data.drawRanges;\n\t\t\t\tobject._reservedRanges = data.reservedRanges;\n\n\t\t\t\tobject._geometryInfo = data.geometryInfo.map( info => {\n\n\t\t\t\t\tlet box = null;\n\t\t\t\t\tlet sphere = null;\n\t\t\t\t\tif ( info.boundingBox !== undefined ) {\n\n\t\t\t\t\t\tbox = new Box3();\n\t\t\t\t\t\tbox.min.fromArray( info.boundingBox.min );\n\t\t\t\t\t\tbox.max.fromArray( info.boundingBox.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( info.boundingSphere !== undefined ) {\n\n\t\t\t\t\t\tsphere = new Sphere();\n\t\t\t\t\t\tsphere.radius = info.boundingSphere.radius;\n\t\t\t\t\t\tsphere.center.fromArray( info.boundingSphere.center );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\tboundingBox: box,\n\t\t\t\t\t\tboundingSphere: sphere\n\t\t\t\t\t};\n\n\t\t\t\t} );\n\t\t\t\tobject._instanceInfo = data.instanceInfo;\n\n\t\t\t\tobject._availableInstanceIds = data._availableInstanceIds;\n\t\t\t\tobject._availableGeometryIds = data._availableGeometryIds;\n\n\t\t\t\tobject._nextIndexStart = data.nextIndexStart;\n\t\t\t\tobject._nextVertexStart = data.nextVertexStart;\n\t\t\t\tobject._geometryCount = data.geometryCount;\n\n\t\t\t\tobject._maxInstanceCount = data.maxInstanceCount;\n\t\t\t\tobject._maxVertexCount = data.maxVertexCount;\n\t\t\t\tobject._maxIndexCount = data.maxIndexCount;\n\n\t\t\t\tobject._geometryInitialized = data.geometryInitialized;\n\n\t\t\t\tobject._matricesTexture = getTexture( data.matricesTexture.uuid );\n\n\t\t\t\tobject._indirectTexture = getTexture( data.indirectTexture.uuid );\n\n\t\t\t\tif ( data.colorsTexture !== undefined ) {\n\n\t\t\t\t\tobject._colorsTexture = getTexture( data.colorsTexture.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.boundingSphere !== undefined ) {\n\n\t\t\t\t\tobject.boundingSphere = new Sphere();\n\t\t\t\t\tobject.boundingSphere.center.fromArray( data.boundingSphere.center );\n\t\t\t\t\tobject.boundingSphere.radius = data.boundingSphere.radius;\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.boundingBox !== undefined ) {\n\n\t\t\t\t\tobject.boundingBox = new Box3();\n\t\t\t\t\tobject.boundingBox.min.fromArray( data.boundingBox.min );\n\t\t\t\t\tobject.boundingBox.max.fromArray( data.boundingBox.max );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.intensity !== undefined ) object.shadow.intensity = data.shadow.intensity;\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tbindLightTargets( object ) {\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isDirectionalLight || child.isSpotLight ) {\n\n\t\t\t\tconst uuid = child.target;\n\n\t\t\t\tconst target = object.getObjectByProperty( 'uuid', uuid );\n\n\t\t\t\tif ( target !== undefined ) {\n\n\t\t\t\t\tchild.target = target;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.target = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\n/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader does not avoid multiple concurrent requests to the same URL.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */\nclass ImageBitmapLoader extends Loader {\n\n\t/**\n\t * Constructs a new image bitmap loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\t/**\n\t\t * Represents the loader options.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {premultiplyAlpha:'none'}\n\t\t */\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\t/**\n\t * Sets the given loader options. The structure of the object must match the `options` parameter of\n\t * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n\t *\n\t * @param {Object} options - The loader options to set.\n\t * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n\t */\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {ImageBitmap|undefined} The image bitmap.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\t// If cached is a promise, wait for it to resolve\n\t\t\tif ( cached.then ) {\n\n\t\t\t\tcached.then( imageBitmap => {\n\n\t\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} ).catch( e => {\n\n\t\t\t\t\tif ( onError ) onError( e );\n\n\t\t\t\t} );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// If cached is not a promise (i.e., it's already an imageBitmap)\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tconst promise = fetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t\treturn imageBitmap;\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tCache.remove( url );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tCache.add( url, promise );\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\n/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */\nclass AudioContext {\n\n\t/**\n\t * Returns the global native audio context.\n\t *\n\t * @return {AudioContext} The native audio context.\n\t */\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\t/**\n\t * Allows to set the global native audio context from outside.\n\t *\n\t * @param {AudioContext} value - The native context to set.\n\t */\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\n/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */\nclass AudioLoader extends Loader {\n\n\t/**\n\t * Constructs a new audio loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded audio buffer\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} ).catch( handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */\nclass StereoCamera {\n\n\t/**\n\t * Constructs a new stereo camera.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'StereoCamera';\n\n\t\t/**\n\t\t * The aspect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = 1;\n\n\t\t/**\n\t\t * The eye separation which represents the distance\n\t\t * between the left and right camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.064\n\t\t */\n\t\tthis.eyeSep = 0.064;\n\n\t\t/**\n\t\t * The camera representing the left eye. This is added to layer `1` so objects to be\n\t\t * rendered by the left camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The camera representing the right eye. This is added to layer `2` so objects to be\n\t\t * rendered by the right camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the stereo camera based on the given perspective camera.\n\t *\n\t * @param {PerspectiveCamera} camera - The perspective camera.\n\t */\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\n/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */\nclass ArrayCamera extends PerspectiveCamera {\n\n\t/**\n\t * Constructs a new array camera.\n\t *\n\t * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n\t */\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayCamera = true;\n\n\t\t/**\n\t\t * Whether this camera is used with multiview rendering or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isMultiViewCamera = false;\n\n\t\t/**\n\t\t * An array of perspective sub cameras.\n\t\t *\n\t\t * @type {Array<PerspectiveCamera>}\n\t\t */\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\n/**\n * Class for keeping track of time.\n */\nclass Clock {\n\n\t/**\n\t * Constructs a new clock.\n\t *\n\t * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n\t * `getDelta()` is called for the first time.\n\t */\n\tconstructor( autoStart = true ) {\n\n\t\t/**\n\t\t * If set to `true`, the clock starts automatically when `getDelta()` is called\n\t\t * for the first time.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoStart = autoStart;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()` method was last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.startTime = 0;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n\t\t * `getDelta()` methods were last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.oldTime = 0;\n\n\t\t/**\n\t\t * Keeps track of the total time that the clock has been running.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.elapsedTime = 0;\n\n\t\t/**\n\t\t * Whether the clock is running or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.running = false;\n\n\t}\n\n\t/**\n\t * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n\t * called by the class.\n\t */\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\t/**\n\t * Stops the clock.\n\t */\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\t/**\n\t * Returns the elapsed time in seconds.\n\t *\n\t * @return {number} The elapsed time.\n\t */\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\t/**\n\t * Returns the delta time in seconds.\n\t *\n\t * @return {number} The delta time.\n\t */\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn performance.now();\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n\n\t/**\n\t * Constructs a new audio listener.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\t/**\n\t\t * The native audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = AudioContext.getContext();\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\t/**\n\t\t * An optional filter.\n\t\t *\n\t\t * Defined via {@link AudioListener#setFilter}.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.filter = null;\n\n\t\t/**\n\t\t * Time delta values required for `linearRampToValueAtTime()` usage.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\t/**\n\t * Returns the listener's input node.\n\t *\n\t * This method is used by other audio nodes to connect to this listener.\n\t *\n\t * @return {GainNode} The input node.\n\t */\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Removes the current filter from this listener.\n\t *\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filter.\n\t *\n\t * @return {?AudioNode} The filter.\n\t */\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\t/**\n\t * Sets the given filter to this listener.\n\t *\n\t * @param {AudioNode} value - The filter to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the applications master volume.\n\t *\n\t * @return {number} The master volume.\n\t */\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the applications master volume. This volume setting affects\n\t * all audio nodes in the scene.\n\t *\n\t * @param {number} value - The master volume to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, -1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n\n\t/**\n\t * Constructs a new audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AudioListener}\n\t\t * @readonly\n\t\t */\n\t\tthis.listener = listener;\n\n\t\t/**\n\t\t * The audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = listener.context;\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\t/**\n\t\t * Whether to start playback automatically or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoplay = false;\n\n\t\t/**\n\t\t * A reference to an audio buffer.\n\t\t *\n\t\t * Defined via {@link Audio#setBuffer}.\n\t\t *\n\t\t * @type {?AudioBuffer}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.buffer = null;\n\n\t\t/**\n\t\t * Modify pitch, measured in cents. +/- 100 is a semitone.\n\t\t * +/- 1200 is an octave.\n\t\t *\n\t\t * Defined via {@link Audio#setDetune}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.detune = 0;\n\n\t\t/**\n\t\t * Whether the audio should loop or not.\n\t\t *\n\t\t * Defined via {@link Audio#setLoop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.loop = false;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * start, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopStart = 0;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * stop, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopEnd = 0;\n\n\t\t/**\n\t\t * An offset to the time within the audio buffer the playback\n\t\t * should begin, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offset = 0;\n\n\t\t/**\n\t\t * Overrides the default duration of the audio.\n\t\t *\n\t\t * @type {undefined|number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.duration = undefined;\n\n\t\t/**\n\t\t * The playback speed.\n\t\t *\n\t\t * Defined via {@link Audio#setPlaybackRate}.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 1\n\t\t */\n\t\tthis.playbackRate = 1;\n\n\t\t/**\n\t\t * Indicates whether the audio is playing or not.\n\t\t *\n\t\t * This flag will be automatically set when using {@link Audio#play},\n\t\t * {@link Audio#pause}, {@link Audio#stop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isPlaying = false;\n\n\t\t/**\n\t\t * Indicates whether the audio playback can be controlled\n\t\t * with method like {@link Audio#play} or {@link Audio#pause}.\n\t\t *\n\t\t * This flag will be automatically set when audio sources are\n\t\t * defined.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.hasPlaybackControl = true;\n\n\t\t/**\n\t\t * Holds a reference to the current audio source.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @readonly\n\t\t * @default null\n\t\t */\n\t\tthis.source = null;\n\n\t\t/**\n\t\t * Defines the source type.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n\t\t * @readonly\n\t\t * @default 'empty'\n\t\t */\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\t/**\n\t\t * Can be used to apply a variety of low-order filters to create\n\t\t * more complex sound effects e.g. via `BiquadFilterNode`.\n\t\t *\n\t\t * The property is automatically set by {@link Audio#setFilters}.\n\t\t *\n\t\t * @type {Array<AudioNode>}\n\t\t * @readonly\n\t\t */\n\t\tthis.filters = [];\n\n\t}\n\n\t/**\n\t * Returns the output audio node.\n\t *\n\t * @return {GainNode} The output node.\n\t */\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Sets the given audio node as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media element as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {HTMLMediaElement} mediaElement - The media element.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media stream as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {MediaStream} mediaStream - The media stream.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given audio buffer as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n\t *\n\t * @param {AudioBuffer} audioBuffer - The audio buffer.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\t/**\n\t * Pauses the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tstop( delay = 0 ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop( this.context.currentTime + delay );\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio} A reference to this instance.\n\t */\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tdisconnect() {\n\n\t\tif ( this._connected === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filters.\n\t *\n\t * @return {Array<AudioNode>} The list of filters.\n\t */\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\t/**\n\t * Sets an array of filters and connects them with the audio source.\n\t *\n\t * @param {Array<AudioNode>} [value] - A list of filters.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the detuning of oscillation in cents.\n\t *\n\t * @param {number} value - The detuning of oscillation in cents.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.isPlaying === true && this.source.detune !== undefined ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the detuning of oscillation in cents.\n\t *\n\t * @return {number} The detuning of oscillation in cents.\n\t */\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\t/**\n\t * Returns the first filter in the list of filters.\n\t *\n\t * @return {AudioNode|undefined} The first filter in the list of filters.\n\t */\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\t/**\n\t * Applies a single filter node to the audio.\n\t *\n\t * @param {AudioNode} [filter] - The filter to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\t/**\n\t * Sets the playback rate.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [value] - The playback rate to set.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current playback rate.\n\n\t * @return {number} The playback rate.\n\t */\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\t/**\n\t * Automatically called when playback finished.\n\t */\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\t\tthis._progress = 0;\n\n\t}\n\n\t/**\n\t * Returns the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {boolean} Whether the audio should loop or not.\n\t */\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\t/**\n\t * Sets the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {boolean} value - Whether the audio should loop or not.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop start value which defines where in the audio buffer the replay should\n\t * start, in seconds.\n\t *\n\t * @param {number} value - The loop start value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop end value which defines where in the audio buffer the replay should\n\t * stop, in seconds.\n\t *\n\t * @param {number} value - The loop end value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the volume.\n\t *\n\t * @return {number} The volume.\n\t */\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the volume.\n\t *\n\t * @param {number} value - The volume to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.sourceType !== 'buffer' ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio source type cannot be copied.' );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.autoplay = source.autoplay;\n\n\t\tthis.buffer = source.buffer;\n\t\tthis.detune = source.detune;\n\t\tthis.loop = source.loop;\n\t\tthis.loopStart = source.loopStart;\n\t\tthis.loopEnd = source.loopEnd;\n\t\tthis.offset = source.offset;\n\t\tthis.duration = source.duration;\n\t\tthis.playbackRate = source.playbackRate;\n\t\tthis.hasPlaybackControl = source.hasPlaybackControl;\n\t\tthis.sourceType = source.sourceType;\n\n\t\tthis.filters = source.filters.slice();\n\n\t\treturn this;\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor( this.listener ).copy( this, recursive );\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n\n\t/**\n\t * Constructs a positional audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\t/**\n\t\t * The panner node represents the location, direction, and behavior of an audio\n\t\t * source in 3D space.\n\t\t *\n\t\t * @type {PannerNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\t/**\n\t * Returns the current reference distance.\n\t *\n\t * @return {number} The reference distance.\n\t */\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\t/**\n\t * Defines the reference distance for reducing volume as the audio source moves\n\t * further from the listener – i.e. the distance at which the volume reduction\n\t * starts taking effect.\n\t *\n\t * @param {number} value - The reference distance to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current rolloff factor.\n\t *\n\t * @return {number} The rolloff factor.\n\t */\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\t/**\n\t * Defines how quickly the volume is reduced as the source moves away from the listener.\n\t *\n\t * @param {number} value - The rolloff factor.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current distance model.\n\t *\n\t * @return {('linear'|'inverse'|'exponential')} The distance model.\n\t */\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\t/**\n\t * Defines which algorithm to use to reduce the volume of the audio source\n\t * as it moves away from the listener.\n\t *\n\t * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n\t * for more details.\n\t *\n\t * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current max distance.\n\t *\n\t * @return {number} The max distance.\n\t */\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\t/**\n\t * Defines the maximum distance between the audio source and the listener,\n\t * after which the volume is not reduced any further.\n\t *\n\t * This value is used only by the `linear` distance model.\n\t *\n\t * @param {number} value - The max distance.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the directional cone in which the audio can be listened.\n\t *\n\t * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n\t * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n\t * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n\n\t/**\n\t * Constructs a new audio analyzer.\n\t *\n\t * @param {Audio} audio - The audio to analyze.\n\t * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n\t */\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AnalyserNode}\n\t\t */\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\t/**\n\t\t * Holds the analyzed data.\n\t\t *\n\t\t * @type {Uint8Array}\n\t\t */\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\t/**\n\t * Returns an array with frequency data of the audio.\n\t *\n\t * Each item in the array represents the decibel value for a specific frequency.\n\t * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n\t * For example, for 48000 sample rate, the last item of the array will represent\n\t * the decibel value for 24000 Hz.\n\t *\n\t * @return {Uint8Array} The frequency data.\n\t */\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\t/**\n\t * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n\t *\n\t * @return {number} The average frequency.\n\t */\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\n/**\n * Buffered scene graph property that allows weighted accumulation; used internally.\n */\nclass PropertyMixer {\n\n\t/**\n\t * Constructs a new property mixer.\n\t *\n\t * @param {PropertyBinding} binding - The property binding.\n\t * @param {string} typeName - The keyframe track type name.\n\t * @param {number} valueSize - The keyframe track value size.\n\t */\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\t/**\n\t\t * The property binding.\n\t\t *\n\t\t * @type {PropertyBinding}\n\t\t */\n\t\tthis.binding = binding;\n\n\t\t/**\n\t\t * The keyframe track value size.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cumulativeWeight = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.useCount = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t/**\n\t * Accumulates data in the `incoming` region into `accu<i>`.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t * @param {number} weight - The weight.\n\t */\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t/**\n\t * Accumulates data in the `incoming` region into `add`.\n\t *\n\t * @param {number} weight - The weight.\n\t */\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t/**\n\t * Applies the state of `accu<i>` to the binding when accus differ.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t */\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Remembers the state of the bound property and copy it to both accus.\n\t */\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t/**\n\t * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.\n\t */\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t// internals\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\n\n\n/**\n * This holds a reference to a real property in the scene graph; used internally.\n */\nclass PropertyBinding {\n\n\t/**\n\t * Constructs a new property binding.\n\t *\n\t * @param {Object} rootNode - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t */\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\t/**\n\t\t * The object path to the animated property.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * An object holding information about the path.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\t/**\n\t\t * The object owns the animated property.\n\t\t *\n\t\t * @type {?Object}\n\t\t */\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\t/**\n\t\t * The root node.\n\t\t *\n\t\t * @type {Object3D|Skeleton}\n\t\t */\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\t/**\n\t * Factory method for creating a property binding from the given parameters.\n\t *\n\t * @static\n\t * @param {Object} root - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t * @return {PropertyBinding|Composite} The created property binding or composite.\n\t */\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name - Node name to be sanitized.\n\t * @return {string} The sanitized node name.\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\t/**\n\t * Parses the given track name (an object path to an animated property) and\n\t * returns an object with information about the path. Matches strings in the following forms:\n\t *\n\t * - nodeName.property\n\t * - nodeName.property[accessor]\n\t * - nodeName.material.property[accessor]\n\t * - uuid.property[accessor]\n\t * - uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t * - parentName/nodeName.property\n\t * - parentName/parentName/nodeName.property[index]\n\t * - .bone[Armature.DEF_cog].position\n\t * - scene:helium_balloon_model:helium_balloon_model.position\n\t *\n\t * @static\n\t * @param {string} trackName - The track name to parse.\n\t * @return {Object} The parsed track name as an object.\n\t */\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== -1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== -1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\t/**\n\t * Searches for a node in the hierarchy of the given root object by the given\n\t * node name.\n\t *\n\t * @static\n\t * @param {Object} root - The root object.\n\t * @param {string|number} nodeName - The name of the node.\n\t * @return {?Object} The found node. Returns `null` if no object was found.\n\t */\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t/**\n\t * Creates a getter / setter pair for the property tracked by this binding.\n\t */\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.warn( 'THREE.PropertyBinding: No target node found for track: ' + this.path + '.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.isMaterial === true ) {\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.isObject3D === true ) {\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\t/**\n\t * Unbinds the property.\n\t */\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * - Add objects you would otherwise pass as 'root' to the\n * constructor or the .clipAction method of AnimationMixer.\n * - Instead pass this object as 'root'.\n * - You can also add and remove objects later when the mixer is running.\n *\n * Note:\n *\n * - Objects of this class appear as one object to the mixer,\n * so cache control of the individual objects must be done on the group.\n *\n * Limitation:\n *\n * - The animated properties must be compatible among the all objects in the group.\n * - A single property can either be controlled through a target group or directly, but not both.\n */\nclass AnimationObjectGroup {\n\n\t/**\n\t * Constructs a new animation group.\n\t *\n\t * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Adds an arbitrary number of objects to this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to add.\n\t */\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t/**\n\t * Removes an arbitrary number of objects to this animation group\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to remove.\n\t */\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for the passed 3D objects of this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to uncache.\n\t */\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */\nclass AnimationAction {\n\n\t/**\n\t * Constructs a new animation action.\n\t *\n\t * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n\t * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n\t * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t */\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\n\t\t/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\t/**\n\t\t * The loop mode, set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n\t\t * @default LoopRepeat\n\t\t */\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t/**\n\t\t * The local time of this action (in seconds, starting with `0`).\n\t\t *\n\t\t * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n\t\t * loop state).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n\t\t * animation to pause. Negative values cause the animation to play backwards.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\t/**\n\t\t * The degree of influence of this action (in the interval `[0, 1]`). Values\n\t\t * between `0` (no impact) and `1` (full impact) can be used to blend between\n\t\t * several actions.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\t/**\n\t\t * The number of repetitions of the performed clip over the course of this action.\n\t\t * Can be set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * Setting this number has no effect if {@link AnimationAction#loop} is set to\n\t\t * `THREE:LoopOnce`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.repetitions = Infinity;\n\n\t\t/**\n\t\t * If set to `true`, the playback of the action is paused.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n\t\t/**\n\t\t * If set to `false`, the action is disabled so it has no impact.\n\t\t *\n\t\t * When the action is re-enabled, the animation continues from its current\n\t\t * time (setting `enabled` to `false` doesn't reset the action).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to true the animation will automatically be paused on its last frame.\n\t\t *\n\t\t * If set to false, {@link AnimationAction#enabled} will automatically be switched\n\t\t * to `false` when the last loop of the action has finished, so that this action has\n\t\t * no further impact.\n\t\t *\n\t\t * Note: This member has no impact if the action is interrupted (it\n\t\t * has only an effect if its last loop has really finished).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clampWhenFinished = false;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtStart = true;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtEnd = true;\n\n\t}\n\n\t/**\n\t * Starts the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\t/**\n\t * Resets the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = -1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\t/**\n\t * Returns `true` if the animation is running.\n\t *\n\t * @return {boolean} Whether the animation is running or not.\n\t */\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Returns `true` when {@link AnimationAction#play} has been called.\n\t *\n\t * @return {boolean} Whether the animation is scheduled or not.\n\t */\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Defines the time when the animation should start.\n\t *\n\t * @param {number} time - The start time in seconds.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Configures the loop settings for this action.\n\t *\n\t * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n\t * @param {number} repetitions - The number of repetitions.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective weight of this action.\n\t *\n\t * An action has no effect and thus an effective weight of zero when the\n\t * action is disabled.\n\t *\n\t * @param {number} weight - The weight to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t/**\n\t * Returns the effective weight of this action.\n\t *\n\t * @return {number} The effective weight.\n\t */\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\t/**\n\t * Fades the animation in by increasing its weight gradually from `0` to `1`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\t/**\n\t * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\t/**\n\t * Causes this action to fade in and the given action to fade out,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeFrom( fadeOutAction, duration, warp = false ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp === true ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Causes this action to fade out and the given action to fade in,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeInAction - The animation action to fade in.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeTo( fadeInAction, duration, warp = false ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\t/**\n\t * Stops any fading which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective time scale of this action.\n\t *\n\t * An action has no effect and thus an effective time scale of zero when the\n\t * action is paused.\n\t *\n\t * @param {number} timeScale - The time scale to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Returns the effective time scale of this action.\n\t *\n\t * @return {number} The effective time scale.\n\t */\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\t/**\n\t * Sets the duration for a single loop of this action.\n\t *\n\t * @param {number} duration - The duration to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Synchronizes this action with the passed other action.\n\t *\n\t * @param {AnimationAction} action - The action to sync with.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Decelerates this animation's speed to `0` within the passed time interval.\n\t *\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\t/**\n\t * Changes the playback speed, within the passed time interval, by modifying\n\t * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n\t * `endTimeScale`.\n\t *\n\t * @param {number} startTimeScale - The start time scale.\n\t * @param {number} endTimeScale - The end time scale.\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops any scheduled warping which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the animation mixer of this animation action.\n\t *\n\t * @return {AnimationMixer} The animation mixer.\n\t */\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\t/**\n\t * Returns the animation clip of this animation action.\n\t *\n\t * @return {AnimationClip} The animation clip.\n\t */\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\t/**\n\t * Returns the root object of this animation action.\n\t *\n\t * @return {Object3D} The root object.\n\t */\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === -1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n/**\n * `AnimationMixer` is a player for animations on a particular object in\n * the scene. When multiple objects in the scene are animated independently,\n * one `AnimationMixer` may be used for each object.\n */\nclass AnimationMixer extends EventDispatcher {\n\n\t/**\n\t * Constructs a new animation mixer.\n\t *\n\t * @param {Object3D} root - The object whose animations shall be played by this mixer.\n\t */\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\t/**\n\t\t * The global mixer time (in seconds; starting with `0` on the mixer's creation).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * A scaling factor for the global time.\n\t\t *\n\t\t * Note: Setting this member to `0` and later back to `1` is a\n\t\t * possibility to pause/unpause all actions that are controlled by this\n\t\t * mixer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link AnimationAction} for the passed clip.\n\t *\n\t * If an action fitting the clip and root parameters doesn't yet exist, it\n\t * will be created by this method. Calling this method several times with the\n\t * same clip and root parameters always returns the same action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t * @return {?AnimationAction} The animation action.\n\t */\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t/**\n\t * Returns an existing animation action for the passed clip.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @return {?AnimationAction} The animation action. Returns `null` if no action was found.\n\t */\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Deactivates all previously scheduled actions on this mixer.\n\t *\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Advances the global mixer time and updates the animation.\n\t *\n\t * This is usually done in the render loop by passing the delta\n\t * time from {@link Clock} or {@link Timer}.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the global mixer to a specific time and updates the animation accordingly.\n\t *\n\t * This is useful when you need to jump to an exact time in an animation. The\n\t * input parameter will be scaled by {@link AnimationMixer#timeScale}\n\t *\n\t * @param {number} time - The time to set in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tsetTime( time ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( time ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t/**\n\t * Returns this mixer's root object.\n\t *\n\t * @return {Object3D} The mixer's root object.\n\t */\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for a clip. Before using this method make\n\t * sure to call {@link AnimationAction#stop} for all related actions.\n\t *\n\t * @param {AnimationClip} clip - The clip to uncache.\n\t */\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for a root object. Before using this\n\t * method make sure to call {@link AnimationAction#stop} for all related\n\t * actions or alternatively {@link AnimationMixer#stopAllAction} when the\n\t * mixer operates on a single root.\n\t *\n\t * @param {Object3D} root - The root object to uncache.\n\t */\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for an action. The action is identified by the\n\t * given clip and an optional root object. Before using this method make\n\t * sure to call {@link AnimationAction#stop} to deactivate the action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t */\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents a 3D render target.\n *\n * @augments RenderTarget\n */\nclass RenderTarget3D extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderTarget3D = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Represents an array render target.\n *\n * @augments RenderTarget\n */\nclass RenderTargetArray extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isRenderTargetArray = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Represents a uniform which is a global shader variable. They are passed to shader programs.\n *\n * When declaring a uniform of a {@link ShaderMaterial}, it is declared by value or by object.\n * ```js\n * uniforms: {\n * \ttime: { value: 1.0 },\n * \tresolution: new Uniform( new Vector2() )\n * };\n * ```\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n */\nclass Uniform {\n\n\t/**\n\t * Constructs a new uniform.\n\t *\n\t * @param {any} value - The uniform value.\n\t */\n\tconstructor( value ) {\n\n\t\t/**\n\t\t * The uniform value.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * Returns a new uniform with copied values from this instance.\n\t * If the value has a `clone()` method, the value is cloned as well.\n\t *\n\t * @return {Uniform} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet _id = 0;\n\n/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */\nclass UniformsGroup extends EventDispatcher {\n\n\t/**\n\t * Constructs a new uniforms group.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformsGroup = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name UniformsGroup#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\t/**\n\t\t * The name of the uniforms group.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The buffer usage.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * An array holding the uniforms.\n\t\t *\n\t\t * @type {Array<Uniform>}\n\t\t */\n\t\tthis.uniforms = [];\n\n\t}\n\n\t/**\n\t * Adds the given uniform to this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to add.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given uniform from this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to remove.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== -1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the name of this uniforms group.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the usage of this uniforms group.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Copies the values of the given uniforms group to this instance.\n\t *\n\t * @param {UniformsGroup} source - The uniforms group to copy.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tconst uniforms = Array.isArray( uniformsSource[ i ] ) ? uniformsSource[ i ] : [ uniformsSource[ i ] ];\n\n\t\t\tfor ( let j = 0; j < uniforms.length; j ++ ) {\n\n\t\t\t\tthis.uniforms.push( uniforms[ j ].clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new uniforms group with copied values from this instance.\n\t *\n\t * @return {UniformsGroup} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * An instanced version of an interleaved buffer.\n *\n * @augments InterleavedBuffer\n */\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\t/**\n\t * Constructs a new instanced interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\n\t */\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\t/**\n\t\t * Defines how often a value of this buffer attribute should be repeated,\n\t\t * see {@link InstancedBufferAttribute#meshPerAttribute}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\n/**\n * An alternative version of a buffer attribute with more control over the VBO.\n *\n * The renderer does not construct a VBO for this kind of attribute. Instead, it uses\n * whatever VBO is passed in constructor and can later be altered via the `buffer` property.\n *\n * The most common use case for this class is when some kind of GPGPU calculation interferes\n * or even produces the VBOs in question.\n *\n * Notice that this class can only be used with {@link WebGLRenderer}.\n */\nclass GLBufferAttribute {\n\n\t/**\n\t * Constructs a new GL buffer attribute.\n\t *\n\t * @param {WebGLBuffer} buffer - The native WebGL buffer.\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} itemSize - The item size.\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @param {number} count - The expected number of vertices in VBO.\n\t */\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isGLBufferAttribute = true;\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The native WebGL buffer.\n\t\t *\n\t\t * @type {WebGLBuffer}\n\t\t */\n\t\tthis.buffer = buffer;\n\n\t\t/**\n\t\t * The native data type.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * The corresponding size (in bytes) for the given `type` parameter.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.elementSize = elementSize;\n\n\t\t/**\n\t\t * The expected number of vertices in VBO.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the given native WebGL buffer.\n\t *\n\t * @param {WebGLBuffer} buffer - The buffer to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given native data type and element size.\n\t *\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the item size.\n\t *\n\t * @param {number} itemSize - The item size.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the count (the expected number of vertices in VBO).\n\t *\n\t * @param {number} count - The count.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * This class is designed to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3d space the mouse is over)\n * amongst other things.\n */\nclass Raycaster {\n\n\t/**\n\t * Constructs a new raycaster.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.\n\t * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.\n\t */\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\t/**\n\t\t * The ray used for raycasting.\n\t\t *\n\t\t * @type {Ray}\n\t\t */\n\t\tthis.ray = new Ray( origin, direction );\n\n\t\t/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.far = far;\n\n\t\t/**\n\t\t * The camera to use when raycasting against view-dependent objects such as\n\t\t * billboarded objects like sprites. This field can be set manually or\n\t\t * is set when calling `setFromCamera()`.\n\t\t *\n\t\t * @type {?Camera}\n\t\t * @default null\n\t\t */\n\t\tthis.camera = null;\n\n\t\t/**\n\t\t * Allows to selectively ignore 3D objects when performing intersection tests.\n\t\t * The following code example ensures that only 3D objects on layer `1` will be\n\t\t * honored by raycaster.\n\t\t * ```js\n\t\t * raycaster.layers.set( 1 );\n\t\t * object.layers.enable( 1 );\n\t\t * ```\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\n\t\t/**\n\t\t * A parameter object that configures the raycasting. It has the structure:\n\t\t *\n\t\t * ```\n\t\t * {\n\t\t * \tMesh: {},\n\t\t * \tLine: { threshold: 1 },\n\t\t * \tLOD: {},\n\t\t * \tPoints: { threshold: 1 },\n\t\t * \tSprite: {}\n\t\t * }\n\t\t * ```\n\t\t * Where `threshold` is the precision of the raycaster when intersecting objects, in world units.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the ray with a new origin and direction by copying the values from the arguments.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t */\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\t/**\n\t * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).\n\t * X and Y components should be between `-1` and `1`.\n\t * @param {Camera} camera - The camera from which the ray should originate.\n\t */\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, -1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Uses the given WebXR controller to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {WebXRController} controller - The controller to copy the position and direction from.\n\t * @return {Raycaster} A reference to this raycaster.\n\t */\n\tsetFromXRController( controller ) {\n\n\t\t_matrix.identity().extractRotation( controller.matrixWorld );\n\n\t\tthis.ray.origin.setFromMatrixPosition( controller.matrixWorld );\n\t\tthis.ray.direction.set( 0, 0, -1 ).applyMatrix4( _matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The intersection point of a raycaster intersection test.\n\t * @typedef {Object} Raycaster~Intersection\n\t * @property {number} distance - The distance from the ray's origin to the intersection point.\n\t * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the\n\t * intersection to the nearest point on the ray. For other objects it will be `undefined`.\n\t * @property {Vector3} point - The intersection point, in world coordinates.\n\t * @property {Object} face - The face that has been intersected.\n\t * @property {number} faceIndex - The face index.\n\t * @property {Object3D} object - The 3D object that has been intersected.\n\t * @property {Vector2} uv - U,V coordinates at point of intersection.\n\t * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.\n\t * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.\n\t * @property {number} instanceId - The index number of the instance where the ray\n\t * intersects the {@link InstancedMesh}.\n\t */\n\n\t/**\n\t * Checks all intersection between the ray and the object with or without the\n\t * descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when\n\t * evaluating whether the ray intersects the object or not. This allows meshes to respond\n\t * differently to ray casting than lines or points.\n\t *\n\t * Note that for meshes, faces must be pointed towards the origin of the ray in order\n\t * to be detected; intersections of the ray passing through the back of a face will not\n\t * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}\n\t * to `THREE.DoubleSide`.\n\t *\n\t * @param {Object3D} object - The 3D object to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersect( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\t/**\n\t * Checks all intersection between the ray and the objects with or without\n\t * the descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersect( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersect( object, raycaster, intersects, recursive ) {\n\n\tlet propagate = true;\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tconst result = object.raycast( raycaster, intersects );\n\n\t\tif ( result === false ) propagate = false;\n\n\t}\n\n\tif ( propagate === true && recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersect( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */\nclass Spherical {\n\n\t/**\n\t * Constructs a new spherical.\n\t *\n\t * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n\t * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n\t */\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\t/**\n\t\t * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * The polar angle in radians from the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.phi = phi;\n\n\t\t/**\n\t\t * The equator/azimuthal angle in radians around the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t}\n\n\t/**\n\t * Sets the spherical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The polar angle.\n\t * @param {number} theta - The azimuthal angle.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical to this instance.\n\t *\n\t * @param {Spherical} other - The spherical to copy.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n\t * `0.000001`.\n\t *\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = clamp( this.phi, EPS, Math.PI - EPS );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, -1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new spherical with copied values from this instance.\n\t *\n\t * @return {Spherical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */\nclass Cylindrical {\n\n\t/**\n\t * Constructs a new cylindrical.\n\t *\n\t * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n\t * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t * @param {number} [y=0] - The height above the x-z plane.\n\t */\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\t/**\n\t\t * The distance from the origin to a point in the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t\t/**\n\t\t * The height above the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle.\n\t * @param {number} y - The height value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given cylindrical to this instance.\n\t *\n\t * @param {Cylindrical} other - The cylindrical to copy.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new cylindrical with copied values from this instance.\n\t *\n\t * @return {Cylindrical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix2 {\n\n\t/**\n\t * Constructs a new 2x2 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t */\n\tconstructor( n11, n12, n21, n22 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix2.prototype.isMatrix2 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n21, n22 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 2x2 identity matrix.\n\t *\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} n11 - 1-1 matrix element.\n\t * @param {number} n12 - 1-2 matrix element.\n\t * @param {number} n21 - 2-1 matrix element.\n\t * @param {number} n22 - 2-2 matrix element.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tset( n11, n12, n21, n22 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 2 ] = n12;\n\t\tte[ 1 ] = n21; te[ 3 ] = n22;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox2 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector2} min - The lower boundary of the box.\n\t * @param {Vector2} max - The upper boundary of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector2} center - The center of the box.\n\t * @param {Vector2} size - The x and y dimensions of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box2} box - The box to copy.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 2D.\n\t *\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector2} point - The point that should be included by the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions.\n\t *\n\t * @param {Vector2} vector - The vector that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector2} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width and height.\n\t *\n\t * @param {Vector2} point - A point in 2D space.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} A point as a proportion of this box's width and height.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector2} point - The point to clamp.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector2} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box2} box - The bounding box to intersect with.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box2} box - The bounding box that will be unioned with this instance.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 2D space.\n\t *\n\t * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box2} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical line segment in 3D space represented by a start and end point.\n */\nclass Line3 {\n\n\t/**\n\t * Constructs a new line segment.\n\t *\n\t * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n\t * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n\t */\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\t/**\n\t\t * Start of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.start = start;\n\n\t\t/**\n\t\t * End of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.end = end;\n\n\t}\n\n\t/**\n\t * Sets the start and end values by copying the given vectors.\n\t *\n\t * @param {Vector3} start - The start point.\n\t * @param {Vector3} end - The end point.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given line segment to this instance.\n\t *\n\t * @param {Line3} line - The line segment to copy.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the center of the line segment.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the delta vector of the line segment's start and end point.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\t/**\n\t * Returns the squared Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The squared Euclidean distance.\n\t */\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\t/**\n\t * Returns the Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The Euclidean distance.\n\t */\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\t/**\n\t * Returns a vector at a certain position along the line segment.\n\t *\n\t * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Returns a point parameter based on the closest point as projected on the line segment.\n\t *\n\t * @param {Vector3} point - The point for which to return a point parameter.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @return {number} The point parameter.\n\t */\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns the closets point on the line for a given point.\n\t *\n\t * @param {Vector3} point - The point to compute the closest point on the line for.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @param {Vector3} target -  The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the line.\n\t */\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Applies a 4x4 transformation matrix to this line segment.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this line segment is equal with the given one.\n\t *\n\t * @param {Line3} line - The line segment to test for equality.\n\t * @return {boolean} Whether this line segment is equal with the given one.\n\t */\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\t/**\n\t * Returns a new line segment with copied values from this instance.\n\t *\n\t * @return {Line3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */\nclass SpotLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new spot light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {SpotLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t-1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, -1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t// update the local matrix based on the parent and light target transforms\n\t\tif ( this.parent ) {\n\n\t\t\tthis.parent.updateWorldMatrix( true );\n\n\t\t\tthis.matrix\n\t\t\t\t.copy( this.parent.matrixWorld )\n\t\t\t\t.invert()\n\t\t\t\t.multiply( this.light.matrixWorld );\n\n\t\t} else {\n\n\t\t\tthis.matrix.copy( this.light.matrixWorld );\n\n\t\t}\n\n\t\tthis.matrixWorld.copy( this.light.matrixWorld );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n\t * can be used if it represents a hierarchy of bones (see {@link Bone}).\n\t */\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\t/**\n\t\t * The object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = object;\n\n\t\t/**\n\t\t * he list of bones that the helper visualizes.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push( ...getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\n/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */\nclass PointLightHelper extends Mesh {\n\n\t/**\n\t * Constructs a new point light helper.\n\t *\n\t * @param {PointLight} light - The light to be visualized.\n\t * @param {number} [sphereSize=1] - The size of the sphere helper.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The size of the mesh used to visualize the light.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new grid helper.\n\t *\n\t * @param {number} [size=10] - The size of the grid.\n\t * @param {number} [divisions=10] - The number of divisions across the grid.\n\t * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n\t * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n\t */\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new polar grid helper.\n\t *\n\t * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n\t * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n\t * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n\t * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n\t * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n\t * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n\t */\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\n/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass DirectionalLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new directional light helper.\n\t *\n\t * @param {DirectionalLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The dimensions of the plane.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {DirectionalLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\t/**\n\t\t * Contains the line showing the location of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\t/**\n\t\t * Represents the target line of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass CameraHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Camera} camera - The camera to visualize.\n\t */\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\t/**\n\t\t * The camera being visualized.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * This contains the points used to visualize the camera.\n\t\t *\n\t\t * @type {Object<string,Array<number>>}\n\t\t */\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\t/**\n\t * Defines the colors of the helper.\n\t *\n\t * @param {Color} frustum - The frustum line color.\n\t * @param {Color} cone - The cone line color.\n\t * @param {Color} up - The up line color.\n\t * @param {Color} target - The target line color.\n\t * @param {Color} cross - The cross line color.\n\t */\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the helper based on the projection matrix of the camera.\n\t */\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// Adjust z values based on coordinate system\n\t\tconst nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n\t\t// center / target\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, nearZ );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, -1, -1, nearZ );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, -1, nearZ );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, -1, h, nearZ );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, nearZ );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, -1, -1, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, -1, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, -1, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, -1 * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, nearZ );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, -1, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, -1, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, -1, 0, nearZ );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, nearZ );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, -1, nearZ );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, nearZ );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */\nclass BoxHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new box helper.\n\t *\n\t * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The 3D object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the helper's geometry to match the dimensions of the object,\n\t * including any children.\n\t */\n\tupdate() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\t/**\n\t * Updates the wireframe box for the passed object.\n\t *\n\t * @param {Object3D} object - The 3D object to create the helper for.\n\t * @return {BoxHelper} A reference to this instance.\n\t */\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n\n\t/**\n\t * Constructs a new box3 helper.\n\t *\n\t * @param {Box3} box - The box to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The box being visualized.\n\t\t *\n\t\t * @type {Box3}\n\t\t */\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */\nclass PlaneHelper extends Line {\n\n\t/**\n\t * Constructs a new plane helper.\n\t *\n\t * @param {Plane} plane - The plane to be visualized.\n\t * @param {number} [size=1] - The side length of plane helper.\n\t * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n\t */\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\t/**\n\t\t * The plane being visualized.\n\t\t *\n\t\t * @type {Plane}\n\t\t */\n\t\tthis.plane = plane;\n\n\t\t/**\n\t\t * The side length of plane helper.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\n/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */\nclass ArrowHelper extends Object3D {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n\t * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n\t * @param {number} [length=1] - Length of the arrow in world units.\n\t * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new ConeGeometry( 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, -0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\t/**\n\t\t * The line part of the arrow helper.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\t/**\n\t\t * The cone part of the arrow helper.\n\t\t *\n\t\t * @type {Mesh}\n\t\t */\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\t/**\n\t * Sets the direction of the helper.\n\t *\n\t * @param {Vector3} dir - The normalized direction vector.\n\t */\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < -0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the length of the helper.\n\t *\n\t * @param {number} length - Length of the arrow in world units.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\t/**\n\t * Sets the color of the helper.\n\t *\n\t * @param {number|Color|string} color - The color to set.\n\t */\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new axes helper.\n\t *\n\t * @param {number} [size=1] - Size of the lines representing the axes.\n\t */\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\t/**\n\t * Defines the colors of the axes helper.\n\t *\n\t * @param {number|Color|string} xAxisColor - The color for the x axis.\n\t * @param {number|Color|string} yAxisColor - The color for the y axis.\n\t * @param {number|Color|string} zAxisColor - The color for the z axis.\n\t * @return {AxesHelper} A reference to this axes helper.\n\t */\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */\nclass ShapePath {\n\n\t/**\n\t * Constructs a new shape path.\n\t */\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\t/**\n\t\t * The color of the shape.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color();\n\n\t\t/**\n\t\t * The paths that have been generated for this shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @default null\n\t\t */\n\t\tthis.subPaths = [];\n\n\t\t/**\n\t\t * The current path that is being generated.\n\t\t *\n\t\t * @type {?Path}\n\t\t * @default null\n\t\t */\n\t\tthis.currentPath = null;\n\n\t}\n\n\t/**\n\t * Creates a new path and moves it current point to the given one.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts the paths into an array of shapes.\n\t *\n\t * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n\t * If this flag is set to `true`, then those are flipped.\n\t * @return {Array<Shape>} An array of shapes.\n\t */\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The object that is managed by the controls.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The HTML element used for event listeners.\n\t\t *\n\t\t * @type {?HTMLDOMElement}\n\t\t * @default null\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t/**\n\t\t * Whether the controls responds to user input or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * The internal state of the controls.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.state = -1;\n\n\t\t/**\n\t\t * This object defines the keyboard input of the controls.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = {};\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to the available mouse buttons.\n\t\t * It depends on the control implementation what kind of mouse buttons and actions are supported.\n\t\t *\n\t\t * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to what kind of touch interaction.\n\t\t * It depends on the control implementation what kind of touch interaction and actions are supported.\n\t\t *\n\t\t * @type {{ONE: ?number, TWO: ?number}}\n\t\t */\n\t\tthis.touches = { ONE: null, TWO: null };\n\n\t}\n\n\t/**\n\t * Connects the controls to the DOM. This method has so called \"side effects\" since\n\t * it adds the module's event listeners to the DOM.\n\t *\n\t * @param {HTMLDOMElement} element - The DOM element to connect to.\n\t */\n\tconnect( element ) {\n\n\t\tif ( element === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Controls: connect() now requires an element.' ); // @deprecated, the warning can be removed with r185\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.domElement !== null ) this.disconnect();\n\n\t\tthis.domElement = element;\n\n\t}\n\n\t/**\n\t * Disconnects the controls from the DOM.\n\t */\n\tdisconnect() {}\n\n\t/**\n\t * Call this method if you no longer want use to the controls. It frees all internal\n\t * resources and removes all event listeners.\n\t */\n\tdispose() {}\n\n\t/**\n\t * Controls should implement this method if they have to update their internal state\n\t * per simulation step.\n\t *\n\t * @param {number} [delta] - The time delta in seconds.\n\t */\n\tupdate( /* delta */ ) {}\n\n}\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t} else {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t} else {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill( texture ) {\n\n\ttexture.repeat.x = 1;\n\ttexture.repeat.y = 1;\n\n\ttexture.offset.x = 0;\n\ttexture.offset.y = 0;\n\n\treturn texture;\n\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength( width, height, format, type ) {\n\n\tconst typeByteLength = getTextureTypeByteLength( type );\n\n\tswitch ( format ) {\n\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n\t\tcase AlphaFormat:\n\t\t\treturn width * height;\n\t\tcase RedFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RedIntegerFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGIntegerFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBFormat:\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAIntegerFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n\t\tcase RGB_S3TC_DXT1_Format:\n\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_S3TC_DXT3_Format:\n\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n\t\tcase RGB_PVRTC_2BPPV1_Format:\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\n\t\tcase RGB_PVRTC_4BPPV1_Format:\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n\t\tcase RGB_ETC1_Format:\n\t\tcase RGB_ETC2_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n\t\tcase RGBA_BPTC_Format:\n\t\tcase RGB_BPTC_SIGNED_Format:\n\t\tcase RGB_BPTC_UNSIGNED_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n\t\tcase RED_RGTC1_Format:\n\t\tcase SIGNED_RED_RGTC1_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\n\t\tcase RED_GREEN_RGTC2_Format:\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t}\n\n\tthrow new Error(\n\t\t`Unable to determine texture byte length for ${format} format.`,\n\t);\n\n}\n\nfunction getTextureTypeByteLength( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase UnsignedByteType:\n\t\tcase ByteType:\n\t\t\treturn { byteLength: 1, components: 1 };\n\t\tcase UnsignedShortType:\n\t\tcase ShortType:\n\t\tcase HalfFloatType:\n\t\t\treturn { byteLength: 2, components: 1 };\n\t\tcase UnsignedShort4444Type:\n\t\tcase UnsignedShort5551Type:\n\t\t\treturn { byteLength: 2, components: 4 };\n\t\tcase UnsignedIntType:\n\t\tcase IntType:\n\t\tcase FloatType:\n\t\t\treturn { byteLength: 4, components: 1 };\n\t\tcase UnsignedInt5999Type:\n\t\t\treturn { byteLength: 4, components: 3 };\n\n\t}\n\n\tthrow new Error( `Unknown texture type ${type}.` );\n\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n\n\t/**\n\t * Scales the texture as large as possible within its surface without cropping\n\t * or stretching the texture. The method preserves the original aspect ratio of\n\t * the texture. Akin to CSS `object-fit: contain`\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic contain( texture, aspect ) {\n\n\t\treturn contain( texture, aspect );\n\n\t}\n\n\t/**\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\n\t * no empty space. The method preserves the original aspect ratio of the texture.\n\t * Akin to CSS `object-fit: cover`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic cover( texture, aspect ) {\n\n\t\treturn cover( texture, aspect );\n\n\t}\n\n\t/**\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic fill( texture ) {\n\n\t\treturn fill( texture );\n\n\t}\n\n\t/**\n\t * Determines how many bytes must be used to represent the texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} format - The texture's format.\n\t * @param {number} type - The texture's type.\n\t * @return {number} The byte length.\n\t */\n\tstatic getByteLength( width, height, format, type ) {\n\n\t\treturn getByteLength( width, height, format, type );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, FrustumArray, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RAD2DEG, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDepthPacking, RGBFormat, RGBIntegerFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGDepthPacking, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RenderTarget3D, RenderTargetArray, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGPUCoordinateSystem, WebXRController, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, arrayNeedsUint32, cloneUniforms, createCanvasElement, createElementNS, getByteLength, getUnlitUniformColorSpace, mergeUniforms, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce };\n"],"mappings":"6uBAAA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAA,QAAQ,CAAG,KAAK,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,KAAK,CAAG,CAAEC,IAAI,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAAC,CAE3E;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,KAAK,CAAG,CAAEH,MAAM,CAAE,CAAC,CAAEE,GAAG,CAAE,CAAC,CAAEE,SAAS,CAAE,CAAC,CAAEC,YAAY,CAAE,CAAE,CAAC,CAElE;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,CAAC,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,CAAC,CAEnB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,QAAQ,CAAG,CAAC,CAElB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,CAAC,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,CAAC,CAEpB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,CAAC,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,GAAG,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,GAAG,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,GAAG,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,GAAG,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,GAAG,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,GAAG,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,GAAG,CAErB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,GAAG,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,2BAA2B,CAAG,GAAG,CAEvC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,GAAG,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,2BAA2B,CAAG,GAAG,CAEvC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,CAAC,CAEpB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,CAAC,CAErB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,CAAC,CAEnB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,CAAC,CAEpB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,CAAC,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,CAAC,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,CAAC,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,CAAC,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,CAAC,CAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,CAAC,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,UAAU,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,UAAU,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,GAAG,CAErB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,GAAG,CAEjC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,GAAG,CAEjC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gCAAgC,CAAG,GAAG,CAE5C;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gCAAgC,CAAG,GAAG,CAE5C;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,GAAG,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,IAAI,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,IAAI,CAEhC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,IAAI,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,IAAI,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,0BAA0B,CAAG,IAAI,CACvC,KAAM,CAAAC,0BAA0B,CAAG,IAAI,CAAE;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,yBAAyB,CAAG,IAAI,CACtC,KAAM,CAAAC,yBAAyB,CAAG,IAAI,CAAE;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,IAAI,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,yBAAyB,CAAG,IAAI,CACtC,KAAM,CAAAC,yBAAyB,CAAG,IAAI,CAAE;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,wBAAwB,CAAG,IAAI,CACrC,KAAM,CAAAC,wBAAwB,CAAG,IAAI,CAAE;AAEvC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAErB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,IAAI,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,OAAO,CAAG,IAAI,CAEpB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,IAAI,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,IAAI,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,IAAI,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,IAAI,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,KAAK,CAEjC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,IAAI,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,IAAI,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,IAAI,CAExB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAErB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,IAAI,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,IAAI,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,KAAK,CAErC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,KAAK,CAErC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,wBAAwB,CAAG,KAAK,CAEtC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,wBAAwB,CAAG,KAAK,CAEtC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,KAAK,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,wBAAwB,CAAG,KAAK,CAEtC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,KAAK,CAErC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,6BAA6B,CAAG,KAAK,CAE3C;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAErB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAG,IAAI,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,IAAI,CAEzB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,IAAI,CAEhC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,IAAI,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,IAAI,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,IAAI,CAEhC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,IAAI,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,wBAAwB,CAAG,IAAI,CAErC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,0BAA0B,CAAG,IAAI,CAEvC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,CAAC,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,CAAC,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,IAAI,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,IAAI,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,IAAI,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,CAAC,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,CAAC,CAE9B;AAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,EAAE,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,MAAM,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,aAAa,CAE1C;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,QAAQ,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,MAAM,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,CAAC,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,IAAI,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAE/B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,KAAK,CAEpC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,IAAI,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,GAAG,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,GAAG,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,GAAG,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,GAAG,CAEhC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,kBAAkB,CAAG,GAAG,CAE9B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,GAAG,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,uBAAuB,CAAG,GAAG,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAG,GAAG,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,GAAG,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,GAAG,CAEvB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,YAAY,CAAG,GAAG,CAExB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,GAAG,CAE5B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,GAAG,CAE3B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,mBAAmB,CAAG,GAAG,CAE/B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,aAAa,CAAG,GAAG,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAG,KAAK,CAE7B;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,KAAK,CAAG,KAAK,CAEnB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,KAAK,CAAG,QAAQ,CAEtB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,qBAAqB,CAAG,IAAI,CAElC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,sBAAsB,CAAG,IAAI,CAEnC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,CACtBC,OAAO,CAAE,SAAS,CAClBC,MAAM,CAAE,QACT,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,yBAAyB,CAAG,CACjCC,WAAW,CAAE,aAAa,CAC1BC,MAAM,CAAE,QAAQ,CAChBC,IAAI,CAAE,MACP,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,yBAAyB,CAAG,CACjCC,MAAM,CAAE,QAAQ,CAChBC,QAAQ,CAAE,UAAU,CACpBC,MAAM,CAAE,QAAQ,CAChBC,UAAU,CAAE,YAAY,CACxBC,WAAW,CAAE,aACd,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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CCG,SAAS,CAAEA,SAAS,CACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCM,WAAW,CAAEA,WAAW,CACxB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,IAAI,CAAEA,IAAI,CACV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,IAAI,CAAEA,IAAI,CACV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCI,QAAQ,CAAEA,QAAQ,CAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,UAAU,CAAEA,UAAU,CACtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCC,YAAY,CAAEA,YAAY,CAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCC,OAAO,CAAEA,OAAO,CAChB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCI,SAAS,CAAEA,SAAS,CACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCC,eAAe,CAAEA,eAAe,CAChC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,YAAY,CAAEA,YAAY,CAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCG,QAAQ,CAAEA,QAAQ,CAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,QAAQ,CAAEA,QAAQ,CAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCE,YAAY,CAAEA,YAAY,CAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCC,cAAc,CAAEA,cAAc,CAC9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCK,eAAe,CAAEA,eAAe,CAChC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCC,4BAA4B,CAAEA,4BAA4B,CAC1D;AACD;AACA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;AACA;AACA;AACA,KACE,IAAI,CAACoH,MAAM,CAAG,GAAI,CAAA9B,MAAM,CAAEjB,KAAM,CAAC,CAEjC;AACF;AACA;AACA;AACA,KACE,IAAI,CAACgD,OAAO,CAAG,EAAE,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA,IACE,IAAI,CAACX,OAAO,CAAGA,OAAO,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,OAAO,CAAG,CAAC,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACV,KAAK,CAAGA,KAAK,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAGA,KAAK,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAGA,SAAS,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAGA,SAAS,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,UAAU,CAAGA,UAAU,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACD,MAAM,CAAGA,MAAM,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACO,cAAc,CAAG,IAAI,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC9X,IAAI,CAAGA,IAAI,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2K,MAAM,CAAG,GAAI,CAAA1D,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC8Q,MAAM,CAAG,GAAI,CAAA9Q,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACiE,MAAM,CAAG,GAAI,CAAAjE,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACoI,QAAQ,CAAG,CAAC,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2I,gBAAgB,CAAG,IAAI,CAE5B;AACF;AACA;AACA;AACA,KACE,IAAI,CAACjI,MAAM,CAAG,GAAI,CAAA1E,OAAO,CAAC,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4M,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,KAAK,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,CAAC,CAAE;AAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC/E,UAAU,CAAGA,UAAU,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACgF,QAAQ,CAAG,CAAC,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACpC,OAAO,CAAG,CAAC,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACqC,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAG,IAAI,CAExB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,qBAAqB,CAAG,KAAK,CAElC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,KAAK,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAG,CAAC,CAEtB,CAEA;AACD;AACA;AACA;AACA,IACC,GAAI,CAAA9D,KAAKA,CAAA,CAAG,CAEX,MAAO,KAAI,CAAC+C,MAAM,CAAChC,IAAI,CAExB,CAEA,GAAI,CAAAf,KAAKA,CAAExS,KAAK,CAAG,IAAI,CAAG,CAEzB,IAAI,CAACu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CAAC,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACtK,WAAW,CAAG,GAAI,CAAAsK,OAAO,CAAC,CAAC,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC/V,gBAAgB,CAAGud,QAAQ,CAACW,0BAA0B,CAE3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,qBAAqB,CAAGZ,QAAQ,CAACa,gCAAgC,CAAE;AAExE;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,sBAAsB,CAAG,KAAK,CAEnC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChC,MAAM,CAAG,GAAI,CAAAR,MAAM,CAAC,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyC,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,KAAK,CAEvB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,KAAK,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAG,CAAC,CAEpB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,EAAE,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,mBAAmB,CAAGz2B,SAAS,CAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC02B,sBAAsB,CAAG12B,SAAS,CAEvC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACkY,QAAQ,CAAG,CAAC,CAAC,CAEnB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCye,cAAcA,CAAE,6EAA+E,CAAC,CAEhG;AACD;AACA;AACA;AACA;AACA;AACA;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,UAAU,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyjC,QAAQ,CAAG9vC,cAAc,CAE9B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+vC,IAAI,CAAGnwC,SAAS,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACowC,YAAY,CAAG,KAAK,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,OAAO,CAAG,CAAC,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAG,KAAK,CAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,QAAQ,CAAGtvC,cAAc,CAE9B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACuvC,QAAQ,CAAGtvC,sBAAsB,CAEtC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACuvC,aAAa,CAAGjwC,WAAW,CAEhC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACkwC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,IAAI,CAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,GAAI,CAAAnD,KAAK,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACoD,UAAU,CAAG,CAAC,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAGhvC,cAAc,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACivC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,IAAI,CAEtB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,IAAI,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAGhnC,iBAAiB,CAEpC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACinC,UAAU,CAAG,CAAC,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAGjoC,aAAa,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACkoC,YAAY,CAAGloC,aAAa,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmoC,YAAY,CAAGnoC,aAAa,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACooC,YAAY,CAAG,KAAK,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,IAAI,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,KAAK,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAG,KAAK,CAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,IAAI,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,IAAI,CAEtB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,KAAK,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,mBAAmB,CAAG,CAAC,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,KAAK,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,KAAK,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,KAAK,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACzP,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC0P,UAAU,CAAG,IAAI,CAEtB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC3tB,QAAQ,CAAG,CAAC,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACpC,OAAO,CAAG,CAAC,CAEhB,IAAI,CAACgwB,UAAU,CAAG,CAAC,CAEpB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAC,SAASA,CAAA,CAAG,CAEf,MAAO,KAAI,CAACD,UAAU,CAEvB,CAEA,GAAI,CAAAC,SAASA,CAAE9jC,KAAK,CAAG,CAEtB,GAAK,IAAI,CAAC6jC,UAAU,CAAG,CAAC,GAAK7jC,KAAK,CAAG,CAAC,CAAG,CAExC,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAACgwB,UAAU,CAAG7jC,KAAK,CAExB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACC40B,cAAcA,CAAE,uDAAyD,CAAC,CAE1E;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCmP,e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AK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC8N,mBAAmB,CAAG,IAAI,CAE/B,IAAI,CAAC/qC,IAAI,CAAG,mBAAmB,CAE/B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyS,KAAK,CAAG,GAAI,CAAAyuB,KAAK,CAAE,QAAS,CAAC,CAAE;AAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACvG,GAAG,CAAG,IAAI,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACwN,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChB,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmB,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,cAAc,CAAG,GAAI,CAAAlW,KAAK,CAAC,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACiW,OAAO,CAAG1zC,iBAAiB,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC6zC,YAAY,CAAG,CAAC,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI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ACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,eAAgB,CAErB;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,KAAK,CAAG,CAElD,GAAK11B,KAAK,CAACC,OAAO,CAAE3V,KAAM,CAAC,CAAG,CAE7B,KAAM,IAAI,CAAAqrC,SAAS,CAAE,uDAAwD,CAAC,CAE/E,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,IAAI,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA,KACE14B,MAAM,CAACoC,cAAc,CAAE,IAAI,CAAE,IAAI,CAAE,CAAE3T,KAAK,CAAE4pC,KAAK,EAAI,CAAE,CAAC,CAExD;AACF;AACA;AACA;AACA,KACE,IAAI,CAACz7B,IAAI,CAAG,EAAE,CAEd;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACxP,KAAK,CAAGA,KAAK,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmrC,QAAQ,CAAGA,QAAQ,CAExB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChwB,KAAK,CAAGnb,KAAK,GAAKZ,SAAS,CAAGY,KAAK,CAACI,MAAM,CAAG+qC,QAAQ,CAAG,CAAC,CAE9D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAGA,UAAU,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACG,KAAK,CAAGluC,eAAe,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmuC,YAAY,CAAG,EAAE,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,OAAO,CAAGt0C,SAAS,CAExB;AACF;AACA;AACA;AACA,KACE,IAAI,CAAC+d,OAAO,CAAG,CAAC,CAEjB,CAEA;AACD;AACA;AACA,IACCw2B,gBAAgBA,CAAA,CAAG,CAAC,CAEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAv2B,WAAWA,CAAE9T,KAAK,CAAG,CAExB,GAAKA,KAAK,GAAK,IAAI,CAAG,IAAI,CAAC6T,OAAO,EAAG,CAEtC,CAEA;AACD;AACA;AACA;AACA;AACA,IACCy2B,QAAQA,CAAEtqC,KAAK,CAAG,CAEjB,IAAI,CAACkqC,KAAK,CAAGlqC,KAAK,CAElB,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACCuqC,cAAcA,CAAEC,KAAK,CAAE1wB,KAAK,CAAG,CAE9B,IAAI,CAACqwB,YAAY,CAACjsC,IAAI,CAAE,CAAEssC,KAAK,CAAE1wB,KAAM,CAAE,CAAC,CAE3C,CAEA;AACD;AACA,IACC2wB,iBAAiBA,CAAA,CAAG,CAEnB,IAAI,CAACN,YAAY,CAACprC,MAAM,CAAG,CAAC,CAE7B,CAEA;AACD;AACA;AACA;AACA;AACA,IACC0G,IAAIA,CAAE8P,MAAM,CAAG,CAEd,IAAI,CAACpH,IAAI,CAAGoH,MAAM,CAACpH,IAAI,CACvB,IAAI,CAACxP,KAAK,CAAG,GAAI,CAAA4W,MAAM,CAAC5W,KAAK,CAACsF,WAAW,CAAEsR,MAAM,CAAC5W,KAAM,CAAC,CACzD,IAAI,CAACmrC,QAAQ,CAAGv0B,MAAM,CAACu0B,QAAQ,CAC/B,IAAI,CAAChwB,KAAK,CAAGvE,MAAM,CAACuE,KAAK,CACzB,IAAI,CAACiwB,UAAU,CAAGx0B,MAAM,CAACw0B,UAAU,CAEnC,IAAI,CAACG,KAAK,CAAG30B,MAAM,CAAC20B,KAAK,CACzB,IAAI,CAACE,OAAO,CAAG70B,MAAM,CAAC60B,OAAO,CAE7B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCM,MAAMA,CAAEC,MAAM,CAAEjiC,SAAS,CAAEkiC,MAAM,CAAG,CAEnCD,MAAM,EAAI,IAAI,CAACb,QAAQ,CACvBc,MAAM,EAAIliC,SAAS,CAACohC,QAAQ,CAE5B,IAAM,GAAI,CAAAjrC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgrC,QAAQ,CAAEjrC,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEjD,IAAI,CAACF,KAAK,CAAEgsC,MAAM,CAAG9rC,CAAC,CAAE,CAAG6J,SAAS,CAAC/J,KAAK,CAAEisC,MAAM,CAAG/rC,CAAC,CAAE,CAEzD,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACCgsC,SAASA,CAAElsC,KAAK,CAAG,CAElB,IAAI,CAACA,KAAK,CAACkF,GAAG,CAAElF,KAAM,CAAC,CAEvB,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC2H,YAAYA,CAAEjG,CAAC,CAAG,CAEjB,GAAK,IAAI,CAACypC,QAAQ,GAAK,CAAC,CAAG,CAE1B,IAAM,GAAI,CAAAjrC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgb,KAAK,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE9C8qC,UAAU,CAAClhC,mBAAmB,CAAE,IAAI,CAAE5J,CAAE,CAAC,CACzC8qC,UAAU,CAACrjC,YAAY,CAAEjG,CAAE,CAAC,CAE5B,IAAI,CAACyqC,KAAK,CAAEjsC,CAAC,CAAE8qC,UAAU,CAACppC,CAAC,CAAEopC,UAAU,CAAC9oC,CAAE,CAAC,CAE5C,CAED,CAAC,IAAM,IAAK,IAAI,CAACipC,QAAQ,GAAK,CAAC,CAAG,CAEjC,IAAM,GAAI,CAAAjrC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgb,KAAK,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE9C6qC,SAAS,CAACjhC,mBAAmB,CAAE,IAAI,CAAE5J,CAAE,CAAC,CACxC6qC,SAAS,CAACpjC,YAAY,CAAEjG,CAAE,CAAC,CAE3B,IAAI,CAAC0qC,MAAM,CAAElsC,CAAC,CAAE6qC,SAAS,CAACnpC,CAAC,CAAEmpC,SAAS,CAAC7oC,CAAC,CAAE6oC,SAAS,CAACryB,CAAE,CAAC,CAExD,CAED,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCK,YAAYA,CAAErX,CAAC,CAAG,CAEjB,IAAM,GAAI,CAAAxB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgb,KAAK,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE9C6qC,SAAS,CAACjhC,mBAAmB,CAAE,IAAI,CAAE5J,CAAE,CAAC,CAExC6qC,SAAS,CAAChyB,YAAY,CAAErX,CAAE,CAAC,CAE3B,IAAI,CAAC0qC,MAAM,CAAElsC,CAAC,CAAE6qC,SAAS,CAACnpC,CAAC,CAAEmpC,SAAS,CAAC7oC,CAAC,CAAE6oC,SAAS,CAACryB,CAAE,CAAC,CAExD,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCkJ,iBAAiBA,CAAElgB,CAAC,CAAG,CAEtB,IAAM,GAAI,CAAAxB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgb,KAAK,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE9C6qC,SAAS,CAACjhC,mBAAmB,CAAE,IAAI,CAAE5J,CAAE,CAAC,CAExC6qC,SAAS,CAACnpB,iBAAiB,CAAElgB,CAAE,CAAC,CAEhC,IAAI,CAAC0qC,MAAM,CAAElsC,CAAC,CAAE6qC,SAAS,CAACnpC,CAAC,CAAEmpC,SAAS,CAAC7oC,CAAC,CAAE6oC,SAAS,CAACryB,CAAE,CAAC,CAExD,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCiK,kBAAkBA,CAAEjhB,CAAC,CAAG,CAEvB,IAAM,GAAI,CAAAxB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACgb,KAAK,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE9C6qC,SAAS,CAACjhC,mBAAmB,CAAE,IAAI,CAAE5J,CAAE,CAAC,CAExC6qC,SAAS,CAACpoB,kBAAkB,CAAEjhB,CAAE,CAAC,CAEjC,IAAI,CAAC0qC,MAAM,CAAElsC,CAAC,CAAE6qC,SAAS,CAACnpC,CAAC,CAAEmpC,SAAS,CAAC7oC,CAAC,CAAE6oC,SAAS,CAACryB,CAAE,CAAC,CAExD,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCxT,GAAGA,CAAE7D,KAAK,CAAEuI,MAAM,CAAG,CAAC,CAAG,CAExB;AACA,IAAI,CAAC5J,KAAK,CAACkF,GAAG,CAAE7D,KAAK,CAAEuI,MAAO,CAAC,CAE/B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACChD,YAAYA,CAAEjH,KAAK,CAAE0sC,SAAS,CAAG,CAEhC,GAAI,CAAAhrC,KAAK,CAAG,IAAI,CAACrB,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAGkB,SAAS,CAAE,CAE3D,GAAK,IAAI,CAACjB,UAAU,CAAG/pC,KAAK,CAAGgE,WAAW,CAAEhE,KAAK,CAAE,IAAI,CAACrB,KAAM,CAAC,CAE/D,MAAO,CAAAqB,KAAK,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCsF,YAAYA,CAAEhH,KAAK,CAAE0sC,SAAS,CAAEhrC,KAAK,CAAG,CAEvC,GAAK,IAAI,CAAC+pC,UAAU,CAAG/pC,KAAK,CAAG0E,SAAS,CAAE1E,KAAK,CAAE,IAAI,CAACrB,KAAM,CAAC,CAE7D,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAGkB,SAAS,CAAE,CAAGhrC,KAAK,CAEvD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACC2I,IAAIA,CAAErK,KAAK,CAAG,CAEb,GAAI,CAAAiC,CAAC,CAAG,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAE,CAE3C,GAAK,IAAI,CAACC,UAAU,CAAGxpC,CAAC,CAAGyD,WAAW,CAAEzD,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAEvD,MAAO,CAAA4B,CAAC,CAET,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC6E,IAAIA,CAAE9G,KAAK,CAAEiC,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACwpC,UAAU,CAAGxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAE,CAAGvpC,CAAC,CAEvC,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACCqI,IAAIA,CAAEtK,KAAK,CAAG,CAEb,GAAI,CAAAuC,CAAC,CAAG,IAAI,CAAClC,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAE/C,GAAK,IAAI,CAACC,UAAU,CAAGlpC,CAAC,CAAGmD,WAAW,CAAEnD,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAEvD,MAAO,CAAAkC,CAAC,CAET,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCwE,IAAIA,CAAE/G,KAAK,CAAEuC,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACkpC,UAAU,CAAGlpC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGjpC,CAAC,CAE3C,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACCkY,IAAIA,CAAEza,KAAK,CAAG,CAEb,GAAI,CAAA+Y,CAAC,CAAG,IAAI,CAAC1Y,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAE/C,GAAK,IAAI,CAACC,UAAU,CAAG1yB,CAAC,CAAGrT,WAAW,CAAEqT,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAEvD,MAAO,CAAA0Y,CAAC,CAET,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCG,IAAIA,CAAElZ,KAAK,CAAE+Y,CAAC,CAAG,CAEhB,GAAK,IAAI,CAAC0yB,UAAU,CAAG1yB,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGzyB,CAAC,CAE3C,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA,IACC2B,IAAIA,CAAE1a,KAAK,CAAG,CAEb,GAAI,CAAAgZ,CAAC,CAAG,IAAI,CAAC3Y,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAE/C,GAAK,IAAI,CAACC,UAAU,CAAGzyB,CAAC,CAAGtT,WAAW,CAAEsT,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAEvD,MAAO,CAAA2Y,CAAC,CAET,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCG,IAAIA,CAAEnZ,KAAK,CAAEgZ,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACyyB,UAAU,CAAGzyB,CAAC,CAAG5S,SAAS,CAAE4S,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGxyB,CAAC,CAE3C,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCwzB,KAAKA,CAAExsC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAG,CAEpBvC,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGiC,CAAC,CAC3B,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGuC,CAAC,CAE3B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCkqC,MAAMA,CAAEzsC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAEwW,CAAC,CAAG,CAExB/Y,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAC9B0Y,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGiC,CAAC,CAC3B,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGuC,CAAC,CAC3B,IAAI,CAAClC,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAG+Y,CAAC,CAE3B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACC4zB,OAAOA,CAAE3sC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAEwW,CAAC,CAAEC,CAAC,CAAG,CAE5BhZ,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAC9B0Y,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAC9B2Y,CAAC,CAAG5S,SAAS,CAAE4S,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGiC,CAAC,CAC3B,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGuC,CAAC,CAC3B,IAAI,CAAClC,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAG+Y,CAAC,CAC3B,IAAI,CAAC1Y,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgZ,CAAC,CAE3B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC4zB,QAAQA,CAAEnrB,QAAQ,CAAG,CAEpB,IAAI,CAACsqB,gBAAgB,CAAGtqB,QAAQ,CAEhC,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA,IACCva,KAAKA,CAAA,CAAG,CAEP,MAAO,IAAI,KAAI,CAACvB,WAAW,CAAE,IAAI,CAACtF,KAAK,CAAE,IAAI,CAACmrC,QAAS,CAAC,CAACrkC,IAAI,CAAE,IAAK,CAAC,CAEtE,CAEA;AACD;AACA;AACA;AACA,IACCsO,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,CACZu2B,QAAQ,CAAE,IAAI,CAACA,QAAQ,CACvBlsC,IAAI,CAAE,IAAI,CAACe,KAAK,CAACsF,WAAW,CAACkK,IAAI,CACjCxP,KAAK,CAAE0V,KAAK,CAACI,IAAI,CAAE,IAAI,CAAC9V,KAAM,CAAC,CAC/BorC,UAAU,CAAE,IAAI,CAACA,UAClB,CAAC,CAED,GAAK,IAAI,CAAC57B,IAAI,GAAK,EAAE,CAAGoF,IAAI,CAACpF,IAAI,CAAG,IAAI,CAACA,IAAI,CAC7C,GAAK,IAAI,CAAC+7B,KAAK,GAAKluC,eAAe,CAAGuX,IAAI,CAAC22B,KAAK,CAAG,IAAI,CAACA,KAAK,CAE7D,MAAO,CAAA32B,IAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA43B,mBAAmB,QAAS,CAAAtB,eAAgB,CAEjD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAAvlC,SAAS,CAAE7F,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEtD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAqB,oBAAoB,QAAS,CAAAvB,eAAgB,CAElD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAA1lC,UAAU,CAAE1F,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEvD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAsB,2BAA2B,QAAS,CAAAxB,eAAgB,CAEzD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAAj8B,iBAAiB,CAAEnP,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAE9D,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAuB,oBAAoB,QAAS,CAAAzB,eAAgB,CAElD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAAxlC,UAAU,CAAE5F,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEvD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAwB,qBAAqB,QAAS,CAAA1B,eAAgB,CAEnD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAA3lC,WAAW,CAAEzF,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAExD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAyB,oBAAoB,QAAS,CAAA3B,eAAgB,CAElD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAAzlC,UAAU,CAAE3F,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEvD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA0B,qBAAqB,QAAS,CAAA5B,eAAgB,CAEnD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAA5lC,WAAW,CAAExF,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAExD,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA2B,sBAAsB,QAAS,CAAA7B,eAAgB,CAEpD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAA3lC,WAAW,CAAEzF,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEvD,IAAI,CAAC4B,wBAAwB,CAAG,IAAI,CAErC,CAEAhjC,IAAIA,CAAErK,KAAK,CAAG,CAEb,GAAI,CAAAiC,CAAC,CAAGipC,aAAa,CAAE,IAAI,CAAC7qC,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAE5D,GAAK,IAAI,CAACC,UAAU,CAAGxpC,CAAC,CAAGyD,WAAW,CAAEzD,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAEvD,MAAO,CAAA4B,CAAC,CAET,CAEA6E,IAAIA,CAAE9G,KAAK,CAAEiC,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACwpC,UAAU,CAAGxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAE,CAAGR,WAAW,CAAE/oC,CAAE,CAAC,CAEtD,MAAO,KAAI,CAEZ,CAEAqI,IAAIA,CAAEtK,KAAK,CAAG,CAEb,GAAI,CAAAuC,CAAC,CAAG2oC,aAAa,CAAE,IAAI,CAAC7qC,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAG,CAAC,CAEhE,GAAK,IAAI,CAACC,UAAU,CAAGlpC,CAAC,CAAGmD,WAAW,CAAEnD,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAEvD,MAAO,CAAAkC,CAAC,CAET,CAEAwE,IAAIA,CAAE/G,KAAK,CAAEuC,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACkpC,UAAU,CAAGlpC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGR,WAAW,CAAEzoC,CAAE,CAAC,CAE1D,MAAO,KAAI,CAEZ,CAEAkY,IAAIA,CAAEza,KAAK,CAAG,CAEb,GAAI,CAAA+Y,CAAC,CAAGmyB,aAAa,CAAE,IAAI,CAAC7qC,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAG,CAAC,CAEhE,GAAK,IAAI,CAACC,UAAU,CAAG1yB,CAAC,CAAGrT,WAAW,CAAEqT,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAEvD,MAAO,CAAA0Y,CAAC,CAET,CAEAG,IAAIA,CAAElZ,KAAK,CAAE+Y,CAAC,CAAG,CAEhB,GAAK,IAAI,CAAC0yB,UAAU,CAAG1yB,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGR,WAAW,CAAEjyB,CAAE,CAAC,CAE1D,MAAO,KAAI,CAEZ,CAEA2B,IAAIA,CAAE1a,KAAK,CAAG,CAEb,GAAI,CAAAgZ,CAAC,CAAGkyB,aAAa,CAAE,IAAI,CAAC7qC,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAG,CAAC,CAEhE,GAAK,IAAI,CAACC,UAAU,CAAGzyB,CAAC,CAAGtT,WAAW,CAAEsT,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAEvD,MAAO,CAAA2Y,CAAC,CAET,CAEAG,IAAIA,CAAEnZ,KAAK,CAAEgZ,CAAC,CAAG,CAEhB,GAAK,IAAI,CAACyyB,UAAU,CAAGzyB,CAAC,CAAG5S,SAAS,CAAE4S,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAErD,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,IAAI,CAACwrC,QAAQ,CAAG,CAAC,CAAE,CAAGR,WAAW,CAAEhyB,CAAE,CAAC,CAE1D,MAAO,KAAI,CAEZ,CAEAwzB,KAAKA,CAAExsC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAG,CAEpBvC,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAE/oC,CAAE,CAAC,CAC1C,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEzoC,CAAE,CAAC,CAE1C,MAAO,KAAI,CAEZ,CAEAkqC,MAAMA,CAAEzsC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAEwW,CAAC,CAAG,CAExB/Y,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAC9B0Y,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAE/oC,CAAE,CAAC,CAC1C,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEzoC,CAAE,CAAC,CAC1C,IAAI,CAAClC,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEjyB,CAAE,CAAC,CAE1C,MAAO,KAAI,CAEZ,CAEA4zB,OAAOA,CAAE3sC,KAAK,CAAEiC,CAAC,CAAEM,CAAC,CAAEwW,CAAC,CAAEC,CAAC,CAAG,CAE5BhZ,KAAK,EAAI,IAAI,CAACwrC,QAAQ,CAEtB,GAAK,IAAI,CAACC,UAAU,CAAG,CAEtBxpC,CAAC,CAAGmE,SAAS,CAAEnE,CAAC,CAAE,IAAI,CAAC5B,KAAM,CAAC,CAC9BkC,CAAC,CAAG6D,SAAS,CAAE7D,CAAC,CAAE,IAAI,CAAClC,KAAM,CAAC,CAC9B0Y,CAAC,CAAG3S,SAAS,CAAE2S,CAAC,CAAE,IAAI,CAAC1Y,KAAM,CAAC,CAC9B2Y,CAAC,CAAG5S,SAAS,CAAE4S,CAAC,CAAE,IAAI,CAAC3Y,KAAM,CAAC,CAE/B,CAEA,IAAI,CAACA,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAE/oC,CAAE,CAAC,CAC1C,IAAI,CAAC5B,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEzoC,CAAE,CAAC,CAC1C,IAAI,CAAClC,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEjyB,CAAE,CAAC,CAC1C,IAAI,CAAC1Y,KAAK,CAAEL,KAAK,CAAG,CAAC,CAAE,CAAGgrC,WAAW,CAAEhyB,CAAE,CAAC,CAE1C,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAs0B,sBAAsB,QAAS,CAAA/B,eAAgB,CAEpD;AACD;AACA;AACA;AACA;AACA;AACA,IACC5lC,WAAWA,CAAEtF,KAAK,CAAEmrC,QAAQ,CAAEC,UAAU,CAAG,CAE1C,KAAK,CAAE,GAAI,CAAA7lC,YAAY,CAAEvF,KAAM,CAAC,CAAEmrC,QAAQ,CAAEC,UAAW,CAAC,CAEzD,CAED,CAEA,GAAI,CAAA8B,KAAK,CAAG,CAAC,CAEb,KAAM,CAAAC,GAAG,CAAG,aAAc,GAAI,CAAAngB,OAAO,CAAC,CAAC,CACvC,KAAM,CAAAogB,IAAI,CAAG,aAAc,GAAI,CAAA5Y,QAAQ,CAAC,CAAC,CACzC,KAAM,CAAA6Y,OAAO,CAAG,aAAc,GAAI,CAAAhsB,OAAO,CAAC,CAAC,CAC3C,KAAM,CAAAisB,MAAM,CAAG,aAAc,GAAI,CAAA/oB,IAAI,CAAC,CAAC,CACvC,KAAM,CAAAgpB,gBAAgB,CAAG,aAAc,GAAI,CAAAhpB,IAAI,CAAC,CAAC,CACjD,KAAM,CAAAipB,SAAS,CAAG,aAAc,GAAI,CAAAnsB,OAAO,CAAC,CAAC,CAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAosB,cAAc,QAAS,CAAA1uC,eAAgB,CAE5C;AACD;AACA,IACCuG,WAAWA,CAAA,CAAG,CAEb,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACooC,gBAAgB,CAAG,IAAI,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE96B,MAAM,CAACoC,cAAc,CAAE,IAAI,CAAE,IAAI,CAAE,CAAE3T,KAAK,CAAE6rC,KAAK,EAAI,CAAE,CAAC,CAExD;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChsC,IAAI,CAAGN,YAAY,CAAC,CAAC,CAE1B;AACF;AACA;AACA;AACA,KACE,IAAI,CAAC4O,IAAI,CAAG,EAAE,CACd,IAAI,CAACvQ,IAAI,CAAG,gBAAgB,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACU,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACguC,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAG,CAAC,CAAC,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,CAAC,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,oBAAoB,CAAG,KAAK,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,MAAM,CAAG,EAAE,CAEhB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACxnB,WAAW,CAAG,IAAI,CAEvB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AACu3C,OAAO,CAAG,CAAC,CAAC,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACf,QAAQ,CAAG,CAAC,CAAC,CAElB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACgB,cAAc,CAAG,EAAE,CAExB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAGN,cAAc,CAElC;AACF;AACA;AACA;AACA,KACE,IAAI,CAACO,cAAc,CAAGN,gBAAgB,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACjN,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACG,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACI,GAAG,CAAG,KAAK,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACgN,MAAM,CAAG,KAAK,CAEnB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,QAAQ,CAAG,KAAK,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC9R,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+R,UAAU,CAAG,CACjBC,gBAAgB,CAAE,KAAK,CAAE;AACzBC,SAAS,CAAE,KAAM;AAClB,CAAC,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,sBAAsB,CAAG,CAC7B,OAAO,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CACpB,IAAI,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CACd,KAAK,CAAE,CAAE,CAAC,CAAE,CAAC,CACd,CAAC,CAED;AACF;AACA;A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CoU,kBAAkB,CAAGpU,IAAI,CAACoU,kBAAkB,CAEjD,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAkC,YAAY,QAAS,CAAAnC,KAAM,CAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEo1D,EAAE,CAAG,CAAC,CAAEC,EAAE,CAAG,CAAC,CAAEC,OAAO,CAAG,CAAC,CAAEC,OAAO,CAAG,CAAC,CAAEC,WAAW,CAAG,CAAC,CAAEC,SAAS,CAAGt6D,IAAI,CAACC,EAAE,CAAG,CAAC,CAAEs6D,UAAU,CAAG,KAAK,CAAEC,SAAS,CAAG,CAAC,CAAG,CAEpI,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,IAAI,CAE1B,IAAI,CAACj8D,IAAI,CAAG,cAAc,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACy7D,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,OAAO,CAAGA,OAAO,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,OAAO,CAAGA,OAAO,CAEtB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAGA,WAAW,CAE9B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAGA,SAAS,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,UAAU,CAAGA,UAAU,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAGA,SAAS,CAE3B,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCxC,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAA0f,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAAwC,KAAK,CAAG16D,IAAI,CAACC,EAAE,CAAG,CAAC,CACzB,GAAI,CAAA06D,UAAU,CAAG,IAAI,CAACL,SAAS,CAAG,IAAI,CAACD,WAAW,CAClD,KAAM,CAAAO,UAAU,CAAG56D,IAAI,CAACiC,GAAG,CAAE04D,UAAW,CAAC,CAAGl9C,MAAM,CAACC,OAAO,CAE1D;AACA,MAAQi9C,UAAU,CAAG,CAAC,CAAGA,UAAU,EAAID,KAAK,CAC5C,MAAQC,UAAU,CAAGD,KAAK,CAAGC,UAAU,EAAID,KAAK,CAEhD,GAAKC,UAAU,CAAGl9C,MAAM,CAACC,OAAO,CAAG,CAElC,GAAKk9C,UAAU,CAAG,CAEjBD,UAAU,CAAG,CAAC,CAEf,CAAC,IAAM,CAENA,UAAU,CAAGD,KAAK,CAEnB,CAED,CAEA,GAAK,IAAI,CAACH,UAAU,GAAK,IAAI,EAAI,CAAEK,UAAU,CAAG,CAE/C,GAAKD,UAAU,GAAKD,KAAK,CAAG,CAE3BC,UAAU,CAAG,CAAED,KAAK,CAErB,CAAC,IAAM,CAENC,UAAU,CAAGA,UAAU,CAAGD,KAAK,CAEhC,CAED,CAEA,KAAM,CAAAzyD,KAAK,CAAG,IAAI,CAACoyD,WAAW,CAAG14D,CAAC,CAAGg5D,UAAU,CAC/C,GAAI,CAAAx5D,CAAC,CAAG,IAAI,CAAC84D,EAAE,CAAG,IAAI,CAACE,OAAO,CAAGn6D,IAAI,CAAC+D,GAAG,CAAEkE,KAAM,CAAC,CAClD,GAAI,CAAAxG,CAAC,CAAG,IAAI,CAACy4D,EAAE,CAAG,IAAI,CAACE,OAAO,CAAGp6D,IAAI,CAACgE,GAAG,CAAEiE,KAAM,CAAC,CAElD,GAAK,IAAI,CAACuyD,SAAS,GAAK,CAAC,CAAG,CAE3B,KAAM,CAAAz2D,GAAG,CAAG/D,IAAI,CAAC+D,GAAG,CAAE,IAAI,CAACy2D,SAAU,CAAC,CACtC,KAAM,CAAAx2D,GAAG,CAAGhE,IAAI,CAACgE,GAAG,CAAE,IAAI,CAACw2D,SAAU,CAAC,CAEtC,KAAM,CAAA/sD,EAAE,CAAGtM,CAAC,CAAG,IAAI,CAAC84D,EAAE,CACtB,KAAM,CAAAvsD,EAAE,CAAGjM,CAAC,CAAG,IAAI,CAACy4D,EAAE,CAEtB;AACA/4D,CAAC,CAAGsM,EAAE,CAAG1J,GAAG,CAAG2J,EAAE,CAAG1J,GAAG,CAAG,IAAI,CAACi2D,EAAE,CACjCx4D,CAAC,CAAGgM,EAAE,CAAGzJ,GAAG,CAAG0J,EAAE,CAAG3J,GAAG,CAAG,IAAI,CAACm2D,EAAE,CAElC,CAEA,MAAO,CAAA/0C,KAAK,CAAC1gB,GAAG,CAAEtD,CAAC,CAAEM,CAAE,CAAC,CAEzB,CAEA4E,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC8jD,EAAE,CAAG9jD,MAAM,CAAC8jD,EAAE,CACnB,IAAI,CAACC,EAAE,CAAG/jD,MAAM,CAAC+jD,EAAE,CAEnB,IAAI,CAACC,OAAO,CAAGhkD,MAAM,CAACgkD,OAAO,CAC7B,IAAI,CAACC,OAAO,CAAGjkD,MAAM,CAACikD,OAAO,CAE7B,IAAI,CAACC,WAAW,CAAGlkD,MAAM,CAACkkD,WAAW,CACrC,IAAI,CAACC,SAAS,CAAGnkD,MAAM,CAACmkD,SAAS,CAEjC,IAAI,CAACC,UAAU,CAAGpkD,MAAM,CAACokD,UAAU,CAEnC,IAAI,CAACC,SAAS,CAAGrkD,MAAM,CAACqkD,SAAS,CAEjC,MAAO,KAAI,CAEZ,CAEA7lD,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC8lD,EAAE,CAAG,IAAI,CAACA,EAAE,CACjB9lD,IAAI,CAAC+lD,EAAE,CAAG,IAAI,CAACA,EAAE,CAEjB/lD,IAAI,CAACgmD,OAAO,CAAG,IAAI,CAACA,OAAO,CAC3BhmD,IAAI,CAACimD,OAAO,CAAG,IAAI,CAACA,OAAO,CAE3BjmD,IAAI,CAACkmD,WAAW,CAAG,IAAI,CAACA,WAAW,CACnClmD,IAAI,CAACmmD,SAAS,CAAG,IAAI,CAACA,SAAS,CAE/BnmD,IAAI,CAAComD,UAAU,CAAG,IAAI,CAACA,UAAU,CAEjCpmD,IAAI,CAACqmD,SAAS,CAAG,IAAI,CAACA,SAAS,CAE/B,MAAO,CAAArmD,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACuW,EAAE,CAAGvW,IAAI,CAACuW,EAAE,CACjB,IAAI,CAACC,EAAE,CAAGxW,IAAI,CAACwW,EAAE,CAEjB,IAAI,CAACC,OAAO,CAAGzW,IAAI,CAACyW,OAAO,CAC3B,IAAI,CAACC,OAAO,CAAG1W,IAAI,CAAC0W,OAAO,CAE3B,IAAI,CAACC,WAAW,CAAG3W,IAAI,CAAC2W,WAAW,CACnC,IAAI,CAACC,SAAS,CAAG5W,IAAI,CAAC4W,SAAS,CAE/B,IAAI,CAACC,UAAU,CAAG7W,IAAI,CAAC6W,UAAU,CAEjC,IAAI,CAACC,SAAS,CAAG9W,IAAI,CAAC8W,SAAS,CAE/B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAK,QAAQ,QAAS,CAAAb,YAAa,CAEnC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCn1D,WAAWA,CAAEo1D,EAAE,CAAEC,EAAE,CAAEY,OAAO,CAAET,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAG,CAElE,KAAK,CAAEN,EAAE,CAAEC,EAAE,CAAEY,OAAO,CAAEA,OAAO,CAAET,WAAW,CAAEC,SAAS,CAAEC,UAAW,CAAC,CAErE;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACQ,UAAU,CAAG,IAAI,CAEtB,IAAI,CAACv8D,IAAI,CAAG,UAAU,CAEvB,CAED,CAEA,QAAS,CAAAw8D,SAASA,CAAA,CAAG,CAEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA,GAPC,CASA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEC,GAAI,CAAAC,EAAE,CAAG,CAAC,CAAE78C,EAAE,CAAG,CAAC,CAAEna,EAAE,CAAG,CAAC,CAAEoa,EAAE,CAAG,CAAC,CAElC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,QAAS,CAAAglC,IAAIA,CAAEtmC,EAAE,CAAEI,EAAE,CAAE6N,EAAE,CAAEC,EAAE,CAAG,CAE/BgwC,EAAE,CAAGl+C,EAAE,CACPqB,EAAE,CAAG4M,EAAE,CACP/mB,EAAE,CAAG,CAAC,CAAC,CAAG8Y,EAAE,CAAG,CAAC,CAAGI,EAAE,CAAG,CAAC,CAAG6N,EAAE,CAAGC,EAAE,CACnC5M,EAAE,CAAG,CAAC,CAAGtB,EAAE,CAAG,CAAC,CAAGI,EAAE,CAAG6N,EAAE,CAAGC,EAAE,CAE/B,CAEA,MAAO,CAENiwC,cAAc,CAAE,QAAAA,CAAWn+C,EAAE,CAAEI,EAAE,CAAEkT,EAAE,CAAE8qC,EAAE,CAAEC,OAAO,CAAG,CAEpD/X,IAAI,CAAElmC,EAAE,CAAEkT,EAAE,CAAE+qC,OAAO,EAAK/qC,EAAE,CAAGtT,EAAE,CAAE,CAAEq+C,OAAO,EAAKD,EAAE,CAAGh+C,EAAE,CAAG,CAAC,CAE7D,CAAC,CAEDk+C,wBAAwB,CAAE,QAAAA,CAAWt+C,EAAE,CAAEI,EAAE,CAAEkT,EAAE,CAAE8qC,EAAE,CAAEG,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAG,CAEpE;AACA,GAAI,CAAAvwC,EAAE,CAAG,CAAE9N,EAAE,CAAGJ,EAAE,EAAKu+C,GAAG,CAAG,CAAEjrC,EAAE,CAAGtT,EAAE,GAAOu+C,GAAG,CAAGC,GAAG,CAAE,CAAG,CAAElrC,EAAE,CAAGlT,EAAE,EAAKo+C,GAAG,CAC5E,GAAI,CAAAlC,EAAE,CAAG,CAAEhpC,EAAE,CAAGlT,EAAE,EAAKo+C,GAAG,CAAG,CAAEJ,EAAE,CAAGh+C,EAAE,GAAOo+C,GAAG,CAAGC,GAAG,CAAE,CAAG,CAAEL,EAAE,CAAG9qC,EAAE,EAAKmrC,GAAG,CAE5E;AACAvwC,EAAE,EAAIswC,GAAG,CACTlC,EAAE,EAAIkC,GAAG,CAETlY,IAAI,CAAElmC,EAAE,CAAEkT,EAAE,CAAEpF,EAAE,CAAEouC,EAAG,CAAC,CAEvB,CAAC,CAEDoC,IAAI,CAAE,QAAAA,CAAW95D,CAAC,CAAG,CAEpB,KAAM,CAAA03D,EAAE,CAAG13D,CAAC,CAAGA,CAAC,CAChB,KAAM,CAAA+5D,EAAE,CAAGrC,EAAE,CAAG13D,CAAC,CACjB,MAAO,CAAAs5D,EAAE,CAAG78C,EAAE,CAAGzc,CAAC,CAAGsC,EAAE,CAAGo1D,EAAE,CAAGh7C,EAAE,CAAGq9C,EAAE,CAEvC,CAED,CAAC,CAEF,CAEA;AAEA,KAAM,CAAAvuD,GAAG,CAAG,aAAc,GAAI,CAAAyT,OAAO,CAAC,CAAC,CACvC,KAAM,CAAA+6C,EAAE,CAAG,aAAc,GAAI,CAAAX,SAAS,CAAC,CAAC,CACxC,KAAM,CAAAY,EAAE,CAAG,aAAc,GAAI,CAAAZ,SAAS,CAAC,CAAC,CACxC,KAAM,CAAAa,EAAE,CAAG,aAAc,GAAI,CAAAb,SAAS,CAAC,CAAC,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAc,gBAAgB,QAAS,CAAAjE,KAAM,CAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAE0f,MAAM,CAAG,EAAE,CAAEm1C,MAAM,CAAG,KAAK,CAAEqC,SAAS,CAAG,aAAa,CAAEX,OAAO,CAAG,GAAG,CAAG,CAEpF,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,kBAAkB,CAAG,IAAI,CAE9B,IAAI,CAACx9D,IAAI,CAAG,kBAAkB,CAE9B;AACF;AACA;AACA;AACA,KACE,IAAI,CAAC+lB,MAAM,CAAGA,MAAM,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACm1C,MAAM,CAAGA,MAAM,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACqC,SAAS,CAAGA,SAAS,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACX,OAAO,CAAGA,OAAO,CAEvB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCpD,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAt3C,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAAuE,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAA3zC,MAAM,CAAG,IAAI,CAACA,MAAM,CAC1B,KAAM,CAAA7kB,CAAC,CAAG6kB,MAAM,CAAC5kB,MAAM,CAEvB,KAAM,CAAA8xB,CAAC,CAAG,CAAE/xB,CAAC,EAAK,IAAI,CAACg6D,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,EAAK/3D,CAAC,CAC7C,GAAI,CAAAs6D,QAAQ,CAAGj8D,IAAI,CAACuC,KAAK,CAAEkvB,CAAE,CAAC,CAC9B,GAAI,CAAAgxB,MAAM,CAAGhxB,CAAC,CAAGwqC,QAAQ,CAEzB,GAAK,IAAI,CAACvC,MAAM,CAAG,CAElBuC,QAAQ,EAAIA,QAAQ,CAAG,CAAC,CAAG,CAAC,CAAG,CAAEj8D,IAAI,CAACuC,KAAK,CAAEvC,IAAI,CAACiC,GAAG,CAAEg6D,QAAS,CAAC,CAAGv8D,CAAE,CAAC,CAAG,CAAC,EAAKA,CAAC,CAElF,CAAC,IAAM,IAAK+iD,MAAM,GAAK,CAAC,EAAIwZ,QAAQ,GAAKv8D,CAAC,CAAG,CAAC,CAAG,CAEhDu8D,QAAQ,CAAGv8D,CAAC,CAAG,CAAC,CAChB+iD,MAAM,CAAG,CAAC,CAEX,CAEA,GAAI,CAAAv6B,EAAE,CAAE8V,EAAE,CAAE;AAEZ,GAAK,IAAI,CAAC07B,MAAM,EAAIuC,QAAQ,CAAG,CAAC,CAAG,CAElC/zC,EAAE,CAAG3D,MAAM,CAAE,CAAE03C,QAAQ,CAAG,CAAC,EAAKv8D,CAAC,CAAE,CAEpC,CAAC,IAAM,CAEN;AACAyN,GAAG,CAACtG,UAAU,CAAE0d,MAAM,CAAE,CAAC,CAAE,CAAEA,MAAM,CAAE,CAAC,CAAG,CAAC,CAAChe,GAAG,CAAEge,MAAM,CAAE,CAAC,CAAG,CAAC,CAC7D2D,EAAE,CAAG/a,GAAG,CAET,CAEA,KAAM,CAAAgb,EAAE,CAAG5D,MAAM,CAAE03C,QAAQ,CAAGv8D,CAAC,CAAE,CACjC,KAAM,CAAA0oB,EAAE,CAAG7D,MAAM,CAAE,CAAE03C,QAAQ,CAAG,CAAC,EAAKv8D,CAAC,CAAE,CAEzC,GAAK,IAAI,CAACg6D,MAAM,EAAIuC,QAAQ,CAAG,CAAC,CAAGv8D,CAAC,CAAG,CAEtCs+B,EAAE,CAAGzZ,MAAM,CAAE,CAAE03C,QAAQ,CAAG,CAAC,EAAKv8D,CAAC,CAAE,CAEpC,CAAC,IAAM,CAEN;AACAyN,GAAG,CAACtG,UAAU,CAAE0d,MAAM,CAAE7kB,CAAC,CAAG,CAAC,CAAE,CAAE6kB,MAAM,CAAE7kB,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC6G,GAAG,CAAEge,MAAM,CAAE7kB,CAAC,CAAG,CAAC,CAAG,CAAC,CACzEs+B,EAAE,CAAG7wB,GAAG,CAET,CAEA,GAAK,IAAI,CAAC4uD,SAAS,GAAK,aAAa,EAAI,IAAI,CAACA,SAAS,GAAK,SAAS,CAAG,CAEvE;AACA,KAAM,CAAA34D,GAAG,CAAG,IAAI,CAAC24D,SAAS,GAAK,SAAS,CAAG,GAAG,CAAG,IAAI,CACrD,GAAI,CAAAT,GAAG,CAAGt7D,IAAI,CAACoD,GAAG,CAAE8kB,EAAE,CAAC1f,iBAAiB,CAAE2f,EAAG,CAAC,CAAE/kB,GAAI,CAAC,CACrD,GAAI,CAAAm4D,GAAG,CAAGv7D,IAAI,CAACoD,GAAG,CAAE+kB,EAAE,CAAC3f,iBAAiB,CAAE4f,EAAG,CAAC,CAAEhlB,GAAI,CAAC,CACrD,GAAI,CAAAo4D,GAAG,CAAGx7D,IAAI,CAACoD,GAAG,CAAEglB,EAAE,CAAC5f,iBAAiB,CAAEw1B,EAAG,CAAC,CAAE56B,GAAI,CAAC,CAErD;AACA,GAAKm4D,GAAG,CAAG,IAAI,CAAGA,GAAG,CAAG,GAAG,CAC3B,GAAKD,GAAG,CAAG,IAAI,CAAGA,GAAG,CAAGC,GAAG,CAC3B,GAAKC,GAAG,CAAG,IAAI,CAAGA,GAAG,CAAGD,GAAG,CAE3BI,EAAE,CAACN,wBAAwB,CAAEnzC,EAAE,CAAC/mB,CAAC,CAAEgnB,EAAE,CAAChnB,CAAC,CAAEinB,EAAE,CAACjnB,CAAC,CAAE68B,EAAE,CAAC78B,CAAC,CAAEm6D,GAAG,CAAEC,GAAG,CAAEC,GAAI,CAAC,CACpEI,EAAE,CAACP,wBAAwB,CAAEnzC,EAAE,CAACzmB,CAAC,CAAE0mB,EAAE,CAAC1mB,CAAC,CAAE2mB,EAAE,CAAC3mB,CAAC,CAAEu8B,EAAE,CAACv8B,CAAC,CAAE65D,GAAG,CAAEC,GAAG,CAAEC,GAAI,CAAC,CACpEK,EAAE,CAACR,wBAAwB,CAAEnzC,EAAE,CAACjQ,CAAC,CAAEkQ,EAAE,CAAClQ,CAAC,CAAEmQ,EAAE,CAACnQ,CAAC,CAAE+lB,EAAE,CAAC/lB,CAAC,CAAEqjD,GAAG,CAAEC,GAAG,CAAEC,GAAI,CAAC,CAErE,CAAC,IAAM,IAAK,IAAI,CAACO,SAAS,GAAK,YAAY,CAAG,CAE7CJ,EAAE,CAACT,cAAc,CAAEhzC,EAAE,CAAC/mB,CAAC,CAAEgnB,EAAE,CAAChnB,CAAC,CAAEinB,EAAE,CAACjnB,CAAC,CAAE68B,EAAE,CAAC78B,CAAC,CAAE,IAAI,CAACi6D,OAAQ,CAAC,CACzDQ,EAAE,CAACV,cAAc,CAAEhzC,EAAE,CAACzmB,CAAC,CAAE0mB,EAAE,CAAC1mB,CAAC,CAAE2mB,EAAE,CAAC3mB,CAAC,CAAEu8B,EAAE,CAACv8B,CAAC,CAAE,IAAI,CAAC25D,OAAQ,CAAC,CACzDS,EAAE,CAACX,cAAc,CAAEhzC,EAAE,CAACjQ,CAAC,CAAEkQ,EAAE,CAAClQ,CAAC,CAAEmQ,EAAE,CAACnQ,CAAC,CAAE+lB,EAAE,CAAC/lB,CAAC,CAAE,IAAI,CAACmjD,OAAQ,CAAC,CAE1D,CAEAj2C,KAAK,CAAC1gB,GAAG,CACRk3D,EAAE,CAACF,IAAI,CAAEhZ,MAAO,CAAC,CACjBmZ,EAAE,CAACH,IAAI,CAAEhZ,MAAO,CAAC,CACjBoZ,EAAE,CAACJ,IAAI,CAAEhZ,MAAO,CACjB,CAAC,CAED,MAAO,CAAAt9B,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACoO,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGyW,MAAM,CAACoO,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAExD,KAAM,CAAA0lB,KAAK,CAAGhP,MAAM,CAACoO,MAAM,CAAE9kB,CAAC,CAAE,CAEhC,IAAI,CAAC8kB,MAAM,CAACzlB,IAAI,CAAEqmB,KAAK,CAAC/e,KAAK,CAAC,CAAE,CAAC,CAElC,CAEA,IAAI,CAACszD,MAAM,CAAGvjD,MAAM,CAACujD,MAAM,CAC3B,IAAI,CAACqC,SAAS,CAAG5lD,MAAM,CAAC4lD,SAAS,CACjC,IAAI,CAACX,OAAO,CAAGjlD,MAAM,CAACilD,OAAO,CAE7B,MAAO,KAAI,CAEZ,CAEAzmD,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAACoQ,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAAC6kB,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAA0lB,KAAK,CAAG,IAAI,CAACZ,MAAM,CAAE9kB,CAAC,CAAE,CAC9B0U,IAAI,CAACoQ,MAAM,CAACzlB,IAAI,CAAEqmB,KAAK,CAAC/b,OAAO,CAAC,CAAE,CAAC,CAEpC,CAEA+K,IAAI,CAACulD,MAAM,CAAG,IAAI,CAACA,MAAM,CACzBvlD,IAAI,CAAC4nD,SAAS,CAAG,IAAI,CAACA,SAAS,CAC/B5nD,IAAI,CAACinD,OAAO,CAAG,IAAI,CAACA,OAAO,CAE3B,MAAO,CAAAjnD,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACn/B,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGgkD,IAAI,CAACn/B,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAA0lB,KAAK,CAAGu+B,IAAI,CAACn/B,MAAM,CAAE9kB,CAAC,CAAE,CAC9B,IAAI,CAAC8kB,MAAM,CAACzlB,IAAI,CAAE,GAAI,CAAA8hB,OAAO,CAAC,CAAC,CAAC1X,SAAS,CAAEic,KAAM,CAAE,CAAC,CAErD,CAEA,IAAI,CAACu0C,MAAM,CAAGhW,IAAI,CAACgW,MAAM,CACzB,IAAI,CAACqC,SAAS,CAAGrY,IAAI,CAACqY,SAAS,CAC/B,IAAI,CAACX,OAAO,CAAG1X,IAAI,CAAC0X,OAAO,CAE3B,MAAO,KAAI,CAEZ,CAED,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAc,UAAUA,CAAEv6D,CAAC,CAAEumB,EAAE,CAAEC,EAAE,CAAEC,EAAE,CAAE4V,EAAE,CAAG,CAExC,KAAM,CAAAjW,EAAE,CAAG,CAAEK,EAAE,CAAGF,EAAE,EAAK,GAAG,CAC5B,KAAM,CAAAnf,EAAE,CAAG,CAAEi1B,EAAE,CAAG7V,EAAE,EAAK,GAAG,CAC5B,KAAM,CAAAkxC,EAAE,CAAG13D,CAAC,CAAGA,CAAC,CAChB,KAAM,CAAA+5D,EAAE,CAAG/5D,CAAC,CAAG03D,EAAE,CACjB,MAAO,CAAE,CAAC,CAAGlxC,EAAE,CAAG,CAAC,CAAGC,EAAE,CAAGL,EAAE,CAAGhf,EAAE,EAAK2yD,EAAE,CAAG,CAAE,CAAC,CAAC,CAAGvzC,EAAE,CAAG,CAAC,CAAGC,EAAE,CAAG,CAAC,CAAGL,EAAE,CAAGhf,EAAE,EAAKswD,EAAE,CAAGtxC,EAAE,CAAGpmB,CAAC,CAAGwmB,EAAE,CAElG,CAEA;AAEA,QAAS,CAAAg0C,iBAAiBA,CAAEx6D,CAAC,CAAE8vB,CAAC,CAAG,CAElC,KAAM,CAAAqkC,CAAC,CAAG,CAAC,CAAGn0D,CAAC,CACf,MAAO,CAAAm0D,CAAC,CAAGA,CAAC,CAAGrkC,CAAC,CAEjB,CAEA,QAAS,CAAA2qC,iBAAiBA,CAAEz6D,CAAC,CAAE8vB,CAAC,CAAG,CAElC,MAAO,EAAC,EAAK,CAAC,CAAG9vB,CAAC,CAAE,CAAGA,CAAC,CAAG8vB,CAAC,CAE7B,CAEA,QAAS,CAAA4qC,iBAAiBA,CAAE16D,CAAC,CAAE8vB,CAAC,CAAG,CAElC,MAAO,CAAA9vB,CAAC,CAAGA,CAAC,CAAG8vB,CAAC,CAEjB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAA6qC,eAAeA,CAAE36D,CAAC,CAAEumB,EAAE,CAAEC,EAAE,CAAEC,EAAE,CAAG,CAEzC,MAAO,CAAA+zC,iBAAiB,CAAEx6D,CAAC,CAAEumB,EAAG,CAAC,CAAGk0C,iBAAiB,CAAEz6D,CAAC,CAAEwmB,EAAG,CAAC,CAC7Dk0C,iBAAiB,CAAE16D,CAAC,CAAEymB,EAAG,CAAC,CAE5B,CAEA;AAEA,QAAS,CAAAm0C,aAAaA,CAAE56D,CAAC,CAAE8vB,CAAC,CAAG,CAE9B,KAAM,CAAAqkC,CAAC,CAAG,CAAC,CAAGn0D,CAAC,CACf,MAAO,CAAAm0D,CAAC,CAAGA,CAAC,CAAGA,CAAC,CAAGrkC,CAAC,CAErB,CAEA,QAAS,CAAA+qC,aAAaA,CAAE76D,CAAC,CAAE8vB,CAAC,CAAG,CAE9B,KAAM,CAAAqkC,CAAC,CAAG,CAAC,CAAGn0D,CAAC,CACf,MAAO,EAAC,CAAGm0D,CAAC,CAAGA,CAAC,CAAGn0D,CAAC,CAAG8vB,CAAC,CAEzB,CAEA,QAAS,CAAAgrC,aAAaA,CAAE96D,CAAC,CAAE8vB,CAAC,CAAG,CAE9B,MAAO,EAAC,EAAK,CAAC,CAAG9vB,CAAC,CAAE,CAAGA,CAAC,CAAGA,CAAC,CAAG8vB,CAAC,CAEjC,CAEA,QAAS,CAAAirC,aAAaA,CAAE/6D,CAAC,CAAE8vB,CAAC,CAAG,CAE9B,MAAO,CAAA9vB,CAAC,CAAGA,CAAC,CAAGA,CAAC,CAAG8vB,CAAC,CAErB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAkrC,WAAWA,CAAEh7D,CAAC,CAAEumB,EAAE,CAAEC,EAAE,CAAEC,EAAE,CAAE4V,EAAE,CAAG,CAEzC,MAAO,CAAAu+B,aAAa,CAAE56D,CAAC,CAAEumB,EAAG,CAAC,CAAGs0C,aAAa,CAAE76D,CAAC,CAAEwmB,EAAG,CAAC,CAAGs0C,aAAa,CAAE96D,CAAC,CAAEymB,EAAG,CAAC,CAC9Es0C,aAAa,CAAE/6D,CAAC,CAAEq8B,EAAG,CAAC,CAExB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA4+B,gBAAgB,QAAS,CAAA/E,KAAM,CAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkjB,EAAE,CAAG,GAAI,CAAAtiB,OAAO,CAAC,CAAC,CAAEsD,EAAE,CAAG,GAAI,CAAAtD,OAAO,CAAC,CAAC,CAAEuD,EAAE,CAAG,GAAI,CAAAvD,OAAO,CAAC,CAAC,CAAEw4B,EAAE,CAAG,GAAI,CAAAx4B,OAAO,CAAC,CAAC,CAAG,CAE7F,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACo3D,kBAAkB,CAAG,IAAI,CAE9B,IAAI,CAACr+D,IAAI,CAAG,kBAAkB,CAE9B;AACF;AACA;AACA;AACA,KACE,IAAI,CAACupB,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAAChf,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACi1B,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC+5B,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAA0f,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAAnwC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEhf,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEi1B,EAAE,CAAG,IAAI,CAACA,EAAE,CAE5D9Y,KAAK,CAAC1gB,GAAG,CACRk4D,WAAW,CAAEh7D,CAAC,CAAEomB,EAAE,CAAC5mB,CAAC,CAAE4H,EAAE,CAAC5H,CAAC,CAAE6H,EAAE,CAAC7H,CAAC,CAAE88B,EAAE,CAAC98B,CAAE,CAAC,CACxCw7D,WAAW,CAAEh7D,CAAC,CAAEomB,EAAE,CAACtmB,CAAC,CAAEsH,EAAE,CAACtH,CAAC,CAAEuH,EAAE,CAACvH,CAAC,CAAEw8B,EAAE,CAACx8B,CAAE,CACxC,CAAC,CAED,MAAO,CAAA0jB,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4R,EAAE,CAAC1hB,IAAI,CAAE8P,MAAM,CAAC4R,EAAG,CAAC,CACzB,IAAI,CAAChf,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CACzB,IAAI,CAACi1B,EAAE,CAAC53B,IAAI,CAAE8P,MAAM,CAAC8nB,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEAtpB,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC4T,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC3e,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAAC8pB,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC70B,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC37B,EAAE,CAAC7e,SAAS,CAAEw6C,IAAI,CAAC37B,EAAG,CAAC,CAC5B,IAAI,CAAChf,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAC5B,IAAI,CAACi1B,EAAE,CAAC/0B,SAAS,CAAEw6C,IAAI,CAACzlB,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA6+B,iBAAiB,QAAS,CAAAjF,KAAM,CAErC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkjB,EAAE,CAAG,GAAI,CAAAnH,OAAO,CAAC,CAAC,CAAE7X,EAAE,CAAG,GAAI,CAAA6X,OAAO,CAAC,CAAC,CAAE5X,EAAE,CAAG,GAAI,CAAA4X,OAAO,CAAC,CAAC,CAAEqd,EAAE,CAAG,GAAI,CAAArd,OAAO,CAAC,CAAC,CAAG,CAE7F,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACm8C,mBAAmB,CAAG,IAAI,CAE/B,IAAI,CAACv+D,IAAI,CAAG,mBAAmB,CAE/B;AACF;AACA;AACA;AACA,KACE,IAAI,CAACupB,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAAChf,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACi1B,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC+5B,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAt3C,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAAuE,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAAnwC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEhf,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEi1B,EAAE,CAAG,IAAI,CAACA,EAAE,CAE5D9Y,KAAK,CAAC1gB,GAAG,CACRk4D,WAAW,CAAEh7D,CAAC,CAAEomB,EAAE,CAAC5mB,CAAC,CAAE4H,EAAE,CAAC5H,CAAC,CAAE6H,EAAE,CAAC7H,CAAC,CAAE88B,EAAE,CAAC98B,CAAE,CAAC,CACxCw7D,WAAW,CAAEh7D,CAAC,CAAEomB,EAAE,CAACtmB,CAAC,CAAEsH,EAAE,CAACtH,CAAC,CAAEuH,EAAE,CAACvH,CAAC,CAAEw8B,EAAE,CAACx8B,CAAE,CAAC,CACxCk7D,WAAW,CAAEh7D,CAAC,CAAEomB,EAAE,CAAC9P,CAAC,CAAElP,EAAE,CAACkP,CAAC,CAAEjP,EAAE,CAACiP,CAAC,CAAEgmB,EAAE,CAAChmB,CAAE,CACxC,CAAC,CAED,MAAO,CAAAkN,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4R,EAAE,CAAC1hB,IAAI,CAAE8P,MAAM,CAAC4R,EAAG,CAAC,CACzB,IAAI,CAAChf,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CACzB,IAAI,CAACi1B,EAAE,CAAC53B,IAAI,CAAE8P,MAAM,CAAC8nB,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEAtpB,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC4T,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC3e,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAAC8pB,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC70B,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC37B,EAAE,CAAC7e,SAAS,CAAEw6C,IAAI,CAAC37B,EAAG,CAAC,CAC5B,IAAI,CAAChf,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAC5B,IAAI,CAACi1B,EAAE,CAAC/0B,SAAS,CAAEw6C,IAAI,CAACzlB,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA++B,SAAS,QAAS,CAAAnF,KAAM,CAE7B;AACD;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkE,EAAE,CAAG,GAAI,CAAAtD,OAAO,CAAC,CAAC,CAAEuD,EAAE,CAAG,GAAI,CAAAvD,OAAO,CAAC,CAAC,CAAG,CAErD,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACw3D,WAAW,CAAG,IAAI,CAEvB,IAAI,CAACz+D,IAAI,CAAG,WAAW,CAEvB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACuK,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCgvD,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAA0f,KAAK,CAAG+yC,cAAc,CAE5B,GAAKv2D,CAAC,GAAK,CAAC,CAAG,CAEdwjB,KAAK,CAAC9e,IAAI,CAAE,IAAI,CAAC2C,EAAG,CAAC,CAEtB,CAAC,IAAM,CAENmc,KAAK,CAAC9e,IAAI,CAAE,IAAI,CAAC2C,EAAG,CAAC,CAACrC,GAAG,CAAE,IAAI,CAACoC,EAAG,CAAC,CACpCoc,KAAK,CAACpe,cAAc,CAAEpF,CAAE,CAAC,CAAC4E,GAAG,CAAE,IAAI,CAACwC,EAAG,CAAC,CAEzC,CAEA,MAAO,CAAAoc,KAAK,CAEb,CAEA;AACA8yC,UAAUA,CAAEp0C,CAAC,CAAEq0C,cAAc,CAAG,CAE/B,MAAO,KAAI,CAACF,QAAQ,CAAEn0C,CAAC,CAAEq0C,cAAe,CAAC,CAE1C,CAEAkB,UAAUA,CAAEz3D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE/C,MAAO,CAAAyyD,cAAc,CAACrxD,UAAU,CAAE,IAAI,CAACmC,EAAE,CAAE,IAAI,CAACD,EAAG,CAAC,CAACzD,SAAS,CAAC,CAAC,CAEjE,CAEAk0D,YAAYA,CAAE31C,CAAC,CAAEq0C,cAAc,CAAG,CAEjC,MAAO,KAAI,CAACkB,UAAU,CAAEv1C,CAAC,CAAEq0C,cAAe,CAAC,CAE5C,CAEA7xD,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACpN,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEA2L,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC36C,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAk0D,UAAU,QAAS,CAAArF,KAAM,CAE9B;AACD;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkE,EAAE,CAAG,GAAI,CAAA6X,OAAO,CAAC,CAAC,CAAE5X,EAAE,CAAG,GAAI,CAAA4X,OAAO,CAAC,CAAC,CAAG,CAErD,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACu8C,YAAY,CAAG,IAAI,CAExB,IAAI,CAAC3+D,IAAI,CAAG,YAAY,CAExB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACuK,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCgvD,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAt3C,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAAuE,KAAK,CAAG+yC,cAAc,CAE5B,GAAKv2D,CAAC,GAAK,CAAC,CAAG,CAEdwjB,KAAK,CAAC9e,IAAI,CAAE,IAAI,CAAC2C,EAAG,CAAC,CAEtB,CAAC,IAAM,CAENmc,KAAK,CAAC9e,IAAI,CAAE,IAAI,CAAC2C,EAAG,CAAC,CAACrC,GAAG,CAAE,IAAI,CAACoC,EAAG,CAAC,CACpCoc,KAAK,CAACpe,cAAc,CAAEpF,CAAE,CAAC,CAAC4E,GAAG,CAAE,IAAI,CAACwC,EAAG,CAAC,CAEzC,CAEA,MAAO,CAAAoc,KAAK,CAEb,CAEA;AACA8yC,UAAUA,CAAEp0C,CAAC,CAAEq0C,cAAc,CAAG,CAE/B,MAAO,KAAI,CAACF,QAAQ,CAAEn0C,CAAC,CAAEq0C,cAAe,CAAC,CAE1C,CAEAkB,UAAUA,CAAEz3D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAt3C,OAAO,CAAC,CAAC,CAAG,CAE/C,MAAO,CAAAs3C,cAAc,CAACrxD,UAAU,CAAE,IAAI,CAACmC,EAAE,CAAE,IAAI,CAACD,EAAG,CAAC,CAACzD,SAAS,CAAC,CAAC,CAEjE,CAEAk0D,YAAYA,CAAE31C,CAAC,CAAEq0C,cAAc,CAAG,CAEjC,MAAO,KAAI,CAACkB,UAAU,CAAEv1C,CAAC,CAAEq0C,cAAe,CAAC,CAE5C,CAEA7xD,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACpN,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEA2L,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC36C,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAo0D,oBAAoB,QAAS,CAAAvF,KAAM,CAExC;AACD;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkjB,EAAE,CAAG,GAAI,CAAAtiB,OAAO,CAAC,CAAC,CAAEsD,EAAE,CAAG,GAAI,CAAAtD,OAAO,CAAC,CAAC,CAAEuD,EAAE,CAAG,GAAI,CAAAvD,OAAO,CAAC,CAAC,CAAG,CAEzE,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC43D,sBAAsB,CAAG,IAAI,CAElC,IAAI,CAAC7+D,IAAI,CAAG,sBAAsB,CAElC;AACF;AACA;AACA;AACA,KACE,IAAI,CAACupB,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAAChf,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCgvD,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAA0f,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAAnwC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEhf,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEC,EAAE,CAAG,IAAI,CAACA,EAAE,CAE9Cmc,KAAK,CAAC1gB,GAAG,CACR63D,eAAe,CAAE36D,CAAC,CAAEomB,EAAE,CAAC5mB,CAAC,CAAE4H,EAAE,CAAC5H,CAAC,CAAE6H,EAAE,CAAC7H,CAAE,CAAC,CACtCm7D,eAAe,CAAE36D,CAAC,CAAEomB,EAAE,CAACtmB,CAAC,CAAEsH,EAAE,CAACtH,CAAC,CAAEuH,EAAE,CAACvH,CAAE,CACtC,CAAC,CAED,MAAO,CAAA0jB,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4R,EAAE,CAAC1hB,IAAI,CAAE8P,MAAM,CAAC4R,EAAG,CAAC,CACzB,IAAI,CAAChf,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEA2L,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC4T,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC3e,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC37B,EAAE,CAAC7e,SAAS,CAAEw6C,IAAI,CAAC37B,EAAG,CAAC,CAC5B,IAAI,CAAChf,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAs0D,qBAAqB,QAAS,CAAAzF,KAAM,CAEzC;AACD;AACA;AACA;AACA;AACA;AACA,IACChzD,WAAWA,CAAEkjB,EAAE,CAAG,GAAI,CAAAnH,OAAO,CAAC,CAAC,CAAE7X,EAAE,CAAG,GAAI,CAAA6X,OAAO,CAAC,CAAC,CAAE5X,EAAE,CAAG,GAAI,CAAA4X,OAAO,CAAC,CAAC,CAAG,CAEzE,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC28C,uBAAuB,CAAG,IAAI,CAEnC,IAAI,CAAC/+D,IAAI,CAAG,uBAAuB,CAEnC;AACF;AACA;AACA;AACA,KACE,IAAI,CAACupB,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAAChf,EAAE,CAAGA,EAAE,CAEZ;AACF;AACA;AACA;AACA,KACE,IAAI,CAACC,EAAE,CAAGA,EAAE,CAEb,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCgvD,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAt3C,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAAuE,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAAnwC,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEhf,EAAE,CAAG,IAAI,CAACA,EAAE,CAAEC,EAAE,CAAG,IAAI,CAACA,EAAE,CAE9Cmc,KAAK,CAAC1gB,GAAG,CACR63D,eAAe,CAAE36D,CAAC,CAAEomB,EAAE,CAAC5mB,CAAC,CAAE4H,EAAE,CAAC5H,CAAC,CAAE6H,EAAE,CAAC7H,CAAE,CAAC,CACtCm7D,eAAe,CAAE36D,CAAC,CAAEomB,EAAE,CAACtmB,CAAC,CAAEsH,EAAE,CAACtH,CAAC,CAAEuH,EAAE,CAACvH,CAAE,CAAC,CACtC66D,eAAe,CAAE36D,CAAC,CAAEomB,EAAE,CAAC9P,CAAC,CAAElP,EAAE,CAACkP,CAAC,CAAEjP,EAAE,CAACiP,CAAE,CACtC,CAAC,CAED,MAAO,CAAAkN,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4R,EAAE,CAAC1hB,IAAI,CAAE8P,MAAM,CAAC4R,EAAG,CAAC,CACzB,IAAI,CAAChf,EAAE,CAAC1C,IAAI,CAAE8P,MAAM,CAACpN,EAAG,CAAC,CACzB,IAAI,CAACC,EAAE,CAAC3C,IAAI,CAAE8P,MAAM,CAACnN,EAAG,CAAC,CAEzB,MAAO,KAAI,CAEZ,CAEA2L,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC4T,EAAE,CAAG,IAAI,CAACA,EAAE,CAAC3e,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACpL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACK,OAAO,CAAC,CAAC,CAC3B+K,IAAI,CAACnL,EAAE,CAAG,IAAI,CAACA,EAAE,CAACI,OAAO,CAAC,CAAC,CAE3B,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAAC37B,EAAE,CAAC7e,SAAS,CAAEw6C,IAAI,CAAC37B,EAAG,CAAC,CAC5B,IAAI,CAAChf,EAAE,CAACG,SAAS,CAAEw6C,IAAI,CAAC36C,EAAG,CAAC,CAC5B,IAAI,CAACC,EAAE,CAACE,SAAS,CAAEw6C,IAAI,CAAC16C,EAAG,CAAC,CAE5B,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAw0D,WAAW,QAAS,CAAA3F,KAAM,CAE/B;AACD;AACA;AACA;AACA,IACChzD,WAAWA,CAAE0f,MAAM,CAAG,EAAE,CAAG,CAE1B,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACk5C,aAAa,CAAG,IAAI,CAEzB,IAAI,CAACj/D,IAAI,CAAG,aAAa,CAEzB;AACF;AACA;AACA;AACA,KACE,IAAI,CAAC+lB,MAAM,CAAGA,MAAM,CAErB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCyzC,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,GAAI,CAAAzyD,OAAO,CAAC,CAAC,CAAG,CAE7C,KAAM,CAAA0f,KAAK,CAAG+yC,cAAc,CAE5B,KAAM,CAAA3zC,MAAM,CAAG,IAAI,CAACA,MAAM,CAC1B,KAAM,CAAAkN,CAAC,CAAG,CAAElN,MAAM,CAAC5kB,MAAM,CAAG,CAAC,EAAKgC,CAAC,CAEnC,KAAM,CAAAs6D,QAAQ,CAAGj8D,IAAI,CAACuC,KAAK,CAAEkvB,CAAE,CAAC,CAChC,KAAM,CAAAgxB,MAAM,CAAGhxB,CAAC,CAAGwqC,QAAQ,CAE3B,KAAM,CAAA/zC,EAAE,CAAG3D,MAAM,CAAE03C,QAAQ,GAAK,CAAC,CAAGA,QAAQ,CAAGA,QAAQ,CAAG,CAAC,CAAE,CAC7D,KAAM,CAAA9zC,EAAE,CAAG5D,MAAM,CAAE03C,QAAQ,CAAE,CAC7B,KAAM,CAAA7zC,EAAE,CAAG7D,MAAM,CAAE03C,QAAQ,CAAG13C,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAG4kB,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAGs8D,QAAQ,CAAG,CAAC,CAAE,CACpF,KAAM,CAAAj+B,EAAE,CAAGzZ,MAAM,CAAE03C,QAAQ,CAAG13C,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAG4kB,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAGs8D,QAAQ,CAAG,CAAC,CAAE,CAEpF92C,KAAK,CAAC1gB,GAAG,CACRy3D,UAAU,CAAEzZ,MAAM,CAAEv6B,EAAE,CAAC/mB,CAAC,CAAEgnB,EAAE,CAAChnB,CAAC,CAAEinB,EAAE,CAACjnB,CAAC,CAAE68B,EAAE,CAAC78B,CAAE,CAAC,CAC5C+6D,UAAU,CAAEzZ,MAAM,CAAEv6B,EAAE,CAACzmB,CAAC,CAAE0mB,EAAE,CAAC1mB,CAAC,CAAE2mB,EAAE,CAAC3mB,CAAC,CAAEu8B,EAAE,CAACv8B,CAAE,CAC5C,CAAC,CAED,MAAO,CAAA0jB,KAAK,CAEb,CAEA9e,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACoO,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGyW,MAAM,CAACoO,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAExD,KAAM,CAAA0lB,KAAK,CAAGhP,MAAM,CAACoO,MAAM,CAAE9kB,CAAC,CAAE,CAEhC,IAAI,CAAC8kB,MAAM,CAACzlB,IAAI,CAAEqmB,KAAK,CAAC/e,KAAK,CAAC,CAAE,CAAC,CAElC,CAEA,MAAO,KAAI,CAEZ,CAEAuO,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAACoQ,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAAC6kB,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAA0lB,KAAK,CAAG,IAAI,CAACZ,MAAM,CAAE9kB,CAAC,CAAE,CAC9B0U,IAAI,CAACoQ,MAAM,CAACzlB,IAAI,CAAEqmB,KAAK,CAAC/b,OAAO,CAAC,CAAE,CAAC,CAEpC,CAEA,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACn/B,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGgkD,IAAI,CAACn/B,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAA0lB,KAAK,CAAGu+B,IAAI,CAACn/B,MAAM,CAAE9kB,CAAC,CAAE,CAC9B,IAAI,CAAC8kB,MAAM,CAACzlB,IAAI,CAAE,GAAI,CAAA2G,OAAO,CAAC,CAAC,CAACyD,SAAS,CAAEic,KAAM,CAAE,CAAC,CAErD,CAEA,MAAO,KAAI,CAEZ,CAED,CAEA,GAAI,CAAAu4C,MAAM,CAAG,aAAavrD,MAAM,CAACwrD,MAAM,CAAC,CACvCC,SAAS,CAAE,IAAI,CACf/C,QAAQ,CAAEA,QAAQ,CAClBiB,gBAAgB,CAAEA,gBAAgB,CAClCc,gBAAgB,CAAEA,gBAAgB,CAClCE,iBAAiB,CAAEA,iBAAiB,CACpC9C,YAAY,CAAEA,YAAY,CAC1BgD,SAAS,CAAEA,SAAS,CACpBE,UAAU,CAAEA,UAAU,CACtBE,oBAAoB,CAAEA,oBAAoB,CAC1CE,qBAAqB,CAAEA,qBAAqB,CAC5CE,WAAW,CAAEA,WACd,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAK,SAAS,QAAS,CAAAhG,KAAM,CAE7B;AACD;AACA,IACChzD,WAAWA,CAAA,CAAG,CAEb,KAAK,CAAC,CAAC,CAEP,IAAI,CAACrG,IAAI,CAAG,WAAW,CAEvB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACs/D,MAAM,CAAG,EAAE,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,KAAK,CAEvB,CAEA;AACD;AACA;AACA;AACA,IACCx3D,GAAGA,CAAEy3D,KAAK,CAAG,CAEZ,IAAI,CAACF,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAE1B,CAEA;AACD;AACA;AACA;AACA,IACCC,SAASA,CAAA,CAAG,CAEX;AACA,KAAM,CAAAC,UAAU,CAAG,IAAI,CAACJ,MAAM,CAAE,CAAC,CAAE,CAAC9F,QAAQ,CAAE,CAAE,CAAC,CACjD,KAAM,CAAAmG,QAAQ,CAAG,IAAI,CAACL,MAAM,CAAE,IAAI,CAACA,MAAM,CAACn+D,MAAM,CAAG,CAAC,CAAE,CAACq4D,QAAQ,CAAE,CAAE,CAAC,CAEpE,GAAK,CAAEkG,UAAU,CAACj1D,MAAM,CAAEk1D,QAAS,CAAC,CAAG,CAEtC,KAAM,CAAAC,QAAQ,CAAKF,UAAU,CAACv4D,SAAS,GAAK,IAAI,CAAK,WAAW,CAAG,YAAY,CAC/E,IAAI,CAACm4D,MAAM,CAACh/D,IAAI,CAAE,GAAI,CAAA4+D,MAAM,CAAEU,QAAQ,CAAE,CAAED,QAAQ,CAAED,UAAW,CAAE,CAAC,CAEnE,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACClG,QAAQA,CAAEr2D,CAAC,CAAEu2D,cAAc,CAAG,CAE7B;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,KAAM,CAAA1rD,CAAC,CAAG7K,CAAC,CAAG,IAAI,CAAC42D,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAA8F,YAAY,CAAG,IAAI,CAACC,eAAe,CAAC,CAAC,CAC3C,GAAI,CAAA7+D,CAAC,CAAG,CAAC,CAET;AAEA,MAAQA,CAAC,CAAG4+D,YAAY,CAAC1+D,MAAM,CAAG,CAEjC,GAAK0+D,YAAY,CAAE5+D,CAAC,CAAE,EAAI+M,CAAC,CAAG,CAE7B,KAAM,CAAA+xD,IAAI,CAAGF,YAAY,CAAE5+D,CAAC,CAAE,CAAG+M,CAAC,CAClC,KAAM,CAAAwxD,KAAK,CAAG,IAAI,CAACF,MAAM,CAAEr+D,CAAC,CAAE,CAE9B,KAAM,CAAAy5D,aAAa,CAAG8E,KAAK,CAACzF,SAAS,CAAC,CAAC,CACvC,KAAM,CAAA10C,CAAC,CAAGq1C,aAAa,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAAGqF,IAAI,CAAGrF,aAAa,CAE5D,MAAO,CAAA8E,KAAK,CAAC/F,UAAU,CAAEp0C,CAAC,CAAEq0C,cAAe,CAAC,CAE7C,CAEAz4D,CAAC,EAAG,CAEL,CAEA,MAAO,KAAI,CAEX;AAED,CAEA84D,SAASA,CAAA,CAAG,CAEX;AACA;AACA;AAEA,KAAM,CAAAiG,IAAI,CAAG,IAAI,CAACF,eAAe,CAAC,CAAC,CACnC,MAAO,CAAAE,IAAI,CAAEA,IAAI,CAAC7+D,MAAM,CAAG,CAAC,CAAE,CAE/B,CAEAi5D,gBAAgBA,CAAA,CAAG,CAElB;AAEA,IAAI,CAAClkD,WAAW,CAAG,IAAI,CACvB,IAAI,CAAC+pD,YAAY,CAAG,IAAI,CACxB,IAAI,CAACH,eAAe,CAAC,CAAC,CAEvB,CAEA;AACD;AACA;AACA;AACA,IACCA,eAAeA,CAAA,CAAG,CAEjB;AACA;AACA;AAEA,GAAK,IAAI,CAACG,YAAY,EAAI,IAAI,CAACA,YAAY,CAAC9+D,MAAM,GAAK,IAAI,CAACm+D,MAAM,CAACn+D,MAAM,CAAG,CAE3E,MAAO,KAAI,CAAC8+D,YAAY,CAEzB,CAEA;AACA;AAEA,KAAM,CAAAjG,OAAO,CAAG,EAAE,CAClB,GAAI,CAAAkG,IAAI,CAAG,CAAC,CAEZ,IAAM,GAAI,CAAAj/D,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACo+D,MAAM,CAACn+D,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtDi/D,IAAI,EAAI,IAAI,CAACZ,MAAM,CAAEr+D,CAAC,CAAE,CAAC84D,SAAS,CAAC,CAAC,CACpCC,OAAO,CAAC15D,IAAI,CAAE4/D,IAAK,CAAC,CAErB,CAEA,IAAI,CAACD,YAAY,CAAGjG,OAAO,CAE3B,MAAO,CAAAA,OAAO,CAEf,CAEAF,eAAeA,CAAED,SAAS,CAAG,EAAE,CAAG,CAEjC,KAAM,CAAA9zC,MAAM,CAAG,EAAE,CAEjB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI44D,SAAS,CAAE54D,CAAC,EAAG,CAAG,CAEvC8kB,MAAM,CAACzlB,IAAI,CAAE,IAAI,CAACk5D,QAAQ,CAAEv4D,CAAC,CAAG44D,SAAU,CAAE,CAAC,CAE9C,CAEA,GAAK,IAAI,CAAC0F,SAAS,CAAG,CAErBx5C,MAAM,CAACzlB,IAAI,CAAEylB,MAAM,CAAE,CAAC,CAAG,CAAC,CAE3B,CAEA,MAAO,CAAAA,MAAM,CAEd,CAEA6zC,SAASA,CAAEC,SAAS,CAAG,EAAE,CAAG,CAE3B,KAAM,CAAA9zC,MAAM,CAAG,EAAE,CACjB,GAAI,CAAAm0C,IAAI,CAER,IAAM,GAAI,CAAAj5D,CAAC,CAAG,CAAC,CAAEq+D,MAAM,CAAG,IAAI,CAACA,MAAM,CAAEr+D,CAAC,CAAGq+D,MAAM,CAACn+D,MAAM,CAAEF,CAAC,EAAG,CAAG,CAEhE,KAAM,CAAAu+D,KAAK,CAAGF,MAAM,CAAEr+D,CAAC,CAAE,CACzB,KAAM,CAAAk/D,UAAU,CAAGX,KAAK,CAACvD,cAAc,CAAGpC,SAAS,CAAG,CAAC,CAClD2F,KAAK,CAACf,WAAW,EAAIe,KAAK,CAACb,YAAY,CAAK,CAAC,CAC9Ca,KAAK,CAACP,aAAa,CAAGpF,SAAS,CAAG2F,KAAK,CAACz5C,MAAM,CAAC5kB,MAAM,CACpD04D,SAAS,CAEd,KAAM,CAAAuG,GAAG,CAAGZ,KAAK,CAAC5F,SAAS,CAAEuG,UAAW,CAAC,CAEzC,IAAM,GAAI,CAAA12C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG22C,GAAG,CAACj/D,MAAM,CAAEsoB,CAAC,EAAG,CAAG,CAEvC,KAAM,CAAA9C,KAAK,CAAGy5C,GAAG,CAAE32C,CAAC,CAAE,CAEtB,GAAKywC,IAAI,EAAIA,IAAI,CAACzvD,MAAM,CAAEkc,KAAM,CAAC,CAAG,SAAU;AAE9CZ,MAAM,CAACzlB,IAAI,CAAEqmB,KAAM,CAAC,CACpBuzC,IAAI,CAAGvzC,KAAK,CAEb,CAED,CAEA,GAAK,IAAI,CAAC44C,SAAS,EAAIx5C,MAAM,CAAC5kB,MAAM,CAAG,CAAC,EAAI,CAAE4kB,MAAM,CAAEA,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAE,CAACsJ,MAAM,CAAEsb,MAAM,CAAE,CAAC,CAAG,CAAC,CAAG,CAEjGA,MAAM,CAACzlB,IAAI,CAAEylB,MAAM,CAAE,CAAC,CAAG,CAAC,CAE3B,CAEA,MAAO,CAAAA,MAAM,CAEd,CAEAle,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC2nD,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAAr+D,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGyW,MAAM,CAAC2nD,MAAM,CAACn+D,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAExD,KAAM,CAAAu+D,KAAK,CAAG7nD,MAAM,CAAC2nD,MAAM,CAAEr+D,CAAC,CAAE,CAEhC,IAAI,CAACq+D,MAAM,CAACh/D,IAAI,CAAEk/D,KAAK,CAAC53D,KAAK,CAAC,CAAE,CAAC,CAElC,CAEA,IAAI,CAAC23D,SAAS,CAAG5nD,MAAM,CAAC4nD,SAAS,CAEjC,MAAO,KAAI,CAEZ,CAEAppD,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC4pD,SAAS,CAAG,IAAI,CAACA,SAAS,CAC/B5pD,IAAI,CAAC2pD,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAAr+D,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACo+D,MAAM,CAACn+D,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAAu+D,KAAK,CAAG,IAAI,CAACF,MAAM,CAAEr+D,CAAC,CAAE,CAC9B0U,IAAI,CAAC2pD,MAAM,CAACh/D,IAAI,CAAEk/D,KAAK,CAACrpD,MAAM,CAAC,CAAE,CAAC,CAEnC,CAEA,MAAO,CAAAR,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACqa,SAAS,CAAGra,IAAI,CAACqa,SAAS,CAC/B,IAAI,CAACD,MAAM,CAAG,EAAE,CAEhB,IAAM,GAAI,CAAAr+D,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGgkD,IAAI,CAACoa,MAAM,CAACn+D,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEtD,KAAM,CAAAu+D,KAAK,CAAGta,IAAI,CAACoa,MAAM,CAAEr+D,CAAC,CAAE,CAC9B,IAAI,CAACq+D,MAAM,CAACh/D,IAAI,CAAE,GAAI,CAAA4+D,MAAM,CAAEM,KAAK,CAACx/D,IAAI,CAAE,CAAC,CAAC,CAACo2C,QAAQ,CAAEopB,KAAM,CAAE,CAAC,CAEjE,CAEA,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAa,IAAI,QAAS,CAAAhB,SAAU,CAE5B;AACD;AACA;AACA;AACA,IACCh5D,WAAWA,CAAE0f,MAAM,CAAG,CAErB,KAAK,CAAC,CAAC,CAEP,IAAI,CAAC/lB,IAAI,CAAG,MAAM,CAElB;AACF;AACA;AACA;AACA,KACE,IAAI,CAACsgE,YAAY,CAAG,GAAI,CAAAr5D,OAAO,CAAC,CAAC,CAEjC,GAAK8e,MAAM,CAAG,CAEb,IAAI,CAACD,aAAa,CAAEC,MAAO,CAAC,CAE7B,CAED,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCD,aAAaA,CAAEC,MAAM,CAAG,CAEvB,IAAI,CAACw6C,MAAM,CAAEx6C,MAAM,CAAE,CAAC,CAAE,CAACpjB,CAAC,CAAEojB,MAAM,CAAE,CAAC,CAAE,CAAC9iB,CAAE,CAAC,CAE3C,IAAM,GAAI,CAAAhC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG6kB,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEjD,IAAI,CAACu/D,MAAM,CAAEz6C,MAAM,CAAE9kB,CAAC,CAAE,CAAC0B,CAAC,CAAEojB,MAAM,CAAE9kB,CAAC,CAAE,CAACgC,CAAE,CAAC,CAE5C,CAEA,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCs9D,MAAMA,CAAE59D,CAAC,CAAEM,CAAC,CAAG,CAEd,IAAI,CAACq9D,YAAY,CAACr6D,GAAG,CAAEtD,CAAC,CAAEM,CAAE,CAAC,CAAE;AAE/B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCu9D,MAAMA,CAAE79D,CAAC,CAAEM,CAAC,CAAG,CAEd,KAAM,CAAAu8D,KAAK,CAAG,GAAI,CAAAhB,SAAS,CAAE,IAAI,CAAC8B,YAAY,CAAC14D,KAAK,CAAC,CAAC,CAAE,GAAI,CAAAX,OAAO,CAAEtE,CAAC,CAAEM,CAAE,CAAE,CAAC,CAC7E,IAAI,CAACq8D,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAEzB,IAAI,CAACc,YAAY,CAACr6D,GAAG,CAAEtD,CAAC,CAAEM,CAAE,CAAC,CAE7B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCw9D,gBAAgBA,CAAEC,IAAI,CAAEC,IAAI,CAAElF,EAAE,CAAEC,EAAE,CAAG,CAEtC,KAAM,CAAA8D,KAAK,CAAG,GAAI,CAAAZ,oBAAoB,CACrC,IAAI,CAAC0B,YAAY,CAAC14D,KAAK,CAAC,CAAC,CACzB,GAAI,CAAAX,OAAO,CAAEy5D,IAAI,CAAEC,IAAK,CAAC,CACzB,GAAI,CAAA15D,OAAO,CAAEw0D,EAAE,CAAEC,EAAG,CACrB,CAAC,CAED,IAAI,CAAC4D,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAEzB,IAAI,CAACc,YAAY,CAACr6D,GAAG,CAAEw1D,EAAE,CAAEC,EAAG,CAAC,CAE/B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCkF,aAAaA,CAAEC,KAAK,CAAEC,KAAK,CAAEC,KAAK,CAAEC,KAAK,CAAEvF,EAAE,CAAEC,EAAE,CAAG,CAEnD,KAAM,CAAA8D,KAAK,CAAG,GAAI,CAAApB,gBAAgB,CACjC,IAAI,CAACkC,YAAY,CAAC14D,KAAK,CAAC,CAAC,CACzB,GAAI,CAAAX,OAAO,CAAE45D,KAAK,CAAEC,KAAM,CAAC,CAC3B,GAAI,CAAA75D,OAAO,CAAE85D,KAAK,CAAEC,KAAM,CAAC,CAC3B,GAAI,CAAA/5D,OAAO,CAAEw0D,EAAE,CAAEC,EAAG,CACrB,CAAC,CAED,IAAI,CAAC4D,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAEzB,IAAI,CAACc,YAAY,CAACr6D,GAAG,CAAEw1D,EAAE,CAAEC,EAAG,CAAC,CAE/B,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCuF,UAAUA,CAAEb,GAAG,CAAG,CAEjB,KAAM,CAAAc,IAAI,CAAG,CAAE,IAAI,CAACZ,YAAY,CAAC14D,KAAK,CAAC,CAAC,CAAE,CAACqzC,MAAM,CAAEmlB,GAAI,CAAC,CAExD,KAAM,CAAAZ,KAAK,CAAG,GAAI,CAAAR,WAAW,CAAEkC,IAAK,CAAC,CACrC,IAAI,CAAC5B,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAEzB,IAAI,CAACc,YAAY,CAACz4D,IAAI,CAAEu4D,GAAG,CAAEA,GAAG,CAACj/D,MAAM,CAAG,CAAC,CAAG,CAAC,CAE/C,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCggE,GAAGA,CAAE1F,EAAE,CAAEC,EAAE,CAAEY,OAAO,CAAET,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAG,CAE1D,KAAM,CAAAx9C,EAAE,CAAG,IAAI,CAAC+hD,YAAY,CAAC39D,CAAC,CAC9B,KAAM,CAAA6b,EAAE,CAAG,IAAI,CAAC8hD,YAAY,CAACr9D,CAAC,CAE9B,IAAI,CAACm+D,MAAM,CAAE3F,EAAE,CAAGl9C,EAAE,CAAEm9C,EAAE,CAAGl9C,EAAE,CAAE89C,OAAO,CACrCT,WAAW,CAAEC,SAAS,CAAEC,UAAW,CAAC,CAErC,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCqF,MAAMA,CAAE3F,EAAE,CAAEC,EAAE,CAAEY,OAAO,CAAET,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAG,CAE7D,IAAI,CAACsF,UAAU,CAAE5F,EAAE,CAAEC,EAAE,CAAEY,OAAO,CAAEA,OAAO,CAAET,WAAW,CAAEC,SAAS,CAAEC,UAAW,CAAC,CAE/E,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCuF,OAAOA,CAAE7F,EAAE,CAAEC,EAAE,CAAEC,OAAO,CAAEC,OAAO,CAAEC,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAEC,SAAS,CAAG,CAElF,KAAM,CAAAz9C,EAAE,CAAG,IAAI,CAAC+hD,YAAY,CAAC39D,CAAC,CAC9B,KAAM,CAAA6b,EAAE,CAAG,IAAI,CAAC8hD,YAAY,CAACr9D,CAAC,CAE9B,IAAI,CAACo+D,UAAU,CAAE5F,EAAE,CAAGl9C,EAAE,CAAEm9C,EAAE,CAAGl9C,EAAE,CAAEm9C,OAAO,CAAEC,OAAO,CAAEC,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAEC,SAAU,CAAC,CAEpG,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCqF,UAAUA,CAAE5F,EAAE,CAAEC,EAAE,CAAEC,OAAO,CAAEC,OAAO,CAAEC,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAEC,SAAS,CAAG,CAErF,KAAM,CAAAwD,KAAK,CAAG,GAAI,CAAAhE,YAAY,CAAEC,EAAE,CAAEC,EAAE,CAAEC,OAAO,CAAEC,OAAO,CAAEC,WAAW,CAAEC,SAAS,CAAEC,UAAU,CAAEC,SAAU,CAAC,CAEzG,GAAK,IAAI,CAACsD,MAAM,CAACn+D,MAAM,CAAG,CAAC,CAAG,CAE7B;AACA,KAAM,CAAAogE,UAAU,CAAG/B,KAAK,CAAChG,QAAQ,CAAE,CAAE,CAAC,CAEtC,GAAK,CAAE+H,UAAU,CAAC92D,MAAM,CAAE,IAAI,CAAC61D,YAAa,CAAC,CAAG,CAE/C,IAAI,CAACE,MAAM,CAAEe,UAAU,CAAC5+D,CAAC,CAAE4+D,UAAU,CAACt+D,CAAE,CAAC,CAE1C,CAED,CAEA,IAAI,CAACq8D,MAAM,CAACh/D,IAAI,CAAEk/D,KAAM,CAAC,CAEzB,KAAM,CAAAgC,SAAS,CAAGhC,KAAK,CAAChG,QAAQ,CAAE,CAAE,CAAC,CACrC,IAAI,CAAC8G,YAAY,CAACz4D,IAAI,CAAE25D,SAAU,CAAC,CAEnC,MAAO,KAAI,CAEZ,CAEA35D,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC2oD,YAAY,CAACz4D,IAAI,CAAE8P,MAAM,CAAC2oD,YAAa,CAAC,CAE7C,MAAO,KAAI,CAEZ,CAEAnqD,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC2qD,YAAY,CAAG,IAAI,CAACA,YAAY,CAAC11D,OAAO,CAAC,CAAC,CAE/C,MAAO,CAAA+K,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACob,YAAY,CAAC51D,SAAS,CAAEw6C,IAAI,CAACob,YAAa,CAAC,CAEhD,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAmB,KAAK,QAAS,CAAApB,IAAK,CAExB;AACD;AACA;AACA;AACA,IACCh6D,WAAWA,CAAE0f,MAAM,CAAG,CAErB,KAAK,CAAEA,MAAO,CAAC,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC9jB,IAAI,CAAGN,YAAY,CAAC,CAAC,CAE1B,IAAI,CAAC3B,IAAI,CAAG,OAAO,CAEnB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC0hE,KAAK,CAAG,EAAE,CAEhB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCC,cAAcA,CAAE9H,SAAS,CAAG,CAE3B,KAAM,CAAA+H,QAAQ,CAAG,EAAE,CAEnB,IAAM,GAAI,CAAA3gE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACwgE,KAAK,CAACvgE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAErD2gE,QAAQ,CAAE3gE,CAAC,CAAE,CAAG,IAAI,CAACygE,KAAK,CAAEzgE,CAAC,CAAE,CAAC24D,SAAS,CAAEC,SAAU,CAAC,CAEvD,CAEA,MAAO,CAAA+H,QAAQ,CAEhB,CAEA;AAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACCC,aAAaA,CAAEhI,SAAS,CAAG,CAE1B,MAAO,CAEN38B,KAAK,CAAE,IAAI,CAAC08B,SAAS,CAAEC,SAAU,CAAC,CAClC6H,KAAK,CAAE,IAAI,CAACC,cAAc,CAAE9H,SAAU,CAEvC,CAAC,CAEF,CAEAhyD,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC+pD,KAAK,CAAG,EAAE,CAEf,IAAM,GAAI,CAAAzgE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGyW,MAAM,CAAC+pD,KAAK,CAACvgE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEvD,KAAM,CAAA6gE,IAAI,CAAGnqD,MAAM,CAAC+pD,KAAK,CAAEzgE,CAAC,CAAE,CAE9B,IAAI,CAACygE,KAAK,CAACphE,IAAI,CAAEwhE,IAAI,CAACl6D,KAAK,CAAC,CAAE,CAAC,CAEhC,CAEA,MAAO,KAAI,CAEZ,CAEAuO,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAAC1T,IAAI,CAAG,IAAI,CAACA,IAAI,CACrB0T,IAAI,CAAC+rD,KAAK,CAAG,EAAE,CAEf,IAAM,GAAI,CAAAzgE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,IAAI,CAACwgE,KAAK,CAACvgE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAErD,KAAM,CAAA6gE,IAAI,CAAG,IAAI,CAACJ,KAAK,CAAEzgE,CAAC,CAAE,CAC5B0U,IAAI,CAAC+rD,KAAK,CAACphE,IAAI,CAAEwhE,IAAI,CAAC3rD,MAAM,CAAC,CAAE,CAAC,CAEjC,CAEA,MAAO,CAAAR,IAAI,CAEZ,CAEAygC,QAAQA,CAAE8O,IAAI,CAAG,CAEhB,KAAK,CAAC9O,QAAQ,CAAE8O,IAAK,CAAC,CAEtB,IAAI,CAACjjD,IAAI,CAAGijD,IAAI,CAACjjD,IAAI,CACrB,IAAI,CAACy/D,KAAK,CAAG,EAAE,CAEf,IAAM,GAAI,CAAAzgE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGgkD,IAAI,CAACwc,KAAK,CAACvgE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAErD,KAAM,CAAA6gE,IAAI,CAAG5c,IAAI,CAACwc,KAAK,CAAEzgE,CAAC,CAAE,CAC5B,IAAI,CAACygE,KAAK,CAACphE,IAAI,CAAE,GAAI,CAAA+/D,IAAI,CAAC,CAAC,CAACjqB,QAAQ,CAAE0rB,IAAK,CAAE,CAAC,CAE/C,CAEA,MAAO,KAAI,CAEZ,CAED,CAEA,qBACA;AACA;AAEA,QAAS,CAAAC,MAAMA,CAACpsD,IAAI,CAAEqsD,WAAW,CAAEC,GAAG,CAAG,CAAC,CAAE,CAExC,KAAM,CAAAC,QAAQ,CAAGF,WAAW,EAAIA,WAAW,CAAC7gE,MAAM,CAClD,KAAM,CAAAghE,QAAQ,CAAGD,QAAQ,CAAGF,WAAW,CAAC,CAAC,CAAC,CAAGC,GAAG,CAAGtsD,IAAI,CAACxU,MAAM,CAC9D,GAAI,CAAAihE,SAAS,CAAGC,UAAU,CAAC1sD,IAAI,CAAE,CAAC,CAAEwsD,QAAQ,CAAEF,GAAG,CAAE,IAAI,CAAC,CACxD,KAAM,CAAAK,SAAS,CAAG,EAAE,CAEpB,GAAI,CAACF,SAAS,EAAIA,SAAS,CAACG,IAAI,GAAKH,SAAS,CAACI,IAAI,CAAE,MAAO,CAAAF,SAAS,CAErE,GAAI,CAAAG,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAEvB,GAAIT,QAAQ,CAAEE,SAAS,CAAGQ,cAAc,CAACjtD,IAAI,CAAEqsD,WAAW,CAAEI,SAAS,CAAEH,GAAG,CAAC,CAE3E;AACA,GAAItsD,IAAI,CAACxU,MAAM,CAAG,EAAE,CAAG8gE,GAAG,CAAE,CACxBQ,IAAI,CAAGl9C,QAAQ,CACfm9C,IAAI,CAAGn9C,QAAQ,CACf,GAAI,CAAAs9C,IAAI,CAAG,CAACt9C,QAAQ,CACpB,GAAI,CAAAu9C,IAAI,CAAG,CAACv9C,QAAQ,CAEpB,IAAK,GAAI,CAAAtkB,CAAC,CAAGghE,GAAG,CAAEhhE,CAAC,CAAGkhE,QAAQ,CAAElhE,CAAC,EAAIghE,GAAG,CAAE,CACtC,KAAM,CAAAt/D,CAAC,CAAGgT,IAAI,CAAC1U,CAAC,CAAC,CACjB,KAAM,CAAAgC,CAAC,CAAG0S,IAAI,CAAC1U,CAAC,CAAG,CAAC,CAAC,CACrB,GAAI0B,CAAC,CAAG8/D,IAAI,CAAEA,IAAI,CAAG9/D,CAAC,CACtB,GAAIM,CAAC,CAAGy/D,IAAI,CAAEA,IAAI,CAAGz/D,CAAC,CACtB,GAAIN,CAAC,CAAGkgE,IAAI,CAAEA,IAAI,CAAGlgE,CAAC,CACtB,GAAIM,CAAC,CAAG6/D,IAAI,CAAEA,IAAI,CAAG7/D,CAAC,CAC1B,CAEA;AACA0/D,OAAO,CAAGnhE,IAAI,CAACc,GAAG,CAACugE,IAAI,CAAGJ,IAAI,CAAEK,IAAI,CAAGJ,IAAI,CAAC,CAC5CC,OAAO,CAAGA,OAAO,GAAK,CAAC,CAAG,KAAK,CAAGA,OAAO,CAAG,CAAC,CACjD,CAEAI,YAAY,CAACX,SAAS,CAAEE,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAAC,CAAC,CAE/D,MAAO,CAAAL,SAAS,CACpB,CAEA;AACA,QAAS,CAAAD,UAAUA,CAAC1sD,IAAI,CAAEi3B,KAAK,CAAE0H,GAAG,CAAE2tB,GAAG,CAAEe,SAAS,CAAE,CAClD,GAAI,CAAA9I,IAAI,CAER,GAAI8I,SAAS,GAAMC,UAAU,CAACttD,IAAI,CAAEi3B,KAAK,CAAE0H,GAAG,CAAE2tB,GAAG,CAAC,CAAG,CAAE,CAAE,CACvD,IAAK,GAAI,CAAAhhE,CAAC,CAAG2rC,KAAK,CAAE3rC,CAAC,CAAGqzC,GAAG,CAAErzC,CAAC,EAAIghE,GAAG,CAAE/H,IAAI,CAAGgJ,UAAU,CAACjiE,CAAC,CAAGghE,GAAG,CAAG,CAAC,CAAEtsD,IAAI,CAAC1U,CAAC,CAAC,CAAE0U,IAAI,CAAC1U,CAAC,CAAG,CAAC,CAAC,CAAEi5D,IAAI,CAAC,CACrG,CAAC,IAAM,CACH,IAAK,GAAI,CAAAj5D,CAAC,CAAGqzC,GAAG,CAAG2tB,GAAG,CAAEhhE,CAAC,EAAI2rC,KAAK,CAAE3rC,CAAC,EAAIghE,GAAG,CAAE/H,IAAI,CAAGgJ,UAAU,CAACjiE,CAAC,CAAGghE,GAAG,CAAG,CAAC,CAAEtsD,IAAI,CAAC1U,CAAC,CAAC,CAAE0U,IAAI,CAAC1U,CAAC,CAAG,CAAC,CAAC,CAAEi5D,IAAI,CAAC,CAC5G,CAEA,GAAIA,IAAI,EAAIzvD,MAAM,CAACyvD,IAAI,CAAEA,IAAI,CAACqI,IAAI,CAAC,CAAE,CACjCY,UAAU,CAACjJ,IAAI,CAAC,CAChBA,IAAI,CAAGA,IAAI,CAACqI,IAAI,CACpB,CAEA,MAAO,CAAArI,IAAI,CACf,CAEA;AACA,QAAS,CAAAkJ,YAAYA,CAACx2B,KAAK,CAAE0H,GAAG,CAAE,CAC9B,GAAI,CAAC1H,KAAK,CAAE,MAAO,CAAAA,KAAK,CACxB,GAAI,CAAC0H,GAAG,CAAEA,GAAG,CAAG1H,KAAK,CAErB,GAAI,CAAA3Z,CAAC,CAAG2Z,KAAK,CACTy2B,KAAK,CACT,EAAG,CACCA,KAAK,CAAG,KAAK,CAEb,GAAI,CAACpwC,CAAC,CAACqwC,OAAO,GAAK74D,MAAM,CAACwoB,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAC,EAAIgB,IAAI,CAACtwC,CAAC,CAACuvC,IAAI,CAAEvvC,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAC,GAAK,CAAC,CAAC,CAAE,CACpEY,UAAU,CAAClwC,CAAC,CAAC,CACbA,CAAC,CAAGqhB,GAAG,CAAGrhB,CAAC,CAACuvC,IAAI,CAChB,GAAIvvC,CAAC,GAAKA,CAAC,CAACsvC,IAAI,CAAE,MAClBc,KAAK,CAAG,IAAI,CAEhB,CAAC,IAAM,CACHpwC,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CACJ,CAAC,MAAQc,KAAK,EAAIpwC,CAAC,GAAKqhB,GAAG,EAE3B,MAAO,CAAAA,GAAG,CACd,CAEA;AACA,QAAS,CAAAyuB,YAAYA,CAACS,GAAG,CAAElB,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAEc,IAAI,CAAE,CAClE,GAAI,CAACD,GAAG,CAAE,OAEV;AACA,GAAI,CAACC,IAAI,EAAId,OAAO,CAAEe,UAAU,CAACF,GAAG,CAAEf,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CAE1D,GAAI,CAAAgB,IAAI,CAAGH,GAAG,CAEd;AACA,MAAOA,GAAG,CAAChB,IAAI,GAAKgB,GAAG,CAACjB,IAAI,CAAE,CAC1B,KAAM,CAAAC,IAAI,CAAGgB,GAAG,CAAChB,IAAI,CACrB,KAAM,CAAAD,IAAI,CAAGiB,GAAG,CAACjB,IAAI,CAErB,GAAII,OAAO,CAAGiB,WAAW,CAACJ,GAAG,CAAEf,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CAAGkB,KAAK,CAACL,GAAG,CAAC,CAAE,CAC9DlB,SAAS,CAAChiE,IAAI,CAACkiE,IAAI,CAACvhE,CAAC,CAAEuiE,GAAG,CAACviE,CAAC,CAAEshE,IAAI,CAACthE,CAAC,CAAC,CAAE;AAEvCkiE,UAAU,CAACK,GAAG,CAAC,CAEf;AACAA,GAAG,CAAGjB,IAAI,CAACA,IAAI,CACfoB,IAAI,CAAGpB,IAAI,CAACA,IAAI,CAEhB,SACJ,CAEAiB,GAAG,CAAGjB,IAAI,CAEV;AACA,GAAIiB,GAAG,GAAKG,IAAI,CAAE,CACd;AACA,GAAI,CAACF,IAAI,CAAE,CACPV,YAAY,CAACK,YAAY,CAACI,GAAG,CAAC,CAAElB,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAAC,CAAC,CAE3E;AACA,CAAC,IAAM,IAAIc,IAAI,GAAK,CAAC,CAAE,CACnBD,GAAG,CAAGM,sBAAsB,CAACV,YAAY,CAACI,GAAG,CAAC,CAAElB,SAAS,CAAC,CAC1DS,YAAY,CAACS,GAAG,CAAElB,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAAC,CAAC,CAE7D;AACA,CAAC,IAAM,IAAIc,IAAI,GAAK,CAAC,CAAE,CACnBM,WAAW,CAACP,GAAG,CAAElB,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CACzD,CAEA,MACJ,CACJ,CACJ,CAEA;AACA,QAAS,CAAAkB,KAAKA,CAACL,GAAG,CAAE,CAChB,KAAM,CAAAr+D,CAAC,CAAGq+D,GAAG,CAAChB,IAAI,CACdp9D,CAAC,CAAGo+D,GAAG,CACPn+D,CAAC,CAAGm+D,GAAG,CAACjB,IAAI,CAEhB,GAAIgB,IAAI,CAACp+D,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAAE;AAEtC;AACA,KAAM,CAAAue,EAAE,CAAGze,CAAC,CAACxC,CAAC,CAAEohB,EAAE,CAAG3e,CAAC,CAACzC,CAAC,CAAE2M,EAAE,CAAGjK,CAAC,CAAC1C,CAAC,CAAEkhB,EAAE,CAAG1e,CAAC,CAAClC,CAAC,CAAE+gB,EAAE,CAAG5e,CAAC,CAACnC,CAAC,CAAEsM,EAAE,CAAGlK,CAAC,CAACpC,CAAC,CAEhE;AACA,KAAM,CAAAsb,EAAE,CAAG/c,IAAI,CAACa,GAAG,CAACuhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CAC3BkP,EAAE,CAAGhd,IAAI,CAACa,GAAG,CAACwhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CACzBoP,EAAE,CAAGnd,IAAI,CAACc,GAAG,CAACshB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CACzBsP,EAAE,CAAGpd,IAAI,CAACc,GAAG,CAACuhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CAE7B,GAAI,CAAA0jB,CAAC,CAAG5tB,CAAC,CAACk9D,IAAI,CACd,MAAOtvC,CAAC,GAAK9tB,CAAC,CAAE,CACZ,GAAI8tB,CAAC,CAACtwB,CAAC,EAAI4b,EAAE,EAAI0U,CAAC,CAACtwB,CAAC,EAAIgc,EAAE,EAAIsU,CAAC,CAAChwB,CAAC,EAAIub,EAAE,EAAIyU,CAAC,CAAChwB,CAAC,EAAI2b,EAAE,EAChDolD,0BAA0B,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE0jB,CAAC,CAACtwB,CAAC,CAAEswB,CAAC,CAAChwB,CAAC,CAAC,EAC5DsgE,IAAI,CAACtwC,CAAC,CAACuvC,IAAI,CAAEvvC,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAC9CtvC,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAEA,MAAO,KAAI,CACf,CAEA,QAAS,CAAAqB,WAAWA,CAACJ,GAAG,CAAEf,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAC3C,KAAM,CAAAx9D,CAAC,CAAGq+D,GAAG,CAAChB,IAAI,CACdp9D,CAAC,CAAGo+D,GAAG,CACPn+D,CAAC,CAAGm+D,GAAG,CAACjB,IAAI,CAEhB,GAAIgB,IAAI,CAACp+D,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAAE;AAEtC,KAAM,CAAAue,EAAE,CAAGze,CAAC,CAACxC,CAAC,CAAEohB,EAAE,CAAG3e,CAAC,CAACzC,CAAC,CAAE2M,EAAE,CAAGjK,CAAC,CAAC1C,CAAC,CAAEkhB,EAAE,CAAG1e,CAAC,CAAClC,CAAC,CAAE+gB,EAAE,CAAG5e,CAAC,CAACnC,CAAC,CAAEsM,EAAE,CAAGlK,CAAC,CAACpC,CAAC,CAEhE;AACA,KAAM,CAAAsb,EAAE,CAAG/c,IAAI,CAACa,GAAG,CAACuhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CAC3BkP,EAAE,CAAGhd,IAAI,CAACa,GAAG,CAACwhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CACzBoP,EAAE,CAAGnd,IAAI,CAACc,GAAG,CAACshB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CACzBsP,EAAE,CAAGpd,IAAI,CAACc,GAAG,CAACuhB,EAAE,CAAEG,EAAE,CAAEzU,EAAE,CAAC,CAE7B;AACA,KAAM,CAAA00D,IAAI,CAAGC,MAAM,CAAC3lD,EAAE,CAAEC,EAAE,CAAEikD,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CAC5CwB,IAAI,CAAGD,MAAM,CAACvlD,EAAE,CAAEC,EAAE,CAAE6jD,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CAE9C,GAAI,CAAA1vC,CAAC,CAAGuwC,GAAG,CAACY,KAAK,CACb5hE,CAAC,CAAGghE,GAAG,CAACa,KAAK,CAEjB;AACA,MAAOpxC,CAAC,EAAIA,CAAC,CAACxZ,CAAC,EAAIwqD,IAAI,EAAIzhE,CAAC,EAAIA,CAAC,CAACiX,CAAC,EAAI0qD,IAAI,CAAE,CACzC,GAAIlxC,CAAC,CAACtwB,CAAC,EAAI4b,EAAE,EAAI0U,CAAC,CAACtwB,CAAC,EAAIgc,EAAE,EAAIsU,CAAC,CAAChwB,CAAC,EAAIub,EAAE,EAAIyU,CAAC,CAAChwB,CAAC,EAAI2b,EAAE,EAAIqU,CAAC,GAAK9tB,CAAC,EAAI8tB,CAAC,GAAK5tB,CAAC,EACtE2+D,0BAA0B,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE0jB,CAAC,CAACtwB,CAAC,CAAEswB,CAAC,CAAChwB,CAAC,CAAC,EAAIsgE,IAAI,CAACtwC,CAAC,CAACuvC,IAAI,CAAEvvC,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAC9GtvC,CAAC,CAAGA,CAAC,CAACmxC,KAAK,CAEX,GAAI5hE,CAAC,CAACG,CAAC,EAAI4b,EAAE,EAAI/b,CAAC,CAACG,CAAC,EAAIgc,EAAE,EAAInc,CAAC,CAACS,CAAC,EAAIub,EAAE,EAAIhc,CAAC,CAACS,CAAC,EAAI2b,EAAE,EAAIpc,CAAC,GAAK2C,CAAC,EAAI3C,CAAC,GAAK6C,CAAC,EACtE2+D,0BAA0B,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE/M,CAAC,CAACG,CAAC,CAAEH,CAAC,CAACS,CAAC,CAAC,EAAIsgE,IAAI,CAAC/gE,CAAC,CAACggE,IAAI,CAAEhgE,CAAC,CAAEA,CAAC,CAAC+/D,IAAI,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAC9G//D,CAAC,CAAGA,CAAC,CAAC6hE,KAAK,CACf,CAEA;AACA,MAAOpxC,CAAC,EAAIA,CAAC,CAACxZ,CAAC,EAAIwqD,IAAI,CAAE,CACrB,GAAIhxC,CAAC,CAACtwB,CAAC,EAAI4b,EAAE,EAAI0U,CAAC,CAACtwB,CAAC,EAAIgc,EAAE,EAAIsU,CAAC,CAAChwB,CAAC,EAAIub,EAAE,EAAIyU,CAAC,CAAChwB,CAAC,EAAI2b,EAAE,EAAIqU,CAAC,GAAK9tB,CAAC,EAAI8tB,CAAC,GAAK5tB,CAAC,EACtE2+D,0BAA0B,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE0jB,CAAC,CAACtwB,CAAC,CAAEswB,CAAC,CAAChwB,CAAC,CAAC,EAAIsgE,IAAI,CAACtwC,CAAC,CAACuvC,IAAI,CAAEvvC,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAC9GtvC,CAAC,CAAGA,CAAC,CAACmxC,KAAK,CACf,CAEA;AACA,MAAO5hE,CAAC,EAAIA,CAAC,CAACiX,CAAC,EAAI0qD,IAAI,CAAE,CACrB,GAAI3hE,CAAC,CAACG,CAAC,EAAI4b,EAAE,EAAI/b,CAAC,CAACG,CAAC,EAAIgc,EAAE,EAAInc,CAAC,CAACS,CAAC,EAAIub,EAAE,EAAIhc,CAAC,CAACS,CAAC,EAAI2b,EAAE,EAAIpc,CAAC,GAAK2C,CAAC,EAAI3C,CAAC,GAAK6C,CAAC,EACtE2+D,0BAA0B,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE/M,CAAC,CAACG,CAAC,CAAEH,CAAC,CAACS,CAAC,CAAC,EAAIsgE,IAAI,CAAC/gE,CAAC,CAACggE,IAAI,CAAEhgE,CAAC,CAAEA,CAAC,CAAC+/D,IAAI,CAAC,EAAI,CAAC,CAAE,MAAO,MAAK,CAC9G//D,CAAC,CAAGA,CAAC,CAAC6hE,KAAK,CACf,CAEA,MAAO,KAAI,CACf,CAEA;AACA,QAAS,CAAAP,sBAAsBA,CAACl3B,KAAK,CAAE01B,SAAS,CAAE,CAC9C,GAAI,CAAArvC,CAAC,CAAG2Z,KAAK,CACb,EAAG,CACC,KAAM,CAAAznC,CAAC,CAAG8tB,CAAC,CAACuvC,IAAI,CACZp9D,CAAC,CAAG6tB,CAAC,CAACsvC,IAAI,CAACA,IAAI,CAEnB,GAAI,CAAC93D,MAAM,CAACtF,CAAC,CAAEC,CAAC,CAAC,EAAI4uC,UAAU,CAAC7uC,CAAC,CAAE8tB,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAEn9D,CAAC,CAAC,EAAIk/D,aAAa,CAACn/D,CAAC,CAAEC,CAAC,CAAC,EAAIk/D,aAAa,CAACl/D,CAAC,CAAED,CAAC,CAAC,CAAE,CAE5Fm9D,SAAS,CAAChiE,IAAI,CAAC6E,CAAC,CAAClE,CAAC,CAAEgyB,CAAC,CAAChyB,CAAC,CAAEmE,CAAC,CAACnE,CAAC,CAAC,CAE7B;AACAkiE,UAAU,CAAClwC,CAAC,CAAC,CACbkwC,UAAU,CAAClwC,CAAC,CAACsvC,IAAI,CAAC,CAElBtvC,CAAC,CAAG2Z,KAAK,CAAGxnC,CAAC,CACjB,CACA6tB,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK2Z,KAAK,EAEpB,MAAO,CAAAw2B,YAAY,CAACnwC,CAAC,CAAC,CAC1B,CAEA;AACA,QAAS,CAAA8wC,WAAWA,CAACn3B,KAAK,CAAE01B,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAC7D;AACA,GAAI,CAAAx9D,CAAC,CAAGynC,KAAK,CACb,EAAG,CACC,GAAI,CAAAxnC,CAAC,CAAGD,CAAC,CAACo9D,IAAI,CAACA,IAAI,CACnB,MAAOn9D,CAAC,GAAKD,CAAC,CAACq9D,IAAI,CAAE,CACjB,GAAIr9D,CAAC,CAAClE,CAAC,GAAKmE,CAAC,CAACnE,CAAC,EAAIsjE,eAAe,CAACp/D,CAAC,CAAEC,CAAC,CAAC,CAAE,CACtC;AACA,GAAI,CAAAC,CAAC,CAAGm/D,YAAY,CAACr/D,CAAC,CAAEC,CAAC,CAAC,CAE1B;AACAD,CAAC,CAAGi+D,YAAY,CAACj+D,CAAC,CAAEA,CAAC,CAACo9D,IAAI,CAAC,CAC3Bl9D,CAAC,CAAG+9D,YAAY,CAAC/9D,CAAC,CAAEA,CAAC,CAACk9D,IAAI,CAAC,CAE3B;AACAQ,YAAY,CAAC59D,CAAC,CAAEm9D,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAAC,CAAC,CACvDI,YAAY,CAAC19D,CAAC,CAAEi9D,SAAS,CAAEL,GAAG,CAAEQ,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAAC,CAAC,CACvD,OACJ,CACAv9D,CAAC,CAAGA,CAAC,CAACm9D,IAAI,CACd,CACAp9D,CAAC,CAAGA,CAAC,CAACo9D,IAAI,CACd,CAAC,MAAQp9D,CAAC,GAAKynC,KAAK,EACxB,CAEA;AACA,QAAS,CAAAg2B,cAAcA,CAACjtD,IAAI,CAAEqsD,WAAW,CAAEI,SAAS,CAAEH,GAAG,CAAE,CACvD,KAAM,CAAAwC,KAAK,CAAG,EAAE,CAEhB,IAAK,GAAI,CAAAxjE,CAAC,CAAG,CAAC,CAAEke,GAAG,CAAG6iD,WAAW,CAAC7gE,MAAM,CAAEF,CAAC,CAAGke,GAAG,CAAEle,CAAC,EAAE,CAAE,CACpD,KAAM,CAAA2rC,KAAK,CAAGo1B,WAAW,CAAC/gE,CAAC,CAAC,CAAGghE,GAAG,CAClC,KAAM,CAAA3tB,GAAG,CAAGrzC,CAAC,CAAGke,GAAG,CAAG,CAAC,CAAG6iD,WAAW,CAAC/gE,CAAC,CAAG,CAAC,CAAC,CAAGghE,GAAG,CAAGtsD,IAAI,CAACxU,MAAM,CAChE,KAAM,CAAAkpD,IAAI,CAAGgY,UAAU,CAAC1sD,IAAI,CAAEi3B,KAAK,CAAE0H,GAAG,CAAE2tB,GAAG,CAAE,KAAK,CAAC,CACrD,GAAI5X,IAAI,GAAKA,IAAI,CAACkY,IAAI,CAAElY,IAAI,CAACiZ,OAAO,CAAG,IAAI,CAC3CmB,KAAK,CAACnkE,IAAI,CAACokE,WAAW,CAACra,IAAI,CAAC,CAAC,CACjC,CAEAoa,KAAK,CAAC1W,IAAI,CAAC4W,cAAc,CAAC,CAE1B;AACA,IAAK,GAAI,CAAA1jE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGwjE,KAAK,CAACtjE,MAAM,CAAEF,CAAC,EAAE,CAAE,CACnCmhE,SAAS,CAAGwC,aAAa,CAACH,KAAK,CAACxjE,CAAC,CAAC,CAAEmhE,SAAS,CAAC,CAClD,CAEA,MAAO,CAAAA,SAAS,CACpB,CAEA,QAAS,CAAAuC,cAAcA,CAACx/D,CAAC,CAAEC,CAAC,CAAE,CAC1B,GAAI,CAAA0zB,MAAM,CAAG3zB,CAAC,CAACxC,CAAC,CAAGyC,CAAC,CAACzC,CAAC,CACtB;AACA;AACA,GAAIm2B,MAAM,GAAK,CAAC,CAAE,CACdA,MAAM,CAAG3zB,CAAC,CAAClC,CAAC,CAAGmC,CAAC,CAACnC,CAAC,CAClB,GAAI61B,MAAM,GAAK,CAAC,CAAE,CACd,KAAM,CAAA+rC,MAAM,CAAG,CAAC1/D,CAAC,CAACo9D,IAAI,CAACt/D,CAAC,CAAGkC,CAAC,CAAClC,CAAC,GAAKkC,CAAC,CAACo9D,IAAI,CAAC5/D,CAAC,CAAGwC,CAAC,CAACxC,CAAC,CAAC,CAClD,KAAM,CAAAmiE,MAAM,CAAG,CAAC1/D,CAAC,CAACm9D,IAAI,CAACt/D,CAAC,CAAGmC,CAAC,CAACnC,CAAC,GAAKmC,CAAC,CAACm9D,IAAI,CAAC5/D,CAAC,CAAGyC,CAAC,CAACzC,CAAC,CAAC,CAClDm2B,MAAM,CAAG+rC,MAAM,CAAGC,MAAM,CAC5B,CACJ,CACA,MAAO,CAAAhsC,MAAM,CACjB,CAEA;AACA,QAAS,CAAA8rC,aAAaA,CAAC9C,IAAI,CAAEM,SAAS,CAAE,CACpC,KAAM,CAAA2C,MAAM,CAAGC,cAAc,CAAClD,IAAI,CAAEM,SAAS,CAAC,CAC9C,GAAI,CAAC2C,MAAM,CAAE,CACT,MAAO,CAAA3C,SAAS,CACpB,CAEA,KAAM,CAAA6C,aAAa,CAAGT,YAAY,CAACO,MAAM,CAAEjD,IAAI,CAAC,CAEhD;AACAsB,YAAY,CAAC6B,aAAa,CAAEA,aAAa,CAAC1C,IAAI,CAAC,CAC/C,MAAO,CAAAa,YAAY,CAAC2B,MAAM,CAAEA,MAAM,CAACxC,IAAI,CAAC,CAC5C,CAEA;AACA,QAAS,CAAAyC,cAAcA,CAAClD,IAAI,CAAEM,SAAS,CAAE,CACrC,GAAI,CAAAnvC,CAAC,CAAGmvC,SAAS,CACjB,KAAM,CAAA8C,EAAE,CAAGpD,IAAI,CAACn/D,CAAC,CACjB,KAAM,CAAAwiE,EAAE,CAAGrD,IAAI,CAAC7+D,CAAC,CACjB,GAAI,CAAA8f,EAAE,CAAG,CAACwC,QAAQ,CAClB,GAAI,CAAA9iB,CAAC,CAEL;AACA;AACA;AACA,GAAIgI,MAAM,CAACq3D,IAAI,CAAE7uC,CAAC,CAAC,CAAE,MAAO,CAAAA,CAAC,CAC7B,EAAG,CACC,GAAIxoB,MAAM,CAACq3D,IAAI,CAAE7uC,CAAC,CAACsvC,IAAI,CAAC,CAAE,MAAO,CAAAtvC,CAAC,CAACsvC,IAAI,CAAC,IACnC,IAAI4C,EAAE,EAAIlyC,CAAC,CAAChwB,CAAC,EAAIkiE,EAAE,EAAIlyC,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,EAAIgwB,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,GAAKgwB,CAAC,CAAChwB,CAAC,CAAE,CACtD,KAAM,CAAAN,CAAC,CAAGswB,CAAC,CAACtwB,CAAC,CAAG,CAACwiE,EAAE,CAAGlyC,CAAC,CAAChwB,CAAC,GAAKgwB,CAAC,CAACsvC,IAAI,CAAC5/D,CAAC,CAAGswB,CAAC,CAACtwB,CAAC,CAAC,EAAIswB,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,CAAGgwB,CAAC,CAAChwB,CAAC,CAAC,CAChE,GAAIN,CAAC,EAAIuiE,EAAE,EAAIviE,CAAC,CAAGogB,EAAE,CAAE,CACnBA,EAAE,CAAGpgB,CAAC,CACNF,CAAC,CAAGwwB,CAAC,CAACtwB,CAAC,CAAGswB,CAAC,CAACsvC,IAAI,CAAC5/D,CAAC,CAAGswB,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CAC/B,GAAI5/D,CAAC,GAAKuiE,EAAE,CAAE,MAAO,CAAAziE,CAAC,CAAE;AAC5B,CACJ,CACAwwB,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAKmvC,SAAS,EAExB,GAAI,CAAC3/D,CAAC,CAAE,MAAO,KAAI,CAEnB;AACA;AACA;AAEA,KAAM,CAAAkhE,IAAI,CAAGlhE,CAAC,CACd,KAAM,CAAA2iE,EAAE,CAAG3iE,CAAC,CAACE,CAAC,CACd,KAAM,CAAA0iE,EAAE,CAAG5iE,CAAC,CAACQ,CAAC,CACd,GAAI,CAAAqiE,MAAM,CAAG//C,QAAQ,CAErB0N,CAAC,CAAGxwB,CAAC,CAEL,EAAG,CACC,GAAIyiE,EAAE,EAAIjyC,CAAC,CAACtwB,CAAC,EAAIswB,CAAC,CAACtwB,CAAC,EAAIyiE,EAAE,EAAIF,EAAE,GAAKjyC,CAAC,CAACtwB,CAAC,EAChC4iE,eAAe,CAACJ,EAAE,CAAGE,EAAE,CAAGH,EAAE,CAAGniD,EAAE,CAAEoiD,EAAE,CAAEC,EAAE,CAAEC,EAAE,CAAEF,EAAE,CAAGE,EAAE,CAAGtiD,EAAE,CAAGmiD,EAAE,CAAEC,EAAE,CAAElyC,CAAC,CAACtwB,CAAC,CAAEswB,CAAC,CAAChwB,CAAC,CAAC,CAAE,CAErF,KAAM,CAAAw2C,GAAG,CAAGj4C,IAAI,CAACiC,GAAG,CAAC0hE,EAAE,CAAGlyC,CAAC,CAAChwB,CAAC,CAAC,EAAIiiE,EAAE,CAAGjyC,CAAC,CAACtwB,CAAC,CAAC,CAAE;AAE7C,GAAI2hE,aAAa,CAACrxC,CAAC,CAAE6uC,IAAI,CAAC,GACrBroB,GAAG,CAAG6rB,MAAM,EAAK7rB,GAAG,GAAK6rB,MAAM,GAAKryC,CAAC,CAACtwB,CAAC,CAAGF,CAAC,CAACE,CAAC,EAAKswB,CAAC,CAACtwB,CAAC,GAAKF,CAAC,CAACE,CAAC,EAAI6iE,oBAAoB,CAAC/iE,CAAC,CAAEwwB,CAAC,CAAE,CAAE,CAAC,CAAE,CAClGxwB,CAAC,CAAGwwB,CAAC,CACLqyC,MAAM,CAAG7rB,GAAG,CAChB,CACJ,CAEAxmB,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK0wC,IAAI,EAEnB,MAAO,CAAAlhE,CAAC,CACZ,CAEA;AACA,QAAS,CAAA+iE,oBAAoBA,CAAC/iE,CAAC,CAAEwwB,CAAC,CAAE,CAChC,MAAO,CAAAswC,IAAI,CAAC9gE,CAAC,CAAC+/D,IAAI,CAAE//D,CAAC,CAAEwwB,CAAC,CAACuvC,IAAI,CAAC,CAAG,CAAC,EAAIe,IAAI,CAACtwC,CAAC,CAACsvC,IAAI,CAAE9/D,CAAC,CAAEA,CAAC,CAAC8/D,IAAI,CAAC,CAAG,CAAC,CACrE,CAEA;AACA,QAAS,CAAAmB,UAAUA,CAAC92B,KAAK,CAAE61B,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CAC5C,GAAI,CAAA1vC,CAAC,CAAG2Z,KAAK,CACb,EAAG,CACC,GAAI3Z,CAAC,CAACxZ,CAAC,GAAK,CAAC,CAAEwZ,CAAC,CAACxZ,CAAC,CAAGyqD,MAAM,CAACjxC,CAAC,CAACtwB,CAAC,CAAEswB,CAAC,CAAChwB,CAAC,CAAEw/D,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAC,CAC1D1vC,CAAC,CAACmxC,KAAK,CAAGnxC,CAAC,CAACuvC,IAAI,CAChBvvC,CAAC,CAACoxC,KAAK,CAAGpxC,CAAC,CAACsvC,IAAI,CAChBtvC,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK2Z,KAAK,EAEpB3Z,CAAC,CAACmxC,KAAK,CAACC,KAAK,CAAG,IAAI,CACpBpxC,CAAC,CAACmxC,KAAK,CAAG,IAAI,CAEdqB,UAAU,CAACxyC,CAAC,CAAC,CACjB,CAEA;AACA;AACA,QAAS,CAAAwyC,UAAUA,CAACpb,IAAI,CAAE,CACtB,GAAI,CAAAqb,SAAS,CACb,GAAI,CAAAC,MAAM,CAAG,CAAC,CAEd,EAAG,CACC,GAAI,CAAA1yC,CAAC,CAAGo3B,IAAI,CACZ,GAAI,CAAA1hD,CAAC,CACL0hD,IAAI,CAAG,IAAI,CACX,GAAI,CAAAub,IAAI,CAAG,IAAI,CACfF,SAAS,CAAG,CAAC,CAEb,MAAOzyC,CAAC,CAAE,CACNyyC,SAAS,EAAE,CACX,GAAI,CAAAxgE,CAAC,CAAG+tB,CAAC,CACT,GAAI,CAAA4yC,KAAK,CAAG,CAAC,CACb,IAAK,GAAI,CAAA5kE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG0kE,MAAM,CAAE1kE,CAAC,EAAE,CAAE,CAC7B4kE,KAAK,EAAE,CACP3gE,CAAC,CAAGA,CAAC,CAACm/D,KAAK,CACX,GAAI,CAACn/D,CAAC,CAAE,MACZ,CACA,GAAI,CAAA4gE,KAAK,CAAGH,MAAM,CAElB,MAAOE,KAAK,CAAG,CAAC,EAAKC,KAAK,CAAG,CAAC,EAAI5gE,CAAE,CAAE,CAElC,GAAI2gE,KAAK,GAAK,CAAC,GAAKC,KAAK,GAAK,CAAC,EAAI,CAAC5gE,CAAC,EAAI+tB,CAAC,CAACxZ,CAAC,EAAIvU,CAAC,CAACuU,CAAC,CAAC,CAAE,CAClD9Q,CAAC,CAAGsqB,CAAC,CACLA,CAAC,CAAGA,CAAC,CAACoxC,KAAK,CACXwB,KAAK,EAAE,CACX,CAAC,IAAM,CACHl9D,CAAC,CAAGzD,CAAC,CACLA,CAAC,CAAGA,CAAC,CAACm/D,KAAK,CACXyB,KAAK,EAAE,CACX,CAEA,GAAIF,IAAI,CAAEA,IAAI,CAACvB,KAAK,CAAG17D,CAAC,CAAC,IACpB,CAAA0hD,IAAI,CAAG1hD,CAAC,CAEbA,CAAC,CAACy7D,KAAK,CAAGwB,IAAI,CACdA,IAAI,CAAGj9D,CAAC,CACZ,CAEAsqB,CAAC,CAAG/tB,CAAC,CACT,CAEA0gE,IAAI,CAACvB,KAAK,CAAG,IAAI,CACjBsB,MAAM,EAAI,CAAC,CAEf,CAAC,MAAQD,SAAS,CAAG,CAAC,EAEtB,MAAO,CAAArb,IAAI,CACf,CAEA;AACA,QAAS,CAAA6Z,MAAMA,CAACvhE,CAAC,CAAEM,CAAC,CAAEw/D,IAAI,CAAEC,IAAI,CAAEC,OAAO,CAAE,CACvC;AACAhgE,CAAC,CAAG,CAACA,CAAC,CAAG8/D,IAAI,EAAIE,OAAO,CAAG,CAAC,CAC5B1/D,CAAC,CAAG,CAACA,CAAC,CAAGy/D,IAAI,EAAIC,OAAO,CAAG,CAAC,CAE5BhgE,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAE/BM,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAC/BA,CAAC,CAAG,CAACA,CAAC,CAAIA,CAAC,EAAI,CAAE,EAAI,UAAU,CAE/B,MAAO,CAAAN,CAAC,CAAIM,CAAC,EAAI,CAAE,CACvB,CAEA;AACA,QAAS,CAAAyhE,WAAWA,CAAC93B,KAAK,CAAE,CACxB,GAAI,CAAA3Z,CAAC,CAAG2Z,KAAK,CACTm5B,QAAQ,CAAGn5B,KAAK,CACpB,EAAG,CACC,GAAI3Z,CAAC,CAACtwB,CAAC,CAAGojE,QAAQ,CAACpjE,CAAC,EAAKswB,CAAC,CAACtwB,CAAC,GAAKojE,QAAQ,CAACpjE,CAAC,EAAIswB,CAAC,CAAChwB,CAAC,CAAG8iE,QAAQ,CAAC9iE,CAAE,CAAE8iE,QAAQ,CAAG9yC,CAAC,CAC9EA,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK2Z,KAAK,EAEpB,MAAO,CAAAm5B,QAAQ,CACnB,CAEA;AACA,QAAS,CAAAR,eAAeA,CAAC3hD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE4tD,EAAE,CAAEC,EAAE,CAAE,CACrD,MAAO,CAAC9tD,EAAE,CAAG6tD,EAAE,GAAKt5C,EAAE,CAAGu5C,EAAE,CAAC,EAAI,CAACx5C,EAAE,CAAGu5C,EAAE,GAAK5tD,EAAE,CAAG6tD,EAAE,CAAC,EAC9C,CAACx5C,EAAE,CAAGu5C,EAAE,GAAKn5C,EAAE,CAAGo5C,EAAE,CAAC,EAAI,CAACr5C,EAAE,CAAGo5C,EAAE,GAAKt5C,EAAE,CAAGu5C,EAAE,CAAC,EAC9C,CAACr5C,EAAE,CAAGo5C,EAAE,GAAK5tD,EAAE,CAAG6tD,EAAE,CAAC,EAAI,CAAC9tD,EAAE,CAAG6tD,EAAE,GAAKn5C,EAAE,CAAGo5C,EAAE,CAAC,CACzD,CAEA;AACA,QAAS,CAAA4G,0BAA0BA,CAACpgD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE4tD,EAAE,CAAEC,EAAE,CAAE,CAChE,MAAO,EAAEx5C,EAAE,GAAKu5C,EAAE,EAAIt5C,EAAE,GAAKu5C,EAAE,CAAC,EAAImI,eAAe,CAAC3hD,EAAE,CAAEC,EAAE,CAAEE,EAAE,CAAEC,EAAE,CAAE1U,EAAE,CAAEC,EAAE,CAAE4tD,EAAE,CAAEC,EAAE,CAAC,CACvF,CAEA;AACA,QAAS,CAAAmH,eAAeA,CAACp/D,CAAC,CAAEC,CAAC,CAAE,CAC3B,MAAO,CAAAD,CAAC,CAACo9D,IAAI,CAACthE,CAAC,GAAKmE,CAAC,CAACnE,CAAC,EAAIkE,CAAC,CAACq9D,IAAI,CAACvhE,CAAC,GAAKmE,CAAC,CAACnE,CAAC,EAAI,CAAC+kE,iBAAiB,CAAC7gE,CAAC,CAAEC,CAAC,CAAC,GAAI;AACnEk/D,aAAa,CAACn/D,CAAC,CAAEC,CAAC,CAAC,EAAIk/D,aAAa,CAACl/D,CAAC,CAAED,CAAC,CAAC,EAAI8gE,YAAY,CAAC9gE,CAAC,CAAEC,CAAC,CAAC,GAAI;AACnEm+D,IAAI,CAACp+D,CAAC,CAACq9D,IAAI,CAAEr9D,CAAC,CAAEC,CAAC,CAACo9D,IAAI,CAAC,EAAIe,IAAI,CAACp+D,CAAC,CAAEC,CAAC,CAACo9D,IAAI,CAAEp9D,CAAC,CAAC,CAAC,EAAI;AACnDqF,MAAM,CAACtF,CAAC,CAAEC,CAAC,CAAC,EAAIm+D,IAAI,CAACp+D,CAAC,CAACq9D,IAAI,CAAEr9D,CAAC,CAAEA,CAAC,CAACo9D,IAAI,CAAC,CAAG,CAAC,EAAIgB,IAAI,CAACn+D,CAAC,CAACo9D,IAAI,CAAEp9D,CAAC,CAAEA,CAAC,CAACm9D,IAAI,CAAC,CAAG,CAAC,CAAC,CAAE;AACzF,CAEA;AACA,QAAS,CAAAgB,IAAIA,CAACtwC,CAAC,CAAE/tB,CAAC,CAAE6J,CAAC,CAAE,CACnB,MAAO,CAAC7J,CAAC,CAACjC,CAAC,CAAGgwB,CAAC,CAAChwB,CAAC,GAAK8L,CAAC,CAACpM,CAAC,CAAGuC,CAAC,CAACvC,CAAC,CAAC,CAAG,CAACuC,CAAC,CAACvC,CAAC,CAAGswB,CAAC,CAACtwB,CAAC,GAAKoM,CAAC,CAAC9L,CAAC,CAAGiC,CAAC,CAACjC,CAAC,CAAC,CAChE,CAEA;AACA,QAAS,CAAAwH,MAAMA,CAACkf,EAAE,CAAEC,EAAE,CAAE,CACpB,MAAO,CAAAD,EAAE,CAAChnB,CAAC,GAAKinB,EAAE,CAACjnB,CAAC,EAAIgnB,EAAE,CAAC1mB,CAAC,GAAK2mB,EAAE,CAAC3mB,CAAC,CACzC,CAEA;AACA,QAAS,CAAA+wC,UAAUA,CAACrqB,EAAE,CAAEu8C,EAAE,CAAEt8C,EAAE,CAAEu8C,EAAE,CAAE,CAChC,KAAM,CAAAC,EAAE,CAAGz4C,IAAI,CAAC41C,IAAI,CAAC55C,EAAE,CAAEu8C,EAAE,CAAEt8C,EAAE,CAAC,CAAC,CACjC,KAAM,CAAAy8C,EAAE,CAAG14C,IAAI,CAAC41C,IAAI,CAAC55C,EAAE,CAAEu8C,EAAE,CAAEC,EAAE,CAAC,CAAC,CACjC,KAAM,CAAAG,EAAE,CAAG34C,IAAI,CAAC41C,IAAI,CAAC35C,EAAE,CAAEu8C,EAAE,CAAEx8C,EAAE,CAAC,CAAC,CACjC,KAAM,CAAA48C,EAAE,CAAG54C,IAAI,CAAC41C,IAAI,CAAC35C,EAAE,CAAEu8C,EAAE,CAAED,EAAE,CAAC,CAAC,CAEjC,GAAIE,EAAE,GAAKC,EAAE,EAAIC,EAAE,GAAKC,EAAE,CAAE,MAAO,KAAI,CAAE;AAEzC,GAAIH,EAAE,GAAK,CAAC,EAAII,SAAS,CAAC78C,EAAE,CAAEC,EAAE,CAAEs8C,EAAE,CAAC,CAAE,MAAO,KAAI,CAAE;AACpD,GAAIG,EAAE,GAAK,CAAC,EAAIG,SAAS,CAAC78C,EAAE,CAAEw8C,EAAE,CAAED,EAAE,CAAC,CAAE,MAAO,KAAI,CAAE;AACpD,GAAII,EAAE,GAAK,CAAC,EAAIE,SAAS,CAAC58C,EAAE,CAAED,EAAE,CAAEw8C,EAAE,CAAC,CAAE,MAAO,KAAI,CAAE;AACpD,GAAII,EAAE,GAAK,CAAC,EAAIC,SAAS,CAAC58C,EAAE,CAAEs8C,EAAE,CAAEC,EAAE,CAAC,CAAE,MAAO,KAAI,CAAE;AAEpD,MAAO,MAAK,CAChB,CAEA;AACA,QAAS,CAAAK,SAASA,CAACvzC,CAAC,CAAE/tB,CAAC,CAAE6J,CAAC,CAAE,CACxB,MAAO,CAAA7J,CAAC,CAACvC,CAAC,EAAInB,IAAI,CAACc,GAAG,CAAC2wB,CAAC,CAACtwB,CAAC,CAAEoM,CAAC,CAACpM,CAAC,CAAC,EAAIuC,CAAC,CAACvC,CAAC,EAAInB,IAAI,CAACa,GAAG,CAAC4wB,CAAC,CAACtwB,CAAC,CAAEoM,CAAC,CAACpM,CAAC,CAAC,EAAIuC,CAAC,CAACjC,CAAC,EAAIzB,IAAI,CAACc,GAAG,CAAC2wB,CAAC,CAAChwB,CAAC,CAAE8L,CAAC,CAAC9L,CAAC,CAAC,EAAIiC,CAAC,CAACjC,CAAC,EAAIzB,IAAI,CAACa,GAAG,CAAC4wB,CAAC,CAAChwB,CAAC,CAAE8L,CAAC,CAAC9L,CAAC,CAAC,CAC3H,CAEA,QAAS,CAAA0qB,IAAIA,CAAC84C,GAAG,CAAE,CACf,MAAO,CAAAA,GAAG,CAAG,CAAC,CAAG,CAAC,CAAGA,GAAG,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CACzC,CAEA;AACA,QAAS,CAAAT,iBAAiBA,CAAC7gE,CAAC,CAAEC,CAAC,CAAE,CAC7B,GAAI,CAAA6tB,CAAC,CAAG9tB,CAAC,CACT,EAAG,CACC,GAAI8tB,CAAC,CAAChyB,CAAC,GAAKkE,CAAC,CAAClE,CAAC,EAAIgyB,CAAC,CAACsvC,IAAI,CAACthE,CAAC,GAAKkE,CAAC,CAAClE,CAAC,EAAIgyB,CAAC,CAAChyB,CAAC,GAAKmE,CAAC,CAACnE,CAAC,EAAIgyB,CAAC,CAACsvC,IAAI,CAACthE,CAAC,GAAKmE,CAAC,CAACnE,CAAC,EAC9D+yC,UAAU,CAAC/gB,CAAC,CAAEA,CAAC,CAACsvC,IAAI,CAAEp9D,CAAC,CAAEC,CAAC,CAAC,CAAE,MAAO,KAAI,CAChD6tB,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK9tB,CAAC,EAEhB,MAAO,MAAK,CAChB,CAEA;AACA,QAAS,CAAAm/D,aAAaA,CAACn/D,CAAC,CAAEC,CAAC,CAAE,CACzB,MAAO,CAAAm+D,IAAI,CAACp+D,CAAC,CAACq9D,IAAI,CAAEr9D,CAAC,CAAEA,CAAC,CAACo9D,IAAI,CAAC,CAAG,CAAC,CAC9BgB,IAAI,CAACp+D,CAAC,CAAEC,CAAC,CAAED,CAAC,CAACo9D,IAAI,CAAC,EAAI,CAAC,EAAIgB,IAAI,CAACp+D,CAAC,CAAEA,CAAC,CAACq9D,IAAI,CAAEp9D,CAAC,CAAC,EAAI,CAAC,CAClDm+D,IAAI,CAACp+D,CAAC,CAAEC,CAAC,CAAED,CAAC,CAACq9D,IAAI,CAAC,CAAG,CAAC,EAAIe,IAAI,CAACp+D,CAAC,CAAEA,CAAC,CAACo9D,IAAI,CAAEn9D,CAAC,CAAC,CAAG,CAAC,CACxD,CAEA;AACA,QAAS,CAAA6gE,YAAYA,CAAC9gE,CAAC,CAAEC,CAAC,CAAE,CACxB,GAAI,CAAA6tB,CAAC,CAAG9tB,CAAC,CACT,GAAI,CAAAuhE,MAAM,CAAG,KAAK,CAClB,KAAM,CAAAvJ,EAAE,CAAG,CAACh4D,CAAC,CAACxC,CAAC,CAAGyC,CAAC,CAACzC,CAAC,EAAI,CAAC,CAC1B,KAAM,CAAAy6D,EAAE,CAAG,CAACj4D,CAAC,CAAClC,CAAC,CAAGmC,CAAC,CAACnC,CAAC,EAAI,CAAC,CAC1B,EAAG,CACC,GAAMgwB,CAAC,CAAChwB,CAAC,CAAGm6D,EAAE,GAAOnqC,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,CAAGm6D,EAAG,EAAKnqC,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,GAAKgwB,CAAC,CAAChwB,CAAC,EAC/Ck6D,EAAE,CAAG,CAAClqC,CAAC,CAACsvC,IAAI,CAAC5/D,CAAC,CAAGswB,CAAC,CAACtwB,CAAC,GAAKy6D,EAAE,CAAGnqC,CAAC,CAAChwB,CAAC,CAAC,EAAIgwB,CAAC,CAACsvC,IAAI,CAACt/D,CAAC,CAAGgwB,CAAC,CAAChwB,CAAC,CAAC,CAAGgwB,CAAC,CAACtwB,CAAE,CACjE+jE,MAAM,CAAG,CAACA,MAAM,CACpBzzC,CAAC,CAAGA,CAAC,CAACsvC,IAAI,CACd,CAAC,MAAQtvC,CAAC,GAAK9tB,CAAC,EAEhB,MAAO,CAAAuhE,MAAM,CACjB,CAEA;AACA;AACA,QAAS,CAAAlC,YAAYA,CAACr/D,CAAC,CAAEC,CAAC,CAAE,CACxB,KAAM,CAAAvC,EAAE,CAAG8jE,UAAU,CAACxhE,CAAC,CAAClE,CAAC,CAAEkE,CAAC,CAACxC,CAAC,CAAEwC,CAAC,CAAClC,CAAC,CAAC,CAChCF,EAAE,CAAG4jE,UAAU,CAACvhE,CAAC,CAACnE,CAAC,CAAEmE,CAAC,CAACzC,CAAC,CAAEyC,CAAC,CAACnC,CAAC,CAAC,CAC9B2jE,EAAE,CAAGzhE,CAAC,CAACo9D,IAAI,CACXsE,EAAE,CAAGzhE,CAAC,CAACo9D,IAAI,CAEfr9D,CAAC,CAACo9D,IAAI,CAAGn9D,CAAC,CACVA,CAAC,CAACo9D,IAAI,CAAGr9D,CAAC,CAEVtC,EAAE,CAAC0/D,IAAI,CAAGqE,EAAE,CACZA,EAAE,CAACpE,IAAI,CAAG3/D,EAAE,CAEZE,EAAE,CAACw/D,IAAI,CAAG1/D,EAAE,CACZA,EAAE,CAAC2/D,IAAI,CAAGz/D,EAAE,CAEZ8jE,EAAE,CAACtE,IAAI,CAAGx/D,EAAE,CACZA,EAAE,CAACy/D,IAAI,CAAGqE,EAAE,CAEZ,MAAO,CAAA9jE,EAAE,CACb,CAEA;AACA,QAAS,CAAAmgE,UAAUA,CAACjiE,CAAC,CAAE0B,CAAC,CAAEM,CAAC,CAAEi3D,IAAI,CAAE,CAC/B,KAAM,CAAAjnC,CAAC,CAAG0zC,UAAU,CAAC1lE,CAAC,CAAE0B,CAAC,CAAEM,CAAC,CAAC,CAE7B,GAAI,CAACi3D,IAAI,CAAE,CACPjnC,CAAC,CAACuvC,IAAI,CAAGvvC,CAAC,CACVA,CAAC,CAACsvC,IAAI,CAAGtvC,CAAC,CAEd,CAAC,IAAM,CACHA,CAAC,CAACsvC,IAAI,CAAGrI,IAAI,CAACqI,IAAI,CAClBtvC,CAAC,CAACuvC,IAAI,CAAGtI,IAAI,CACbA,IAAI,CAACqI,IAAI,CAACC,IAAI,CAAGvvC,CAAC,CAClBinC,IAAI,CAACqI,IAAI,CAAGtvC,CAAC,CACjB,CACA,MAAO,CAAAA,CAAC,CACZ,CAEA,QAAS,CAAAkwC,UAAUA,CAAClwC,CAAC,CAAE,CACnBA,CAAC,CAACsvC,IAAI,CAACC,IAAI,CAAGvvC,CAAC,CAACuvC,IAAI,CACpBvvC,CAAC,CAACuvC,IAAI,CAACD,IAAI,CAAGtvC,CAAC,CAACsvC,IAAI,CAEpB,GAAItvC,CAAC,CAACmxC,KAAK,CAAEnxC,CAAC,CAACmxC,KAAK,CAACC,KAAK,CAAGpxC,CAAC,CAACoxC,KAAK,CACpC,GAAIpxC,CAAC,CAACoxC,KAAK,CAAEpxC,CAAC,CAACoxC,KAAK,CAACD,KAAK,CAAGnxC,CAAC,CAACmxC,KAAK,CACxC,CAEA,QAAS,CAAAuC,UAAUA,CAAC1lE,CAAC,CAAE0B,CAAC,CAAEM,CAAC,CAAE,CACzB,MAAO,CACHhC,CAAC,CAAE;AACH0B,CAAC,CAAEM,CAAC,CAAE;AACNu/D,IAAI,CAAE,IAAI,CAAE;AACZD,IAAI,CAAE,IAAI,CACV9oD,CAAC,CAAE,CAAC,CAAE;AACN2qD,KAAK,CAAE,IAAI,CAAE;AACbC,KAAK,CAAE,IAAI,CACXf,OAAO,CAAE,KAAM;AACnB,CAAC,CACL,CAEA,QAAS,CAAAL,UAAUA,CAACttD,IAAI,CAAEi3B,KAAK,CAAE0H,GAAG,CAAE2tB,GAAG,CAAE,CACvC,GAAI,CAAA9H,GAAG,CAAG,CAAC,CACX,IAAK,GAAI,CAAAl5D,CAAC,CAAG2rC,KAAK,CAAEnjB,CAAC,CAAG6qB,GAAG,CAAG2tB,GAAG,CAAEhhE,CAAC,CAAGqzC,GAAG,CAAErzC,CAAC,EAAIghE,GAAG,CAAE,CAClD9H,GAAG,EAAI,CAACxkD,IAAI,CAAC8T,CAAC,CAAC,CAAG9T,IAAI,CAAC1U,CAAC,CAAC,GAAK0U,IAAI,CAAC1U,CAAC,CAAG,CAAC,CAAC,CAAG0U,IAAI,CAAC8T,CAAC,CAAG,CAAC,CAAC,CAAC,CACxDA,CAAC,CAAGxoB,CAAC,CACT,CACA,MAAO,CAAAk5D,GAAG,CACd,CAEA,KAAM,CAAA2M,MAAO,CAEZ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAC,WAAWA,CAAEpxD,IAAI,CAAEqsD,WAAW,CAAEC,GAAG,CAAG,CAAC,CAAG,CAEhD,MAAO,CAAAF,MAAM,CAAEpsD,IAAI,CAAEqsD,WAAW,CAAEC,GAAI,CAAC,CAExC,CAED,CAEA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA+E,UAAW,CAEhB;AACD;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAzD,IAAIA,CAAE0D,OAAO,CAAG,CAEtB,KAAM,CAAAzkE,CAAC,CAAGykE,OAAO,CAAC9lE,MAAM,CACxB,GAAI,CAAAgE,CAAC,CAAG,GAAG,CAEX,IAAM,GAAI,CAAA8tB,CAAC,CAAGzwB,CAAC,CAAG,CAAC,CAAE0C,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG1C,CAAC,CAAEywB,CAAC,CAAG/tB,CAAC,EAAG,CAAG,CAE7CC,CAAC,EAAI8hE,OAAO,CAAEh0C,CAAC,CAAE,CAACtwB,CAAC,CAAGskE,OAAO,CAAE/hE,CAAC,CAAE,CAACjC,CAAC,CAAGgkE,OAAO,CAAE/hE,CAAC,CAAE,CAACvC,CAAC,CAAGskE,OAAO,CAAEh0C,CAAC,CAAE,CAAChwB,CAAC,CAEvE,CAEA,MAAO,CAAAkC,CAAC,CAAG,GAAG,CAEf,CAEA;AACD;AACA;AACA;AACA;AACA,IACC,MAAO,CAAA+hE,WAAWA,CAAE9G,GAAG,CAAG,CAEzB,MAAO,CAAA4G,UAAU,CAACzD,IAAI,CAAEnD,GAAI,CAAC,CAAG,CAAC,CAElC,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAA+G,gBAAgBA,CAAEF,OAAO,CAAEvF,KAAK,CAAG,CAEzC,KAAM,CAAA1sB,QAAQ,CAAG,EAAE,CAAE;AACrB,KAAM,CAAAgtB,WAAW,CAAG,EAAE,CAAE;AACxB,KAAM,CAAAoF,KAAK,CAAG,EAAE,CAAE;AAElBC,eAAe,CAAEJ,OAAQ,CAAC,CAC1BK,UAAU,CAAEtyB,QAAQ,CAAEiyB,OAAQ,CAAC,CAE/B;AAEA,GAAI,CAAAM,SAAS,CAAGN,OAAO,CAAC9lE,MAAM,CAE9BugE,KAAK,CAAC8F,OAAO,CAAEH,eAAgB,CAAC,CAEhC,IAAM,GAAI,CAAApmE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGygE,KAAK,CAACvgE,MAAM,CAAEF,CAAC,EAAG,CAAG,CAEzC+gE,WAAW,CAAC1hE,IAAI,CAAEinE,SAAU,CAAC,CAC7BA,SAAS,EAAI7F,KAAK,CAAEzgE,CAAC,CAAE,CAACE,MAAM,CAC9BmmE,UAAU,CAAEtyB,QAAQ,CAAE0sB,KAAK,CAAEzgE,CAAC,CAAG,CAAC,CAEnC,CAEA;AAEA,KAAM,CAAAqhE,SAAS,CAAGwE,MAAM,CAACC,WAAW,CAAE/xB,QAAQ,CAAEgtB,WAAY,CAAC,CAE7D;AAEA,IAAM,GAAI,CAAA/gE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGqhE,SAAS,CAACnhE,MAAM,CAAEF,CAAC,EAAI,CAAC,CAAG,CAE/CmmE,KAAK,CAAC9mE,IAAI,CAAEgiE,SAAS,CAACthE,KAAK,CAAEC,CAAC,CAAEA,CAAC,CAAG,CAAE,CAAE,CAAC,CAE1C,CAEA,MAAO,CAAAmmE,KAAK,CAEb,CAED,CAEA,QAAS,CAAAC,eAAeA,CAAEthD,MAAM,CAAG,CAElC,KAAM,CAAA7kB,CAAC,CAAG6kB,MAAM,CAAC5kB,MAAM,CAEvB,GAAKD,CAAC,CAAG,CAAC,EAAI6kB,MAAM,CAAE7kB,CAAC,CAAG,CAAC,CAAE,CAACuJ,MAAM,CAAEsb,MAAM,CAAE,CAAC,CAAG,CAAC,CAAG,CAErDA,MAAM,CAACwpC,GAAG,CAAC,CAAC,CAEb,CAED,CAEA,QAAS,CAAA+X,UAAUA,CAAEtyB,QAAQ,CAAEiyB,OAAO,CAAG,CAExC,IAAM,GAAI,CAAAhmE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGgmE,OAAO,CAAC9lE,MAAM,CAAEF,CAAC,EAAG,CAAG,CAE3C+zC,QAAQ,CAAC10C,IAAI,CAAE2mE,OAAO,CAAEhmE,CAAC,CAAE,CAAC0B,CAAE,CAAC,CAC/BqyC,QAAQ,CAAC10C,IAAI,CAAE2mE,OAAO,CAAEhmE,CAAC,CAAE,CAACgC,CAAE,CAAC,CAEhC,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAwkE,eAAe,QAAS,CAAAj5B,cAAe,CAE5C;AACD;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEwzB,MAAM,CAAG,GAAI,CAAA4nC,KAAK,CAAE,CAAE,GAAI,CAAAx6D,OAAO,CAAE,GAAG,CAAE,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,GAAG,CAAE,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,GAAG,CAAE,CAAC,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,GAAG,CAAE,CAAC,GAAI,CAAC,CAAG,CAAC,CAAEqU,OAAO,CAAG,CAAC,CAAC,CAAG,CAE7J,KAAK,CAAC,CAAC,CAEP,IAAI,CAACtb,IAAI,CAAG,iBAAiB,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBpD,MAAM,CAAEA,MAAM,CACdve,OAAO,CAAEA,OACV,CAAC,CAEDue,MAAM,CAAGpjB,KAAK,CAACC,OAAO,CAAEmjB,MAAO,CAAC,CAAGA,MAAM,CAAG,CAAEA,MAAM,CAAE,CAEtD,KAAM,CAAAkb,KAAK,CAAG,IAAI,CAElB,KAAM,CAAA2yB,aAAa,CAAG,EAAE,CACxB,KAAM,CAAAC,OAAO,CAAG,EAAE,CAElB,IAAM,GAAI,CAAA1mE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG24B,MAAM,CAAC14B,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEjD,KAAM,CAAAi8B,KAAK,CAAGrD,MAAM,CAAE54B,CAAC,CAAE,CACzB2mE,QAAQ,CAAE1qC,KAAM,CAAC,CAElB,CAEA;AAEA,IAAI,CAACkS,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAE05B,aAAa,CAAE,CAAE,CAAE,CAAC,CAC/E,IAAI,CAACt4B,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAE25B,OAAO,CAAE,CAAE,CAAE,CAAC,CAEnE,IAAI,CAACt2B,oBAAoB,CAAC,CAAC,CAE3B;AAEA,QAAS,CAAAu2B,QAAQA,CAAE1qC,KAAK,CAAG,CAE1B,KAAM,CAAA2qC,WAAW,CAAG,EAAE,CAEtB;AAEA,KAAM,CAAAC,aAAa,CAAGxsD,OAAO,CAACwsD,aAAa,GAAK3nE,SAAS,CAAGmb,OAAO,CAACwsD,aAAa,CAAG,EAAE,CACtF,KAAM,CAAAC,KAAK,CAAGzsD,OAAO,CAACysD,KAAK,GAAK5nE,SAAS,CAAGmb,OAAO,CAACysD,KAAK,CAAG,CAAC,CAC7D,KAAM,CAAAvsD,KAAK,CAAGF,OAAO,CAACE,KAAK,GAAKrb,SAAS,CAAGmb,OAAO,CAACE,KAAK,CAAG,CAAC,CAE7D,GAAI,CAAAwsD,YAAY,CAAG1sD,OAAO,CAAC0sD,YAAY,GAAK7nE,SAAS,CAAGmb,OAAO,CAAC0sD,YAAY,CAAG,IAAI,CACnF,GAAI,CAAAC,cAAc,CAAG3sD,OAAO,CAAC2sD,cAAc,GAAK9nE,SAAS,CAAGmb,OAAO,CAAC2sD,cAAc,CAAG,GAAG,CACxF,GAAI,CAAAC,SAAS,CAAG5sD,OAAO,CAAC4sD,SAAS,GAAK/nE,SAAS,CAAGmb,OAAO,CAAC4sD,SAAS,CAAGD,cAAc,CAAG,GAAG,CAC1F,GAAI,CAAAE,WAAW,CAAG7sD,OAAO,CAAC6sD,WAAW,GAAKhoE,SAAS,CAAGmb,OAAO,CAAC6sD,WAAW,CAAG,CAAC,CAC7E,GAAI,CAAAC,aAAa,CAAG9sD,OAAO,CAAC8sD,aAAa,GAAKjoE,SAAS,CAAGmb,OAAO,CAAC8sD,aAAa,CAAG,CAAC,CAEnF,KAAM,CAAAC,WAAW,CAAG/sD,OAAO,CAAC+sD,WAAW,CAEvC,KAAM,CAAAC,KAAK,CAAGhtD,OAAO,CAACitD,WAAW,GAAKpoE,SAAS,CAAGmb,OAAO,CAACitD,WAAW,CAAGC,gBAAgB,CAExF;AAEA,GAAI,CAAAC,UAAU,CAAEC,aAAa,CAAG,KAAK,CACrC,GAAI,CAAAC,UAAU,CAAEC,QAAQ,CAAErkD,MAAM,CAAEskD,SAAS,CAE3C,GAAKR,WAAW,CAAG,CAElBI,UAAU,CAAGJ,WAAW,CAACvO,eAAe,CAAEiO,KAAM,CAAC,CAEjDW,aAAa,CAAG,IAAI,CACpBV,YAAY,CAAG,KAAK,CAAE;AAEtB;AAEA;AAEAW,UAAU,CAAGN,WAAW,CAACpN,mBAAmB,CAAE8M,KAAK,CAAE,KAAM,CAAC,CAE5D;AAEAa,QAAQ,CAAG,GAAI,CAAAxmD,OAAO,CAAC,CAAC,CACxBmC,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CACtBymD,SAAS,CAAG,GAAI,CAAAzmD,OAAO,CAAC,CAAC,CAE1B,CAEA;AAEA,GAAK,CAAE4lD,YAAY,CAAG,CAErBI,aAAa,CAAG,CAAC,CACjBH,cAAc,CAAG,CAAC,CAClBC,SAAS,CAAG,CAAC,CACbC,WAAW,CAAG,CAAC,CAEhB,CAEA;AAEA,KAAM,CAAAW,WAAW,CAAG5rC,KAAK,CAAC2kC,aAAa,CAAEiG,aAAc,CAAC,CAExD,GAAI,CAAA9yB,QAAQ,CAAG8zB,WAAW,CAAC5rC,KAAK,CAChC,KAAM,CAAAwkC,KAAK,CAAGoH,WAAW,CAACpH,KAAK,CAE/B,KAAM,CAAAqH,OAAO,CAAG,CAAE/B,UAAU,CAACE,WAAW,CAAElyB,QAAS,CAAC,CAEpD,GAAK+zB,OAAO,CAAG,CAEd/zB,QAAQ,CAAGA,QAAQ,CAAC+zB,OAAO,CAAC,CAAC,CAE7B;AAEA,IAAM,GAAI,CAAA56D,CAAC,CAAG,CAAC,CAAE66D,EAAE,CAAGtH,KAAK,CAACvgE,MAAM,CAAEgN,CAAC,CAAG66D,EAAE,CAAE76D,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CAExB,GAAK64D,UAAU,CAACE,WAAW,CAAE+B,KAAM,CAAC,CAAG,CAEtCvH,KAAK,CAAEvzD,CAAC,CAAE,CAAG86D,KAAK,CAACF,OAAO,CAAC,CAAC,CAE7B,CAED,CAED,CAEA;AACH;AACA,KACG,QAAS,CAAAG,sBAAsBA,CAAEnjD,MAAM,CAAG,CAEzC,KAAM,CAAAojD,SAAS,CAAG,KAAK,CACvB,KAAM,CAAAC,YAAY,CAAGD,SAAS,CAAGA,SAAS,CAC1C,GAAI,CAAAE,OAAO,CAAGtjD,MAAM,CAAE,CAAC,CAAE,CACzB,IAAM,GAAI,CAAA9kB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI8kB,MAAM,CAAC5kB,MAAM,CAAEF,CAAC,EAAG,CAAG,CAE3C,KAAM,CAAAqoE,YAAY,CAAGroE,CAAC,CAAG8kB,MAAM,CAAC5kB,MAAM,CACtC,KAAM,CAAAooE,UAAU,CAAGxjD,MAAM,CAAEujD,YAAY,CAAE,CACzC,KAAM,CAAAr/D,EAAE,CAAGs/D,UAAU,CAAC5mE,CAAC,CAAG0mE,OAAO,CAAC1mE,CAAC,CACnC,KAAM,CAAAuH,EAAE,CAAGq/D,UAAU,CAACtmE,CAAC,CAAGomE,OAAO,CAACpmE,CAAC,CACnC,KAAM,CAAA2uD,MAAM,CAAG3nD,EAAE,CAAGA,EAAE,CAAGC,EAAE,CAAGA,EAAE,CAEhC,KAAM,CAAAs/D,iBAAiB,CAAGhoE,IAAI,CAACc,GAAG,CACjCd,IAAI,CAACiC,GAAG,CAAE8lE,UAAU,CAAC5mE,CAAE,CAAC,CACxBnB,IAAI,CAACiC,GAAG,CAAE8lE,UAAU,CAACtmE,CAAE,CAAC,CACxBzB,IAAI,CAACiC,GAAG,CAAE4lE,OAAO,CAAC1mE,CAAE,CAAC,CACrBnB,IAAI,CAACiC,GAAG,CAAE4lE,OAAO,CAACpmE,CAAE,CACrB,CAAC,CACD,KAAM,CAAAwmE,iBAAiB,CAAGL,YAAY,CAAGI,iBAAiB,CAAGA,iBAAiB,CAC9E,GAAK5X,MAAM,EAAI6X,iBAAiB,CAAG,CAElC1jD,MAAM,CAACplB,MAAM,CAAE2oE,YAAY,CAAE,CAAE,CAAC,CAChCroE,CAAC,EAAG,CACJ,SAED,CAEAooE,OAAO,CAAGE,UAAU,CAErB,CAED,CAEAL,sBAAsB,CAAEl0B,QAAS,CAAC,CAClC0sB,KAAK,CAAC8F,OAAO,CAAE0B,sBAAuB,CAAC,CAEvC,KAAM,CAAAQ,QAAQ,CAAGhI,KAAK,CAACvgE,MAAM,CAE7B,cAEA,KAAM,CAAA8lE,OAAO,CAAGjyB,QAAQ,CAAE;AAE1B,IAAM,GAAI,CAAA7mC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGu7D,QAAQ,CAAEv7D,CAAC,EAAG,CAAG,CAErC,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CAExB6mC,QAAQ,CAAGA,QAAQ,CAACiG,MAAM,CAAEguB,KAAM,CAAC,CAEpC,CAGA,QAAS,CAAAU,QAAQA,CAAEC,EAAE,CAAEvO,GAAG,CAAEp1C,IAAI,CAAG,CAElC,GAAK,CAAEo1C,GAAG,CAAGn1D,OAAO,CAACmyB,KAAK,CAAE,2CAA4C,CAAC,CAEzE,MAAO,CAAAuxC,EAAE,CAAChiE,KAAK,CAAC,CAAC,CAACM,eAAe,CAAEmzD,GAAG,CAAEp1C,IAAK,CAAC,CAE/C,CAEA,KAAM,CAAA4jD,IAAI,CAAG70B,QAAQ,CAAC7zC,MAAM,CAG5B;AAGA,QAAS,CAAA2oE,WAAWA,CAAEC,IAAI,CAAEC,MAAM,CAAEC,MAAM,CAAG,CAE5C;AACA;AACA;AACA;AACA;AACA;AAEA,GAAI,CAAAC,SAAS,CAAEC,SAAS,CAAEC,SAAS,CAAE;AAErC;AACA;AAEA,KAAM,CAAAC,QAAQ,CAAGN,IAAI,CAACpnE,CAAC,CAAGqnE,MAAM,CAACrnE,CAAC,CACjC2nE,QAAQ,CAAGP,IAAI,CAAC9mE,CAAC,CAAG+mE,MAAM,CAAC/mE,CAAC,CAC7B,KAAM,CAAAsnE,QAAQ,CAAGN,MAAM,CAACtnE,CAAC,CAAGonE,IAAI,CAACpnE,CAAC,CACjC6nE,QAAQ,CAAGP,MAAM,CAAChnE,CAAC,CAAG8mE,IAAI,CAAC9mE,CAAC,CAE7B,KAAM,CAAAwnE,YAAY,CAAKJ,QAAQ,CAAGA,QAAQ,CAAGC,QAAQ,CAAGA,QAAU,CAElE;AACA,KAAM,CAAAI,UAAU,CAAKL,QAAQ,CAAGG,QAAQ,CAAGF,QAAQ,CAAGC,QAAU,CAEhE,GAAK/oE,IAAI,CAACiC,GAAG,CAAEinE,UAAW,CAAC,CAAGzrD,MAAM,CAACC,OAAO,CAAG,CAE9C;AAEA;AAEA,KAAM,CAAAyrD,UAAU,CAAGnpE,IAAI,CAAC+H,IAAI,CAAEkhE,YAAa,CAAC,CAC5C,KAAM,CAAAG,UAAU,CAAGppE,IAAI,CAAC+H,IAAI,CAAEghE,QAAQ,CAAGA,QAAQ,CAAGC,QAAQ,CAAGA,QAAS,CAAC,CAEzE;AAEA,KAAM,CAAAK,aAAa,CAAKb,MAAM,CAACrnE,CAAC,CAAG2nE,QAAQ,CAAGK,UAAY,CAC1D,KAAM,CAAAG,aAAa,CAAKd,MAAM,CAAC/mE,CAAC,CAAGonE,QAAQ,CAAGM,UAAY,CAE1D,KAAM,CAAAI,aAAa,CAAKd,MAAM,CAACtnE,CAAC,CAAG6nE,QAAQ,CAAGI,UAAY,CAC1D,KAAM,CAAAI,aAAa,CAAKf,MAAM,CAAChnE,CAAC,CAAGsnE,QAAQ,CAAGK,UAAY,CAE1D;AAEA,KAAM,CAAAK,EAAE,CAAG,CAAE,CAAEF,aAAa,CAAGF,aAAa,EAAKL,QAAQ,CACvD,CAAEQ,aAAa,CAAGF,aAAa,EAAKP,QAAQ,GAC3CF,QAAQ,CAAGG,QAAQ,CAAGF,QAAQ,CAAGC,QAAQ,CAAE,CAE9C;AAEAL,SAAS,CAAKW,aAAa,CAAGR,QAAQ,CAAGY,EAAE,CAAGlB,IAAI,CAACpnE,CAAG,CACtDwnE,SAAS,CAAKW,aAAa,CAAGR,QAAQ,CAAGW,EAAE,CAAGlB,IAAI,CAAC9mE,CAAG,CAEtD;AACA;AACA,KAAM,CAAAioE,aAAa,CAAKhB,SAAS,CAAGA,SAAS,CAAGC,SAAS,CAAGA,SAAW,CACvE,GAAKe,aAAa,EAAI,CAAC,CAAG,CAEzB,MAAO,IAAI,CAAAjkE,OAAO,CAAEijE,SAAS,CAAEC,SAAU,CAAC,CAE3C,CAAC,IAAM,CAENC,SAAS,CAAG5oE,IAAI,CAAC+H,IAAI,CAAE2hE,aAAa,CAAG,CAAE,CAAC,CAE3C,CAED,CAAC,IAAM,CAEN;AAEA,GAAI,CAAAC,YAAY,CAAG,KAAK,CAAE;AAE1B,GAAKd,QAAQ,CAAGprD,MAAM,CAACC,OAAO,CAAG,CAEhC,GAAKqrD,QAAQ,CAAGtrD,MAAM,CAACC,OAAO,CAAG,CAEhCisD,YAAY,CAAG,IAAI,CAEpB,CAED,CAAC,IAAM,CAEN,GAAKd,QAAQ,CAAG,CAAEprD,MAAM,CAACC,OAAO,CAAG,CAElC,GAAKqrD,QAAQ,CAAG,CAAEtrD,MAAM,CAACC,OAAO,CAAG,CAElCisD,YAAY,CAAG,IAAI,CAEpB,CAED,CAAC,IAAM,CAEN,GAAK3pE,IAAI,CAACmsB,IAAI,CAAE28C,QAAS,CAAC,GAAK9oE,IAAI,CAACmsB,IAAI,CAAE68C,QAAS,CAAC,CAAG,CAEtDW,YAAY,CAAG,IAAI,CAEpB,CAED,CAED,CAEA,GAAKA,YAAY,CAAG,CAEnB;AACAjB,SAAS,CAAG,CAAEI,QAAQ,CACtBH,SAAS,CAAGE,QAAQ,CACpBD,SAAS,CAAG5oE,IAAI,CAAC+H,IAAI,CAAEkhE,YAAa,CAAC,CAEtC,CAAC,IAAM,CAEN;AACAP,SAAS,CAAGG,QAAQ,CACpBF,SAAS,CAAGG,QAAQ,CACpBF,SAAS,CAAG5oE,IAAI,CAAC+H,IAAI,CAAEkhE,YAAY,CAAG,CAAE,CAAC,CAE1C,CAED,CAEA,MAAO,IAAI,CAAAxjE,OAAO,CAAEijE,SAAS,CAAGE,SAAS,CAAED,SAAS,CAAGC,SAAU,CAAC,CAEnE,CAGA,KAAM,CAAAgB,gBAAgB,CAAG,EAAE,CAE3B,IAAM,GAAI,CAAAnqE,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGyqD,OAAO,CAAC9lE,MAAM,CAAEsoB,CAAC,CAAGjN,EAAE,CAAG,CAAC,CAAE86C,CAAC,CAAGr2D,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAEwoB,CAAC,EAAG,CAAE6tC,CAAC,EAAG,CAAG,CAEvF,GAAK7tC,CAAC,GAAKjN,EAAE,CAAGiN,CAAC,CAAG,CAAC,CACrB,GAAK6tC,CAAC,GAAK96C,EAAE,CAAG86C,CAAC,CAAG,CAAC,CAErB;AACA;AAEA8T,gBAAgB,CAAEnqE,CAAC,CAAE,CAAG6oE,WAAW,CAAE7C,OAAO,CAAEhmE,CAAC,CAAE,CAAEgmE,OAAO,CAAEx9C,CAAC,CAAE,CAAEw9C,OAAO,CAAE3P,CAAC,CAAG,CAAC,CAEhF,CAEA,KAAM,CAAA+T,cAAc,CAAG,EAAE,CACzB,GAAI,CAAAC,gBAAgB,CAAEC,iBAAiB,CAAGH,gBAAgB,CAACnwB,MAAM,CAAC,CAAC,CAEnE,IAAM,GAAI,CAAA9sC,CAAC,CAAG,CAAC,CAAE66D,EAAE,CAAGU,QAAQ,CAAEv7D,CAAC,CAAG66D,EAAE,CAAE76D,CAAC,EAAG,CAAG,CAE9C,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CAExBm9D,gBAAgB,CAAG,EAAE,CAErB,IAAM,GAAI,CAAArqE,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGysD,KAAK,CAAC9nE,MAAM,CAAEsoB,CAAC,CAAGjN,EAAE,CAAG,CAAC,CAAE86C,CAAC,CAAGr2D,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAEwoB,CAAC,EAAG,CAAE6tC,CAAC,EAAG,CAAG,CAErF,GAAK7tC,CAAC,GAAKjN,EAAE,CAAGiN,CAAC,CAAG,CAAC,CACrB,GAAK6tC,CAAC,GAAK96C,EAAE,CAAG86C,CAAC,CAAG,CAAC,CAErB;AACAgU,gBAAgB,CAAErqE,CAAC,CAAE,CAAG6oE,WAAW,CAAEb,KAAK,CAAEhoE,CAAC,CAAE,CAAEgoE,KAAK,CAAEx/C,CAAC,CAAE,CAAEw/C,KAAK,CAAE3R,CAAC,CAAG,CAAC,CAE1E,CAEA+T,cAAc,CAAC/qE,IAAI,CAAEgrE,gBAAiB,CAAC,CACvCC,iBAAiB,CAAGA,iBAAiB,CAACtwB,MAAM,CAAEqwB,gBAAiB,CAAC,CAEjE,CAEA,GAAI,CAAAlE,KAAK,CAET,GAAKgB,aAAa,GAAK,CAAC,CAAG,CAE1BhB,KAAK,CAAGJ,UAAU,CAACG,gBAAgB,CAAEF,OAAO,CAAEvF,KAAM,CAAC,CAEtD,CAAC,IAAM,CAEN,KAAM,CAAA8J,yBAAyB,CAAG,EAAE,CACpC,KAAM,CAAAC,oBAAoB,CAAG,EAAE,CAE/B;AAEA,IAAM,GAAI,CAAArmE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGgjE,aAAa,CAAEhjE,CAAC,EAAG,CAAG,CAE1C;AAEA,KAAM,CAAAjC,CAAC,CAAGiC,CAAC,CAAGgjE,aAAa,CAC3B,KAAM,CAAA3uD,CAAC,CAAGwuD,cAAc,CAAGzmE,IAAI,CAAC+D,GAAG,CAAEpC,CAAC,CAAG3B,IAAI,CAACC,EAAE,CAAG,CAAE,CAAC,CACtD,KAAM,CAAAiqE,EAAE,CAAGxD,SAAS,CAAG1mE,IAAI,CAACgE,GAAG,CAAErC,CAAC,CAAG3B,IAAI,CAACC,EAAE,CAAG,CAAE,CAAC,CAAG0mE,WAAW,CAEhE;AAEA,IAAM,GAAI,CAAAlnE,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGyqD,OAAO,CAAC9lE,MAAM,CAAEF,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAG,CAEpD,KAAM,CAAA0qE,IAAI,CAAGhC,QAAQ,CAAE1C,OAAO,CAAEhmE,CAAC,CAAE,CAAEmqE,gBAAgB,CAAEnqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAEhE5jE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAE,CAAEwW,CAAE,CAAC,CACxB,GAAKtW,CAAC,GAAK,CAAC,CAAGqoE,yBAAyB,CAAClrE,IAAI,CAAEqrE,IAAK,CAAC,CAEtD,CAEA;AAEA,IAAM,GAAI,CAAAx9D,CAAC,CAAG,CAAC,CAAE66D,EAAE,CAAGU,QAAQ,CAAEv7D,CAAC,CAAG66D,EAAE,CAAE76D,CAAC,EAAG,CAAG,CAE9C,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CACxBm9D,gBAAgB,CAAGD,cAAc,CAAEl9D,CAAC,CAAE,CACtC,KAAM,CAAAy9D,eAAe,CAAG,EAAE,CAC1B,IAAM,GAAI,CAAA3qE,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGysD,KAAK,CAAC9nE,MAAM,CAAEF,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA0qE,IAAI,CAAGhC,QAAQ,CAAEV,KAAK,CAAEhoE,CAAC,CAAE,CAAEqqE,gBAAgB,CAAErqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAE9D5jE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAE,CAAEwW,CAAE,CAAC,CACxB,GAAKtW,CAAC,GAAK,CAAC,CAAGyoE,eAAe,CAACtrE,IAAI,CAAEqrE,IAAK,CAAC,CAE5C,CAEA,GAAKxoE,CAAC,GAAK,CAAC,CAAGsoE,oBAAoB,CAACnrE,IAAI,CAAEsrE,eAAgB,CAAC,CAE5D,CAED,CAEAxE,KAAK,CAAGJ,UAAU,CAACG,gBAAgB,CAAEqE,yBAAyB,CAAEC,oBAAqB,CAAC,CAEvF,CAEA,KAAM,CAAAI,IAAI,CAAGzE,KAAK,CAACjmE,MAAM,CAEzB,KAAM,CAAAuqE,EAAE,CAAGxD,SAAS,CAAGC,WAAW,CAElC;AAEA,IAAM,GAAI,CAAAlnE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4oE,IAAI,CAAE5oE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAA0qE,IAAI,CAAG3D,YAAY,CAAG2B,QAAQ,CAAE30B,QAAQ,CAAE/zC,CAAC,CAAE,CAAEsqE,iBAAiB,CAAEtqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAAG12B,QAAQ,CAAE/zC,CAAC,CAAE,CAEjG,GAAK,CAAEynE,aAAa,CAAG,CAEtB5gE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAE,CAAE,CAAC,CAEvB,CAAC,IAAM,CAEN;AAEAshB,MAAM,CAAC1c,IAAI,CAAE8gE,UAAU,CAAC52B,OAAO,CAAE,CAAC,CAAG,CAAC,CAACxpC,cAAc,CAAEojE,IAAI,CAAChpE,CAAE,CAAC,CAC/DimE,QAAQ,CAAC/gE,IAAI,CAAE8gE,UAAU,CAACvN,SAAS,CAAE,CAAC,CAAG,CAAC,CAAC7yD,cAAc,CAAEojE,IAAI,CAAC1oE,CAAE,CAAC,CAEnE4lE,SAAS,CAAChhE,IAAI,CAAE4gE,UAAU,CAAE,CAAC,CAAG,CAAC,CAAC1gE,GAAG,CAAEwc,MAAO,CAAC,CAACxc,GAAG,CAAE6gE,QAAS,CAAC,CAE/D9gE,CAAC,CAAE+gE,SAAS,CAAClmE,CAAC,CAAEkmE,SAAS,CAAC5lE,CAAC,CAAE4lE,SAAS,CAACpvD,CAAE,CAAC,CAE3C,CAED,CAEA;AACA;AAEA,IAAM,GAAI,CAAArV,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI2jE,KAAK,CAAE3jE,CAAC,EAAG,CAAG,CAEnC,IAAM,GAAI,CAAAnD,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4oE,IAAI,CAAE5oE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAA0qE,IAAI,CAAG3D,YAAY,CAAG2B,QAAQ,CAAE30B,QAAQ,CAAE/zC,CAAC,CAAE,CAAEsqE,iBAAiB,CAAEtqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAAG12B,QAAQ,CAAE/zC,CAAC,CAAE,CAEjG,GAAK,CAAEynE,aAAa,CAAG,CAEtB5gE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAEuY,KAAK,CAAGusD,KAAK,CAAG3jE,CAAE,CAAC,CAEvC,CAAC,IAAM,CAEN;AAEAmgB,MAAM,CAAC1c,IAAI,CAAE8gE,UAAU,CAAC52B,OAAO,CAAE3tC,CAAC,CAAG,CAAC,CAACmE,cAAc,CAAEojE,IAAI,CAAChpE,CAAE,CAAC,CAC/DimE,QAAQ,CAAC/gE,IAAI,CAAE8gE,UAAU,CAACvN,SAAS,CAAEh3D,CAAC,CAAG,CAAC,CAACmE,cAAc,CAAEojE,IAAI,CAAC1oE,CAAE,CAAC,CAEnE4lE,SAAS,CAAChhE,IAAI,CAAE4gE,UAAU,CAAErkE,CAAC,CAAG,CAAC,CAAC2D,GAAG,CAAEwc,MAAO,CAAC,CAACxc,GAAG,CAAE6gE,QAAS,CAAC,CAE/D9gE,CAAC,CAAE+gE,SAAS,CAAClmE,CAAC,CAAEkmE,SAAS,CAAC5lE,CAAC,CAAE4lE,SAAS,CAACpvD,CAAE,CAAC,CAE3C,CAED,CAED,CAGA;AAEA;AACA,IAAM,GAAI,CAAArU,CAAC,CAAGgjE,aAAa,CAAG,CAAC,CAAEhjE,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAG,CAAG,CAE/C,KAAM,CAAAjC,CAAC,CAAGiC,CAAC,CAAGgjE,aAAa,CAC3B,KAAM,CAAA3uD,CAAC,CAAGwuD,cAAc,CAAGzmE,IAAI,CAAC+D,GAAG,CAAEpC,CAAC,CAAG3B,IAAI,CAACC,EAAE,CAAG,CAAE,CAAC,CACtD,KAAM,CAAAiqE,EAAE,CAAGxD,SAAS,CAAG1mE,IAAI,CAACgE,GAAG,CAAErC,CAAC,CAAG3B,IAAI,CAACC,EAAE,CAAG,CAAE,CAAC,CAAG0mE,WAAW,CAEhE;AAEA,IAAM,GAAI,CAAAlnE,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGyqD,OAAO,CAAC9lE,MAAM,CAAEF,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAG,CAEpD,KAAM,CAAA0qE,IAAI,CAAGhC,QAAQ,CAAE1C,OAAO,CAAEhmE,CAAC,CAAE,CAAEmqE,gBAAgB,CAAEnqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAChE5jE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAEuY,KAAK,CAAG/B,CAAE,CAAC,CAE/B,CAEA;AAEA,IAAM,GAAI,CAAAtL,CAAC,CAAG,CAAC,CAAE66D,EAAE,CAAGtH,KAAK,CAACvgE,MAAM,CAAEgN,CAAC,CAAG66D,EAAE,CAAE76D,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CACxBm9D,gBAAgB,CAAGD,cAAc,CAAEl9D,CAAC,CAAE,CAEtC,IAAM,GAAI,CAAAlN,CAAC,CAAG,CAAC,CAAEub,EAAE,CAAGysD,KAAK,CAAC9nE,MAAM,CAAEF,CAAC,CAAGub,EAAE,CAAEvb,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA0qE,IAAI,CAAGhC,QAAQ,CAAEV,KAAK,CAAEhoE,CAAC,CAAE,CAAEqqE,gBAAgB,CAAErqE,CAAC,CAAE,CAAEyqE,EAAG,CAAC,CAE9D,GAAK,CAAEhD,aAAa,CAAG,CAEtB5gE,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAEuY,KAAK,CAAG/B,CAAE,CAAC,CAE/B,CAAC,IAAM,CAEN3R,CAAC,CAAE6jE,IAAI,CAAChpE,CAAC,CAAEgpE,IAAI,CAAC1oE,CAAC,CAAGwlE,UAAU,CAAEV,KAAK,CAAG,CAAC,CAAE,CAAC9kE,CAAC,CAAEwlE,UAAU,CAAEV,KAAK,CAAG,CAAC,CAAE,CAACplE,CAAC,CAAG8W,CAAE,CAAC,CAE/E,CAED,CAED,CAED,CAEA,YAEA;AAEAqyD,aAAa,CAAC,CAAC,CAEf;AAEAC,cAAc,CAAC,CAAC,CAGhB;AAEA,QAAS,CAAAD,aAAaA,CAAA,CAAG,CAExB,KAAM,CAAAl/B,KAAK,CAAG86B,aAAa,CAACvmE,MAAM,CAAG,CAAC,CAEtC,GAAK6mE,YAAY,CAAG,CAEnB,GAAI,CAAAj0C,KAAK,CAAG,CAAC,CAAE;AACf,GAAI,CAAAppB,MAAM,CAAGk/D,IAAI,CAAG91C,KAAK,CAEzB;AAEA,IAAM,GAAI,CAAA9yB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4qE,IAAI,CAAE5qE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAAwzC,IAAI,CAAG2yB,KAAK,CAAEnmE,CAAC,CAAE,CACvB+qE,EAAE,CAAEv3B,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAM,CAAE8pC,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAM,CAAE8pC,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAO,CAAC,CAEjE,CAEAopB,KAAK,CAAGg0C,KAAK,CAAGK,aAAa,CAAG,CAAC,CACjCz9D,MAAM,CAAGk/D,IAAI,CAAG91C,KAAK,CAErB;AAEA,IAAM,GAAI,CAAA9yB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4qE,IAAI,CAAE5qE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAAwzC,IAAI,CAAG2yB,KAAK,CAAEnmE,CAAC,CAAE,CACvB+qE,EAAE,CAAEv3B,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAM,CAAE8pC,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAM,CAAE8pC,IAAI,CAAE,CAAC,CAAE,CAAG9pC,MAAO,CAAC,CAEjE,CAED,CAAC,IAAM,CAEN;AAEA,IAAM,GAAI,CAAA1J,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4qE,IAAI,CAAE5qE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAAwzC,IAAI,CAAG2yB,KAAK,CAAEnmE,CAAC,CAAE,CACvB+qE,EAAE,CAAEv3B,IAAI,CAAE,CAAC,CAAE,CAAEA,IAAI,CAAE,CAAC,CAAE,CAAEA,IAAI,CAAE,CAAC,CAAG,CAAC,CAEtC,CAEA;AAEA,IAAM,GAAI,CAAAxzC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG4qE,IAAI,CAAE5qE,CAAC,EAAG,CAAG,CAEjC,KAAM,CAAAwzC,IAAI,CAAG2yB,KAAK,CAAEnmE,CAAC,CAAE,CACvB+qE,EAAE,CAAEv3B,IAAI,CAAE,CAAC,CAAE,CAAGo1B,IAAI,CAAG9B,KAAK,CAAEtzB,IAAI,CAAE,CAAC,CAAE,CAAGo1B,IAAI,CAAG9B,KAAK,CAAEtzB,IAAI,CAAE,CAAC,CAAE,CAAGo1B,IAAI,CAAG9B,KAAM,CAAC,CAEnF,CAED,CAEAhzB,KAAK,CAACxF,QAAQ,CAAE3C,KAAK,CAAE86B,aAAa,CAACvmE,MAAM,CAAG,CAAC,CAAGyrC,KAAK,CAAE,CAAE,CAAC,CAE7D,CAEA;AAEA,QAAS,CAAAm/B,cAAcA,CAAA,CAAG,CAEzB,KAAM,CAAAn/B,KAAK,CAAG86B,aAAa,CAACvmE,MAAM,CAAG,CAAC,CACtC,GAAI,CAAA8qE,WAAW,CAAG,CAAC,CACnBC,SAAS,CAAEjF,OAAO,CAAEgF,WAAY,CAAC,CACjCA,WAAW,EAAIhF,OAAO,CAAC9lE,MAAM,CAE7B,IAAM,GAAI,CAAAgN,CAAC,CAAG,CAAC,CAAE66D,EAAE,CAAGtH,KAAK,CAACvgE,MAAM,CAAEgN,CAAC,CAAG66D,EAAE,CAAE76D,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA86D,KAAK,CAAGvH,KAAK,CAAEvzD,CAAC,CAAE,CACxB+9D,SAAS,CAAEjD,KAAK,CAAEgD,WAAY,CAAC,CAE/B;AACAA,WAAW,EAAIhD,KAAK,CAAC9nE,MAAM,CAE5B,CAGA4zC,KAAK,CAACxF,QAAQ,CAAE3C,KAAK,CAAE86B,aAAa,CAACvmE,MAAM,CAAG,CAAC,CAAGyrC,KAAK,CAAE,CAAE,CAAC,CAG7D,CAEA,QAAS,CAAAs/B,SAASA,CAAEjF,OAAO,CAAEgF,WAAW,CAAG,CAE1C,GAAI,CAAAhrE,CAAC,CAAGgmE,OAAO,CAAC9lE,MAAM,CAEtB,MAAQ,EAAGF,CAAC,EAAI,CAAC,CAAG,CAEnB,KAAM,CAAAwoB,CAAC,CAAGxoB,CAAC,CACX,GAAI,CAAAq2D,CAAC,CAAGr2D,CAAC,CAAG,CAAC,CACb,GAAKq2D,CAAC,CAAG,CAAC,CAAGA,CAAC,CAAG2P,OAAO,CAAC9lE,MAAM,CAAG,CAAC,CAEnC;AAEA,IAAM,GAAI,CAAAiD,CAAC,CAAG,CAAC,CAAE+nE,EAAE,CAAKpE,KAAK,CAAGK,aAAa,CAAG,CAAG,CAAEhkE,CAAC,CAAG+nE,EAAE,CAAE/nE,CAAC,EAAG,CAAG,CAEnE,KAAM,CAAAgoE,KAAK,CAAGvC,IAAI,CAAGzlE,CAAC,CACtB,KAAM,CAAAioE,KAAK,CAAGxC,IAAI,EAAKzlE,CAAC,CAAG,CAAC,CAAE,CAE9B,KAAM,CAAAe,CAAC,CAAG8mE,WAAW,CAAGxiD,CAAC,CAAG2iD,KAAK,CAChChnE,CAAC,CAAG6mE,WAAW,CAAG3U,CAAC,CAAG8U,KAAK,CAC3B/mE,CAAC,CAAG4mE,WAAW,CAAG3U,CAAC,CAAG+U,KAAK,CAC3Br+D,CAAC,CAAGi+D,WAAW,CAAGxiD,CAAC,CAAG4iD,KAAK,CAE5BC,EAAE,CAAEnnE,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAEjB,CAED,CAED,CAEA,QAAS,CAAAlG,CAACA,CAAEnF,CAAC,CAAEM,CAAC,CAAEwW,CAAC,CAAG,CAErBouD,WAAW,CAACvnE,IAAI,CAAEqC,CAAE,CAAC,CACrBklE,WAAW,CAACvnE,IAAI,CAAE2C,CAAE,CAAC,CACrB4kE,WAAW,CAACvnE,IAAI,CAAEmZ,CAAE,CAAC,CAEtB,CAGA,QAAS,CAAAuyD,EAAEA,CAAE7mE,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAG,CAEtBknE,SAAS,CAAEpnE,CAAE,CAAC,CACdonE,SAAS,CAAEnnE,CAAE,CAAC,CACdmnE,SAAS,CAAElnE,CAAE,CAAC,CAEd,KAAM,CAAAmnE,SAAS,CAAG9E,aAAa,CAACvmE,MAAM,CAAG,CAAC,CAC1C,KAAM,CAAA8zC,GAAG,CAAGqzB,KAAK,CAACmE,aAAa,CAAE13B,KAAK,CAAE2yB,aAAa,CAAE8E,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAG,CAAE,CAAC,CAEpGE,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CAElB,CAEA,QAAS,CAAAq3B,EAAEA,CAAEnnE,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAE2I,CAAC,CAAG,CAEzBu+D,SAAS,CAAEpnE,CAAE,CAAC,CACdonE,SAAS,CAAEnnE,CAAE,CAAC,CACdmnE,SAAS,CAAEv+D,CAAE,CAAC,CAEdu+D,SAAS,CAAEnnE,CAAE,CAAC,CACdmnE,SAAS,CAAElnE,CAAE,CAAC,CACdknE,SAAS,CAAEv+D,CAAE,CAAC,CAGd,KAAM,CAAAw+D,SAAS,CAAG9E,aAAa,CAACvmE,MAAM,CAAG,CAAC,CAC1C,KAAM,CAAA8zC,GAAG,CAAGqzB,KAAK,CAACqE,kBAAkB,CAAE53B,KAAK,CAAE2yB,aAAa,CAAE8E,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAG,CAAE,CAAC,CAExHE,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CAEjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CACjBy3B,KAAK,CAAEz3B,GAAG,CAAE,CAAC,CAAG,CAAC,CAElB,CAEA,QAAS,CAAAs3B,SAASA,CAAE7rE,KAAK,CAAG,CAE3BgnE,aAAa,CAACpnE,IAAI,CAAEunE,WAAW,CAAEnnE,KAAK,CAAG,CAAC,CAAG,CAAC,CAAG,CAAC,CAClDgnE,aAAa,CAACpnE,IAAI,CAAEunE,WAAW,CAAEnnE,KAAK,CAAG,CAAC,CAAG,CAAC,CAAG,CAAC,CAClDgnE,aAAa,CAACpnE,IAAI,CAAEunE,WAAW,CAAEnnE,KAAK,CAAG,CAAC,CAAG,CAAC,CAAG,CAAC,CAEnD,CAGA,QAAS,CAAAgsE,KAAKA,CAAEE,OAAO,CAAG,CAEzBjF,OAAO,CAACrnE,IAAI,CAAEssE,OAAO,CAACjqE,CAAE,CAAC,CACzBglE,OAAO,CAACrnE,IAAI,CAAEssE,OAAO,CAAC3pE,CAAE,CAAC,CAE1B,CAED,CAED,CAEA4E,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA9mB,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3B,KAAM,CAAA0jB,MAAM,CAAG,IAAI,CAACoD,UAAU,CAACpD,MAAM,CACrC,KAAM,CAAAve,OAAO,CAAG,IAAI,CAAC2hB,UAAU,CAAC3hB,OAAO,CAEvC,MAAO,CAAAuxD,QAAQ,CAAEhzC,MAAM,CAAEve,OAAO,CAAE3F,IAAK,CAAC,CAEzC,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAygC,QAAQA,CAAEzgC,IAAI,CAAEkkB,MAAM,CAAG,CAE/B,KAAM,CAAAizC,cAAc,CAAG,EAAE,CAEzB,IAAM,GAAI,CAAArjD,CAAC,CAAG,CAAC,CAAEumB,EAAE,CAAGr6B,IAAI,CAACkkB,MAAM,CAAC14B,MAAM,CAAEsoB,CAAC,CAAGumB,EAAE,CAAEvmB,CAAC,EAAG,CAAG,CAExD,KAAM,CAAAyT,KAAK,CAAGrD,MAAM,CAAElkB,IAAI,CAACkkB,MAAM,CAAEpQ,CAAC,CAAE,CAAE,CAExCqjD,cAAc,CAACxsE,IAAI,CAAE48B,KAAM,CAAC,CAE7B,CAEA,KAAM,CAAAmrC,WAAW,CAAG1yD,IAAI,CAAC2F,OAAO,CAAC+sD,WAAW,CAE5C,GAAKA,WAAW,GAAKloE,SAAS,CAAG,CAEhCwV,IAAI,CAAC2F,OAAO,CAAC+sD,WAAW,CAAG,GAAI,CAAAnJ,MAAM,CAAEmJ,WAAW,CAACroE,IAAI,CAAE,CAAC,CAAC,CAACo2C,QAAQ,CAAEiyB,WAAY,CAAC,CAEpF,CAEA,MAAO,IAAI,CAAAZ,eAAe,CAAEqF,cAAc,CAAEn3D,IAAI,CAAC2F,OAAQ,CAAC,CAE3D,CAED,CAEA,KAAM,CAAAktD,gBAAgB,CAAG,CAExBiE,aAAa,CAAE,QAAAA,CAAWzlD,QAAQ,CAAEguB,QAAQ,CAAE+3B,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAG,CAEtE,KAAM,CAAAC,GAAG,CAAGl4B,QAAQ,CAAE+3B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAI,GAAG,CAAGn4B,QAAQ,CAAE+3B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAK,GAAG,CAAGp4B,QAAQ,CAAEg4B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAK,GAAG,CAAGr4B,QAAQ,CAAEg4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAM,GAAG,CAAGt4B,QAAQ,CAAEi4B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAM,GAAG,CAAGv4B,QAAQ,CAAEi4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CAEtC,MAAO,CACN,GAAI,CAAAhmE,OAAO,CAAEimE,GAAG,CAAEC,GAAI,CAAC,CACvB,GAAI,CAAAlmE,OAAO,CAAEmmE,GAAG,CAAEC,GAAI,CAAC,CACvB,GAAI,CAAApmE,OAAO,CAAEqmE,GAAG,CAAEC,GAAI,CAAC,CACvB,CAEF,CAAC,CAEDZ,kBAAkB,CAAE,QAAAA,CAAW3lD,QAAQ,CAAEguB,QAAQ,CAAE+3B,MAAM,CAAEC,MAAM,CAAEC,MAAM,CAAEO,MAAM,CAAG,CAEnF,KAAM,CAAAN,GAAG,CAAGl4B,QAAQ,CAAE+3B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAI,GAAG,CAAGn4B,QAAQ,CAAE+3B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAU,GAAG,CAAGz4B,QAAQ,CAAE+3B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAK,GAAG,CAAGp4B,QAAQ,CAAEg4B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAK,GAAG,CAAGr4B,QAAQ,CAAEg4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAU,GAAG,CAAG14B,QAAQ,CAAEg4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAM,GAAG,CAAGt4B,QAAQ,CAAEi4B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAM,GAAG,CAAGv4B,QAAQ,CAAEi4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAU,GAAG,CAAG34B,QAAQ,CAAEi4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAW,GAAG,CAAG54B,QAAQ,CAAEw4B,MAAM,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAK,GAAG,CAAG74B,QAAQ,CAAEw4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CACtC,KAAM,CAAAM,GAAG,CAAG94B,QAAQ,CAAEw4B,MAAM,CAAG,CAAC,CAAG,CAAC,CAAE,CAEtC,GAAKhsE,IAAI,CAACiC,GAAG,CAAE0pE,GAAG,CAAGE,GAAI,CAAC,CAAG7rE,IAAI,CAACiC,GAAG,CAAEypE,GAAG,CAAGE,GAAI,CAAC,CAAG,CAEpD,MAAO,CACN,GAAI,CAAAnmE,OAAO,CAAEimE,GAAG,CAAE,CAAC,CAAGO,GAAI,CAAC,CAC3B,GAAI,CAAAxmE,OAAO,CAAEmmE,GAAG,CAAE,CAAC,CAAGM,GAAI,CAAC,CAC3B,GAAI,CAAAzmE,OAAO,CAAEqmE,GAAG,CAAE,CAAC,CAAGK,GAAI,CAAC,CAC3B,GAAI,CAAA1mE,OAAO,CAAE2mE,GAAG,CAAE,CAAC,CAAGE,GAAI,CAAC,CAC3B,CAEF,CAAC,IAAM,CAEN,MAAO,CACN,GAAI,CAAA7mE,OAAO,CAAEkmE,GAAG,CAAE,CAAC,CAAGM,GAAI,CAAC,CAC3B,GAAI,CAAAxmE,OAAO,CAAEomE,GAAG,CAAE,CAAC,CAAGK,GAAI,CAAC,CAC3B,GAAI,CAAAzmE,OAAO,CAAEsmE,GAAG,CAAE,CAAC,CAAGI,GAAI,CAAC,CAC3B,GAAI,CAAA1mE,OAAO,CAAE4mE,GAAG,CAAE,CAAC,CAAGC,GAAI,CAAC,CAC3B,CAEF,CAED,CAED,CAAC,CAED,QAAS,CAAAjB,QAAQA,CAAEhzC,MAAM,CAAEve,OAAO,CAAE3F,IAAI,CAAG,CAE1CA,IAAI,CAACkkB,MAAM,CAAG,EAAE,CAEhB,GAAKpjB,KAAK,CAACC,OAAO,CAAEmjB,MAAO,CAAC,CAAG,CAE9B,IAAM,GAAI,CAAA54B,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG24B,MAAM,CAAC14B,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEjD,KAAM,CAAAi8B,KAAK,CAAGrD,MAAM,CAAE54B,CAAC,CAAE,CAEzB0U,IAAI,CAACkkB,MAAM,CAACv5B,IAAI,CAAE48B,KAAK,CAACj7B,IAAK,CAAC,CAE/B,CAED,CAAC,IAAM,CAEN0T,IAAI,CAACkkB,MAAM,CAACv5B,IAAI,CAAEu5B,MAAM,CAAC53B,IAAK,CAAC,CAEhC,CAEA0T,IAAI,CAAC2F,OAAO,CAAG3H,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE0H,OAAQ,CAAC,CAE3C,GAAKA,OAAO,CAAC+sD,WAAW,GAAKloE,SAAS,CAAGwV,IAAI,CAAC2F,OAAO,CAAC+sD,WAAW,CAAG/sD,OAAO,CAAC+sD,WAAW,CAAClyD,MAAM,CAAC,CAAC,CAEhG,MAAO,CAAAR,IAAI,CAEZ,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAo4D,mBAAmB,QAAS,CAAArX,kBAAmB,CAEpD;AACD;AACA;AACA;AACA;AACA,IACCrwD,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEs7B,MAAM,CAAG,CAAC,CAAG,CAErC,KAAM,CAAA98C,CAAC,CAAG,CAAE,CAAC,CAAG3B,IAAI,CAAC+H,IAAI,CAAE,CAAE,CAAC,EAAK,CAAC,CAEpC,KAAM,CAAAyrC,QAAQ,CAAG,CAChB,CAAC,CAAC,CAAE7xC,CAAC,CAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAE,CAAC,CAAG,CAAC,CAAC,CAAE,CAAEA,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAEA,CAAC,CAAE,CAAC,CAC3C,CAAC,CAAE,CAAC,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAE,CAAC,CAAEA,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE,CAAEA,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAEA,CAAC,CAC1CA,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAGA,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAEA,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAG,CAAEA,CAAC,CAAE,CAAC,CAAE,CAAC,CAC3C,CAED,KAAM,CAAA+uC,OAAO,CAAG,CACf,CAAC,CAAE,EAAE,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,EAAE,CAAG,CAAC,CAAE,EAAE,CAAE,EAAE,CACnD,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAChD,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAC5C,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAC9C,CAED,KAAK,CAAE8C,QAAQ,CAAE9C,OAAO,CAAEvtB,MAAM,CAAEs7B,MAAO,CAAC,CAE1C,IAAI,CAACjgD,IAAI,CAAG,qBAAqB,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACds7B,MAAM,CAAEA,MACT,CAAC,CAEF,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAA7J,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAo4D,mBAAmB,CAAEp4D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACsqC,MAAO,CAAC,CAE3D,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA+tB,aAAa,QAAS,CAAAx/B,cAAe,CAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAE0f,MAAM,CAAG,CAAE,GAAI,CAAA9e,OAAO,CAAE,CAAC,CAAE,CAAC,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,GAAG,CAAE,CAAE,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,CAAE,GAAI,CAAC,CAAE,CAAE0uD,QAAQ,CAAG,EAAE,CAAEsY,QAAQ,CAAG,CAAC,CAAEC,SAAS,CAAG1sE,IAAI,CAACC,EAAE,CAAG,CAAC,CAAG,CAEtJ,KAAK,CAAC,CAAC,CAEP,IAAI,CAACzB,IAAI,CAAG,eAAe,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBlX,MAAM,CAAEA,MAAM,CACd4vC,QAAQ,CAAEA,QAAQ,CAClBsY,QAAQ,CAAEA,QAAQ,CAClBC,SAAS,CAAEA,SACZ,CAAC,CAEDvY,QAAQ,CAAGn0D,IAAI,CAACuC,KAAK,CAAE4xD,QAAS,CAAC,CAEjC;AAEAuY,SAAS,CAAG/rE,KAAK,CAAE+rE,SAAS,CAAE,CAAC,CAAE1sE,IAAI,CAACC,EAAE,CAAG,CAAE,CAAC,CAE9C;AAEA,KAAM,CAAAywC,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAC,GAAG,CAAG,EAAE,CACd,KAAM,CAAAk5B,WAAW,CAAG,EAAE,CACtB,KAAM,CAAAp8B,OAAO,CAAG,EAAE,CAElB;AAEA,KAAM,CAAAq8B,eAAe,CAAG,GAAG,CAAGzY,QAAQ,CACtC,KAAM,CAAAZ,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAA9I,EAAE,CAAG,GAAI,CAAArS,OAAO,CAAC,CAAC,CACxB,KAAM,CAAAsd,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAAisD,SAAS,CAAG,GAAI,CAAAjsD,OAAO,CAAC,CAAC,CAC/B,KAAM,CAAAksD,UAAU,CAAG,GAAI,CAAAlsD,OAAO,CAAC,CAAC,CAChC,GAAI,CAAAnY,EAAE,CAAG,CAAC,CACV,GAAI,CAAAC,EAAE,CAAG,CAAC,CAEV;AAEA,IAAM,GAAI,CAAAuf,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAM1D,MAAM,CAAC5kB,MAAM,CAAG,CAAG,CAAEsoB,CAAC,EAAG,CAAG,CAEnD,OAASA,CAAC,EAET,IAAK,EAAC,CAAK;AAEVxf,EAAE,CAAG8b,MAAM,CAAE0D,CAAC,CAAG,CAAC,CAAE,CAAC9mB,CAAC,CAAGojB,MAAM,CAAE0D,CAAC,CAAE,CAAC9mB,CAAC,CACtCuH,EAAE,CAAG6b,MAAM,CAAE0D,CAAC,CAAG,CAAC,CAAE,CAACxmB,CAAC,CAAG8iB,MAAM,CAAE0D,CAAC,CAAE,CAACxmB,CAAC,CAEtCshB,MAAM,CAAC5hB,CAAC,CAAGuH,EAAE,CAAG,GAAG,CACnBqa,MAAM,CAACthB,CAAC,CAAG,CAAEgH,EAAE,CACfsa,MAAM,CAAC9K,CAAC,CAAGvP,EAAE,CAAG,GAAG,CAEnBokE,UAAU,CAACzmE,IAAI,CAAE0c,MAAO,CAAC,CAEzBA,MAAM,CAACzd,SAAS,CAAC,CAAC,CAElBqnE,WAAW,CAAC7tE,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAEhD,MAED,IAAO,CAAAsM,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAI;AAE3BgtE,WAAW,CAAC7tE,IAAI,CAAEguE,UAAU,CAAC3rE,CAAC,CAAE2rE,UAAU,CAACrrE,CAAC,CAAEqrE,UAAU,CAAC70D,CAAE,CAAC,CAE5D,MAED,QAAW;AAEVxP,EAAE,CAAG8b,MAAM,CAAE0D,CAAC,CAAG,CAAC,CAAE,CAAC9mB,CAAC,CAAGojB,MAAM,CAAE0D,CAAC,CAAE,CAAC9mB,CAAC,CACtCuH,EAAE,CAAG6b,MAAM,CAAE0D,CAAC,CAAG,CAAC,CAAE,CAACxmB,CAAC,CAAG8iB,MAAM,CAAE0D,CAAC,CAAE,CAACxmB,CAAC,CAEtCshB,MAAM,CAAC5hB,CAAC,CAAGuH,EAAE,CAAG,GAAG,CACnBqa,MAAM,CAACthB,CAAC,CAAG,CAAEgH,EAAE,CACfsa,MAAM,CAAC9K,CAAC,CAAGvP,EAAE,CAAG,GAAG,CAEnBmkE,SAAS,CAACxmE,IAAI,CAAE0c,MAAO,CAAC,CAExBA,MAAM,CAAC5hB,CAAC,EAAI2rE,UAAU,CAAC3rE,CAAC,CACxB4hB,MAAM,CAACthB,CAAC,EAAIqrE,UAAU,CAACrrE,CAAC,CACxBshB,MAAM,CAAC9K,CAAC,EAAI60D,UAAU,CAAC70D,CAAC,CAExB8K,MAAM,CAACzd,SAAS,CAAC,CAAC,CAElBqnE,WAAW,CAAC7tE,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAEhD60D,UAAU,CAACzmE,IAAI,CAAEwmE,SAAU,CAAC,CAE9B,CAED,CAEA;AAEA,IAAM,GAAI,CAAAptE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI00D,QAAQ,CAAE10D,CAAC,EAAG,CAAG,CAEtC,KAAM,CAAA2jB,GAAG,CAAGqpD,QAAQ,CAAGhtE,CAAC,CAAGmtE,eAAe,CAAGF,SAAS,CAEtD,KAAM,CAAA1oE,GAAG,CAAGhE,IAAI,CAACgE,GAAG,CAAEof,GAAI,CAAC,CAC3B,KAAM,CAAArf,GAAG,CAAG/D,IAAI,CAAC+D,GAAG,CAAEqf,GAAI,CAAC,CAE3B,IAAM,GAAI,CAAA6E,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAM1D,MAAM,CAAC5kB,MAAM,CAAG,CAAG,CAAEsoB,CAAC,EAAG,CAAG,CAEnD;AAEAsrC,MAAM,CAACpyD,CAAC,CAAGojB,MAAM,CAAE0D,CAAC,CAAE,CAAC9mB,CAAC,CAAG6C,GAAG,CAC9BuvD,MAAM,CAAC9xD,CAAC,CAAG8iB,MAAM,CAAE0D,CAAC,CAAE,CAACxmB,CAAC,CACxB8xD,MAAM,CAACt7C,CAAC,CAAGsM,MAAM,CAAE0D,CAAC,CAAE,CAAC9mB,CAAC,CAAG4C,GAAG,CAE9ByvC,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE7C;AAEAH,EAAE,CAAC3W,CAAC,CAAG1B,CAAC,CAAG00D,QAAQ,CACnBr8C,EAAE,CAACrW,CAAC,CAAGwmB,CAAC,EAAK1D,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAAE,CAEhC8zC,GAAG,CAAC30C,IAAI,CAAEgZ,EAAE,CAAC3W,CAAC,CAAE2W,EAAE,CAACrW,CAAE,CAAC,CAEtB;AAEA,KAAM,CAAAN,CAAC,CAAGwrE,WAAW,CAAE,CAAC,CAAG1kD,CAAC,CAAG,CAAC,CAAE,CAAGjkB,GAAG,CACxC,KAAM,CAAAvC,CAAC,CAAGkrE,WAAW,CAAE,CAAC,CAAG1kD,CAAC,CAAG,CAAC,CAAE,CAClC,KAAM,CAAAhQ,CAAC,CAAG00D,WAAW,CAAE,CAAC,CAAG1kD,CAAC,CAAG,CAAC,CAAE,CAAGlkB,GAAG,CAExCwsC,OAAO,CAACzxC,IAAI,CAAEqC,CAAC,CAAEM,CAAC,CAAEwW,CAAE,CAAC,CAExB,CAED,CAEA;AAEA,IAAM,GAAI,CAAAxY,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG00D,QAAQ,CAAE10D,CAAC,EAAG,CAAG,CAErC,IAAM,GAAI,CAAAwoB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAK1D,MAAM,CAAC5kB,MAAM,CAAG,CAAG,CAAEsoB,CAAC,EAAG,CAAG,CAElD,KAAM,CAAA8kD,IAAI,CAAG9kD,CAAC,CAAGxoB,CAAC,CAAG8kB,MAAM,CAAC5kB,MAAM,CAElC,KAAM,CAAAgE,CAAC,CAAGopE,IAAI,CACd,KAAM,CAAAnpE,CAAC,CAAGmpE,IAAI,CAAGxoD,MAAM,CAAC5kB,MAAM,CAC9B,KAAM,CAAAkE,CAAC,CAAGkpE,IAAI,CAAGxoD,MAAM,CAAC5kB,MAAM,CAAG,CAAC,CAClC,KAAM,CAAA6M,CAAC,CAAGugE,IAAI,CAAG,CAAC,CAElB;AAEAr8B,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE+E,CAAC,CAAE2I,CAAC,CAAE5I,CAAE,CAAC,CAExB,CAED,CAEA;AAEA,IAAI,CAAC6pC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAC/D,IAAI,CAAC7F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CAExE,CAEAlqC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAq4D,aAAa,CAAEr4D,IAAI,CAACoQ,MAAM,CAAEpQ,IAAI,CAACggD,QAAQ,CAAEhgD,IAAI,CAACs4D,QAAQ,CAAEt4D,IAAI,CAACu4D,SAAU,CAAC,CAEtF,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAM,kBAAkB,QAAS,CAAA9X,kBAAmB,CAEnD;AACD;AACA;AACA;AACA;AACA,IACCrwD,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEs7B,MAAM,CAAG,CAAC,CAAG,CAErC,KAAM,CAAAjL,QAAQ,CAAG,CAChB,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAC3B,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAC5B,CAED,KAAM,CAAA9C,OAAO,CAAG,CACf,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CACzB,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CACzB,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAChB,CAED,KAAK,CAAE8C,QAAQ,CAAE9C,OAAO,CAAEvtB,MAAM,CAAEs7B,MAAO,CAAC,CAE1C,IAAI,CAACjgD,IAAI,CAAG,oBAAoB,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACds7B,MAAM,CAAEA,MACT,CAAC,CAEF,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAA7J,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAA64D,kBAAkB,CAAE74D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACsqC,MAAO,CAAC,CAE1D,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAwuB,aAAa,QAAS,CAAAjgC,cAAe,CAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEe,KAAK,CAAG,CAAC,CAAEC,MAAM,CAAG,CAAC,CAAEutC,aAAa,CAAG,CAAC,CAAEC,cAAc,CAAG,CAAC,CAAG,CAE3E,KAAK,CAAC,CAAC,CAEP,IAAI,CAAC70C,IAAI,CAAG,eAAe,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjB71B,KAAK,CAAEA,KAAK,CACZC,MAAM,CAAEA,MAAM,CACdutC,aAAa,CAAEA,aAAa,CAC5BC,cAAc,CAAEA,cACjB,CAAC,CAED,KAAM,CAAA65B,UAAU,CAAGtnE,KAAK,CAAG,CAAC,CAC5B,KAAM,CAAAunE,WAAW,CAAGtnE,MAAM,CAAG,CAAC,CAE9B,KAAM,CAAAkuC,KAAK,CAAG/zC,IAAI,CAACuC,KAAK,CAAE6wC,aAAc,CAAC,CACzC,KAAM,CAAAY,KAAK,CAAGh0C,IAAI,CAACuC,KAAK,CAAE8wC,cAAe,CAAC,CAE1C,KAAM,CAAAiB,MAAM,CAAGP,KAAK,CAAG,CAAC,CACxB,KAAM,CAAAQ,MAAM,CAAGP,KAAK,CAAG,CAAC,CAExB,KAAM,CAAAo5B,aAAa,CAAGxnE,KAAK,CAAGmuC,KAAK,CACnC,KAAM,CAAAs5B,cAAc,CAAGxnE,MAAM,CAAGmuC,KAAK,CAErC;AAEA,KAAM,CAAAtD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd,IAAM,GAAI,CAAAiB,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGH,MAAM,CAAEG,EAAE,EAAG,CAAG,CAEtC,KAAM,CAAAjzC,CAAC,CAAGizC,EAAE,CAAG24B,cAAc,CAAGF,WAAW,CAE3C,IAAM,GAAI,CAAAx4B,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGL,MAAM,CAAEK,EAAE,EAAG,CAAG,CAEtC,KAAM,CAAAxzC,CAAC,CAAGwzC,EAAE,CAAGy4B,aAAa,CAAGF,UAAU,CAEzC15B,QAAQ,CAAC10C,IAAI,CAAEqC,CAAC,CAAE,CAAEM,CAAC,CAAE,CAAE,CAAC,CAE1B8uC,OAAO,CAACzxC,IAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAEvB20C,GAAG,CAAC30C,IAAI,CAAE61C,EAAE,CAAGZ,KAAM,CAAC,CACtBN,GAAG,CAAC30C,IAAI,CAAE,CAAC,CAAK41C,EAAE,CAAGV,KAAQ,CAAC,CAE/B,CAED,CAEA,IAAM,GAAI,CAAAU,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGV,KAAK,CAAEU,EAAE,EAAG,CAAG,CAErC,IAAM,GAAI,CAAAC,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGZ,KAAK,CAAEY,EAAE,EAAG,CAAG,CAErC,KAAM,CAAAhxC,CAAC,CAAGgxC,EAAE,CAAGL,MAAM,CAAGI,EAAE,CAC1B,KAAM,CAAA9wC,CAAC,CAAG+wC,EAAE,CAAGL,MAAM,EAAKI,EAAE,CAAG,CAAC,CAAE,CAClC,KAAM,CAAA7wC,CAAC,CAAK8wC,EAAE,CAAG,CAAC,CAAKL,MAAM,EAAKI,EAAE,CAAG,CAAC,CAAE,CAC1C,KAAM,CAAAloC,CAAC,CAAKmoC,EAAE,CAAG,CAAC,CAAKL,MAAM,CAAGI,EAAE,CAElChE,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAExB,CAED,CAEA,IAAI,CAACihC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAEhE,CAEAptC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAA84D,aAAa,CAAE94D,IAAI,CAACvO,KAAK,CAAEuO,IAAI,CAACtO,MAAM,CAAEsO,IAAI,CAACi/B,aAAa,CAAEj/B,IAAI,CAACk/B,cAAe,CAAC,CAE7F,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAi6B,YAAY,QAAS,CAAAtgC,cAAe,CAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAE0oE,WAAW,CAAG,GAAG,CAAEC,WAAW,CAAG,CAAC,CAAEC,aAAa,CAAG,EAAE,CAAEC,WAAW,CAAG,CAAC,CAAEtZ,UAAU,CAAG,CAAC,CAAEC,WAAW,CAAGr0D,IAAI,CAACC,EAAE,CAAG,CAAC,CAAG,CAEjI,KAAK,CAAC,CAAC,CAEP,IAAI,CAACzB,IAAI,CAAG,cAAc,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjB8xC,WAAW,CAAEA,WAAW,CACxBC,WAAW,CAAEA,WAAW,CACxBC,aAAa,CAAEA,aAAa,CAC5BC,WAAW,CAAEA,WAAW,CACxBtZ,UAAU,CAAEA,UAAU,CACtBC,WAAW,CAAEA,WACd,CAAC,CAEDoZ,aAAa,CAAGztE,IAAI,CAACc,GAAG,CAAE,CAAC,CAAE2sE,aAAc,CAAC,CAC5CC,WAAW,CAAG1tE,IAAI,CAACc,GAAG,CAAE,CAAC,CAAE4sE,WAAY,CAAC,CAExC;AAEA,KAAM,CAAAh9B,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd;AAEA,GAAI,CAAAtwB,MAAM,CAAGoqD,WAAW,CACxB,KAAM,CAAAI,UAAU,CAAK,CAAEH,WAAW,CAAGD,WAAW,EAAKG,WAAa,CAClE,KAAM,CAAAna,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAA9I,EAAE,CAAG,GAAI,CAAArS,OAAO,CAAC,CAAC,CAExB;AAEA,IAAM,GAAI,CAAAwiB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIylD,WAAW,CAAEzlD,CAAC,EAAG,CAAG,CAEzC,IAAM,GAAI,CAAAxoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIguE,aAAa,CAAEhuE,CAAC,EAAG,CAAG,CAE3C;AAEA,KAAM,CAAA60D,OAAO,CAAGF,UAAU,CAAG30D,CAAC,CAAGguE,aAAa,CAAGpZ,WAAW,CAE5D;AAEAd,MAAM,CAACpyD,CAAC,CAAGgiB,MAAM,CAAGnjB,IAAI,CAAC+D,GAAG,CAAEuwD,OAAQ,CAAC,CACvCf,MAAM,CAAC9xD,CAAC,CAAG0hB,MAAM,CAAGnjB,IAAI,CAACgE,GAAG,CAAEswD,OAAQ,CAAC,CAEvC9gB,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE7C;AAEAs4B,OAAO,CAACzxC,IAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAEvB;AAEAgZ,EAAE,CAAC3W,CAAC,CAAG,CAAEoyD,MAAM,CAACpyD,CAAC,CAAGqsE,WAAW,CAAG,CAAC,EAAK,CAAC,CACzC11D,EAAE,CAACrW,CAAC,CAAG,CAAE8xD,MAAM,CAAC9xD,CAAC,CAAG+rE,WAAW,CAAG,CAAC,EAAK,CAAC,CAEzC/5B,GAAG,CAAC30C,IAAI,CAAEgZ,EAAE,CAAC3W,CAAC,CAAE2W,EAAE,CAACrW,CAAE,CAAC,CAEvB,CAEA;AAEA0hB,MAAM,EAAIwqD,UAAU,CAErB,CAEA;AAEA,IAAM,GAAI,CAAA1lD,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGylD,WAAW,CAAEzlD,CAAC,EAAG,CAAG,CAExC,KAAM,CAAA2lD,iBAAiB,CAAG3lD,CAAC,EAAKwlD,aAAa,CAAG,CAAC,CAAE,CAEnD,IAAM,GAAI,CAAAhuE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGguE,aAAa,CAAEhuE,CAAC,EAAG,CAAG,CAE1C,KAAM,CAAA60D,OAAO,CAAG70D,CAAC,CAAGmuE,iBAAiB,CAErC,KAAM,CAAAjqE,CAAC,CAAG2wD,OAAO,CACjB,KAAM,CAAA1wD,CAAC,CAAG0wD,OAAO,CAAGmZ,aAAa,CAAG,CAAC,CACrC,KAAM,CAAA5pE,CAAC,CAAGywD,OAAO,CAAGmZ,aAAa,CAAG,CAAC,CACrC,KAAM,CAAAjhE,CAAC,CAAG8nD,OAAO,CAAG,CAAC,CAErB;AAEA5jB,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAExB,CAED,CAEA;AAEA,IAAI,CAACihC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAEhE,CAEAptC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAm5D,YAAY,CAAEn5D,IAAI,CAACo5D,WAAW,CAAEp5D,IAAI,CAACq5D,WAAW,CAAEr5D,IAAI,CAACs5D,aAAa,CAAEt5D,IAAI,CAACu5D,WAAW,CAAEv5D,IAAI,CAACigD,UAAU,CAAEjgD,IAAI,CAACkgD,WAAY,CAAC,CAEvI,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAwZ,aAAa,QAAS,CAAA7gC,cAAe,CAE1C;AACD;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEwzB,MAAM,CAAG,GAAI,CAAA4nC,KAAK,CAAE,CAAE,GAAI,CAAAx6D,OAAO,CAAE,CAAC,CAAE,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,GAAG,CAAE,CAAC,GAAI,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,GAAG,CAAE,CAAC,GAAI,CAAC,CAAG,CAAC,CAAE6gE,aAAa,CAAG,EAAE,CAAG,CAEvI,KAAK,CAAC,CAAC,CAEP,IAAI,CAAC9nE,IAAI,CAAG,eAAe,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBpD,MAAM,CAAEA,MAAM,CACdiuC,aAAa,CAAEA,aAChB,CAAC,CAED;AAEA,KAAM,CAAA51B,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd;AAEA,GAAI,CAAAE,UAAU,CAAG,CAAC,CAClB,GAAI,CAAAc,UAAU,CAAG,CAAC,CAElB;AAEA,GAAKx/B,KAAK,CAACC,OAAO,CAAEmjB,MAAO,CAAC,GAAK,KAAK,CAAG,CAExC+tC,QAAQ,CAAE/tC,MAAO,CAAC,CAEnB,CAAC,IAAM,CAEN,IAAM,GAAI,CAAA54B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG44B,MAAM,CAAC14B,MAAM,CAAEF,CAAC,EAAG,CAAG,CAE1C2mE,QAAQ,CAAE/tC,MAAM,CAAE54B,CAAC,CAAG,CAAC,CAEvB,IAAI,CAACsuC,QAAQ,CAAE4F,UAAU,CAAEc,UAAU,CAAEh1C,CAAE,CAAC,CAAE;AAE5Ck0C,UAAU,EAAIc,UAAU,CACxBA,UAAU,CAAG,CAAC,CAEf,CAED,CAEA;AAEA,IAAI,CAAChH,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAG/D;AAEA,QAAS,CAAA2yB,QAAQA,CAAE1qC,KAAK,CAAG,CAE1B,KAAM,CAAAoyC,WAAW,CAAGt6B,QAAQ,CAAC7zC,MAAM,CAAG,CAAC,CACvC,KAAM,CAAA4kB,MAAM,CAAGmX,KAAK,CAAC2kC,aAAa,CAAEiG,aAAc,CAAC,CAEnD,GAAI,CAAAyH,aAAa,CAAGxpD,MAAM,CAACmX,KAAK,CAChC,KAAM,CAAAsyC,UAAU,CAAGzpD,MAAM,CAAC27C,KAAK,CAE/B;AAEA,GAAKsF,UAAU,CAACE,WAAW,CAAEqI,aAAc,CAAC,GAAK,KAAK,CAAG,CAExDA,aAAa,CAAGA,aAAa,CAACxG,OAAO,CAAC,CAAC,CAExC,CAEA,IAAM,GAAI,CAAA9nE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGsuE,UAAU,CAACruE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAErD,KAAM,CAAAwuE,SAAS,CAAGD,UAAU,CAAEvuE,CAAC,CAAE,CAEjC,GAAK+lE,UAAU,CAACE,WAAW,CAAEuI,SAAU,CAAC,GAAK,IAAI,CAAG,CAEnDD,UAAU,CAAEvuE,CAAC,CAAE,CAAGwuE,SAAS,CAAC1G,OAAO,CAAC,CAAC,CAEtC,CAED,CAEA,KAAM,CAAA3B,KAAK,CAAGJ,UAAU,CAACG,gBAAgB,CAAEoI,aAAa,CAAEC,UAAW,CAAC,CAEtE;AAEA,IAAM,GAAI,CAAAvuE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGsuE,UAAU,CAACruE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAErD,KAAM,CAAAwuE,SAAS,CAAGD,UAAU,CAAEvuE,CAAC,CAAE,CACjCsuE,aAAa,CAAGA,aAAa,CAACt0B,MAAM,CAAEw0B,SAAU,CAAC,CAElD,CAEA;AAEA,IAAM,GAAI,CAAAxuE,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGquE,aAAa,CAACpuE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAExD,KAAM,CAAA8zD,MAAM,CAAGwa,aAAa,CAAEtuE,CAAC,CAAE,CAEjC+zC,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE,CAAE,CAAC,CACtC8uC,OAAO,CAACzxC,IAAI,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CACvB20C,GAAG,CAAC30C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAE,CAAC,CAAE;AAEjC,CAEA;AAEA,IAAM,GAAI,CAAAhC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGkmE,KAAK,CAACjmE,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEhD,KAAM,CAAAwzC,IAAI,CAAG2yB,KAAK,CAAEnmE,CAAC,CAAE,CAEvB,KAAM,CAAAkE,CAAC,CAAGsvC,IAAI,CAAE,CAAC,CAAE,CAAG66B,WAAW,CACjC,KAAM,CAAAlqE,CAAC,CAAGqvC,IAAI,CAAE,CAAC,CAAE,CAAG66B,WAAW,CACjC,KAAM,CAAAjqE,CAAC,CAAGovC,IAAI,CAAE,CAAC,CAAE,CAAG66B,WAAW,CAEjCp9B,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAEC,CAAE,CAAC,CACvB4wC,UAAU,EAAI,CAAC,CAEhB,CAED,CAED,CAEApuC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA9mB,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3B,KAAM,CAAA0jB,MAAM,CAAG,IAAI,CAACoD,UAAU,CAACpD,MAAM,CAErC,MAAO,CAAA1jB,MAAM,CAAE0jB,MAAM,CAAElkB,IAAK,CAAC,CAE9B,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAygC,QAAQA,CAAEzgC,IAAI,CAAEkkB,MAAM,CAAG,CAE/B,KAAM,CAAAizC,cAAc,CAAG,EAAE,CAEzB,IAAM,GAAI,CAAArjD,CAAC,CAAG,CAAC,CAAEumB,EAAE,CAAGr6B,IAAI,CAACkkB,MAAM,CAAC14B,MAAM,CAAEsoB,CAAC,CAAGumB,EAAE,CAAEvmB,CAAC,EAAG,CAAG,CAExD,KAAM,CAAAyT,KAAK,CAAGrD,MAAM,CAAElkB,IAAI,CAACkkB,MAAM,CAAEpQ,CAAC,CAAE,CAAE,CAExCqjD,cAAc,CAACxsE,IAAI,CAAE48B,KAAM,CAAC,CAE7B,CAEA,MAAO,IAAI,CAAAmyC,aAAa,CAAEvC,cAAc,CAAEn3D,IAAI,CAACmyD,aAAc,CAAC,CAE/D,CAED,CAEA,QAAS,CAAA3xD,MAAMA,CAAE0jB,MAAM,CAAElkB,IAAI,CAAG,CAE/BA,IAAI,CAACkkB,MAAM,CAAG,EAAE,CAEhB,GAAKpjB,KAAK,CAACC,OAAO,CAAEmjB,MAAO,CAAC,CAAG,CAE9B,IAAM,GAAI,CAAA54B,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG24B,MAAM,CAAC14B,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAEjD,KAAM,CAAAi8B,KAAK,CAAGrD,MAAM,CAAE54B,CAAC,CAAE,CAEzB0U,IAAI,CAACkkB,MAAM,CAACv5B,IAAI,CAAE48B,KAAK,CAACj7B,IAAK,CAAC,CAE/B,CAED,CAAC,IAAM,CAEN0T,IAAI,CAACkkB,MAAM,CAACv5B,IAAI,CAAEu5B,MAAM,CAAC53B,IAAK,CAAC,CAEhC,CAEA,MAAO,CAAA0T,IAAI,CAEZ,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA+5D,cAAc,QAAS,CAAAlhC,cAAe,CAE3C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEiwB,aAAa,CAAG,EAAE,CAAEC,cAAc,CAAG,EAAE,CAAEo5B,QAAQ,CAAG,CAAC,CAAEC,SAAS,CAAG1sE,IAAI,CAACC,EAAE,CAAG,CAAC,CAAEm0D,UAAU,CAAG,CAAC,CAAEC,WAAW,CAAGr0D,IAAI,CAACC,EAAE,CAAG,CAEhJ,KAAK,CAAC,CAAC,CAEP,IAAI,CAACzB,IAAI,CAAG,gBAAgB,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACdiwB,aAAa,CAAEA,aAAa,CAC5BC,cAAc,CAAEA,cAAc,CAC9Bo5B,QAAQ,CAAEA,QAAQ,CAClBC,SAAS,CAAEA,SAAS,CACpBtY,UAAU,CAAEA,UAAU,CACtBC,WAAW,CAAEA,WACd,CAAC,CAEDjhB,aAAa,CAAGpzC,IAAI,CAACc,GAAG,CAAE,CAAC,CAAEd,IAAI,CAACuC,KAAK,CAAE6wC,aAAc,CAAE,CAAC,CAC1DC,cAAc,CAAGrzC,IAAI,CAACc,GAAG,CAAE,CAAC,CAAEd,IAAI,CAACuC,KAAK,CAAE8wC,cAAe,CAAE,CAAC,CAE5D,KAAM,CAAA86B,QAAQ,CAAGnuE,IAAI,CAACa,GAAG,CAAEuzD,UAAU,CAAGC,WAAW,CAAEr0D,IAAI,CAACC,EAAG,CAAC,CAE9D,GAAI,CAAAf,KAAK,CAAG,CAAC,CACb,KAAM,CAAAkvE,IAAI,CAAG,EAAE,CAEf,KAAM,CAAA7a,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAAmC,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CAE5B;AAEA,KAAM,CAAA8vB,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd;AAEA,IAAM,GAAI,CAAAiB,EAAE,CAAG,CAAC,CAAEA,EAAE,EAAIrB,cAAc,CAAEqB,EAAE,EAAG,CAAG,CAE/C,KAAM,CAAA25B,WAAW,CAAG,EAAE,CAEtB,KAAM,CAAA/nE,CAAC,CAAGouC,EAAE,CAAGrB,cAAc,CAE7B;AAEA,GAAI,CAAAwgB,OAAO,CAAG,CAAC,CAEf,GAAKnf,EAAE,GAAK,CAAC,EAAI0f,UAAU,GAAK,CAAC,CAAG,CAEnCP,OAAO,CAAG,GAAG,CAAGzgB,aAAa,CAE9B,CAAC,IAAM,IAAKsB,EAAE,GAAKrB,cAAc,EAAI86B,QAAQ,GAAKnuE,IAAI,CAACC,EAAE,CAAG,CAE3D4zD,OAAO,CAAG,CAAC,GAAG,CAAGzgB,aAAa,CAE/B,CAEA,IAAM,GAAI,CAAAuB,EAAE,CAAG,CAAC,CAAEA,EAAE,EAAIvB,aAAa,CAAEuB,EAAE,EAAG,CAAG,CAE9C,KAAM,CAAA9wB,CAAC,CAAG8wB,EAAE,CAAGvB,aAAa,CAE5B;AAEAmgB,MAAM,CAACpyD,CAAC,CAAG,CAAEgiB,MAAM,CAAGnjB,IAAI,CAAC+D,GAAG,CAAE0oE,QAAQ,CAAG5oD,CAAC,CAAG6oD,SAAU,CAAC,CAAG1sE,IAAI,CAACgE,GAAG,CAAEowD,UAAU,CAAG9tD,CAAC,CAAG+tD,WAAY,CAAC,CACrGd,MAAM,CAAC9xD,CAAC,CAAG0hB,MAAM,CAAGnjB,IAAI,CAAC+D,GAAG,CAAEqwD,UAAU,CAAG9tD,CAAC,CAAG+tD,WAAY,CAAC,CAC5Dd,MAAM,CAACt7C,CAAC,CAAGkL,MAAM,CAAGnjB,IAAI,CAACgE,GAAG,CAAEyoE,QAAQ,CAAG5oD,CAAC,CAAG6oD,SAAU,CAAC,CAAG1sE,IAAI,CAACgE,GAAG,CAAEowD,UAAU,CAAG9tD,CAAC,CAAG+tD,WAAY,CAAC,CAEnG7gB,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE7C;AAEA8K,MAAM,CAAC1c,IAAI,CAAEktD,MAAO,CAAC,CAACjuD,SAAS,CAAC,CAAC,CACjCirC,OAAO,CAACzxC,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAE5C;AAEAw7B,GAAG,CAAC30C,IAAI,CAAE+kB,CAAC,CAAGgwC,OAAO,CAAE,CAAC,CAAGvtD,CAAE,CAAC,CAE9B+nE,WAAW,CAACvvE,IAAI,CAAEI,KAAK,EAAI,CAAC,CAE7B,CAEAkvE,IAAI,CAACtvE,IAAI,CAAEuvE,WAAY,CAAC,CAEzB,CAEA;AAEA,IAAM,GAAI,CAAA35B,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGrB,cAAc,CAAEqB,EAAE,EAAG,CAAG,CAE9C,IAAM,GAAI,CAAAC,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGvB,aAAa,CAAEuB,EAAE,EAAG,CAAG,CAE7C,KAAM,CAAAhxC,CAAC,CAAGyqE,IAAI,CAAE15B,EAAE,CAAE,CAAEC,EAAE,CAAG,CAAC,CAAE,CAC9B,KAAM,CAAA/wC,CAAC,CAAGwqE,IAAI,CAAE15B,EAAE,CAAE,CAAEC,EAAE,CAAE,CAC1B,KAAM,CAAA9wC,CAAC,CAAGuqE,IAAI,CAAE15B,EAAE,CAAG,CAAC,CAAE,CAAEC,EAAE,CAAE,CAC9B,KAAM,CAAAnoC,CAAC,CAAG4hE,IAAI,CAAE15B,EAAE,CAAG,CAAC,CAAE,CAAEC,EAAE,CAAG,CAAC,CAAE,CAElC,GAAKD,EAAE,GAAK,CAAC,EAAI0f,UAAU,CAAG,CAAC,CAAG1jB,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACzD,GAAKkoC,EAAE,GAAKrB,cAAc,CAAG,CAAC,EAAI86B,QAAQ,CAAGnuE,IAAI,CAACC,EAAE,CAAGywC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAE/E,CAED,CAEA;AAEA,IAAI,CAACihC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAEhE,CAEAptC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAA+5D,cAAc,CAAE/5D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACi/B,aAAa,CAAEj/B,IAAI,CAACk/B,cAAc,CAAEl/B,IAAI,CAACs4D,QAAQ,CAAEt4D,IAAI,CAACu4D,SAAS,CAAEv4D,IAAI,CAACigD,UAAU,CAAEjgD,IAAI,CAACkgD,WAAY,CAAC,CAEpJ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAia,mBAAmB,QAAS,CAAApZ,kBAAmB,CAEpD;AACD;AACA;AACA;AACA;AACA,IACCrwD,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEs7B,MAAM,CAAG,CAAC,CAAG,CAErC,KAAM,CAAAjL,QAAQ,CAAG,CAChB,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAG,CAAC,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAC3C,CAED,KAAM,CAAA9C,OAAO,CAAG,CACf,CAAC,CAAE,CAAC,CAAE,CAAC,CAAG,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CACnC,CAED,KAAK,CAAE8C,QAAQ,CAAE9C,OAAO,CAAEvtB,MAAM,CAAEs7B,MAAO,CAAC,CAE1C,IAAI,CAACjgD,IAAI,CAAG,qBAAqB,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACds7B,MAAM,CAAEA,MACT,CAAC,CAEF,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAA7J,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAm6D,mBAAmB,CAAEn6D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACsqC,MAAO,CAAC,CAE3D,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA8vB,aAAa,QAAS,CAAAvhC,cAAe,CAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEqrD,IAAI,CAAG,GAAG,CAAExb,cAAc,CAAG,EAAE,CAAEyb,eAAe,CAAG,EAAE,CAAE9O,GAAG,CAAG3/D,IAAI,CAACC,EAAE,CAAG,CAAC,CAAG,CAEnG,KAAK,CAAC,CAAC,CAEP,IAAI,CAACzB,IAAI,CAAG,eAAe,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACdqrD,IAAI,CAAEA,IAAI,CACVxb,cAAc,CAAEA,cAAc,CAC9Byb,eAAe,CAAEA,eAAe,CAChC9O,GAAG,CAAEA,GACN,CAAC,CAED3M,cAAc,CAAGhzD,IAAI,CAACuC,KAAK,CAAEywD,cAAe,CAAC,CAC7Cyb,eAAe,CAAGzuE,IAAI,CAACuC,KAAK,CAAEksE,eAAgB,CAAC,CAE/C;AAEA,KAAM,CAAA/9B,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd;AAEA,KAAM,CAAA/pC,MAAM,CAAG,GAAI,CAAAkX,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAA2yC,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAAmC,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CAE5B;AAEA,IAAM,GAAI,CAAAqH,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI+qC,cAAc,CAAE/qC,CAAC,EAAG,CAAG,CAE5C,IAAM,GAAI,CAAAxoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIgvE,eAAe,CAAEhvE,CAAC,EAAG,CAAG,CAE7C,KAAM,CAAAokB,CAAC,CAAGpkB,CAAC,CAAGgvE,eAAe,CAAG9O,GAAG,CACnC,KAAM,CAAAr5D,CAAC,CAAG2hB,CAAC,CAAG+qC,cAAc,CAAGhzD,IAAI,CAACC,EAAE,CAAG,CAAC,CAE1C;AAEAszD,MAAM,CAACpyD,CAAC,CAAG,CAAEgiB,MAAM,CAAGqrD,IAAI,CAAGxuE,IAAI,CAAC+D,GAAG,CAAEuC,CAAE,CAAC,EAAKtG,IAAI,CAAC+D,GAAG,CAAE8f,CAAE,CAAC,CAC5D0vC,MAAM,CAAC9xD,CAAC,CAAG,CAAE0hB,MAAM,CAAGqrD,IAAI,CAAGxuE,IAAI,CAAC+D,GAAG,CAAEuC,CAAE,CAAC,EAAKtG,IAAI,CAACgE,GAAG,CAAE6f,CAAE,CAAC,CAC5D0vC,MAAM,CAACt7C,CAAC,CAAGu2D,IAAI,CAAGxuE,IAAI,CAACgE,GAAG,CAAEsC,CAAE,CAAC,CAE/BktC,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE7C;AAEAvO,MAAM,CAACvI,CAAC,CAAGgiB,MAAM,CAAGnjB,IAAI,CAAC+D,GAAG,CAAE8f,CAAE,CAAC,CACjCna,MAAM,CAACjI,CAAC,CAAG0hB,MAAM,CAAGnjB,IAAI,CAACgE,GAAG,CAAE6f,CAAE,CAAC,CACjCd,MAAM,CAAClc,UAAU,CAAE0sD,MAAM,CAAE7pD,MAAO,CAAC,CAACpE,SAAS,CAAC,CAAC,CAE/CirC,OAAO,CAACzxC,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAE5C;AAEAw7B,GAAG,CAAC30C,IAAI,CAAEW,CAAC,CAAGgvE,eAAgB,CAAC,CAC/Bh7B,GAAG,CAAC30C,IAAI,CAAEmpB,CAAC,CAAG+qC,cAAe,CAAC,CAE/B,CAED,CAEA;AAEA,IAAM,GAAI,CAAA/qC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI+qC,cAAc,CAAE/qC,CAAC,EAAG,CAAG,CAE5C,IAAM,GAAI,CAAAxoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIgvE,eAAe,CAAEhvE,CAAC,EAAG,CAAG,CAE7C;AAEA,KAAM,CAAAkE,CAAC,CAAG,CAAE8qE,eAAe,CAAG,CAAC,EAAKxmD,CAAC,CAAGxoB,CAAC,CAAG,CAAC,CAC7C,KAAM,CAAAmE,CAAC,CAAG,CAAE6qE,eAAe,CAAG,CAAC,GAAOxmD,CAAC,CAAG,CAAC,CAAE,CAAGxoB,CAAC,CAAG,CAAC,CACrD,KAAM,CAAAoE,CAAC,CAAG,CAAE4qE,eAAe,CAAG,CAAC,GAAOxmD,CAAC,CAAG,CAAC,CAAE,CAAGxoB,CAAC,CACjD,KAAM,CAAA+M,CAAC,CAAG,CAAEiiE,eAAe,CAAG,CAAC,EAAKxmD,CAAC,CAAGxoB,CAAC,CAEzC;AAEAixC,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAExB,CAED,CAEA;AAEA,IAAI,CAACihC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAEhE,CAEAptC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAo6D,aAAa,CAAEp6D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACq6D,IAAI,CAAEr6D,IAAI,CAAC6+C,cAAc,CAAE7+C,IAAI,CAACs6D,eAAe,CAAEt6D,IAAI,CAACwrD,GAAI,CAAC,CAExG,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA+O,iBAAiB,QAAS,CAAA1hC,cAAe,CAE9C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEse,MAAM,CAAG,CAAC,CAAEqrD,IAAI,CAAG,GAAG,CAAEC,eAAe,CAAG,EAAE,CAAEzb,cAAc,CAAG,CAAC,CAAEvhC,CAAC,CAAG,CAAC,CAAE/tB,CAAC,CAAG,CAAC,CAAG,CAE7F,KAAK,CAAC,CAAC,CAEP,IAAI,CAAClF,IAAI,CAAG,mBAAmB,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBtY,MAAM,CAAEA,MAAM,CACdqrD,IAAI,CAAEA,IAAI,CACVC,eAAe,CAAEA,eAAe,CAChCzb,cAAc,CAAEA,cAAc,CAC9BvhC,CAAC,CAAEA,CAAC,CACJ/tB,CAAC,CAAEA,CACJ,CAAC,CAED+qE,eAAe,CAAGzuE,IAAI,CAACuC,KAAK,CAAEksE,eAAgB,CAAC,CAC/Czb,cAAc,CAAGhzD,IAAI,CAACuC,KAAK,CAAEywD,cAAe,CAAC,CAE7C;AAEA,KAAM,CAAAtiB,OAAO,CAAG,EAAE,CAClB,KAAM,CAAA8C,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CAEd;AAEA,KAAM,CAAA8f,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAAmC,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CAE5B,KAAM,CAAA+tD,EAAE,CAAG,GAAI,CAAA/tD,OAAO,CAAC,CAAC,CACxB,KAAM,CAAAguD,EAAE,CAAG,GAAI,CAAAhuD,OAAO,CAAC,CAAC,CAExB,KAAM,CAAAiuD,CAAC,CAAG,GAAI,CAAAjuD,OAAO,CAAC,CAAC,CACvB,KAAM,CAAAkuD,CAAC,CAAG,GAAI,CAAAluD,OAAO,CAAC,CAAC,CACvB,KAAM,CAAAmuD,CAAC,CAAG,GAAI,CAAAnuD,OAAO,CAAC,CAAC,CAEvB;AAEA,IAAM,GAAI,CAAAnhB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIgvE,eAAe,CAAE,EAAGhvE,CAAC,CAAG,CAE7C;AAEA,KAAM,CAAAokB,CAAC,CAAGpkB,CAAC,CAAGgvE,eAAe,CAAGh9C,CAAC,CAAGzxB,IAAI,CAACC,EAAE,CAAG,CAAC,CAE/C;AACA;AAEA+uE,wBAAwB,CAAEnrD,CAAC,CAAE4N,CAAC,CAAE/tB,CAAC,CAAEyf,MAAM,CAAEwrD,EAAG,CAAC,CAC/CK,wBAAwB,CAAEnrD,CAAC,CAAG,IAAI,CAAE4N,CAAC,CAAE/tB,CAAC,CAAEyf,MAAM,CAAEyrD,EAAG,CAAC,CAEtD;AAEAE,CAAC,CAACjoE,UAAU,CAAE+nE,EAAE,CAAED,EAAG,CAAC,CACtBI,CAAC,CAACtoE,UAAU,CAAEmoE,EAAE,CAAED,EAAG,CAAC,CACtBE,CAAC,CAAC1sD,YAAY,CAAE2sD,CAAC,CAAEC,CAAE,CAAC,CACtBA,CAAC,CAAC5sD,YAAY,CAAE0sD,CAAC,CAAEC,CAAE,CAAC,CAEtB;AAEAD,CAAC,CAACvpE,SAAS,CAAC,CAAC,CACbypE,CAAC,CAACzpE,SAAS,CAAC,CAAC,CAEb,IAAM,GAAI,CAAA2iB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI+qC,cAAc,CAAE,EAAG/qC,CAAC,CAAG,CAE5C;AACA;AAEA,KAAM,CAAA3hB,CAAC,CAAG2hB,CAAC,CAAG+qC,cAAc,CAAGhzD,IAAI,CAACC,EAAE,CAAG,CAAC,CAC1C,KAAM,CAAA6N,EAAE,CAAG,CAAE0gE,IAAI,CAAGxuE,IAAI,CAAC+D,GAAG,CAAEuC,CAAE,CAAC,CACjC,KAAM,CAAAyH,EAAE,CAAGygE,IAAI,CAAGxuE,IAAI,CAACgE,GAAG,CAAEsC,CAAE,CAAC,CAE/B;AACA;AAEAitD,MAAM,CAACpyD,CAAC,CAAGwtE,EAAE,CAACxtE,CAAC,EAAK2M,EAAE,CAAGihE,CAAC,CAAC5tE,CAAC,CAAG4M,EAAE,CAAG8gE,CAAC,CAAC1tE,CAAC,CAAE,CACzCoyD,MAAM,CAAC9xD,CAAC,CAAGktE,EAAE,CAACltE,CAAC,EAAKqM,EAAE,CAAGihE,CAAC,CAACttE,CAAC,CAAGsM,EAAE,CAAG8gE,CAAC,CAACptE,CAAC,CAAE,CACzC8xD,MAAM,CAACt7C,CAAC,CAAG02D,EAAE,CAAC12D,CAAC,EAAKnK,EAAE,CAAGihE,CAAC,CAAC92D,CAAC,CAAGlK,EAAE,CAAG8gE,CAAC,CAAC52D,CAAC,CAAE,CAEzCu7B,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE7C;AAEA8K,MAAM,CAAClc,UAAU,CAAE0sD,MAAM,CAAEob,EAAG,CAAC,CAACrpE,SAAS,CAAC,CAAC,CAE3CirC,OAAO,CAACzxC,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAE5C;AAEAw7B,GAAG,CAAC30C,IAAI,CAAEW,CAAC,CAAGgvE,eAAgB,CAAC,CAC/Bh7B,GAAG,CAAC30C,IAAI,CAAEmpB,CAAC,CAAG+qC,cAAe,CAAC,CAE/B,CAED,CAEA;AAEA,IAAM,GAAI,CAAA/qC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIwmD,eAAe,CAAExmD,CAAC,EAAG,CAAG,CAE7C,IAAM,GAAI,CAAAxoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIuzD,cAAc,CAAEvzD,CAAC,EAAG,CAAG,CAE5C;AAEA,KAAM,CAAAkE,CAAC,CAAG,CAAEqvD,cAAc,CAAG,CAAC,GAAO/qC,CAAC,CAAG,CAAC,CAAE,EAAKxoB,CAAC,CAAG,CAAC,CAAE,CACxD,KAAM,CAAAmE,CAAC,CAAG,CAAEovD,cAAc,CAAG,CAAC,EAAK/qC,CAAC,EAAKxoB,CAAC,CAAG,CAAC,CAAE,CAChD,KAAM,CAAAoE,CAAC,CAAG,CAAEmvD,cAAc,CAAG,CAAC,EAAK/qC,CAAC,CAAGxoB,CAAC,CACxC,KAAM,CAAA+M,CAAC,CAAG,CAAEwmD,cAAc,CAAG,CAAC,GAAO/qC,CAAC,CAAG,CAAC,CAAE,CAAGxoB,CAAC,CAEhD;AAEAixC,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAExB,CAED,CAEA;AAEA,IAAI,CAACihC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAE/D;AAEA,QAAS,CAAAu7B,wBAAwBA,CAAEnrD,CAAC,CAAE4N,CAAC,CAAE/tB,CAAC,CAAEyf,MAAM,CAAEiN,QAAQ,CAAG,CAE9D,KAAM,CAAA6+C,EAAE,CAAGjvE,IAAI,CAAC+D,GAAG,CAAE8f,CAAE,CAAC,CACxB,KAAM,CAAAqrD,EAAE,CAAGlvE,IAAI,CAACgE,GAAG,CAAE6f,CAAE,CAAC,CACxB,KAAM,CAAAsrD,OAAO,CAAGzrE,CAAC,CAAG+tB,CAAC,CAAG5N,CAAC,CACzB,KAAM,CAAAurD,EAAE,CAAGpvE,IAAI,CAAC+D,GAAG,CAAEorE,OAAQ,CAAC,CAE9B/+C,QAAQ,CAACjvB,CAAC,CAAGgiB,MAAM,EAAK,CAAC,CAAGisD,EAAE,CAAE,CAAG,GAAG,CAAGH,EAAE,CAC3C7+C,QAAQ,CAAC3uB,CAAC,CAAG0hB,MAAM,EAAK,CAAC,CAAGisD,EAAE,CAAE,CAAGF,EAAE,CAAG,GAAG,CAC3C9+C,QAAQ,CAACnY,CAAC,CAAGkL,MAAM,CAAGnjB,IAAI,CAACgE,GAAG,CAAEmrE,OAAQ,CAAC,CAAG,GAAG,CAEhD,CAED,CAEA9oE,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAmZ,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB,MAAO,IAAI,CAAAu6D,iBAAiB,CAAEv6D,IAAI,CAACgP,MAAM,CAAEhP,IAAI,CAACq6D,IAAI,CAAEr6D,IAAI,CAACs6D,eAAe,CAAEt6D,IAAI,CAAC6+C,cAAc,CAAE7+C,IAAI,CAACsd,CAAC,CAAEtd,IAAI,CAACzQ,CAAE,CAAC,CAElH,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA2rE,YAAY,QAAS,CAAAriC,cAAe,CAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCnoC,WAAWA,CAAEyqE,IAAI,CAAG,GAAI,CAAAhS,qBAAqB,CAAE,GAAI,CAAA18C,OAAO,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAE,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE,GAAI,CAAAA,OAAO,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAE,CAAC,CAAE6tD,eAAe,CAAG,EAAE,CAAEtrD,MAAM,CAAG,CAAC,CAAE6vC,cAAc,CAAG,CAAC,CAAE0G,MAAM,CAAG,KAAK,CAAG,CAElM,KAAK,CAAC,CAAC,CAEP,IAAI,CAACl7D,IAAI,CAAG,cAAc,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjB6zC,IAAI,CAAEA,IAAI,CACVb,eAAe,CAAEA,eAAe,CAChCtrD,MAAM,CAAEA,MAAM,CACd6vC,cAAc,CAAEA,cAAc,CAC9B0G,MAAM,CAAEA,MACT,CAAC,CAED,KAAM,CAAA6V,MAAM,CAAGD,IAAI,CAAC7V,mBAAmB,CAAEgV,eAAe,CAAE/U,MAAO,CAAC,CAElE;AAEA,IAAI,CAACC,QAAQ,CAAG4V,MAAM,CAAC5V,QAAQ,CAC/B,IAAI,CAACppB,OAAO,CAAGg/B,MAAM,CAACh/B,OAAO,CAC7B,IAAI,CAACqpB,SAAS,CAAG2V,MAAM,CAAC3V,SAAS,CAEjC;AAEA,KAAM,CAAArG,MAAM,CAAG,GAAI,CAAA3yC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAAmC,MAAM,CAAG,GAAI,CAAAnC,OAAO,CAAC,CAAC,CAC5B,KAAM,CAAA9I,EAAE,CAAG,GAAI,CAAArS,OAAO,CAAC,CAAC,CACxB,GAAI,CAAA+pE,CAAC,CAAG,GAAI,CAAA5uD,OAAO,CAAC,CAAC,CAErB;AAEA,KAAM,CAAA4yB,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAjD,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAkD,GAAG,CAAG,EAAE,CACd,KAAM,CAAA/C,OAAO,CAAG,EAAE,CAElB;AAEA++B,kBAAkB,CAAC,CAAC,CAEpB;AAEA,IAAI,CAAChiC,QAAQ,CAAEiD,OAAQ,CAAC,CACxB,IAAI,CAAC9C,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAC1E,IAAI,CAAC5F,YAAY,CAAE,QAAQ,CAAE,GAAI,CAAApB,sBAAsB,CAAE+D,OAAO,CAAE,CAAE,CAAE,CAAC,CACvE,IAAI,CAAC3C,YAAY,CAAE,IAAI,CAAE,GAAI,CAAApB,sBAAsB,CAAEiH,GAAG,CAAE,CAAE,CAAE,CAAC,CAE/D;AAEA,QAAS,CAAAg8B,kBAAkBA,CAAA,CAAG,CAE7B,IAAM,GAAI,CAAAhwE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGgvE,eAAe,CAAEhvE,CAAC,EAAG,CAAG,CAE5CiwE,eAAe,CAAEjwE,CAAE,CAAC,CAErB,CAEA;AACA;AACA;AACA;AAEAiwE,eAAe,CAAIhW,MAAM,GAAK,KAAK,CAAK+U,eAAe,CAAG,CAAE,CAAC,CAE7D;AACA;AAEAlZ,WAAW,CAAC,CAAC,CAEb;AAEAoa,eAAe,CAAC,CAAC,CAElB,CAEA,QAAS,CAAAD,eAAeA,CAAEjwE,CAAC,CAAG,CAE7B;AAEA+vE,CAAC,CAAGF,IAAI,CAACrX,UAAU,CAAEx4D,CAAC,CAAGgvE,eAAe,CAAEe,CAAE,CAAC,CAE7C;AAEA,KAAM,CAAAT,CAAC,CAAGQ,MAAM,CAACh/B,OAAO,CAAE9wC,CAAC,CAAE,CAC7B,KAAM,CAAAovE,CAAC,CAAGU,MAAM,CAAC3V,SAAS,CAAEn6D,CAAC,CAAE,CAE/B;AAEA,IAAM,GAAI,CAAAwoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI+qC,cAAc,CAAE/qC,CAAC,EAAG,CAAG,CAE5C,KAAM,CAAA3hB,CAAC,CAAG2hB,CAAC,CAAG+qC,cAAc,CAAGhzD,IAAI,CAACC,EAAE,CAAG,CAAC,CAE1C,KAAM,CAAA+D,GAAG,CAAGhE,IAAI,CAACgE,GAAG,CAAEsC,CAAE,CAAC,CACzB,KAAM,CAAAvC,GAAG,CAAG,CAAE/D,IAAI,CAAC+D,GAAG,CAAEuC,CAAE,CAAC,CAE3B;AAEAyc,MAAM,CAAC5hB,CAAC,CAAK4C,GAAG,CAAGgrE,CAAC,CAAC5tE,CAAC,CAAG6C,GAAG,CAAG6qE,CAAC,CAAC1tE,CAAG,CACpC4hB,MAAM,CAACthB,CAAC,CAAKsC,GAAG,CAAGgrE,CAAC,CAACttE,CAAC,CAAGuC,GAAG,CAAG6qE,CAAC,CAACptE,CAAG,CACpCshB,MAAM,CAAC9K,CAAC,CAAKlU,GAAG,CAAGgrE,CAAC,CAAC92D,CAAC,CAAGjU,GAAG,CAAG6qE,CAAC,CAAC52D,CAAG,CACpC8K,MAAM,CAACzd,SAAS,CAAC,CAAC,CAElBirC,OAAO,CAACzxC,IAAI,CAAEikB,MAAM,CAAC5hB,CAAC,CAAE4hB,MAAM,CAACthB,CAAC,CAAEshB,MAAM,CAAC9K,CAAE,CAAC,CAE5C;AAEAs7C,MAAM,CAACpyD,CAAC,CAAGquE,CAAC,CAACruE,CAAC,CAAGgiB,MAAM,CAAGJ,MAAM,CAAC5hB,CAAC,CAClCoyD,MAAM,CAAC9xD,CAAC,CAAG+tE,CAAC,CAAC/tE,CAAC,CAAG0hB,MAAM,CAAGJ,MAAM,CAACthB,CAAC,CAClC8xD,MAAM,CAACt7C,CAAC,CAAGu3D,CAAC,CAACv3D,CAAC,CAAGkL,MAAM,CAAGJ,MAAM,CAAC9K,CAAC,CAElCu7B,QAAQ,CAAC10C,IAAI,CAAEy0D,MAAM,CAACpyD,CAAC,CAAEoyD,MAAM,CAAC9xD,CAAC,CAAE8xD,MAAM,CAACt7C,CAAE,CAAC,CAE9C,CAED,CAEA,QAAS,CAAA03D,eAAeA,CAAA,CAAG,CAE1B,IAAM,GAAI,CAAA1nD,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIwmD,eAAe,CAAExmD,CAAC,EAAG,CAAG,CAE7C,IAAM,GAAI,CAAAxoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIuzD,cAAc,CAAEvzD,CAAC,EAAG,CAAG,CAE5C,KAAM,CAAAkE,CAAC,CAAG,CAAEqvD,cAAc,CAAG,CAAC,GAAO/qC,CAAC,CAAG,CAAC,CAAE,EAAKxoB,CAAC,CAAG,CAAC,CAAE,CACxD,KAAM,CAAAmE,CAAC,CAAG,CAAEovD,cAAc,CAAG,CAAC,EAAK/qC,CAAC,EAAKxoB,CAAC,CAAG,CAAC,CAAE,CAChD,KAAM,CAAAoE,CAAC,CAAG,CAAEmvD,cAAc,CAAG,CAAC,EAAK/qC,CAAC,CAAGxoB,CAAC,CACxC,KAAM,CAAA+M,CAAC,CAAG,CAAEwmD,cAAc,CAAG,CAAC,GAAO/qC,CAAC,CAAG,CAAC,CAAE,CAAGxoB,CAAC,CAEhD;AAEAixC,OAAO,CAAC5xC,IAAI,CAAE6E,CAAC,CAAEC,CAAC,CAAE4I,CAAE,CAAC,CACvBkkC,OAAO,CAAC5xC,IAAI,CAAE8E,CAAC,CAAEC,CAAC,CAAE2I,CAAE,CAAC,CAExB,CAED,CAED,CAEA,QAAS,CAAA+oD,WAAWA,CAAA,CAAG,CAEtB,IAAM,GAAI,CAAA91D,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIgvE,eAAe,CAAEhvE,CAAC,EAAG,CAAG,CAE7C,IAAM,GAAI,CAAAwoB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI+qC,cAAc,CAAE/qC,CAAC,EAAG,CAAG,CAE5CnQ,EAAE,CAAC3W,CAAC,CAAG1B,CAAC,CAAGgvE,eAAe,CAC1B32D,EAAE,CAACrW,CAAC,CAAGwmB,CAAC,CAAG+qC,cAAc,CAEzBvf,GAAG,CAAC30C,IAAI,CAAEgZ,EAAE,CAAC3W,CAAC,CAAE2W,EAAE,CAACrW,CAAE,CAAC,CAEvB,CAED,CAED,CAED,CAEA4E,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAEA9mB,MAAMA,CAAA,CAAG,CAER,KAAM,CAAAR,IAAI,CAAG,KAAK,CAACQ,MAAM,CAAC,CAAC,CAE3BR,IAAI,CAACm7D,IAAI,CAAG,IAAI,CAAC7zC,UAAU,CAAC6zC,IAAI,CAAC36D,MAAM,CAAC,CAAC,CAEzC,MAAO,CAAAR,IAAI,CAEZ,CAEA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,MAAO,CAAAygC,QAAQA,CAAEzgC,IAAI,CAAG,CAEvB;AACA;AACA,MAAO,IAAI,CAAAk7D,YAAY,CACtB,GAAI,CAAA3R,MAAM,CAAEvpD,IAAI,CAACm7D,IAAI,CAAC9wE,IAAI,CAAE,CAAC,CAAC,CAACo2C,QAAQ,CAAEzgC,IAAI,CAACm7D,IAAK,CAAC,CACpDn7D,IAAI,CAACs6D,eAAe,CACpBt6D,IAAI,CAACgP,MAAM,CACXhP,IAAI,CAAC6+C,cAAc,CACnB7+C,IAAI,CAACulD,MACN,CAAC,CAEF,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAkW,iBAAiB,QAAS,CAAA5iC,cAAe,CAE9C;AACD;AACA;AACA;AACA,IACCnoC,WAAWA,CAAE2gB,QAAQ,CAAG,IAAI,CAAG,CAE9B,KAAK,CAAC,CAAC,CAEP,IAAI,CAAChnB,IAAI,CAAG,mBAAmB,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi9B,UAAU,CAAG,CACjBjW,QAAQ,CAAEA,QACX,CAAC,CAED,GAAKA,QAAQ,GAAK,IAAI,CAAG,CAExB;AAEA,KAAM,CAAAguB,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAq8B,KAAK,CAAG,GAAI,CAAAt0D,GAAG,CAAC,CAAC,CAEvB;AAEA,KAAM,CAAA6vB,KAAK,CAAG,GAAI,CAAAxqB,OAAO,CAAC,CAAC,CAC3B,KAAM,CAAAkyB,GAAG,CAAG,GAAI,CAAAlyB,OAAO,CAAC,CAAC,CAEzB,GAAK4E,QAAQ,CAACtmB,KAAK,GAAK,IAAI,CAAG,CAE9B;AAEA,KAAM,CAAAkxB,QAAQ,CAAG5K,QAAQ,CAAC2nB,UAAU,CAAC/c,QAAQ,CAC7C,KAAM,CAAAsgB,OAAO,CAAGlrB,QAAQ,CAACtmB,KAAK,CAC9B,GAAI,CAAAouC,MAAM,CAAG9nB,QAAQ,CAAC8nB,MAAM,CAE5B,GAAKA,MAAM,CAAC3tC,MAAM,GAAK,CAAC,CAAG,CAE1B2tC,MAAM,CAAG,CAAE,CAAElC,KAAK,CAAE,CAAC,CAAE1wB,KAAK,CAAEg2B,OAAO,CAACh2B,KAAK,CAAEszB,aAAa,CAAE,CAAE,CAAC,CAAE,CAElE,CAEA;AAEA,IAAM,GAAI,CAAA8hC,CAAC,CAAG,CAAC,CAAEC,EAAE,CAAGziC,MAAM,CAAC3tC,MAAM,CAAEmwE,CAAC,CAAGC,EAAE,CAAE,EAAGD,CAAC,CAAG,CAEnD,KAAM,CAAArgC,KAAK,CAAGnC,MAAM,CAAEwiC,CAAC,CAAE,CAEzB,KAAM,CAAAn8B,UAAU,CAAGlE,KAAK,CAACrE,KAAK,CAC9B,KAAM,CAAAqJ,UAAU,CAAGhF,KAAK,CAAC/0B,KAAK,CAE9B,IAAM,GAAI,CAAAjb,CAAC,CAAGk0C,UAAU,CAAEj0C,CAAC,CAAKi0C,UAAU,CAAGc,UAAY,CAAEh1C,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAI,CAAC,CAAG,CAE1E,IAAM,GAAI,CAAAwoB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAG,CAAG,CAE9B,KAAM,CAAAsjB,MAAM,CAAGmF,OAAO,CAACnnC,IAAI,CAAE9J,CAAC,CAAGwoB,CAAE,CAAC,CACpC,KAAM,CAAAujB,MAAM,CAAGkF,OAAO,CAACnnC,IAAI,CAAE9J,CAAC,CAAG,CAAEwoB,CAAC,CAAG,CAAC,EAAK,CAAE,CAAC,CAEhDmjB,KAAK,CAAC/hC,mBAAmB,CAAE+mB,QAAQ,CAAEmb,MAAO,CAAC,CAC7CuH,GAAG,CAACzpC,mBAAmB,CAAE+mB,QAAQ,CAAEob,MAAO,CAAC,CAE3C,GAAKwkC,YAAY,CAAE5kC,KAAK,CAAE0H,GAAG,CAAE+8B,KAAM,CAAC,GAAK,IAAI,CAAG,CAEjDr8B,QAAQ,CAAC10C,IAAI,CAAEssC,KAAK,CAACjqC,CAAC,CAAEiqC,KAAK,CAAC3pC,CAAC,CAAE2pC,KAAK,CAACnzB,CAAE,CAAC,CAC1Cu7B,QAAQ,CAAC10C,IAAI,CAAEg0C,GAAG,CAAC3xC,CAAC,CAAE2xC,GAAG,CAACrxC,CAAC,CAAEqxC,GAAG,CAAC76B,CAAE,CAAC,CAErC,CAED,CAED,CAED,CAED,CAAC,IAAM,CAEN;AAEA,KAAM,CAAAmY,QAAQ,CAAG5K,QAAQ,CAAC2nB,UAAU,CAAC/c,QAAQ,CAE7C,IAAM,GAAI,CAAA3wB,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAK0wB,QAAQ,CAAC1V,KAAK,CAAG,CAAG,CAAEjb,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAG,CAAG,CAE1D,IAAM,GAAI,CAAAwoB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAG,CAAG,CAE9B;AACA;AAEA,KAAM,CAAAsjB,MAAM,CAAG,CAAC,CAAG9rC,CAAC,CAAGwoB,CAAC,CACxB,KAAM,CAAAujB,MAAM,CAAG,CAAC,CAAG/rC,CAAC,CAAK,CAAEwoB,CAAC,CAAG,CAAC,EAAK,CAAG,CAExCmjB,KAAK,CAAC/hC,mBAAmB,CAAE+mB,QAAQ,CAAEmb,MAAO,CAAC,CAC7CuH,GAAG,CAACzpC,mBAAmB,CAAE+mB,QAAQ,CAAEob,MAAO,CAAC,CAE3C,GAAKwkC,YAAY,CAAE5kC,KAAK,CAAE0H,GAAG,CAAE+8B,KAAM,CAAC,GAAK,IAAI,CAAG,CAEjDr8B,QAAQ,CAAC10C,IAAI,CAAEssC,KAAK,CAACjqC,CAAC,CAAEiqC,KAAK,CAAC3pC,CAAC,CAAE2pC,KAAK,CAACnzB,CAAE,CAAC,CAC1Cu7B,QAAQ,CAAC10C,IAAI,CAAEg0C,GAAG,CAAC3xC,CAAC,CAAE2xC,GAAG,CAACrxC,CAAC,CAAEqxC,GAAG,CAAC76B,CAAE,CAAC,CAErC,CAED,CAED,CAED,CAEA;AAEA,IAAI,CAAC21B,YAAY,CAAE,UAAU,CAAE,GAAI,CAAApB,sBAAsB,CAAEgH,QAAQ,CAAE,CAAE,CAAE,CAAC,CAE3E,CAED,CAEAntC,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAACslB,UAAU,CAAGtpB,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,CAAE+D,MAAM,CAACslB,UAAW,CAAC,CAExD,MAAO,KAAI,CAEZ,CAED,CAEA,QAAS,CAAAu0C,YAAYA,CAAE5kC,KAAK,CAAE0H,GAAG,CAAE+8B,KAAK,CAAG,CAE1C,KAAM,CAAAI,KAAK,CAAG,GAAG7kC,KAAK,CAACjqC,CAAC,IAAIiqC,KAAK,CAAC3pC,CAAC,IAAI2pC,KAAK,CAACnzB,CAAC,IAAI66B,GAAG,CAAC3xC,CAAC,IAAI2xC,GAAG,CAACrxC,CAAC,IAAIqxC,GAAG,CAAC76B,CAAC,EAAE,CAC3E,KAAM,CAAAi4D,KAAK,CAAG,GAAGp9B,GAAG,CAAC3xC,CAAC,IAAI2xC,GAAG,CAACrxC,CAAC,IAAIqxC,GAAG,CAAC76B,CAAC,IAAImzB,KAAK,CAACjqC,CAAC,IAAIiqC,KAAK,CAAC3pC,CAAC,IAAI2pC,KAAK,CAACnzB,CAAC,EAAE,CAAE;AAE7E,GAAK43D,KAAK,CAACM,GAAG,CAAEF,KAAM,CAAC,GAAK,IAAI,EAAIJ,KAAK,CAACM,GAAG,CAAED,KAAM,CAAC,GAAK,IAAI,CAAG,CAEjE,MAAO,MAAK,CAEb,CAAC,IAAM,CAENL,KAAK,CAACtpE,GAAG,CAAE0pE,KAAM,CAAC,CAClBJ,KAAK,CAACtpE,GAAG,CAAE2pE,KAAM,CAAC,CAClB,MAAO,KAAI,CAEZ,CAED,CAEA,GAAI,CAAAE,UAAU,CAAG,aAAaj+D,MAAM,CAACwrD,MAAM,CAAC,CAC3CC,SAAS,CAAE,IAAI,CACfzqB,WAAW,CAAEA,WAAW,CACxB2f,eAAe,CAAEA,eAAe,CAChCoB,cAAc,CAAEA,cAAc,CAC9Be,YAAY,CAAEA,YAAY,CAC1BV,gBAAgB,CAAEA,gBAAgB,CAClCiC,oBAAoB,CAAEA,oBAAoB,CAC1CK,aAAa,CAAEA,aAAa,CAC5BoP,eAAe,CAAEA,eAAe,CAChCsG,mBAAmB,CAAEA,mBAAmB,CACxCC,aAAa,CAAEA,aAAa,CAC5BQ,kBAAkB,CAAEA,kBAAkB,CACtCC,aAAa,CAAEA,aAAa,CAC5B/X,kBAAkB,CAAEA,kBAAkB,CACtCoY,YAAY,CAAEA,YAAY,CAC1BO,aAAa,CAAEA,aAAa,CAC5BK,cAAc,CAAEA,cAAc,CAC9BI,mBAAmB,CAAEA,mBAAmB,CACxCC,aAAa,CAAEA,aAAa,CAC5BG,iBAAiB,CAAEA,iBAAiB,CACpCW,YAAY,CAAEA,YAAY,CAC1BO,iBAAiB,CAAEA,iBACpB,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAS,cAAc,QAAS,CAAAtuC,QAAS,CAErC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCl9B,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC60C,gBAAgB,CAAG,IAAI,CAE5B,IAAI,CAAC9xE,IAAI,CAAG,gBAAgB,CAE5B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyS,KAAK,CAAG,GAAI,CAAAyuB,KAAK,CAAE,QAAS,CAAC,CAElC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2C,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC8G,GAAG,CAAG,IAAI,CAEf,IAAI,CAACtE,SAAS,CAAEpJ,UAAW,CAAC,CAE7B,CAEAp1B,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAClF,KAAK,CAAC5K,IAAI,CAAE8P,MAAM,CAAClF,KAAM,CAAC,CAE/B,IAAI,CAACk4B,GAAG,CAAGhzB,MAAM,CAACgzB,GAAG,CAErB,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAonC,iBAAiB,QAAS,CAAA16B,cAAe,CAE9C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACChxC,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAEA,UAAW,CAAC,CAEnB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+0C,mBAAmB,CAAG,IAAI,CAE/B,IAAI,CAAChyE,IAAI,CAAG,mBAAmB,CAEhC,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAiyE,oBAAoB,QAAS,CAAA1uC,QAAS,CAE3C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCl9B,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACi1C,sBAAsB,CAAG,IAAI,CAElC,IAAI,CAAClyE,IAAI,CAAG,sBAAsB,CAElC,IAAI,CAACu3C,OAAO,CAAG,CAAE,UAAU,CAAE,EAAG,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC9kC,KAAK,CAAG,GAAI,CAAAyuB,KAAK,CAAE,QAAS,CAAC,CAAE;AAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACsF,SAAS,CAAG,GAAG,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,GAAG,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC9L,GAAG,CAAG,IAAI,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACwN,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACzB,QAAQ,CAAG,GAAI,CAAA3F,KAAK,CAAE,QAAS,CAAC,CAErC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4F,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmC,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACV,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAGrsC,qBAAqB,CAE1C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACssC,WAAW,CAAG,GAAI,CAAA1hC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2hC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAG,IAAI,CAExB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAG,IAAI,CAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACd,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmB,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,cAAc,CAAG,GAAI,CAAAlW,KAAK,CAAC,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmW,eAAe,CAAG,GAAG,CAE1B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACc,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,OAAO,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,OAAO,CAEhC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAG,KAAK,CAExB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,GAAG,CAAG,IAAI,CAEf,IAAI,CAACtE,SAAS,CAAEpJ,UAAW,CAAC,CAE7B,CAEAp1B,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4/B,OAAO,CAAG,CAAE,UAAU,CAAE,EAAG,CAAC,CAEjC,IAAI,CAAC9kC,KAAK,CAAC5K,IAAI,CAAE8P,MAAM,CAAClF,KAAM,CAAC,CAC/B,IAAI,CAAC+zB,SAAS,CAAG7uB,MAAM,CAAC6uB,SAAS,CACjC,IAAI,CAACC,SAAS,CAAG9uB,MAAM,CAAC8uB,SAAS,CAEjC,IAAI,CAAC9L,GAAG,CAAGhjB,MAAM,CAACgjB,GAAG,CAErB,IAAI,CAACwN,QAAQ,CAAGxwB,MAAM,CAACwwB,QAAQ,CAC/B,IAAI,CAACC,iBAAiB,CAAGzwB,MAAM,CAACywB,iBAAiB,CAEjD,IAAI,CAACC,KAAK,CAAG1wB,MAAM,CAAC0wB,KAAK,CACzB,IAAI,CAACC,cAAc,CAAG3wB,MAAM,CAAC2wB,cAAc,CAE3C,IAAI,CAACzB,QAAQ,CAACh/B,IAAI,CAAE8P,MAAM,CAACkvB,QAAS,CAAC,CACrC,IAAI,CAACoC,WAAW,CAAGtxB,MAAM,CAACsxB,WAAW,CACrC,IAAI,CAACnC,iBAAiB,CAAGnvB,MAAM,CAACmvB,iBAAiB,CAEjD,IAAI,CAACyB,OAAO,CAAG5wB,MAAM,CAAC4wB,OAAO,CAC7B,IAAI,CAACC,SAAS,CAAG7wB,MAAM,CAAC6wB,SAAS,CAEjC,IAAI,CAACC,SAAS,CAAG9wB,MAAM,CAAC8wB,SAAS,CACjC,IAAI,CAACC,aAAa,CAAG/wB,MAAM,CAAC+wB,aAAa,CACzC,IAAI,CAACC,WAAW,CAAC9gC,IAAI,CAAE8P,MAAM,CAACgxB,WAAY,CAAC,CAE3C,IAAI,CAACC,eAAe,CAAGjxB,MAAM,CAACixB,eAAe,CAC7C,IAAI,CAACC,iBAAiB,CAAGlxB,MAAM,CAACkxB,iBAAiB,CACjD,IAAI,CAACC,gBAAgB,CAAGnxB,MAAM,CAACmxB,gBAAgB,CAE/C,IAAI,CAACC,YAAY,CAAGpxB,MAAM,CAACoxB,YAAY,CAEvC,IAAI,CAACC,YAAY,CAAGrxB,MAAM,CAACqxB,YAAY,CAEvC,IAAI,CAACd,QAAQ,CAAGvwB,MAAM,CAACuwB,QAAQ,CAE/B,IAAI,CAACmB,MAAM,CAAG1xB,MAAM,CAAC0xB,MAAM,CAC3B,IAAI,CAACE,cAAc,CAAC1hC,IAAI,CAAE8P,MAAM,CAAC4xB,cAAe,CAAC,CACjD,IAAI,CAACC,eAAe,CAAG7xB,MAAM,CAAC6xB,eAAe,CAE7C,IAAI,CAACc,SAAS,CAAG3yB,MAAM,CAAC2yB,SAAS,CACjC,IAAI,CAACC,kBAAkB,CAAG5yB,MAAM,CAAC4yB,kBAAkB,CACnD,IAAI,CAACC,gBAAgB,CAAG7yB,MAAM,CAAC6yB,gBAAgB,CAC/C,IAAI,CAACC,iBAAiB,CAAG9yB,MAAM,CAAC8yB,iBAAiB,CAEjD,IAAI,CAACC,WAAW,CAAG/yB,MAAM,CAAC+yB,WAAW,CAErC,IAAI,CAACC,GAAG,CAAGhzB,MAAM,CAACgzB,GAAG,CAErB,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAwnC,oBAAoB,QAAS,CAAAF,oBAAqB,CAEvD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACC5rE,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACm1C,sBAAsB,CAAG,IAAI,CAElC,IAAI,CAAC76B,OAAO,CAAG,CAEd,UAAU,CAAE,EAAE,CACd,UAAU,CAAE,EAEb,CAAC,CAED,IAAI,CAACv3C,IAAI,CAAG,sBAAsB,CAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+nC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACX,YAAY,CAAG,IAAI,CAExB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACD,kBAAkB,CAAG,GAAG,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,qBAAqB,CAAG,IAAI,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,oBAAoB,CAAG,GAAI,CAAAvgC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAE/C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACsgC,kBAAkB,CAAG,IAAI,CAE9B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC8qC,GAAG,CAAG,GAAG,CAEd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE1+D,MAAM,CAACoC,cAAc,CAAE,IAAI,CAAE,cAAc,CAAE,CAC5Cu8D,GAAG,CAAE,QAAAA,CAAA,CAAY,CAEhB,MAAS,CAAAnwE,KAAK,CAAE,GAAG,EAAK,IAAI,CAACkwE,GAAG,CAAG,CAAC,CAAE,EAAK,IAAI,CAACA,GAAG,CAAG,CAAC,CAAE,CAAE,CAAC,CAAE,CAAE,CAAC,CAElE,CAAC,CACDpsE,GAAG,CAAE,QAAAA,CAAWwjC,YAAY,CAAG,CAE9B,IAAI,CAAC4oC,GAAG,CAAG,CAAE,CAAC,CAAG,GAAG,CAAG5oC,YAAY,GAAO,CAAC,CAAG,GAAG,CAAGA,YAAY,CAAE,CAEnE,CACD,CAAE,CAAC,CAEH;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC5B,cAAc,CAAG,IAAI,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACF,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,yBAAyB,CAAG,CAAE,GAAG,CAAE,GAAG,CAAE,CAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,uBAAuB,CAAG,IAAI,CAEnC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACnB,UAAU,CAAG,GAAI,CAAAzF,KAAK,CAAE,QAAS,CAAC,CAEvC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACqxC,aAAa,CAAG,IAAI,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC3rC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4rC,iBAAiB,CAAG,IAAI,CAE7B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC3oC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,YAAY,CAAG,IAAI,CAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,mBAAmB,CAAGzkB,QAAQ,CAEnC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC0kB,gBAAgB,CAAG,GAAI,CAAA/I,KAAK,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAE5C;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC8F,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmC,oBAAoB,CAAG,IAAI,CAEhC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAClC,aAAa,CAAG,GAAI,CAAA/F,KAAK,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAEzC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACkI,gBAAgB,CAAG,IAAI,CAE5B,IAAI,CAACqpC,WAAW,CAAG,CAAC,CACpB,IAAI,CAACC,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,WAAW,CAAG,CAAC,CACpB,IAAI,CAACC,YAAY,CAAG,CAAC,CACrB,IAAI,CAACC,MAAM,CAAG,GAAG,CACjB,IAAI,CAACC,aAAa,CAAG,CAAC,CAEtB,IAAI,CAACzsC,SAAS,CAAEpJ,UAAW,CAAC,CAE7B,CAEA;AACD;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAzlB,UAAUA,CAAA,CAAG,CAEhB,MAAO,KAAI,CAACi7D,WAAW,CAExB,CAEA,GAAI,CAAAj7D,UAAUA,CAAEpV,KAAK,CAAG,CAEvB,GAAK,IAAI,CAACqwE,WAAW,CAAG,CAAC,GAAKrwE,KAAK,CAAG,CAAC,CAAG,CAEzC,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAACw8D,WAAW,CAAGrwE,KAAK,CAEzB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAA+kC,SAASA,CAAA,CAAG,CAEf,MAAO,KAAI,CAACurC,UAAU,CAEvB,CAEA,GAAI,CAAAvrC,SAASA,CAAE/kC,KAAK,CAAG,CAEtB,GAAK,IAAI,CAACswE,UAAU,CAAG,CAAC,GAAKtwE,KAAK,CAAG,CAAC,CAAG,CAExC,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAACy8D,UAAU,CAAGtwE,KAAK,CAExB,CACA;AACD;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAslC,WAAWA,CAAA,CAAG,CAEjB,MAAO,KAAI,CAACkrC,YAAY,CAEzB,CAEA,GAAI,CAAAlrC,WAAWA,CAAEtlC,KAAK,CAAG,CAExB,GAAK,IAAI,CAACwwE,YAAY,CAAG,CAAC,GAAKxwE,KAAK,CAAG,CAAC,CAAG,CAE1C,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAAC28D,YAAY,CAAGxwE,KAAK,CAE1B,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAqlC,UAAUA,CAAA,CAAG,CAEhB,MAAO,KAAI,CAACkrC,WAAW,CAExB,CAEA,GAAI,CAAAlrC,UAAUA,CAAErlC,KAAK,CAAG,CAEvB,GAAK,IAAI,CAACuwE,WAAW,CAAG,CAAC,GAAKvwE,KAAK,CAAG,CAAC,CAAG,CAEzC,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAAC08D,WAAW,CAAGvwE,KAAK,CAEzB,CAEA;AACD;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAskC,KAAKA,CAAA,CAAG,CAEX,MAAO,KAAI,CAACmsC,MAAM,CAEnB,CAEA,GAAI,CAAAnsC,KAAKA,CAAEtkC,KAAK,CAAG,CAElB,GAAK,IAAI,CAACywE,MAAM,CAAG,CAAC,GAAKzwE,KAAK,CAAG,CAAC,CAAG,CAEpC,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAAC48D,MAAM,CAAGzwE,KAAK,CAEpB,CAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACC,GAAI,CAAAwnC,YAAYA,CAAA,CAAG,CAElB,MAAO,KAAI,CAACkpC,aAAa,CAE1B,CAEA,GAAI,CAAAlpC,YAAYA,CAAExnC,KAAK,CAAG,CAEzB,GAAK,IAAI,CAAC0wE,aAAa,CAAG,CAAC,GAAK1wE,KAAK,CAAG,CAAC,CAAG,CAE3C,IAAI,CAAC6T,OAAO,EAAG,CAEhB,CAEA,IAAI,CAAC68D,aAAa,CAAG1wE,KAAK,CAE3B,CAEAyF,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4/B,OAAO,CAAG,CAEd,UAAU,CAAE,EAAE,CACd,UAAU,CAAE,EAEb,CAAC,CAED,IAAI,CAAC//B,UAAU,CAAGG,MAAM,CAACH,UAAU,CACnC,IAAI,CAACuwB,kBAAkB,CAAGpwB,MAAM,CAACowB,kBAAkB,CACnD,IAAI,CAACC,aAAa,CAAGrwB,MAAM,CAACqwB,aAAa,CAEzC,IAAI,CAACb,SAAS,CAAGxvB,MAAM,CAACwvB,SAAS,CACjC,IAAI,CAACE,YAAY,CAAG1vB,MAAM,CAAC0vB,YAAY,CACvC,IAAI,CAACD,kBAAkB,CAAGzvB,MAAM,CAACyvB,kBAAkB,CACnD,IAAI,CAACE,qBAAqB,CAAG3vB,MAAM,CAAC2vB,qBAAqB,CACzD,IAAI,CAACC,kBAAkB,CAAG5vB,MAAM,CAAC4vB,kBAAkB,CACnD,IAAI,CAACC,oBAAoB,CAAC3/B,IAAI,CAAE8P,MAAM,CAAC6vB,oBAAqB,CAAC,CAE7D,IAAI,CAACC,UAAU,CAAG9vB,MAAM,CAAC8vB,UAAU,CACnC,IAAI,CAAC4qC,GAAG,CAAG16D,MAAM,CAAC06D,GAAG,CAErB,IAAI,CAAC3qC,WAAW,CAAG/vB,MAAM,CAAC+vB,WAAW,CACrC,IAAI,CAACG,cAAc,CAAGlwB,MAAM,CAACkwB,cAAc,CAC3C,IAAI,CAACF,cAAc,CAAGhwB,MAAM,CAACgwB,cAAc,CAC3C,IAAI,CAACC,yBAAyB,CAAG,CAAE,GAAGjwB,MAAM,CAACiwB,yBAAyB,CAAE,CACxE,IAAI,CAACE,uBAAuB,CAAGnwB,MAAM,CAACmwB,uBAAuB,CAE7D,IAAI,CAACpB,KAAK,CAAG/uB,MAAM,CAAC+uB,KAAK,CACzB,IAAI,CAACC,UAAU,CAAC9+B,IAAI,CAAE8P,MAAM,CAACgvB,UAAW,CAAC,CACzC,IAAI,CAAC4rC,aAAa,CAAG56D,MAAM,CAAC46D,aAAa,CACzC,IAAI,CAAC3rC,cAAc,CAAGjvB,MAAM,CAACivB,cAAc,CAC3C,IAAI,CAAC4rC,iBAAiB,CAAG76D,MAAM,CAAC66D,iBAAiB,CAEjD,IAAI,CAAC5oC,YAAY,CAAGjyB,MAAM,CAACiyB,YAAY,CACvC,IAAI,CAACC,eAAe,CAAGlyB,MAAM,CAACkyB,eAAe,CAE7C,IAAI,CAACC,SAAS,CAAGnyB,MAAM,CAACmyB,SAAS,CACjC,IAAI,CAACC,YAAY,CAAGpyB,MAAM,CAACoyB,YAAY,CACvC,IAAI,CAACC,mBAAmB,CAAGryB,MAAM,CAACqyB,mBAAmB,CACrD,IAAI,CAACC,gBAAgB,CAACpiC,IAAI,CAAE8P,MAAM,CAACsyB,gBAAiB,CAAC,CAErD,IAAI,CAACjD,iBAAiB,CAAGrvB,MAAM,CAACqvB,iBAAiB,CACjD,IAAI,CAACmC,oBAAoB,CAAGxxB,MAAM,CAACwxB,oBAAoB,CACvD,IAAI,CAAClC,aAAa,CAACp/B,IAAI,CAAE8P,MAAM,CAACsvB,aAAc,CAAC,CAC/C,IAAI,CAACmC,gBAAgB,CAAGzxB,MAAM,CAACyxB,gBAAgB,CAE/C,MAAO,KAAI,CAEZ,CAED,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA2pC,iBAAiB,QAAS,CAAAxvC,QAAS,CAExC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCl9B,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+1C,mBAAmB,CAAG,IAAI,CAE/B,IAAI,CAAChzE,IAAI,CAAG,mBAAmB,CAE/B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyS,KAAK,CAAG,GAAI,CAAAyuB,KAAK,CAAE,QAAS,CAAC,CAAE;AAEpC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC6F,QAAQ,CAAG,GAAI,CAAA7F,KAAK,CAAE,QAAS,CAAC,CAErC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACgG,SAAS,CAAG,EAAE,CAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACvM,GAAG,CAAG,IAAI,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACwN,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACzB,QAAQ,CAAG,GAAI,CAAA3F,KAAK,CAAE,QAAS,CAAC,CAErC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4F,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmC,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACV,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAGrsC,qBAAqB,CAE1C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACssC,WAAW,CAAG,GAAI,CAAA1hC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2hC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACI,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChB,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmB,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,cAAc,CAAG,GAAI,CAAAlW,KAAK,CAAC,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACiW,OAAO,CAAG1zC,iBAAiB,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC6zC,YAAY,CAAG,CAAC,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,OAAO,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,OAAO,CAEhC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,WAAW,CAAG,KAAK,CAExB;AACF;AACA;AAC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IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACxB,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACzB,QAAQ,CAAG,GAAI,CAAA3F,KAAK,CAAE,QAAS,CAAC,CAErC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4F,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmC,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACV,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAGrsC,qBAAqB,CAE1C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACssC,WAAW,CAAG,GAAI,CAAA1hC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2hC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAA2oC,mBAAmB,QAAS,CAAA9vC,QAAS,CAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACCl9B,WAAWA,CAAE42B,UAAU,CAAG,CAEzB,KAAK,CAAC,CAAC,CAEP;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACq2C,qBAAqB,CAAG,IAAI,CAEjC,IAAI,CAACtzE,IAAI,CAAG,qBAAqB,CAEjC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyS,KAAK,CAAG,GAAI,CAAAyuB,KAAK,CAAE,QAAS,CAAC,CAAE;AAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACvG,GAAG,CAAG,IAAI,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACwN,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,KAAK,CAAG,IAAI,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,cAAc,CAAG,GAAG,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACzB,QAAQ,CAAG,GAAI,CAAA3F,KAAK,CAAE,QAAS,CAAC,CAErC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4F,iBAAiB,CAAG,GAAG,CAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmC,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACV,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAGrsC,qBAAqB,CAE1C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACssC,WAAW,CAAG,GAAI,CAAA1hC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2hC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACI,WAAW,CAAG,IAAI,CAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChB,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmB,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACE,cAAc,CAAG,GAAI,CAAAlW,KAAK,CAAC,CAAC,CAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACiW,OAAO,CAAG1zC,iBAAiB,CAEhC;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC6zC,YAAY,CAAG,CAAC,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACY,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,CAAC,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,OAAO,CAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAA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AS,CAAC,CAAE;AAEpC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC+G,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACtN,GAAG,CAAG,IAAI,CAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC4N,OAAO,CAAG,IAAI,CAEnB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,IAAI,CAErB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,aAAa,CAAGrsC,qBAAqB,CAE1C;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACssC,WAAW,CAAG,GAAI,CAAA1hC,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC,CAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAC2hC,eAAe,CAAG,IAAI,CAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,gBAAgB,CAAG,CAAC,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACZ,QAAQ,CAAG,IAAI,CAEpB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACwC,WAAW,CAAG,KAAK,CAExB;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,GAAG,CAAG,IAAI,CAEf,IAAI,CAACtE,SAAS,CAAEpJ,UAAW,CAAC,CAE7B,CAGAp1B,IAAIA,CAAE8P,MAAM,CAAG,CAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC,CAEpB,IAAI,CAAC4/B,OAAO,CAAG,CAAE,QAAQ,CAAE,EAAG,CAAC,CAE/B,IAAI,CAAC9kC,KAAK,CAAC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CAAC+6E,UAAU,CAAC,CAAC,CACrC,IAAI,CAACD,IAAI,CAACxyC,OAAO,CAAEr9C,QAAQ,CAACkwF,QAAQ,CAAC,CAAE,CAAC,CAExC;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACoB,QAAQ,CAAG,KAAK,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAClhF,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACmhF,MAAM,CAAG,CAAC,CAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,IAAI,CAAG,KAAK,CAEjB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,CAAC,CAElB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,OAAO,CAAG,CAAC,CAEhB;AACF;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAAChnF,MAAM,CAAG,CAAC,CAEf;AACF;AACA;AACA;AACA;AACA,KACE,IAAI,CAACgyE,QAAQ,CAAGx8E,SAAS,CAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACyxF,YAAY,CAAG,CAAC,CAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,SAAS,CAAG,KAAK,CAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACC,kBAAkB,CAAG,IAAI,CAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACn6E,MAAM,CAAG,IAAI,CAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,IAAI,CAACo6E,UAAU,CAAG,OAAO,CAEzB,IAAI,CAACC,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,SAAS,CAAG,CAAC,CAClB,IAAI,CAACC,UAAU,CAAG,KAAK,CAEvB;AACF;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}